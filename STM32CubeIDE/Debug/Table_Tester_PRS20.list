
Table_Tester_PRS20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009814  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001814  08009a64  08009a64  0000aa64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b278  0800b278  0000d00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b278  0800b278  0000c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b280  0800b280  0000d00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b280  0800b280  0000c280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b284  0800b284  0000c284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800b288  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000287e4  2000000c  0800b294  0000d00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200287f0  0800b294  0000d7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b6f  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003606  00000000  00000000  00022bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  000261b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001174  00000000  00000000  000278d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f45b  00000000  00000000  00028a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b6c  00000000  00000000  00057e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bafb  00000000  00000000  0006da0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179506  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c4  00000000  00000000  0017954c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0017f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	08009a4c 	.word	0x08009a4c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	08009a4c 	.word	0x08009a4c

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80005ac:	4810      	ldr	r0, [pc, #64]	@ (80005f0 <MX_FREERTOS_Init+0x48>)
 80005ae:	f006 fccb 	bl	8006f48 <osMutexNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0f      	ldr	r2, [pc, #60]	@ (80005f4 <MX_FREERTOS_Init+0x4c>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_FREERTOS_Init+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	480f      	ldr	r0, [pc, #60]	@ (80005fc <MX_FREERTOS_Init+0x54>)
 80005c0:	f006 fc20 	bl	8006e04 <osTimerNew>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000600 <MX_FREERTOS_Init+0x58>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80005ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000604 <MX_FREERTOS_Init+0x5c>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	2010      	movs	r0, #16
 80005d0:	f006 fd3f 	bl	8007052 <osMessageQueueNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <MX_FREERTOS_Init+0x60>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005da:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <MX_FREERTOS_Init+0x64>)
 80005dc:	2100      	movs	r1, #0
 80005de:	480c      	ldr	r0, [pc, #48]	@ (8000610 <MX_FREERTOS_Init+0x68>)
 80005e0:	f006 fb4c 	bl	8006c7c <osThreadNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <MX_FREERTOS_Init+0x6c>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	08009ad0 	.word	0x08009ad0
 80005f4:	20000060 	.word	0x20000060
 80005f8:	08009ae0 	.word	0x08009ae0
 80005fc:	080006f5 	.word	0x080006f5
 8000600:	20000064 	.word	0x20000064
 8000604:	08009af0 	.word	0x08009af0
 8000608:	20000068 	.word	0x20000068
 800060c:	08009aac 	.word	0x08009aac
 8000610:	08000619 	.word	0x08000619
 8000614:	2000005c 	.word	0x2000005c

08000618 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b08c      	sub	sp, #48	@ 0x30
 800061c:	af04      	add	r7, sp, #16
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
	Coordinate Touch_XY;
	int Coor_X = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
	int Coor_Y = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
	//Coordinate Touch_XY_Old;
	//char Str[50];
	char i = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	75fb      	strb	r3, [r7, #23]
	memset(Str, 0, sizeof(Str));
 800062c:	2232      	movs	r2, #50	@ 0x32
 800062e:	2100      	movs	r1, #0
 8000630:	482c      	ldr	r0, [pc, #176]	@ (80006e4 <StartDefaultTask+0xcc>)
 8000632:	f009 f9d1 	bl	80099d8 <memset>

	//LCD_DisplayOn();
	osDelay(100);
 8000636:	2064      	movs	r0, #100	@ 0x64
 8000638:	f006 fbb1 	bl	8006d9e <osDelay>
	LCD_Clear(RED);
 800063c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000640:	f002 fe16 	bl	8003270 <LCD_Clear>
	//LCD_ShowString(5,10,15,(u8 *)"This is Test.",1);
	//Show_Str(5, 30, YELLOW, RED, "This is Test.",15,1);
	matrix = Matrix_Default; //ts_calibrate( 240, 320 );
 8000644:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <StartDefaultTask+0xd0>)
 8000646:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <StartDefaultTask+0xd4>)
 8000648:	4614      	mov	r4, r2
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for(;;)
  {
	  if(TS_Touched() == 1)
 8000658:	f003 fc26 	bl	8003ea8 <TS_Touched>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d1fa      	bne.n	8000658 <StartDefaultTask+0x40>
	  {
		  getDisplayPoint(&display, Read_Value(), &matrix ) ;
 8000662:	f003 fad5 	bl	8003c10 <Read_Value>
 8000666:	4603      	mov	r3, r0
 8000668:	4a1f      	ldr	r2, [pc, #124]	@ (80006e8 <StartDefaultTask+0xd0>)
 800066a:	4619      	mov	r1, r3
 800066c:	4820      	ldr	r0, [pc, #128]	@ (80006f0 <StartDefaultTask+0xd8>)
 800066e:	f003 f93d 	bl	80038ec <getDisplayPoint>
		  ts_draw_point(display.x,display.y,BLUE );
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <StartDefaultTask+0xd8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a1e      	ldr	r2, [pc, #120]	@ (80006f0 <StartDefaultTask+0xd8>)
 8000678:	6851      	ldr	r1, [r2, #4]
 800067a:	221f      	movs	r2, #31
 800067c:	4618      	mov	r0, r3
 800067e:	f003 f97b 	bl	8003978 <ts_draw_point>

		  if( (10<display.x && display.x<20) && (10<display.y && display.y<20) && (TS_Touched() == 1) )
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <StartDefaultTask+0xd8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b0a      	cmp	r3, #10
 8000688:	dde6      	ble.n	8000658 <StartDefaultTask+0x40>
 800068a:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <StartDefaultTask+0xd8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b13      	cmp	r3, #19
 8000690:	dce2      	bgt.n	8000658 <StartDefaultTask+0x40>
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <StartDefaultTask+0xd8>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	2b0a      	cmp	r3, #10
 8000698:	ddde      	ble.n	8000658 <StartDefaultTask+0x40>
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <StartDefaultTask+0xd8>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2b13      	cmp	r3, #19
 80006a0:	dcda      	bgt.n	8000658 <StartDefaultTask+0x40>
 80006a2:	f003 fc01 	bl	8003ea8 <TS_Touched>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d1d5      	bne.n	8000658 <StartDefaultTask+0x40>
		  {
			  LCD_Clear(RED);
 80006ac:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80006b0:	f002 fdde 	bl	8003270 <LCD_Clear>
//	  		  RS485_Tx(3, "Salam az khate 3", 16);
//	  		  RS485_Tx(4, "Salam az khate 4", 16);
//	  		  RS485_Tx(5, "Salam az khate 5", 16);
//	  		  RS485_Tx(6, "Salam az khate 6", 16);
//	  		  RS485_Tx(7, "Salam az khate 7", 16);
			  Show_Str(5, 30, YELLOW, RED, Str,15,1);
 80006b4:	2301      	movs	r3, #1
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	230f      	movs	r3, #15
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <StartDefaultTask+0xcc>)
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80006c4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80006c8:	211e      	movs	r1, #30
 80006ca:	2005      	movs	r0, #5
 80006cc:	f002 fb42 	bl	8002d54 <Show_Str>
			  i = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	75fb      	strb	r3, [r7, #23]
	  		  display.x=0; display.y=0;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <StartDefaultTask+0xd8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <StartDefaultTask+0xd8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
	  if(TS_Touched() == 1)
 80006e0:	e7ba      	b.n	8000658 <StartDefaultTask+0x40>
 80006e2:	bf00      	nop
 80006e4:	20000028 	.word	0x20000028
 80006e8:	20025c64 	.word	0x20025c64
 80006ec:	20025c88 	.word	0x20025c88
 80006f0:	20025c80 	.word	0x20025c80

080006f4 <Callback01>:
  /* USER CODE END defaultTask */
}

/* Callback01 function */
void Callback01(void *argument)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073a:	4a04      	ldr	r2, [pc, #16]	@ (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000754:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <__NVIC_GetPriorityGrouping+0x18>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	f003 0307 	and.w	r3, r3, #7
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800077a:	2b00      	cmp	r3, #0
 800077c:	db0b      	blt.n	8000796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	f003 021f 	and.w	r2, r3, #31
 8000784:	4907      	ldr	r1, [pc, #28]	@ (80007a4 <__NVIC_EnableIRQ+0x38>)
 8000786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800078a:	095b      	lsrs	r3, r3, #5
 800078c:	2001      	movs	r0, #1
 800078e:	fa00 f202 	lsl.w	r2, r0, r2
 8000792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	@ (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	@ (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	@ 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	f1c3 0307 	rsb	r3, r3, #7
 8000816:	2b04      	cmp	r3, #4
 8000818:	bf28      	it	cs
 800081a:	2304      	movcs	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3304      	adds	r3, #4
 8000822:	2b06      	cmp	r3, #6
 8000824:	d902      	bls.n	800082c <NVIC_EncodePriority+0x30>
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3b03      	subs	r3, #3
 800082a:	e000      	b.n	800082e <NVIC_EncodePriority+0x32>
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	401a      	ands	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43d9      	mvns	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	4313      	orrs	r3, r2
         );
}
 8000856:	4618      	mov	r0, r3
 8000858:	3724      	adds	r7, #36	@ 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000872:	4a0b      	ldr	r2, [pc, #44]	@ (80008a0 <LL_DMA_EnableChannel+0x3c>)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4907      	ldr	r1, [pc, #28]	@ (80008a0 <LL_DMA_EnableChannel+0x3c>)
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	440a      	add	r2, r1
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6153      	str	r3, [r2, #20]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	08009b08 	.word	0x08009b08

080008a4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80008b2:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <LL_DMA_EnableIT_TC+0x3c>)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4907      	ldr	r1, [pc, #28]	@ (80008e0 <LL_DMA_EnableIT_TC+0x3c>)
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	440a      	add	r2, r1
 80008cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d0:	6153      	str	r3, [r2, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	08009b08 	.word	0x08009b08

080008e4 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f043 0201 	orr.w	r2, r3, #1
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	@ 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3308      	adds	r3, #8
 8000932:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	e853 3f00 	ldrex	r3, [r3]
 800093a:	60bb      	str	r3, [r7, #8]
   return(result);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	075b      	lsls	r3, r3, #29
 8000946:	4313      	orrs	r3, r2
 8000948:	61fb      	str	r3, [r7, #28]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3308      	adds	r3, #8
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	61ba      	str	r2, [r7, #24]
 8000952:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000954:	6979      	ldr	r1, [r7, #20]
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	e841 2300 	strex	r3, r2, [r1]
 800095c:	613b      	str	r3, [r7, #16]
   return(result);
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1e4      	bne.n	800092e <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3724      	adds	r7, #36	@ 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8000972:	b480      	push	{r7}
 8000974:	b089      	sub	sp, #36	@ 0x24
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3308      	adds	r3, #8
 8000980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	e853 3f00 	ldrex	r3, [r3]
 8000988:	60bb      	str	r3, [r7, #8]
   return(result);
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	065b      	lsls	r3, r3, #25
 8000994:	4313      	orrs	r3, r2
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3308      	adds	r3, #8
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	61ba      	str	r2, [r7, #24]
 80009a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80009a2:	6979      	ldr	r1, [r7, #20]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	e841 2300 	strex	r3, r2, [r1]
 80009aa:	613b      	str	r3, [r7, #16]
   return(result);
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1e4      	bne.n	800097c <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3724      	adds	r7, #36	@ 0x24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_LPUART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_DisableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableOverrunDetect(USART_TypeDef *LPUARTx)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	609a      	str	r2, [r3, #8]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <LL_LPUART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_LPUART_EnableDMAReq_RX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_RX(USART_TypeDef *LPUARTx)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	@ 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAR);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3308      	adds	r3, #8
 80009ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	e853 3f00 	ldrex	r3, [r3]
 80009f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3308      	adds	r3, #8
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	61ba      	str	r2, [r7, #24]
 8000a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a08:	6979      	ldr	r1, [r7, #20]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	e841 2300 	strex	r3, r2, [r1]
 8000a10:	613b      	str	r3, [r7, #16]
   return(result);
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1e7      	bne.n	80009e8 <LL_LPUART_EnableDMAReq_RX+0x8>
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3328      	adds	r3, #40	@ 0x28
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e002      	b.n	8000a44 <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3324      	adds	r3, #36	@ 0x24
 8000a42:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8000a44:	68fb      	ldr	r3, [r7, #12]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <LL_RCC_HSE_EnableBypass+0x1c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <LL_RCC_HSE_EnableBypass+0x1c>)
 8000a5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	44020c00 	.word	0x44020c00

08000a74 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <LL_RCC_HSE_Enable+0x1c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <LL_RCC_HSE_Enable+0x1c>)
 8000a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	44020c00 	.word	0x44020c00

08000a94 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <LL_RCC_HSE_IsReady+0x24>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000aa4:	d101      	bne.n	8000aaa <LL_RCC_HSE_IsReady+0x16>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <LL_RCC_HSE_IsReady+0x18>
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	44020c00 	.word	0x44020c00

08000abc <LL_RCC_HSE_SetExternalClockType>:
  *         @arg @ref LL_RCC_HSE_ANALOG_TYPE
  *         @arg @ref LL_RCC_HSE_DIGITAL_TYPE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetExternalClockType(uint32_t HSEClockMode)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSEEXT, HSEClockMode);
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <LL_RCC_HSE_SetExternalClockType+0x24>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000acc:	4904      	ldr	r1, [pc, #16]	@ (8000ae0 <LL_RCC_HSE_SetExternalClockType+0x24>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	600b      	str	r3, [r1, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	44020c00 	.word	0x44020c00

08000ae4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <LL_RCC_SetSysClkSource+0x24>)
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	f023 0203 	bic.w	r2, r3, #3
 8000af4:	4904      	ldr	r1, [pc, #16]	@ (8000b08 <LL_RCC_SetSysClkSource+0x24>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61cb      	str	r3, [r1, #28]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	44020c00 	.word	0x44020c00

08000b0c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <LL_RCC_GetSysClkSource+0x18>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	f003 0318 	and.w	r3, r3, #24
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	44020c00 	.word	0x44020c00

08000b28 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, Prescaler);
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <LL_RCC_SetAHBPrescaler+0x24>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	f023 020f 	bic.w	r2, r3, #15
 8000b38:	4904      	ldr	r1, [pc, #16]	@ (8000b4c <LL_RCC_SetAHBPrescaler+0x24>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	620b      	str	r3, [r1, #32]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	44020c00 	.word	0x44020c00

08000b50 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, Prescaler);
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000b60:	4904      	ldr	r1, [pc, #16]	@ (8000b74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	620b      	str	r3, [r1, #32]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	44020c00 	.word	0x44020c00

08000b78 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, Prescaler);
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000b88:	4904      	ldr	r1, [pc, #16]	@ (8000b9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	620b      	str	r3, [r1, #32]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	44020c00 	.word	0x44020c00

08000ba0 <LL_RCC_SetAPB3Prescaler>:
  *         @arg @ref LL_RCC_APB3_DIV_8
  *         @arg @ref LL_RCC_APB3_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB3Prescaler(uint32_t Prescaler)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, Prescaler);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <LL_RCC_SetAPB3Prescaler+0x24>)
 8000baa:	6a1b      	ldr	r3, [r3, #32]
 8000bac:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8000bb0:	4904      	ldr	r1, [pc, #16]	@ (8000bc4 <LL_RCC_SetAPB3Prescaler+0x24>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	620b      	str	r3, [r1, #32]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	44020c00 	.word	0x44020c00

08000bc8 <LL_RCC_SetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClockSource(uint32_t ClkSource)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <LL_RCC_SetClockSource+0x50>)
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0e19      	lsrs	r1, r3, #24
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0c1b      	lsrs	r3, r3, #16
 8000bf6:	b2d9      	uxtb	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	431a      	orrs	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	601a      	str	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	44020cd8 	.word	0x44020cd8

08000c1c <LL_RCC_SetUSARTClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(USARTxSource);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffcf 	bl	8000bc8 <LL_RCC_SetClockSource>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <LL_RCC_SetUARTClockSource>:
  *         @arg @ref LL_RCC_UART12_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_UART12_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUARTClockSource(uint32_t UARTxSource)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(UARTxSource);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffc4 	bl	8000bc8 <LL_RCC_SetClockSource>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <LL_RCC_SetLPUARTClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_LPUART1SEL, LPUARTxSource);
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <LL_RCC_SetLPUARTClockSource+0x28>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8000c5a:	4905      	ldr	r1, [pc, #20]	@ (8000c70 <LL_RCC_SetLPUARTClockSource+0x28>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	44020c00 	.word	0x44020c00

08000c74 <LL_RCC_SetSPIClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSPIClockSource(uint32_t SPIxSource)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(SPIxSource);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ffa3 	bl	8000bc8 <LL_RCC_SetClockSource>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <LL_RCC_PLL1_Enable+0x1c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <LL_RCC_PLL1_Enable+0x1c>)
 8000c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	44020c00 	.word	0x44020c00

08000cac <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == RCC_CR_PLL1RDY) ? 1UL : 0UL);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <LL_RCC_PLL1_IsReady+0x24>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000cbc:	d101      	bne.n	8000cc2 <LL_RCC_PLL1_IsReady+0x16>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_RCC_PLL1_IsReady+0x18>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	44020c00 	.word	0x44020c00

08000cd4 <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1CFGR      PLL1PEN        LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1PEN);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <LL_RCC_PLL1P_Enable+0x1c>)
 8000cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <LL_RCC_PLL1P_Enable+0x1c>)
 8000cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	44020c00 	.word	0x44020c00

08000cf4 <LL_RCC_PLL1_SetSource>:
  *         @arg @ref LL_RCC_PLL1SOURCE_CSI
  *         @arg @ref LL_RCC_PLL1SOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetSource(uint32_t PLL1Source)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC, PLL1Source);
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <LL_RCC_PLL1_SetSource+0x24>)
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d00:	f023 0203 	bic.w	r2, r3, #3
 8000d04:	4904      	ldr	r1, [pc, #16]	@ (8000d18 <LL_RCC_PLL1_SetSource+0x24>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	44020c00 	.word	0x44020c00

08000d1c <LL_RCC_PLL1_SetN>:
  * @brief  Set Main PLL1 multiplication factor for VCO
  * @rmtoll PLL1CFGR      PLL1N          LL_RCC_PLL1_SetN
  * @param PLL1N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t PLL1N)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N, (PLL1N - 1UL) << RCC_PLL1DIVR_PLL1N_Pos);
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <LL_RCC_PLL1_SetN+0x2c>)
 8000d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d28:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	4904      	ldr	r1, [pc, #16]	@ (8000d48 <LL_RCC_PLL1_SetN+0x2c>)
 8000d36:	4313      	orrs	r3, r2
 8000d38:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	44020c00 	.word	0x44020c00

08000d4c <LL_RCC_PLL1_SetP>:
  * @note Used for System clock
  * @rmtoll PLL1CFGR      PLL1P       LL_RCC_PLL1_SetP
  * @param PLL1P parameter can be a value between 2 and 128 (odd value not allowed)
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t PLL1P)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P, (PLL1P - 1UL) << RCC_PLL1DIVR_PLL1P_Pos);
 8000d54:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <LL_RCC_PLL1_SetP+0x28>)
 8000d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d58:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	025b      	lsls	r3, r3, #9
 8000d62:	4904      	ldr	r1, [pc, #16]	@ (8000d74 <LL_RCC_PLL1_SetP+0x28>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	44020c00 	.word	0x44020c00

08000d78 <LL_RCC_PLL1_SetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLLCFGR      PLL1Q          LL_RCC_PLL1_SetQ
  * @param PLL1Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t PLL1Q)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1Q, (PLL1Q - 1UL) << RCC_PLL1DIVR_PLL1Q_Pos);
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <LL_RCC_PLL1_SetQ+0x28>)
 8000d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d84:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	041b      	lsls	r3, r3, #16
 8000d8e:	4904      	ldr	r1, [pc, #16]	@ (8000da0 <LL_RCC_PLL1_SetQ+0x28>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	44020c00 	.word	0x44020c00

08000da4 <LL_RCC_PLL1_SetR>:
  * @note Used for trace
  * @rmtoll PLL1DIVR      PLL1R          LL_RCC_PLL1_SetR
  * @param PLL1R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t PLL1R)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R, (PLL1R - 1UL) << RCC_PLL1DIVR_PLL1R_Pos);
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <LL_RCC_PLL1_SetR+0x28>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	061b      	lsls	r3, r3, #24
 8000dba:	4904      	ldr	r1, [pc, #16]	@ (8000dcc <LL_RCC_PLL1_SetR+0x28>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	44020c00 	.word	0x44020c00

08000dd0 <LL_RCC_PLL1_SetM>:
  * @brief  Set Division factor for the main PLL and other PLL
  * @rmtoll PLL1CFGR      PLL1M          LL_RCC_PLL1_SetM
  * @param PLL1M parameter can be a value between 1 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t PLL1M)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M, PLL1M  << RCC_PLL1CFGR_PLL1M_Pos);
 8000dd8:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <LL_RCC_PLL1_SetM+0x28>)
 8000dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ddc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	021b      	lsls	r3, r3, #8
 8000de4:	4904      	ldr	r1, [pc, #16]	@ (8000df8 <LL_RCC_PLL1_SetM+0x28>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	44020c00 	.word	0x44020c00

08000dfc <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RGE, InputRange << RCC_PLL1CFGR_PLL1RGE_Pos);
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8000e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e08:	f023 020c 	bic.w	r2, r3, #12
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4904      	ldr	r1, [pc, #16]	@ (8000e24 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	44020c00 	.word	0x44020c00

08000e28 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1VCOSEL, VCORange << RCC_PLL1CFGR_PLL1VCOSEL_Pos);
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8000e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e34:	f023 0220 	bic.w	r2, r3, #32
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	015b      	lsls	r3, r3, #5
 8000e3c:	4904      	ldr	r1, [pc, #16]	@ (8000e50 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	44020c00 	.word	0x44020c00

08000e54 <LL_RCC_PLL2_Enable>:
  * @brief  Enable PLL2
  * @rmtoll CR           PLL2ON     LL_RCC_PLL2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_Enable(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL2ON);
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <LL_RCC_PLL2_Enable+0x1c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <LL_RCC_PLL2_Enable+0x1c>)
 8000e5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	44020c00 	.word	0x44020c00

08000e74 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY    LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == RCC_CR_PLL2RDY) ? 1UL : 0UL);
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <LL_RCC_PLL2_IsReady+0x24>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000e84:	d101      	bne.n	8000e8a <LL_RCC_PLL2_IsReady+0x16>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <LL_RCC_PLL2_IsReady+0x18>
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	44020c00 	.word	0x44020c00

08000e9c <LL_RCC_PLL2_SetSource>:
  *         @arg @ref LL_RCC_PLL2SOURCE_HSI
  *         @arg @ref LL_RCC_PLL2SOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetSource(uint32_t PLL2Source)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2SRC, PLL2Source);
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <LL_RCC_PLL2_SetSource+0x24>)
 8000ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea8:	f023 0203 	bic.w	r2, r3, #3
 8000eac:	4904      	ldr	r1, [pc, #16]	@ (8000ec0 <LL_RCC_PLL2_SetSource+0x24>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	44020c00 	.word	0x44020c00

08000ec4 <LL_RCC_PLL2_SetM>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2CFGR      PLL2M          LL_RCC_PLL2_SetM
  * @param PLL2M parameter can be a value between 1 and 63
  */
__STATIC_INLINE void LL_RCC_PLL2_SetM(uint32_t PLL2M)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2M, PLL2M << RCC_PLL2CFGR_PLL2M_Pos);
 8000ecc:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <LL_RCC_PLL2_SetM+0x28>)
 8000ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	4904      	ldr	r1, [pc, #16]	@ (8000eec <LL_RCC_PLL2_SetM+0x28>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	44020c00 	.word	0x44020c00

08000ef0 <LL_RCC_PLL2_SetN>:
  * @brief  Set PLL2 multiplication factor N
  * @rmtoll PLL2CFGR      PLL2N          LL_RCC_PLL2_SetN
  * @param PLL2N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL2_SetN(uint32_t PLL2N)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2N, (PLL2N - 1UL) << RCC_PLL2DIVR_PLL2N_Pos);
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <LL_RCC_PLL2_SetN+0x2c>)
 8000efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000efc:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	3a01      	subs	r2, #1
 8000f08:	4904      	ldr	r1, [pc, #16]	@ (8000f1c <LL_RCC_PLL2_SetN+0x2c>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	44020c00 	.word	0x44020c00

08000f20 <LL_RCC_PLL2_SetP>:
  * @note Used for peripherals clocks
  * @rmtoll PLL2CFGR      PLL2P       LL_RCC_PLL2_SetP
  * @param PLL2P parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetP(uint32_t PLL2P)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2P, (PLL2P - 1UL) << RCC_PLL2DIVR_PLL2P_Pos);
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <LL_RCC_PLL2_SetP+0x28>)
 8000f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f2c:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	025b      	lsls	r3, r3, #9
 8000f36:	4904      	ldr	r1, [pc, #16]	@ (8000f48 <LL_RCC_PLL2_SetP+0x28>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	44020c00 	.word	0x44020c00

08000f4c <LL_RCC_PLL2_SetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLLCFGR      PLL2Q          LL_RCC_PLL2_SetQ
  * @param PLL2Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetQ(uint32_t PLL2Q)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2Q, (PLL2Q - 1UL) << RCC_PLL2DIVR_PLL2Q_Pos);
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <LL_RCC_PLL2_SetQ+0x28>)
 8000f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f58:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	041b      	lsls	r3, r3, #16
 8000f62:	4904      	ldr	r1, [pc, #16]	@ (8000f74 <LL_RCC_PLL2_SetQ+0x28>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	44020c00 	.word	0x44020c00

08000f78 <LL_RCC_PLL2_SetR>:
  * @note Used for PLL2CLK selected for peripherals clocks
  * @rmtoll PLL2CFGR      PLL2Q          LL_RCC_PLL2_SetR
  * @param PLL2R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void  LL_RCC_PLL2_SetR(uint32_t PLL2R)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2R, (PLL2R - 1UL) << RCC_PLL2DIVR_PLL2R_Pos);
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <LL_RCC_PLL2_SetR+0x28>)
 8000f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	4904      	ldr	r1, [pc, #16]	@ (8000fa0 <LL_RCC_PLL2_SetR+0x28>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	44020c00 	.word	0x44020c00

08000fa4 <LL_RCC_PLL2P_Enable>:
  * @brief  Enable PLL2 P output
  * @rmtoll PLL2CFGR  PLL2PEN    LL_RCC_PLL2P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2P_Enable(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2PEN);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <LL_RCC_PLL2P_Enable+0x1c>)
 8000faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <LL_RCC_PLL2P_Enable+0x1c>)
 8000fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	44020c00 	.word	0x44020c00

08000fc4 <LL_RCC_PLL2_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOInputRange(uint32_t InputRange)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2RGE, InputRange << RCC_PLL2CFGR_PLL2RGE_Pos);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	f023 020c 	bic.w	r2, r3, #12
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4904      	ldr	r1, [pc, #16]	@ (8000fec <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	44020c00 	.word	0x44020c00

08000ff0 <LL_RCC_PLL2_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOOutputRange(uint32_t VCORange)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2VCOSEL, VCORange << RCC_PLL2CFGR_PLL2VCOSEL_Pos);
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffc:	f023 0220 	bic.w	r2, r3, #32
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	015b      	lsls	r3, r3, #5
 8001004:	4904      	ldr	r1, [pc, #16]	@ (8001018 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8001006:	4313      	orrs	r3, r2
 8001008:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	44020c00 	.word	0x44020c00

0800101c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->VOSCR, PWR_VOSCR_VOS, VoltageScaling);
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800102c:	4904      	ldr	r1, [pc, #16]	@ (8001040 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	610b      	str	r3, [r1, #16]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	44020800 	.word	0x44020800

08001044 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll UCPDR          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800104a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	44020800 	.word	0x44020800

08001064 <LL_PWR_IsActiveFlag_VOS>:
  *         scaling range or not.
  * @rmtoll VOSSR          VOSRDY          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->VOSSR, PWR_VOSSR_VOSRDY) == (PWR_VOSSR_VOSRDY)) ? 1UL : 0UL);
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <LL_PWR_IsActiveFlag_VOS+0x20>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b08      	cmp	r3, #8
 8001072:	d101      	bne.n	8001078 <LL_PWR_IsActiveFlag_VOS+0x14>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <LL_PWR_IsActiveFlag_VOS+0x16>
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	44020800 	.word	0x44020800

08001088 <LL_AHB1_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <LL_AHB1_GRP1_EnableClock+0x34>)
 8001092:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001096:	4909      	ldr	r1, [pc, #36]	@ (80010bc <LL_AHB1_GRP1_EnableClock+0x34>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4313      	orrs	r3, r2
 800109c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <LL_AHB1_GRP1_EnableClock+0x34>)
 80010a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ac:	68fb      	ldr	r3, [r7, #12]
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	44020c00 	.word	0x44020c00

080010c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80010ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80010ce:	4909      	ldr	r1, [pc, #36]	@ (80010f4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80010da:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e4:	68fb      	ldr	r3, [r7, #12]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	44020c00 	.word	0x44020c00

080010f8 <LL_APB1_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <LL_APB1_GRP1_EnableClock+0x34>)
 8001102:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001106:	4909      	ldr	r1, [pc, #36]	@ (800112c <LL_APB1_GRP1_EnableClock+0x34>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4313      	orrs	r3, r2
 800110c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <LL_APB1_GRP1_EnableClock+0x34>)
 8001112:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	44020c00 	.word	0x44020c00

08001130 <LL_APB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <LL_APB2_GRP1_EnableClock+0x34>)
 800113a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800113e:	4909      	ldr	r1, [pc, #36]	@ (8001164 <LL_APB2_GRP1_EnableClock+0x34>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4313      	orrs	r3, r2
 8001144:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <LL_APB2_GRP1_EnableClock+0x34>)
 800114a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001154:	68fb      	ldr	r3, [r7, #12]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	44020c00 	.word	0x44020c00

08001168 <LL_APB3_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <LL_APB3_GRP1_EnableClock+0x34>)
 8001172:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8001176:	4909      	ldr	r1, [pc, #36]	@ (800119c <LL_APB3_GRP1_EnableClock+0x34>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4313      	orrs	r3, r2
 800117c:	f8c1 30a8 	str.w	r3, [r1, #168]	@ 0xa8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <LL_APB3_GRP1_EnableClock+0x34>)
 8001182:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	44020c00 	.word	0x44020c00

080011a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <LL_FLASH_SetLatency+0x24>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 020f 	bic.w	r2, r3, #15
 80011b0:	4904      	ldr	r1, [pc, #16]	@ (80011c4 <LL_FLASH_SetLatency+0x24>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40022000 	.word	0x40022000

080011c8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <LL_FLASH_GetLatency+0x18>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 030f 	and.w	r3, r3, #15
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60da      	str	r2, [r3, #12]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_SPI_SetFIFOThreshold>:
  *         @arg @ref LL_SPI_FIFO_TH_15DATA
  *         @arg @ref LL_SPI_FIFO_TH_16DATA
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CFG2         SSOM          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3308      	adds	r3, #8
 800129e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	e853 3f00 	ldrex	r3, [r3]
 80012a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	075b      	lsls	r3, r3, #29
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3308      	adds	r3, #8
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	61ba      	str	r2, [r7, #24]
 80012be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012c0:	6979      	ldr	r1, [r7, #20]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	e841 2300 	strex	r3, r2, [r1]
 80012c8:	613b      	str	r3, [r7, #16]
   return(result);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e4      	bne.n	800129a <LL_USART_SetTXFIFOThreshold+0xa>
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80012de:	b480      	push	{r7}
 80012e0:	b089      	sub	sp, #36	@ 0x24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3308      	adds	r3, #8
 80012ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	e853 3f00 	ldrex	r3, [r3]
 80012f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	065b      	lsls	r3, r3, #25
 8001300:	4313      	orrs	r3, r2
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3308      	adds	r3, #8
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	61ba      	str	r2, [r7, #24]
 800130c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800130e:	6979      	ldr	r1, [r7, #20]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	e841 2300 	strex	r3, r2, [r1]
 8001316:	613b      	str	r3, [r7, #16]
   return(result);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1e4      	bne.n	80012e8 <LL_USART_SetRXFIFOThreshold+0xa>
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3724      	adds	r7, #36	@ 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_USART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3308      	adds	r3, #8
 8001384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	e853 3f00 	ldrex	r3, [r3]
 800138c:	60bb      	str	r3, [r7, #8]
   return(result);
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3308      	adds	r3, #8
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	61ba      	str	r2, [r7, #24]
 800139e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013a0:	6979      	ldr	r1, [r7, #20]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	e841 2300 	strex	r3, r2, [r1]
 80013a8:	613b      	str	r3, [r7, #16]
   return(result);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e7      	bne.n	8001380 <LL_USART_EnableDMAReq_RX+0x8>
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3328      	adds	r3, #40	@ 0x28
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e002      	b.n	80013dc <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3324      	adds	r3, #36	@ 0x24
 80013da:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80013dc:	68fb      	ldr	r3, [r7, #12]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f7ff f97b 	bl	8000708 <__NVIC_SetPriorityGrouping>

  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001412:	f7ff f99d 	bl	8000750 <__NVIC_GetPriorityGrouping>
 8001416:	4603      	mov	r3, r0
 8001418:	2200      	movs	r2, #0
 800141a:	210f      	movs	r1, #15
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f9ed 	bl	80007fc <NVIC_EncodePriority>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	f06f 0001 	mvn.w	r0, #1
 800142a:	f7ff f9bd 	bl	80007a8 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800142e:	f7ff f98f 	bl	8000750 <__NVIC_GetPriorityGrouping>
 8001432:	4603      	mov	r3, r0
 8001434:	2200      	movs	r2, #0
 8001436:	210f      	movs	r1, #15
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f9df 	bl	80007fc <NVIC_EncodePriority>
 800143e:	4603      	mov	r3, r0
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 30ff 	mov.w	r0, #4294967295
 8001446:	f7ff f9af 	bl	80007a8 <__NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 800144a:	f7ff fdfb 	bl	8001044 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f82f 	bl	80014b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001452:	f000 f88f 	bl	8001574 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  LL_mDelay(200);
 8001456:	20c8      	movs	r0, #200	@ 0xc8
 8001458:	f005 fb1e 	bl	8006a98 <LL_mDelay>
  MX_GPIO_Init();
 800145c:	f000 feec 	bl	8002238 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001460:	f000 f8af 	bl	80015c2 <MX_GPDMA1_Init>
  MX_SPI3_Init();
 8001464:	f000 fe10 	bl	8002088 <MX_SPI3_Init>
  MX_SPI6_Init();
 8001468:	f000 fe86 	bl	8002178 <MX_SPI6_Init>
  MX_LPUART1_UART_Init();
 800146c:	f000 f8c0 	bl	80015f0 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8001470:	f000 f97a 	bl	8001768 <MX_UART4_Init>
  MX_UART5_Init();
 8001474:	f000 fa38 	bl	80018e8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001478:	f000 fbbe 	bl	8001bf8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800147c:	f000 fc80 	bl	8001d80 <MX_USART6_UART_Init>
  MX_UART7_Init();
 8001480:	f000 faf6 	bl	8001a70 <MX_UART7_Init>
  MX_USART11_UART_Init();
 8001484:	f000 fd3e 	bl	8001f04 <MX_USART11_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8001488:	f001 ff36 	bl	80032f8 <LCD_Init>
  xpt2046_init();
 800148c:	f002 fa08 	bl	80038a0 <xpt2046_init>

  memset(General_Buffer, 0, sizeof(General_Buffer));
 8001490:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8001494:	2100      	movs	r1, #0
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <main+0xa4>)
 8001498:	f008 fa9e 	bl	80099d8 <memset>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800149c:	f005 fb9e 	bl	8006bdc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80014a0:	f7ff f882 	bl	80005a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014a4:	f005 fbc0 	bl	8006c28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <main+0xa0>
 80014ac:	2000006c 	.word	0x2000006c

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80014b4:	2005      	movs	r0, #5
 80014b6:	f7ff fe73 	bl	80011a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80014ba:	bf00      	nop
 80014bc:	f7ff fe84 	bl	80011c8 <LL_FLASH_GetLatency>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d1fa      	bne.n	80014bc <SystemClock_Config+0xc>
  {
  }

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE0);
 80014c6:	2030      	movs	r0, #48	@ 0x30
 80014c8:	f7ff fda8 	bl	800101c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80014cc:	bf00      	nop
 80014ce:	f7ff fdc9 	bl	8001064 <LL_PWR_IsActiveFlag_VOS>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0fa      	beq.n	80014ce <SystemClock_Config+0x1e>
  {
  }
  LL_RCC_HSE_EnableBypass();
 80014d8:	f7ff fabc 	bl	8000a54 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_SetExternalClockType(LL_RCC_HSE_ANALOG_TYPE);
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff faed 	bl	8000abc <LL_RCC_HSE_SetExternalClockType>
  LL_RCC_HSE_Enable();
 80014e2:	f7ff fac7 	bl	8000a74 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80014e6:	bf00      	nop
 80014e8:	f7ff fad4 	bl	8000a94 <LL_RCC_HSE_IsReady>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d1fa      	bne.n	80014e8 <SystemClock_Config+0x38>
  {
  }

  LL_RCC_PLL1_SetSource(LL_RCC_PLL1SOURCE_HSE);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f7ff fbfe 	bl	8000cf4 <LL_RCC_PLL1_SetSource>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f7ff fc7f 	bl	8000dfc <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fc92 	bl	8000e28 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(2);
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff fc63 	bl	8000dd0 <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(50);
 800150a:	2032      	movs	r0, #50	@ 0x32
 800150c:	f7ff fc06 	bl	8000d1c <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 8001510:	2002      	movs	r0, #2
 8001512:	f7ff fc1b 	bl	8000d4c <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(2);
 8001516:	2002      	movs	r0, #2
 8001518:	f7ff fc2e 	bl	8000d78 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(2);
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fc41 	bl	8000da4 <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1P_Enable();
 8001522:	f7ff fbd7 	bl	8000cd4 <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1_Enable();
 8001526:	f7ff fbb1 	bl	8000c8c <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 800152a:	bf00      	nop
 800152c:	f7ff fbbe 	bl	8000cac <LL_RCC_PLL1_IsReady>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d1fa      	bne.n	800152c <SystemClock_Config+0x7c>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 8001536:	2003      	movs	r0, #3
 8001538:	f7ff fad4 	bl	8000ae4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 800153c:	bf00      	nop
 800153e:	f7ff fae5 	bl	8000b0c <LL_RCC_GetSysClkSource>
 8001542:	4603      	mov	r3, r0
 8001544:	2b18      	cmp	r3, #24
 8001546:	d1fa      	bne.n	800153e <SystemClock_Config+0x8e>
  {
  }

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff faed 	bl	8000b28 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fafe 	bl	8000b50 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff fb0f 	bl	8000b78 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_1);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fb20 	bl	8000ba0 <LL_RCC_SetAPB3Prescaler>

  LL_Init1msTick(250000000);
 8001560:	4803      	ldr	r0, [pc, #12]	@ (8001570 <SystemClock_Config+0xc0>)
 8001562:	f005 fa8b 	bl	8006a7c <LL_Init1msTick>

  LL_SetSystemCoreClock(250000000);
 8001566:	4802      	ldr	r0, [pc, #8]	@ (8001570 <SystemClock_Config+0xc0>)
 8001568:	f005 fabe 	bl	8006ae8 <LL_SetSystemCoreClock>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	0ee6b280 	.word	0x0ee6b280

08001574 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  LL_RCC_PLL2_SetSource(LL_RCC_PLL2SOURCE_HSE);
 8001578:	2003      	movs	r0, #3
 800157a:	f7ff fc8f 	bl	8000e9c <LL_RCC_PLL2_SetSource>
  LL_RCC_PLL2_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 800157e:	2003      	movs	r0, #3
 8001580:	f7ff fd20 	bl	8000fc4 <LL_RCC_PLL2_SetVCOInputRange>
  LL_RCC_PLL2_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fd33 	bl	8000ff0 <LL_RCC_PLL2_SetVCOOutputRange>
  LL_RCC_PLL2_SetM(2);
 800158a:	2002      	movs	r0, #2
 800158c:	f7ff fc9a 	bl	8000ec4 <LL_RCC_PLL2_SetM>
  LL_RCC_PLL2_SetN(50);
 8001590:	2032      	movs	r0, #50	@ 0x32
 8001592:	f7ff fcad 	bl	8000ef0 <LL_RCC_PLL2_SetN>
  LL_RCC_PLL2_SetP(2);
 8001596:	2002      	movs	r0, #2
 8001598:	f7ff fcc2 	bl	8000f20 <LL_RCC_PLL2_SetP>
  LL_RCC_PLL2_SetQ(2);
 800159c:	2002      	movs	r0, #2
 800159e:	f7ff fcd5 	bl	8000f4c <LL_RCC_PLL2_SetQ>
  LL_RCC_PLL2_SetR(2);
 80015a2:	2002      	movs	r0, #2
 80015a4:	f7ff fce8 	bl	8000f78 <LL_RCC_PLL2_SetR>
  LL_RCC_PLL2P_Enable();
 80015a8:	f7ff fcfc 	bl	8000fa4 <LL_RCC_PLL2P_Enable>
  LL_RCC_PLL2_Enable();
 80015ac:	f7ff fc52 	bl	8000e54 <LL_RCC_PLL2_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL2_IsReady() != 1)
 80015b0:	bf00      	nop
 80015b2:	f7ff fc5f 	bl	8000e74 <LL_RCC_PLL2_IsReady>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d1fa      	bne.n	80015b2 <PeriphCommonClock_Config+0x3e>
  {
  }

}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPDMA1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fd5e 	bl	8001088 <LL_AHB1_GRP1_EnableClock>

  /* GPDMA1 interrupt Init */
  NVIC_SetPriority(GPDMA1_Channel0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80015cc:	f7ff f8c0 	bl	8000750 <__NVIC_GetPriorityGrouping>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2200      	movs	r2, #0
 80015d4:	2105      	movs	r1, #5
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f910 	bl	80007fc <NVIC_EncodePriority>
 80015dc:	4603      	mov	r3, r0
 80015de:	4619      	mov	r1, r3
 80015e0:	201b      	movs	r0, #27
 80015e2:	f7ff f8e1 	bl	80007a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80015e6:	201b      	movs	r0, #27
 80015e8:	f7ff f8c0 	bl	800076c <__NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0b2      	sub	sp, #200	@ 0xc8
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 80015f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015fa:	2294      	movs	r2, #148	@ 0x94
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f008 f9ea 	bl	80099d8 <memset>

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK3);
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fb0d 	bl	8000c48 <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB3_GRP1_EnableClock(LL_APB3_GRP1_PERIPH_LPUART1);
 800162e:	2040      	movs	r0, #64	@ 0x40
 8001630:	f7ff fd9a 	bl	8001168 <LL_APB3_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff fd43 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA9   ------> LPUART1_TX
  PA10   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LPUART1_TX_RS485_5_Pin|LPUART1_RX_RS485_5_Pin;
 800163a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800163e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001640:	2302      	movs	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001650:	2303      	movs	r3, #3
 8001652:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	483f      	ldr	r0, [pc, #252]	@ (8001758 <MX_LPUART1_UART_Init+0x168>)
 800165a:	f003 f92e 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */
	DMA_InitStruct.SrcAddress = LL_LPUART_DMA_GetRegAddr(LPUART1, LL_LPUART_DMA_REG_DATA_RECEIVE);
 800165e:	2101      	movs	r1, #1
 8001660:	483e      	ldr	r0, [pc, #248]	@ (800175c <MX_LPUART1_UART_Init+0x16c>)
 8001662:	f7ff f9e0 	bl	8000a26 <LL_LPUART_DMA_GetRegAddr>
 8001666:	4603      	mov	r3, r0
 8001668:	637b      	str	r3, [r7, #52]	@ 0x34
	DMA_InitStruct.DestAddress = (uint32_t)&RX_Buffer[Line5_BUF_Index];
 800166a:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <MX_LPUART1_UART_Init+0x170>)
 800166c:	63bb      	str	r3, [r7, #56]	@ 0x38
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800166e:	2300      	movs	r3, #0
 8001670:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8001672:	2300      	movs	r3, #0
 8001674:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8001676:	2300      	movs	r3, #0
 8001678:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.SrcBurstLength = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DestBurstLength = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8001682:	2300      	movs	r3, #0
 8001684:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8001686:	2300      	movs	r3, #0
 8001688:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 800168a:	2300      	movs	r3, #0
 800168c:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 800168e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001692:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001694:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001698:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 80016a4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 80016aa:	2300      	movs	r3, #0
 80016ac:	673b      	str	r3, [r7, #112]	@ 0x70
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 80016ae:	2300      	movs	r3, #0
 80016b0:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_LPUART1_RX;
 80016b2:	232d      	movs	r3, #45	@ 0x2d
 80016b4:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 80016b6:	2300      	movs	r3, #0
 80016b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 80016c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_4, &DMA_InitStruct);
 80016e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016e4:	461a      	mov	r2, r3
 80016e6:	2104      	movs	r1, #4
 80016e8:	481e      	ldr	r0, [pc, #120]	@ (8001764 <MX_LPUART1_UART_Init+0x174>)
 80016ea:	f002 fe1d 	bl	8004328 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_4);
 80016ee:	2104      	movs	r1, #4
 80016f0:	481c      	ldr	r0, [pc, #112]	@ (8001764 <MX_LPUART1_UART_Init+0x174>)
 80016f2:	f7ff f8d7 	bl	80008a4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_4);
 80016f6:	2104      	movs	r1, #4
 80016f8:	481a      	ldr	r0, [pc, #104]	@ (8001764 <MX_LPUART1_UART_Init+0x174>)
 80016fa:	f7ff f8b3 	bl	8000864 <LL_DMA_EnableChannel>

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV8;
 80016fe:	2304      	movs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  LPUART_InitStruct.BaudRate = 9600;
 8001702:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001706:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8001714:	230c      	movs	r3, #12
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	4619      	mov	r1, r3
 8001722:	480e      	ldr	r0, [pc, #56]	@ (800175c <MX_LPUART1_UART_Init+0x16c>)
 8001724:	f003 f9e0 	bl	8004ae8 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8001728:	2100      	movs	r1, #0
 800172a:	480c      	ldr	r0, [pc, #48]	@ (800175c <MX_LPUART1_UART_Init+0x16c>)
 800172c:	f7ff f8fa 	bl	8000924 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8001730:	2100      	movs	r1, #0
 8001732:	480a      	ldr	r0, [pc, #40]	@ (800175c <MX_LPUART1_UART_Init+0x16c>)
 8001734:	f7ff f91d 	bl	8000972 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8001738:	4808      	ldr	r0, [pc, #32]	@ (800175c <MX_LPUART1_UART_Init+0x16c>)
 800173a:	f7ff f8e3 	bl	8000904 <LL_LPUART_DisableFIFO>
  LL_LPUART_DisableOverrunDetect(LPUART1);
 800173e:	4807      	ldr	r0, [pc, #28]	@ (800175c <MX_LPUART1_UART_Init+0x16c>)
 8001740:	f7ff f93e 	bl	80009c0 <LL_LPUART_DisableOverrunDetect>
  LL_LPUART_EnableDMAReq_RX(LPUART1);
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <MX_LPUART1_UART_Init+0x16c>)
 8001746:	f7ff f94b 	bl	80009e0 <LL_LPUART_EnableDMAReq_RX>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 800174a:	4804      	ldr	r0, [pc, #16]	@ (800175c <MX_LPUART1_UART_Init+0x16c>)
 800174c:	f7ff f8ca 	bl	80008e4 <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	37c8      	adds	r7, #200	@ 0xc8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	42020000 	.word	0x42020000
 800175c:	44002400 	.word	0x44002400
 8001760:	200259fc 	.word	0x200259fc
 8001764:	40020000 	.word	0x40020000

08001768 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0b4      	sub	sp, #208	@ 0xd0
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 800176e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001772:	2294      	movs	r2, #148	@ 0x94
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f008 f92e 	bl	80099d8 <memset>

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	2220      	movs	r2, #32
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f008 f927 	bl	80099d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART4_CLKSOURCE_PCLK1);
 800179a:	484e      	ldr	r0, [pc, #312]	@ (80018d4 <MX_UART4_Init+0x16c>)
 800179c:	f7ff fa49 	bl	8000c32 <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80017a0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80017a4:	f7ff fca8 	bl	80010f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80017a8:	2008      	movs	r0, #8
 80017aa:	f7ff fc89 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PD11   ------> UART4_RX
  PD12   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = UART4_RX_RS485_3_Pin|UART4_TX_RS485_3_Pin;
 80017ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017b4:	2302      	movs	r3, #2
 80017b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80017c4:	2308      	movs	r3, #8
 80017c6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4842      	ldr	r0, [pc, #264]	@ (80018d8 <MX_UART4_Init+0x170>)
 80017ce:	f003 f874 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART4, LL_USART_DMA_REG_DATA_RECEIVE);
 80017d2:	2101      	movs	r1, #1
 80017d4:	4841      	ldr	r0, [pc, #260]	@ (80018dc <MX_UART4_Init+0x174>)
 80017d6:	f7ff fdf2 	bl	80013be <LL_USART_DMA_GetRegAddr>
 80017da:	4603      	mov	r3, r0
 80017dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&RX_Buffer[Line3_BUF_Index];
 80017de:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <MX_UART4_Init+0x178>)
 80017e0:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80017e2:	2300      	movs	r3, #0
 80017e4:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;;//LL_DMA_HWREQUEST_BLK
 80017e6:	2300      	movs	r3, #0
 80017e8:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 80017ea:	2300      	movs	r3, #0
 80017ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 80017fe:	2300      	movs	r3, #0
 8001800:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8001802:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001806:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001808:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800180c:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 800180e:	2364      	movs	r3, #100	@ 0x64
 8001810:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8001818:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800181c:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 800181e:	2300      	movs	r3, #0
 8001820:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8001822:	2300      	movs	r3, #0
 8001824:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART4_RX;
 8001826:	231b      	movs	r3, #27
 8001828:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 800183e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_2, &DMA_InitStruct);
 8001858:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800185c:	461a      	mov	r2, r3
 800185e:	2102      	movs	r1, #2
 8001860:	4820      	ldr	r0, [pc, #128]	@ (80018e4 <MX_UART4_Init+0x17c>)
 8001862:	f002 fd61 	bl	8004328 <LL_DMA_Init>

	//LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_2);

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_2);
 8001866:	2102      	movs	r1, #2
 8001868:	481e      	ldr	r0, [pc, #120]	@ (80018e4 <MX_UART4_Init+0x17c>)
 800186a:	f7fe fffb 	bl	8000864 <LL_DMA_EnableChannel>

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 9600;
 8001872:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001876:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001884:	230c      	movs	r3, #12
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800188c:	2300      	movs	r3, #0
 800188e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART4, &UART_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4811      	ldr	r0, [pc, #68]	@ (80018dc <MX_UART4_Init+0x174>)
 8001898:	f004 ffec 	bl	8006874 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 800189c:	2100      	movs	r1, #0
 800189e:	480f      	ldr	r0, [pc, #60]	@ (80018dc <MX_UART4_Init+0x174>)
 80018a0:	f7ff fcf6 	bl	8001290 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 80018a4:	2100      	movs	r1, #0
 80018a6:	480d      	ldr	r0, [pc, #52]	@ (80018dc <MX_UART4_Init+0x174>)
 80018a8:	f7ff fd19 	bl	80012de <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART4);
 80018ac:	480b      	ldr	r0, [pc, #44]	@ (80018dc <MX_UART4_Init+0x174>)
 80018ae:	f7ff fcdf 	bl	8001270 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART4);
 80018b2:	480a      	ldr	r0, [pc, #40]	@ (80018dc <MX_UART4_Init+0x174>)
 80018b4:	f7ff fd3a 	bl	800132c <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART4);
 80018b8:	4808      	ldr	r0, [pc, #32]	@ (80018dc <MX_UART4_Init+0x174>)
 80018ba:	f7ff fd47 	bl	800134c <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART4);
 80018be:	4807      	ldr	r0, [pc, #28]	@ (80018dc <MX_UART4_Init+0x174>)
 80018c0:	f7ff fd5a 	bl	8001378 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART4);
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <MX_UART4_Init+0x174>)
 80018c6:	f7ff fcc3 	bl	8001250 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	37d0      	adds	r7, #208	@ 0xd0
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	07000900 	.word	0x07000900
 80018d8:	42020c00 	.word	0x42020c00
 80018dc:	40004c00 	.word	0x40004c00
 80018e0:	20025934 	.word	0x20025934
 80018e4:	40020000 	.word	0x40020000

080018e8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0b4      	sub	sp, #208	@ 0xd0
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 80018ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018f2:	2294      	movs	r2, #148	@ 0x94
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f008 f86e 	bl	80099d8 <memset>

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2220      	movs	r2, #32
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f008 f867 	bl	80099d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART5_CLKSOURCE_PCLK1);
 800191a:	4850      	ldr	r0, [pc, #320]	@ (8001a5c <MX_UART5_Init+0x174>)
 800191c:	f7ff f989 	bl	8000c32 <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8001920:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001924:	f7ff fbe8 	bl	80010f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001928:	2002      	movs	r0, #2
 800192a:	f7ff fbc9 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PB12   ------> UART5_RX
  PB13   ------> UART5_TX
  */
  GPIO_InitStruct.Pin = UART5_RX_RS485_2_Pin|UART5_TX_RS485_2_Pin;
 800192e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001932:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001934:	2302      	movs	r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8001944:	230e      	movs	r3, #14
 8001946:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4844      	ldr	r0, [pc, #272]	@ (8001a60 <MX_UART5_Init+0x178>)
 800194e:	f002 ffb4 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN UART5_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART5, LL_USART_DMA_REG_DATA_RECEIVE);
 8001952:	2101      	movs	r1, #1
 8001954:	4843      	ldr	r0, [pc, #268]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001956:	f7ff fd32 	bl	80013be <LL_USART_DMA_GetRegAddr>
 800195a:	4603      	mov	r3, r0
 800195c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&RX_Buffer[Line2_BUF_Index];
 800195e:	4b42      	ldr	r3, [pc, #264]	@ (8001a68 <MX_UART5_Init+0x180>)
 8001960:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8001962:	2300      	movs	r3, #0
 8001964:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8001966:	2300      	movs	r3, #0
 8001968:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 800196a:	2300      	movs	r3, #0
 800196c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8001976:	2300      	movs	r3, #0
 8001978:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 800197a:	2300      	movs	r3, #0
 800197c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 800197e:	2300      	movs	r3, #0
 8001980:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8001982:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001986:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001988:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800198c:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 800198e:	2364      	movs	r3, #100	@ 0x64
 8001990:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8001998:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800199c:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 800199e:	2300      	movs	r3, #0
 80019a0:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 80019a2:	2300      	movs	r3, #0
 80019a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART5_RX;
 80019a6:	231d      	movs	r3, #29
 80019a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 80019be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_1, &DMA_InitStruct);
 80019d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019dc:	461a      	mov	r2, r3
 80019de:	2101      	movs	r1, #1
 80019e0:	4822      	ldr	r0, [pc, #136]	@ (8001a6c <MX_UART5_Init+0x184>)
 80019e2:	f002 fca1 	bl	8004328 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_1);
 80019e6:	2101      	movs	r1, #1
 80019e8:	4820      	ldr	r0, [pc, #128]	@ (8001a6c <MX_UART5_Init+0x184>)
 80019ea:	f7fe ff5b 	bl	80008a4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_1);
 80019ee:	2101      	movs	r1, #1
 80019f0:	481e      	ldr	r0, [pc, #120]	@ (8001a6c <MX_UART5_Init+0x184>)
 80019f2:	f7fe ff37 	bl	8000864 <LL_DMA_EnableChannel>

  /* USER CODE END UART5_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 9600;
 80019fa:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80019fe:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART5, &UART_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4811      	ldr	r0, [pc, #68]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001a20:	f004 ff28 	bl	8006874 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART5, LL_USART_FIFOTHRESHOLD_1_8);
 8001a24:	2100      	movs	r1, #0
 8001a26:	480f      	ldr	r0, [pc, #60]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001a28:	f7ff fc32 	bl	8001290 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART5, LL_USART_FIFOTHRESHOLD_1_8);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001a30:	f7ff fc55 	bl	80012de <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART5);
 8001a34:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001a36:	f7ff fc1b 	bl	8001270 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART5);
 8001a3a:	480a      	ldr	r0, [pc, #40]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001a3c:	f7ff fc76 	bl	800132c <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART5);
 8001a40:	4808      	ldr	r0, [pc, #32]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001a42:	f7ff fc83 	bl	800134c <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART5);
 8001a46:	4807      	ldr	r0, [pc, #28]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001a48:	f7ff fc96 	bl	8001378 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART5);
 8001a4c:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <MX_UART5_Init+0x17c>)
 8001a4e:	f7ff fbff 	bl	8001250 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	37d0      	adds	r7, #208	@ 0xd0
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	07000c00 	.word	0x07000c00
 8001a60:	42020400 	.word	0x42020400
 8001a64:	40005000 	.word	0x40005000
 8001a68:	200258d0 	.word	0x200258d0
 8001a6c:	40020000 	.word	0x40020000

08001a70 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0b4      	sub	sp, #208	@ 0xd0
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8001a76:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a7a:	2294      	movs	r2, #148	@ 0x94
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f007 ffaa 	bl	80099d8 <memset>

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	2220      	movs	r2, #32
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f007 ffa3 	bl	80099d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART7_CLKSOURCE_PCLK1);
 8001aa2:	4850      	ldr	r0, [pc, #320]	@ (8001be4 <MX_UART7_Init+0x174>)
 8001aa4:	f7ff f8c5 	bl	8000c32 <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 8001aa8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001aac:	f7ff fb24 	bl	80010f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff fb05 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PA8   ------> UART7_RX
  PA15(JTDI)   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = UART7_RX_RS485_7_Pin|UART7_TX_RS485_7_Pin;
 8001ab6:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001aba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001abc:	2302      	movs	r3, #2
 8001abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001acc:	230b      	movs	r3, #11
 8001ace:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4844      	ldr	r0, [pc, #272]	@ (8001be8 <MX_UART7_Init+0x178>)
 8001ad6:	f002 fef0 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN UART7_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART7, LL_USART_DMA_REG_DATA_RECEIVE);
 8001ada:	2101      	movs	r1, #1
 8001adc:	4843      	ldr	r0, [pc, #268]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001ade:	f7ff fc6e 	bl	80013be <LL_USART_DMA_GetRegAddr>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&RX_Buffer[Line7_BUF_Index];
 8001ae6:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <MX_UART7_Init+0x180>)
 8001ae8:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8001aea:	2300      	movs	r3, #0
 8001aec:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8001aee:	2300      	movs	r3, #0
 8001af0:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8001af2:	2300      	movs	r3, #0
 8001af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8001b06:	2300      	movs	r3, #0
 8001b08:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8001b0a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001b0e:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001b10:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001b14:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8001b16:	2364      	movs	r3, #100	@ 0x64
 8001b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8001b20:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001b24:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8001b26:	2300      	movs	r3, #0
 8001b28:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART7_RX;
 8001b2e:	2321      	movs	r3, #33	@ 0x21
 8001b30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8001b46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_6, &DMA_InitStruct);
 8001b60:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b64:	461a      	mov	r2, r3
 8001b66:	2106      	movs	r1, #6
 8001b68:	4822      	ldr	r0, [pc, #136]	@ (8001bf4 <MX_UART7_Init+0x184>)
 8001b6a:	f002 fbdd 	bl	8004328 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_6);
 8001b6e:	2106      	movs	r1, #6
 8001b70:	4820      	ldr	r0, [pc, #128]	@ (8001bf4 <MX_UART7_Init+0x184>)
 8001b72:	f7fe fe97 	bl	80008a4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_6);
 8001b76:	2106      	movs	r1, #6
 8001b78:	481e      	ldr	r0, [pc, #120]	@ (8001bf4 <MX_UART7_Init+0x184>)
 8001b7a:	f7fe fe73 	bl	8000864 <LL_DMA_EnableChannel>

  /* USER CODE END UART7_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 9600;
 8001b82:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001b86:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b94:	230c      	movs	r3, #12
 8001b96:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART7, &UART_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4811      	ldr	r0, [pc, #68]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001ba8:	f004 fe64 	bl	8006874 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8001bac:	2100      	movs	r1, #0
 8001bae:	480f      	ldr	r0, [pc, #60]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001bb0:	f7ff fb6e 	bl	8001290 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	480d      	ldr	r0, [pc, #52]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001bb8:	f7ff fb91 	bl	80012de <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART7);
 8001bbc:	480b      	ldr	r0, [pc, #44]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001bbe:	f7ff fb57 	bl	8001270 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART7);
 8001bc2:	480a      	ldr	r0, [pc, #40]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001bc4:	f7ff fbb2 	bl	800132c <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART7);
 8001bc8:	4808      	ldr	r0, [pc, #32]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001bca:	f7ff fbbf 	bl	800134c <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART7);
 8001bce:	4807      	ldr	r0, [pc, #28]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001bd0:	f7ff fbd2 	bl	8001378 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART7);
 8001bd4:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_UART7_Init+0x17c>)
 8001bd6:	f7ff fb3b 	bl	8001250 <LL_USART_Enable>
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	37d0      	adds	r7, #208	@ 0xd0
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	07001200 	.word	0x07001200
 8001be8:	42020000 	.word	0x42020000
 8001bec:	40007800 	.word	0x40007800
 8001bf0:	20025ac4 	.word	0x20025ac4
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0b4      	sub	sp, #208	@ 0xd0
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8001bfe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c02:	2294      	movs	r2, #148	@ 0x94
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f007 fee6 	bl	80099d8 <memset>

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	2220      	movs	r2, #32
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f007 fedf 	bl	80099d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 8001c2a:	4850      	ldr	r0, [pc, #320]	@ (8001d6c <MX_USART3_UART_Init+0x174>)
 8001c2c:	f7fe fff6 	bl	8000c1c <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001c30:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001c34:	f7ff fa60 	bl	80010f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f7ff fa41 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = UART3_TX_RS485_1_Pin|UART3_RX_RS485_1_Pin;
 8001c3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c44:	2302      	movs	r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001c54:	2307      	movs	r3, #7
 8001c56:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4844      	ldr	r0, [pc, #272]	@ (8001d70 <MX_USART3_UART_Init+0x178>)
 8001c5e:	f002 fe2c 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */
  DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART3, LL_USART_DMA_REG_DATA_RECEIVE);
 8001c62:	2101      	movs	r1, #1
 8001c64:	4843      	ldr	r0, [pc, #268]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001c66:	f7ff fbaa 	bl	80013be <LL_USART_DMA_GetRegAddr>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  DMA_InitStruct.DestAddress = (uint32_t)&RX_Buffer[Line1_BUF_Index];
 8001c6e:	4b42      	ldr	r3, [pc, #264]	@ (8001d78 <MX_USART3_UART_Init+0x180>)
 8001c70:	643b      	str	r3, [r7, #64]	@ 0x40
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8001c72:	2300      	movs	r3, #0
 8001c74:	647b      	str	r3, [r7, #68]	@ 0x44
  DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8001c76:	2300      	movs	r3, #0
 8001c78:	64bb      	str	r3, [r7, #72]	@ 0x48
  DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  DMA_InitStruct.SrcBurstLength = 1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	653b      	str	r3, [r7, #80]	@ 0x50
  DMA_InitStruct.DestBurstLength = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	657b      	str	r3, [r7, #84]	@ 0x54
  DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	65bb      	str	r3, [r7, #88]	@ 0x58
  DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	663b      	str	r3, [r7, #96]	@ 0x60
  DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8001c92:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001c96:	667b      	str	r3, [r7, #100]	@ 0x64
  DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001c98:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8001c9e:	2364      	movs	r3, #100	@ 0x64
 8001ca0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8001ca8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cac:	677b      	str	r3, [r7, #116]	@ 0x74
  DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	67bb      	str	r3, [r7, #120]	@ 0x78
  DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART3_RX;
 8001cb6:	2319      	movs	r3, #25
 8001cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
  DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8001cce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_0, &DMA_InitStruct);
 8001ce8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cec:	461a      	mov	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4822      	ldr	r0, [pc, #136]	@ (8001d7c <MX_USART3_UART_Init+0x184>)
 8001cf2:	f002 fb19 	bl	8004328 <LL_DMA_Init>

  LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_0);
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4820      	ldr	r0, [pc, #128]	@ (8001d7c <MX_USART3_UART_Init+0x184>)
 8001cfa:	f7fe fdd3 	bl	80008a4 <LL_DMA_EnableIT_TC>

  LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_0);
 8001cfe:	2100      	movs	r1, #0
 8001d00:	481e      	ldr	r0, [pc, #120]	@ (8001d7c <MX_USART3_UART_Init+0x184>)
 8001d02:	f7fe fdaf 	bl	8000864 <LL_DMA_EnableChannel>

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 9600;
 8001d0a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001d0e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART3, &USART_InitStruct);
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4811      	ldr	r0, [pc, #68]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001d30:	f004 fda0 	bl	8006874 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8001d34:	2100      	movs	r1, #0
 8001d36:	480f      	ldr	r0, [pc, #60]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001d38:	f7ff faaa 	bl	8001290 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001d40:	f7ff facd 	bl	80012de <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 8001d44:	480b      	ldr	r0, [pc, #44]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001d46:	f7ff fa93 	bl	8001270 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART3);
 8001d4a:	480a      	ldr	r0, [pc, #40]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001d4c:	f7ff faee 	bl	800132c <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART3);
 8001d50:	4808      	ldr	r0, [pc, #32]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001d52:	f7ff fafb 	bl	800134c <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART3);
 8001d56:	4807      	ldr	r0, [pc, #28]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001d58:	f7ff fb0e 	bl	8001378 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART3);
 8001d5c:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <MX_USART3_UART_Init+0x17c>)
 8001d5e:	f7ff fa77 	bl	8001250 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	37d0      	adds	r7, #208	@ 0xd0
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	07000600 	.word	0x07000600
 8001d70:	42020400 	.word	0x42020400
 8001d74:	40004800 	.word	0x40004800
 8001d78:	2002586c 	.word	0x2002586c
 8001d7c:	40020000 	.word	0x40020000

08001d80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0b4      	sub	sp, #208	@ 0xd0
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8001d86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d8a:	2294      	movs	r2, #148	@ 0x94
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f007 fe22 	bl	80099d8 <memset>

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	2220      	movs	r2, #32
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f007 fe1b 	bl	80099d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART6_CLKSOURCE_PCLK1);
 8001db2:	484f      	ldr	r0, [pc, #316]	@ (8001ef0 <MX_USART6_UART_Init+0x170>)
 8001db4:	f7fe ff32 	bl	8000c1c <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART6);
 8001db8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001dbc:	f7ff f99c 	bl	80010f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001dc0:	2004      	movs	r0, #4
 8001dc2:	f7ff f97d 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = UART6_TX_RS485_4_Pin|UART6_RX_RS485_4_Pin;
 8001dc6:	23c0      	movs	r3, #192	@ 0xc0
 8001dc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4844      	ldr	r0, [pc, #272]	@ (8001ef4 <MX_USART6_UART_Init+0x174>)
 8001de4:	f002 fd69 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN USART6_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART6, LL_USART_DMA_REG_DATA_RECEIVE);
 8001de8:	2101      	movs	r1, #1
 8001dea:	4843      	ldr	r0, [pc, #268]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001dec:	f7ff fae7 	bl	80013be <LL_USART_DMA_GetRegAddr>
 8001df0:	4603      	mov	r3, r0
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&RX_Buffer[Line4_BUF_Index];
 8001df4:	4b41      	ldr	r3, [pc, #260]	@ (8001efc <MX_USART6_UART_Init+0x17c>)
 8001df6:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8001e00:	2300      	movs	r3, #0
 8001e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8001e14:	2300      	movs	r3, #0
 8001e16:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8001e18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001e1c:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001e1e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001e22:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8001e24:	2364      	movs	r3, #100	@ 0x64
 8001e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8001e2e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e32:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8001e34:	2300      	movs	r3, #0
 8001e36:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART6_RX;
 8001e3c:	231f      	movs	r3, #31
 8001e3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8001e54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_3, &DMA_InitStruct);
 8001e6e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e72:	461a      	mov	r2, r3
 8001e74:	2103      	movs	r1, #3
 8001e76:	4822      	ldr	r0, [pc, #136]	@ (8001f00 <MX_USART6_UART_Init+0x180>)
 8001e78:	f002 fa56 	bl	8004328 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_3);
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	4820      	ldr	r0, [pc, #128]	@ (8001f00 <MX_USART6_UART_Init+0x180>)
 8001e80:	f7fe fd10 	bl	80008a4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_3);
 8001e84:	2103      	movs	r1, #3
 8001e86:	481e      	ldr	r0, [pc, #120]	@ (8001f00 <MX_USART6_UART_Init+0x180>)
 8001e88:	f7fe fcec 	bl	8000864 <LL_DMA_EnableChannel>

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 9600;
 8001e90:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001e94:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART6, &USART_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4810      	ldr	r0, [pc, #64]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001eb6:	f004 fcdd 	bl	8006874 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	480e      	ldr	r0, [pc, #56]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001ebe:	f7ff f9e7 	bl	8001290 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001ec6:	f7ff fa0a 	bl	80012de <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8001eca:	480b      	ldr	r0, [pc, #44]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001ecc:	f7ff f9d0 	bl	8001270 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART6);
 8001ed0:	4809      	ldr	r0, [pc, #36]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001ed2:	f7ff fa2b 	bl	800132c <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART6);
 8001ed6:	4808      	ldr	r0, [pc, #32]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001ed8:	f7ff fa38 	bl	800134c <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART6);
 8001edc:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001ede:	f7ff fa4b 	bl	8001378 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART6);
 8001ee2:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_USART6_UART_Init+0x178>)
 8001ee4:	f7ff f9b4 	bl	8001250 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	37d0      	adds	r7, #208	@ 0xd0
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	07000f00 	.word	0x07000f00
 8001ef4:	42020800 	.word	0x42020800
 8001ef8:	40006400 	.word	0x40006400
 8001efc:	20025998 	.word	0x20025998
 8001f00:	40020000 	.word	0x40020000

08001f04 <MX_USART11_UART_Init>:
  * @brief USART11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART11_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b0b4      	sub	sp, #208	@ 0xd0
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART11_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8001f0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f0e:	2294      	movs	r2, #148	@ 0x94
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f007 fd60 	bl	80099d8 <memset>

  /* USER CODE END USART11_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f007 fd59 	bl	80099d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART11_CLKSOURCE_PCLK1);
 8001f36:	484f      	ldr	r0, [pc, #316]	@ (8002074 <MX_USART11_UART_Init+0x170>)
 8001f38:	f7fe fe70 	bl	8000c1c <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART11);
 8001f3c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001f40:	f7ff f8da 	bl	80010f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7ff f8bb 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**USART11 GPIO Configuration
  PA6   ------> USART11_TX
  PA7   ------> USART11_RX
  */
  GPIO_InitStruct.Pin = UART11_TX_RS485_6_Pin|UART11_RX_RS485_6_Pin;
 8001f4a:	23c0      	movs	r3, #192	@ 0xc0
 8001f4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4844      	ldr	r0, [pc, #272]	@ (8002078 <MX_USART11_UART_Init+0x174>)
 8001f68:	f002 fca7 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN USART11_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART11, LL_USART_DMA_REG_DATA_RECEIVE);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4843      	ldr	r0, [pc, #268]	@ (800207c <MX_USART11_UART_Init+0x178>)
 8001f70:	f7ff fa25 	bl	80013be <LL_USART_DMA_GetRegAddr>
 8001f74:	4603      	mov	r3, r0
 8001f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&RX_Buffer[Line6_BUF_Index];
 8001f78:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <MX_USART11_UART_Init+0x17c>)
 8001f7a:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8001f80:	2300      	movs	r3, #0
 8001f82:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8001f84:	2300      	movs	r3, #0
 8001f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8001f9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001fa0:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001fa2:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8001fa8:	2364      	movs	r3, #100	@ 0x64
 8001faa:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8001fb2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001fb6:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART11_RX;
 8001fc0:	2329      	movs	r3, #41	@ 0x29
 8001fc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8001fd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_5, &DMA_InitStruct);
 8001ff2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	4822      	ldr	r0, [pc, #136]	@ (8002084 <MX_USART11_UART_Init+0x180>)
 8001ffc:	f002 f994 	bl	8004328 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_5);
 8002000:	2105      	movs	r1, #5
 8002002:	4820      	ldr	r0, [pc, #128]	@ (8002084 <MX_USART11_UART_Init+0x180>)
 8002004:	f7fe fc4e 	bl	80008a4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_5);
 8002008:	2105      	movs	r1, #5
 800200a:	481e      	ldr	r0, [pc, #120]	@ (8002084 <MX_USART11_UART_Init+0x180>)
 800200c:	f7fe fc2a 	bl	8000864 <LL_DMA_EnableChannel>

  /* USER CODE END USART11_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 9600;
 8002014:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002018:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002026:	230c      	movs	r3, #12
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800202e:	2300      	movs	r3, #0
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART11, &USART_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4810      	ldr	r0, [pc, #64]	@ (800207c <MX_USART11_UART_Init+0x178>)
 800203a:	f004 fc1b 	bl	8006874 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART11, LL_USART_FIFOTHRESHOLD_1_8);
 800203e:	2100      	movs	r1, #0
 8002040:	480e      	ldr	r0, [pc, #56]	@ (800207c <MX_USART11_UART_Init+0x178>)
 8002042:	f7ff f925 	bl	8001290 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART11, LL_USART_FIFOTHRESHOLD_1_8);
 8002046:	2100      	movs	r1, #0
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <MX_USART11_UART_Init+0x178>)
 800204a:	f7ff f948 	bl	80012de <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART11);
 800204e:	480b      	ldr	r0, [pc, #44]	@ (800207c <MX_USART11_UART_Init+0x178>)
 8002050:	f7ff f90e 	bl	8001270 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART11);
 8002054:	4809      	ldr	r0, [pc, #36]	@ (800207c <MX_USART11_UART_Init+0x178>)
 8002056:	f7ff f969 	bl	800132c <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART11);
 800205a:	4808      	ldr	r0, [pc, #32]	@ (800207c <MX_USART11_UART_Init+0x178>)
 800205c:	f7ff f976 	bl	800134c <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART11);
 8002060:	4806      	ldr	r0, [pc, #24]	@ (800207c <MX_USART11_UART_Init+0x178>)
 8002062:	f7ff f989 	bl	8001378 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART11);
 8002066:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_USART11_UART_Init+0x178>)
 8002068:	f7ff f8f2 	bl	8001250 <LL_USART_Enable>
  /* USER CODE BEGIN USART11_Init 2 */

  /* USER CODE END USART11_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	37d0      	adds	r7, #208	@ 0xd0
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	07000004 	.word	0x07000004
 8002078:	42020000 	.word	0x42020000
 800207c:	40006c00 	.word	0x40006c00
 8002080:	20025a60 	.word	0x20025a60
 8002084:	40020000 	.word	0x40020000

08002088 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0b6      	sub	sp, #216	@ 0xd8
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800208e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002092:	2228      	movs	r2, #40	@ 0x28
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f007 fc9e 	bl	80099d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
  LL_DMA_InitTypeDef DMA_InitStruct = {0};
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2294      	movs	r2, #148	@ 0x94
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f007 fc8f 	bl	80099d8 <memset>

  LL_RCC_SetSPIClockSource(LL_RCC_SPI3_CLKSOURCE_PLL2P);
 80020ba:	482c      	ldr	r0, [pc, #176]	@ (800216c <MX_SPI3_Init+0xe4>)
 80020bc:	f7fe fdda 	bl	8000c74 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80020c0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80020c4:	f7ff f818 	bl	80010f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80020c8:	2004      	movs	r0, #4
 80020ca:	f7fe fff9 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80020ce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80020d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80020ee:	2306      	movs	r3, #6
 80020f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80020f8:	4619      	mov	r1, r3
 80020fa:	481d      	ldr	r0, [pc, #116]	@ (8002170 <MX_SPI3_Init+0xe8>)
 80020fc:	f002 fbdd 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
    SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002106:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800210a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT; //LL_SPI_DATAWIDTH_16BIT;
 800210e:	2307      	movs	r3, #7
 8002110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002120:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002124:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002128:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800212c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	SPI_InitStruct.CRCPoly = 0x7;
 800213c:	2307      	movs	r3, #7
 800213e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002142:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002146:	4619      	mov	r1, r3
 8002148:	480a      	ldr	r0, [pc, #40]	@ (8002174 <MX_SPI3_Init+0xec>)
 800214a:	f004 fa77 	bl	800663c <LL_SPI_Init>
	LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800214e:	2100      	movs	r1, #0
 8002150:	4808      	ldr	r0, [pc, #32]	@ (8002174 <MX_SPI3_Init+0xec>)
 8002152:	f7ff f847 	bl	80011e4 <LL_SPI_SetStandard>
	LL_SPI_EnableNSSPulseMgt(SPI3);
 8002156:	4807      	ldr	r0, [pc, #28]	@ (8002174 <MX_SPI3_Init+0xec>)
 8002158:	f7ff f86a 	bl	8001230 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 800215c:	2100      	movs	r1, #0
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_SPI3_Init+0xec>)
 8002160:	f7ff f853 	bl	800120a <LL_SPI_SetFIFOThreshold>
  //LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
  //LL_SPI_DMA_GetTxRegAddr(const SPI_TypeDef *SPIx)
  //LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
  /* USER CODE END SPI3_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	37d8      	adds	r7, #216	@ 0xd8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	07010608 	.word	0x07010608
 8002170:	42020800 	.word	0x42020800
 8002174:	40003c00 	.word	0x40003c00

08002178 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b090      	sub	sp, #64	@ 0x40
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800217e:	f107 0318 	add.w	r3, r7, #24
 8002182:	2228      	movs	r2, #40	@ 0x28
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f007 fc26 	bl	80099d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	463b      	mov	r3, r7
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]
 800219a:	615a      	str	r2, [r3, #20]

  LL_RCC_SetSPIClockSource(LL_RCC_SPI6_CLKSOURCE_PCLK2);
 800219c:	4823      	ldr	r0, [pc, #140]	@ (800222c <MX_SPI6_Init+0xb4>)
 800219e:	f7fe fd69 	bl	8000c74 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI6);
 80021a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80021a6:	f7fe ffc3 	bl	8001130 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80021aa:	2002      	movs	r0, #2
 80021ac:	f7fe ff88 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PB3(JTDO/TRACESWO)   ------> SPI6_SCK
  PB4(NJTRST)   ------> SPI6_MISO
  PB5   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80021b0:	2338      	movs	r3, #56	@ 0x38
 80021b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021b4:	2302      	movs	r3, #2
 80021b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021c0:	2300      	movs	r3, #0
 80021c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80021c4:	2308      	movs	r3, #8
 80021c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	4818      	ldr	r0, [pc, #96]	@ (8002230 <MX_SPI6_Init+0xb8>)
 80021ce:	f002 fb74 	bl	80048ba <LL_GPIO_Init>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80021d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021da:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80021dc:	2307      	movs	r3, #7
 80021de:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80021e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80021ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 80021ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021f2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 0x7;
 80021fc:	2307      	movs	r3, #7
 80021fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	4619      	mov	r1, r3
 8002206:	480b      	ldr	r0, [pc, #44]	@ (8002234 <MX_SPI6_Init+0xbc>)
 8002208:	f004 fa18 	bl	800663c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 800220c:	2100      	movs	r1, #0
 800220e:	4809      	ldr	r0, [pc, #36]	@ (8002234 <MX_SPI6_Init+0xbc>)
 8002210:	f7fe ffe8 	bl	80011e4 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 8002214:	4807      	ldr	r0, [pc, #28]	@ (8002234 <MX_SPI6_Init+0xbc>)
 8002216:	f7ff f80b 	bl	8001230 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_SetFIFOThreshold(SPI6, LL_SPI_FIFO_TH_01DATA);
 800221a:	2100      	movs	r1, #0
 800221c:	4805      	ldr	r0, [pc, #20]	@ (8002234 <MX_SPI6_Init+0xbc>)
 800221e:	f7fe fff4 	bl	800120a <LL_SPI_SetFIFOThreshold>
  /* USER CODE END SPI6_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	3740      	adds	r7, #64	@ 0x40
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	07000f08 	.word	0x07000f08
 8002230:	42020400 	.word	0x42020400
 8002234:	40015000 	.word	0x40015000

08002238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223e:	463b      	mov	r3, r7
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
 800224c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800224e:	2004      	movs	r0, #4
 8002250:	f7fe ff36 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8002254:	2080      	movs	r0, #128	@ 0x80
 8002256:	f7fe ff33 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800225a:	2001      	movs	r0, #1
 800225c:	f7fe ff30 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002260:	2002      	movs	r0, #2
 8002262:	f7fe ff2d 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8002266:	2008      	movs	r0, #8
 8002268:	f7fe ff2a 	bl	80010c0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, SPI_TFT_CS_Pin|TFT_RS_Pin|Touch_CS_Pin|RS485_2_DE_Pin
 800226c:	f244 3103 	movw	r1, #17155	@ 0x4303
 8002270:	481b      	ldr	r0, [pc, #108]	@ (80022e0 <MX_GPIO_Init+0xa8>)
 8002272:	f7ff f8ba 	bl	80013ea <LL_GPIO_ResetOutputPin>
                          |RS485_5_DE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, RS485_1_DE_Pin|RS485_6_DE_Pin|RS485_7_DE_Pin|RS485_3_DE_Pin
 8002276:	f24c 0107 	movw	r1, #49159	@ 0xc007
 800227a:	481a      	ldr	r0, [pc, #104]	@ (80022e4 <MX_GPIO_Init+0xac>)
 800227c:	f7ff f8b5 	bl	80013ea <LL_GPIO_ResetOutputPin>
                          |RS485_4_DE_Pin);

  /**/
  GPIO_InitStruct.Pin = SPI_TFT_CS_Pin|TFT_RS_Pin|Touch_CS_Pin|RS485_2_DE_Pin
 8002280:	f244 3303 	movw	r3, #17155	@ 0x4303
 8002284:	603b      	str	r3, [r7, #0]
                          |RS485_5_DE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002286:	2301      	movs	r3, #1
 8002288:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800228a:	2302      	movs	r3, #2
 800228c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	463b      	mov	r3, r7
 8002298:	4619      	mov	r1, r3
 800229a:	4811      	ldr	r0, [pc, #68]	@ (80022e0 <MX_GPIO_Init+0xa8>)
 800229c:	f002 fb0d 	bl	80048ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Touch_IRQ_Pin;
 80022a0:	2304      	movs	r3, #4
 80022a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80022a4:	2300      	movs	r3, #0
 80022a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Touch_IRQ_GPIO_Port, &GPIO_InitStruct);
 80022ac:	463b      	mov	r3, r7
 80022ae:	4619      	mov	r1, r3
 80022b0:	480b      	ldr	r0, [pc, #44]	@ (80022e0 <MX_GPIO_Init+0xa8>)
 80022b2:	f002 fb02 	bl	80048ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RS485_1_DE_Pin|RS485_6_DE_Pin|RS485_7_DE_Pin|RS485_3_DE_Pin
 80022b6:	f24c 0307 	movw	r3, #49159	@ 0xc007
 80022ba:	603b      	str	r3, [r7, #0]
                          |RS485_4_DE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80022bc:	2301      	movs	r3, #1
 80022be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80022c0:	2302      	movs	r3, #2
 80022c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	463b      	mov	r3, r7
 80022ce:	4619      	mov	r1, r3
 80022d0:	4804      	ldr	r0, [pc, #16]	@ (80022e4 <MX_GPIO_Init+0xac>)
 80022d2:	f002 faf2 	bl	80048ba <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	42020800 	.word	0x42020800
 80022e4:	42020400 	.word	0x42020400

080022e8 <LL_DMA_EnableChannel>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80022f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <LL_DMA_EnableChannel+0x3c>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	4907      	ldr	r1, [pc, #28]	@ (8002324 <LL_DMA_EnableChannel+0x3c>)
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	440a      	add	r2, r1
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6153      	str	r3, [r2, #20]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	08009b28 	.word	0x08009b28

08002328 <LL_DMA_DisableChannel>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR,
 8002336:	4a0b      	ldr	r2, [pc, #44]	@ (8002364 <LL_DMA_DisableChannel+0x3c>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4413      	add	r3, r2
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4907      	ldr	r1, [pc, #28]	@ (8002364 <LL_DMA_DisableChannel+0x3c>)
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	440a      	add	r2, r1
 8002350:	f043 0306 	orr.w	r3, r3, #6
 8002354:	6153      	str	r3, [r2, #20]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	08009b28 	.word	0x08009b28

08002368 <LL_DMA_SuspendChannel>:
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_SUSP);
 8002376:	4a0b      	ldr	r2, [pc, #44]	@ (80023a4 <LL_DMA_SuspendChannel+0x3c>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	4907      	ldr	r1, [pc, #28]	@ (80023a4 <LL_DMA_SuspendChannel+0x3c>)
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	440a      	add	r2, r1
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6153      	str	r3, [r2, #20]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	08009b28 	.word	0x08009b28

080023a8 <LL_DMA_SetBlkDataLength>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BNDT,
 80023b8:	4a0c      	ldr	r2, [pc, #48]	@ (80023ec <LL_DMA_SetBlkDataLength+0x44>)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	4413      	add	r3, r2
 80023c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	4908      	ldr	r1, [pc, #32]	@ (80023ec <LL_DMA_SetBlkDataLength+0x44>)
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	440a      	add	r2, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	648b      	str	r3, [r1, #72]	@ 0x48
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	08009b28 	.word	0x08009b28

080023f0 <LL_DMA_SetDestAddress>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 8002400:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <LL_DMA_SetDestAddress+0x30>)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	4413      	add	r3, r2
 800240c:	461a      	mov	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	08009b28 	.word	0x08009b28

08002424 <LL_DMA_ClearFlag_SUSP>:
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_SUSPF);
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <LL_DMA_ClearFlag_SUSP+0x30>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4413      	add	r3, r2
 800243e:	461a      	mov	r2, r3
 8002440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002444:	60d3      	str	r3, [r2, #12]
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	08009b28 	.word	0x08009b28

08002458 <LL_DMA_ClearFlag_HT>:
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_HTF);
 8002466:	4a08      	ldr	r2, [pc, #32]	@ (8002488 <LL_DMA_ClearFlag_HT+0x30>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	461a      	mov	r2, r3
 8002474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002478:	60d3      	str	r3, [r2, #12]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	08009b28 	.word	0x08009b28

0800248c <LL_DMA_ClearFlag_TC>:
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_TCF);
 800249a:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <LL_DMA_ClearFlag_TC+0x30>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	461a      	mov	r2, r3
 80024a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024ac:	60d3      	str	r3, [r2, #12]
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	08009b28 	.word	0x08009b28

080024c0 <LL_DMA_EnableIT_TC>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80024ce:	4a0b      	ldr	r2, [pc, #44]	@ (80024fc <LL_DMA_EnableIT_TC+0x3c>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	4907      	ldr	r1, [pc, #28]	@ (80024fc <LL_DMA_EnableIT_TC+0x3c>)
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	440a      	add	r2, r1
 80024e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ec:	6153      	str	r3, [r2, #20]
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	08009b28 	.word	0x08009b28

08002500 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800250e:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <LL_DMA_DisableIT_TC+0x3c>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	4907      	ldr	r1, [pc, #28]	@ (800253c <LL_DMA_DisableIT_TC+0x3c>)
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	440a      	add	r2, r1
 8002528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800252c:	6153      	str	r3, [r2, #20]
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	08009b28 	.word	0x08009b28

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <NMI_Handler+0x4>

08002548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <MemManage_Handler+0x4>

08002558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <UsageFault_Handler+0x4>

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */
	//LL_DMA_IsActiveFlag_TC(GPDMA1, LL_DMA_CHANNEL_0)

	LL_DMA_DisableIT_TC(GPDMA1, LL_DMA_CHANNEL_0);
 800257c:	2100      	movs	r1, #0
 800257e:	4816      	ldr	r0, [pc, #88]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 8002580:	f7ff ffbe 	bl	8002500 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(GPDMA1, LL_DMA_CHANNEL_0);
 8002584:	2100      	movs	r1, #0
 8002586:	4814      	ldr	r0, [pc, #80]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 8002588:	f7ff feee 	bl	8002368 <LL_DMA_SuspendChannel>
		//LL_DMA_IsActiveFlag_SUSP(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_DisableChannel(GPDMA1, LL_DMA_CHANNEL_0);
 800258c:	2100      	movs	r1, #0
 800258e:	4812      	ldr	r0, [pc, #72]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 8002590:	f7ff feca 	bl	8002328 <LL_DMA_DisableChannel>
		//LL_DMA_IsEnabledChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_ClearFlag_HT(GPDMA1, LL_DMA_CHANNEL_0);
 8002594:	2100      	movs	r1, #0
 8002596:	4810      	ldr	r0, [pc, #64]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 8002598:	f7ff ff5e 	bl	8002458 <LL_DMA_ClearFlag_HT>
		LL_DMA_ClearFlag_TC(GPDMA1, LL_DMA_CHANNEL_0);
 800259c:	2100      	movs	r1, #0
 800259e:	480e      	ldr	r0, [pc, #56]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 80025a0:	f7ff ff74 	bl	800248c <LL_DMA_ClearFlag_TC>
		LL_DMA_ClearFlag_SUSP(GPDMA1, LL_DMA_CHANNEL_0);
 80025a4:	2100      	movs	r1, #0
 80025a6:	480c      	ldr	r0, [pc, #48]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 80025a8:	f7ff ff3c 	bl	8002424 <LL_DMA_ClearFlag_SUSP>
		//LL_DMA_ResetChannel(GPDMA1, LL_DMA_CHANNEL_0);
		//LL_DMA_SuspendChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_IsSuspendedChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_ResumeChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_SetDestAddress(GPDMA1, LL_DMA_CHANNEL_0, &RX_Buffer);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <GPDMA1_Channel0_IRQHandler+0x64>)
 80025ae:	461a      	mov	r2, r3
 80025b0:	2100      	movs	r1, #0
 80025b2:	4809      	ldr	r0, [pc, #36]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 80025b4:	f7ff ff1c 	bl	80023f0 <LL_DMA_SetDestAddress>
		LL_DMA_SetBlkDataLength(GPDMA1, LL_DMA_CHANNEL_0, sizeof(RX_Buffer));
 80025b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025bc:	2100      	movs	r1, #0
 80025be:	4806      	ldr	r0, [pc, #24]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 80025c0:	f7ff fef2 	bl	80023a8 <LL_DMA_SetBlkDataLength>
		//LL_DMA_GetBlkDataLength(const DMA_TypeDef *DMAx, uint32_t Channel)

		LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_0);
 80025c4:	2100      	movs	r1, #0
 80025c6:	4804      	ldr	r0, [pc, #16]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 80025c8:	f7ff ff7a 	bl	80024c0 <LL_DMA_EnableIT_TC>
		LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_0);
 80025cc:	2100      	movs	r1, #0
 80025ce:	4802      	ldr	r0, [pc, #8]	@ (80025d8 <GPDMA1_Channel0_IRQHandler+0x60>)
 80025d0:	f7ff fe8a 	bl	80022e8 <LL_DMA_EnableChannel>
  /* USER CODE END GPDMA1_Channel0_IRQn 0 */

  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40020000 	.word	0x40020000
 80025dc:	2002586c 	.word	0x2002586c

080025e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025e0:	480d      	ldr	r0, [pc, #52]	@ (8002618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025e4:	f000 f826 	bl	8002634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e8:	480c      	ldr	r0, [pc, #48]	@ (800261c <LoopForever+0x6>)
  ldr r1, =_edata
 80025ea:	490d      	ldr	r1, [pc, #52]	@ (8002620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <LoopForever+0xe>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f0:	e002      	b.n	80025f8 <LoopCopyDataInit>

080025f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f6:	3304      	adds	r3, #4

080025f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025fc:	d3f9      	bcc.n	80025f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002600:	4c0a      	ldr	r4, [pc, #40]	@ (800262c <LoopForever+0x16>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002604:	e001      	b.n	800260a <LoopFillZerobss>

08002606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002608:	3204      	adds	r2, #4

0800260a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800260c:	d3fb      	bcc.n	8002606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800260e:	f007 f9eb 	bl	80099e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002612:	f7fe fef9 	bl	8001408 <main>

08002616 <LoopForever>:

LoopForever:
    b LoopForever
 8002616:	e7fe      	b.n	8002616 <LoopForever>
  ldr   r0, =_estack
 8002618:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002624:	0800b288 	.word	0x0800b288
  ldr r2, =_sbss
 8002628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800262c:	200287f0 	.word	0x200287f0

08002630 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC1_IRQHandler>
	...

08002634 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800263a:	4b35      	ldr	r3, [pc, #212]	@ (8002710 <SystemInit+0xdc>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	4a33      	ldr	r2, [pc, #204]	@ (8002710 <SystemInit+0xdc>)
 8002642:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002646:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800264a:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <SystemInit+0xe0>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002650:	4b30      	ldr	r3, [pc, #192]	@ (8002714 <SystemInit+0xe0>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002656:	4b2f      	ldr	r3, [pc, #188]	@ (8002714 <SystemInit+0xe0>)
 8002658:	2200      	movs	r2, #0
 800265a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800265c:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <SystemInit+0xe0>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	492c      	ldr	r1, [pc, #176]	@ (8002714 <SystemInit+0xe0>)
 8002662:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <SystemInit+0xe4>)
 8002664:	4013      	ands	r3, r2
 8002666:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002668:	4b2a      	ldr	r3, [pc, #168]	@ (8002714 <SystemInit+0xe0>)
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800266e:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <SystemInit+0xe0>)
 8002670:	2200      	movs	r2, #0
 8002672:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002674:	4b27      	ldr	r3, [pc, #156]	@ (8002714 <SystemInit+0xe0>)
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800267a:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <SystemInit+0xe0>)
 800267c:	4a27      	ldr	r2, [pc, #156]	@ (800271c <SystemInit+0xe8>)
 800267e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002680:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <SystemInit+0xe0>)
 8002682:	2200      	movs	r2, #0
 8002684:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002686:	4b23      	ldr	r3, [pc, #140]	@ (8002714 <SystemInit+0xe0>)
 8002688:	4a24      	ldr	r2, [pc, #144]	@ (800271c <SystemInit+0xe8>)
 800268a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800268c:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <SystemInit+0xe0>)
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002692:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <SystemInit+0xe0>)
 8002694:	4a21      	ldr	r2, [pc, #132]	@ (800271c <SystemInit+0xe8>)
 8002696:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <SystemInit+0xe0>)
 800269a:	2200      	movs	r2, #0
 800269c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800269e:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <SystemInit+0xe0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002714 <SystemInit+0xe0>)
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <SystemInit+0xe0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026b0:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <SystemInit+0xdc>)
 80026b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026b6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <SystemInit+0xec>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80026c0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80026c8:	d003      	beq.n	80026d2 <SystemInit+0x9e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80026d0:	d117      	bne.n	8002702 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80026d2:	4b13      	ldr	r3, [pc, #76]	@ (8002720 <SystemInit+0xec>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <SystemInit+0xec>)
 80026e0:	4a10      	ldr	r2, [pc, #64]	@ (8002724 <SystemInit+0xf0>)
 80026e2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <SystemInit+0xec>)
 80026e6:	4a10      	ldr	r2, [pc, #64]	@ (8002728 <SystemInit+0xf4>)
 80026e8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <SystemInit+0xec>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002720 <SystemInit+0xec>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <SystemInit+0xec>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4a09      	ldr	r2, [pc, #36]	@ (8002720 <SystemInit+0xec>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	61d3      	str	r3, [r2, #28]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	44020c00 	.word	0x44020c00
 8002718:	eae2eae3 	.word	0xeae2eae3
 800271c:	01010280 	.word	0x01010280
 8002720:	40022000 	.word	0x40022000
 8002724:	08192a3b 	.word	0x08192a3b
 8002728:	4c5d6e7f 	.word	0x4c5d6e7f

0800272c <GUI_DrawPoint>:
                y:the y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
********************************************************************/
void GUI_DrawPoint(u16 x,u16 y,u16 color)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
 8002736:	460b      	mov	r3, r1
 8002738:	80bb      	strh	r3, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);//���ù��λ�� 
 800273e:	88ba      	ldrh	r2, [r7, #4]
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f000 ff4b 	bl	80035e0 <LCD_SetCursor>
	Lcd_WriteData_16Bit(color); 
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fd57 	bl	8003200 <Lcd_WriteData_16Bit>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{  
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	4604      	mov	r4, r0
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	461a      	mov	r2, r3
 800276a:	4623      	mov	r3, r4
 800276c:	80fb      	strh	r3, [r7, #6]
 800276e:	4603      	mov	r3, r0
 8002770:	80bb      	strh	r3, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	807b      	strh	r3, [r7, #2]
 8002776:	4613      	mov	r3, r2
 8002778:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;      
 800277a:	4b62      	ldr	r3, [pc, #392]	@ (8002904 <LCD_ShowChar+0x1a8>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	817b      	strh	r3, [r7, #10]
		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8002780:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002784:	3b20      	subs	r3, #32
 8002786:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 800278a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	4413      	add	r3, r2
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29c      	uxth	r4, r3
 800279e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	88bb      	ldrh	r3, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	88b9      	ldrh	r1, [r7, #4]
 80027b0:	88f8      	ldrh	r0, [r7, #6]
 80027b2:	4622      	mov	r2, r4
 80027b4:	f000 fec0 	bl	8003538 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 80027b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d143      	bne.n	8002848 <LCD_ShowChar+0xec>
	{		
		for(pos=0;pos<size;pos++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	73bb      	strb	r3, [r7, #14]
 80027c4:	e03a      	b.n	800283c <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 80027c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d10c      	bne.n	80027e8 <LCD_ShowChar+0x8c>
 80027ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027d2:	7bb9      	ldrb	r1, [r7, #14]
 80027d4:	484c      	ldr	r0, [pc, #304]	@ (8002908 <LCD_ShowChar+0x1ac>)
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4403      	add	r3, r0
 80027e0:	440b      	add	r3, r1
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	e008      	b.n	80027fa <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 80027e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	4947      	ldr	r1, [pc, #284]	@ (800290c <LCD_ShowChar+0x1b0>)
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	440a      	add	r2, r1
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	737b      	strb	r3, [r7, #13]
 80027fe:	e013      	b.n	8002828 <LCD_ShowChar+0xcc>
		    {                 
		        if(temp&0x01)Lcd_WriteData_16Bit(fc); 
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <LCD_ShowChar+0xb8>
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fcf7 	bl	8003200 <Lcd_WriteData_16Bit>
 8002812:	e003      	b.n	800281c <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc); 
 8002814:	883b      	ldrh	r3, [r7, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fcf2 	bl	8003200 <Lcd_WriteData_16Bit>
				temp>>=1; 
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8002822:	7b7b      	ldrb	r3, [r7, #13]
 8002824:	3301      	adds	r3, #1
 8002826:	737b      	strb	r3, [r7, #13]
 8002828:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	7b7a      	ldrb	r2, [r7, #13]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3e4      	bcc.n	8002800 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	3301      	adds	r3, #1
 800283a:	73bb      	strb	r3, [r7, #14]
 800283c:	7bba      	ldrb	r2, [r7, #14]
 800283e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002842:	429a      	cmp	r2, r3
 8002844:	d3bf      	bcc.n	80027c6 <LCD_ShowChar+0x6a>
 8002846:	e049      	b.n	80028dc <LCD_ShowChar+0x180>
		    }
			
		}	
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8002848:	2300      	movs	r3, #0
 800284a:	73bb      	strb	r3, [r7, #14]
 800284c:	e041      	b.n	80028d2 <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 800284e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d10c      	bne.n	8002870 <LCD_ShowChar+0x114>
 8002856:	f897 2020 	ldrb.w	r2, [r7, #32]
 800285a:	7bb9      	ldrb	r1, [r7, #14]
 800285c:	482a      	ldr	r0, [pc, #168]	@ (8002908 <LCD_ShowChar+0x1ac>)
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4403      	add	r3, r0
 8002868:	440b      	add	r3, r1
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e008      	b.n	8002882 <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 8002870:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002874:	7bbb      	ldrb	r3, [r7, #14]
 8002876:	4925      	ldr	r1, [pc, #148]	@ (800290c <LCD_ShowChar+0x1b0>)
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	440a      	add	r2, r1
 800287c:	4413      	add	r3, r2
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8002882:	2300      	movs	r3, #0
 8002884:	737b      	strb	r3, [r7, #13]
 8002886:	e01a      	b.n	80028be <LCD_ShowChar+0x162>
		    {   
				POINT_COLOR=fc;              
 8002888:	4a1e      	ldr	r2, [pc, #120]	@ (8002904 <LCD_ShowChar+0x1a8>)
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����    
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00c      	beq.n	80028b2 <LCD_ShowChar+0x156>
 8002898:	7b7b      	ldrb	r3, [r7, #13]
 800289a:	b29a      	uxth	r2, r3
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	4413      	add	r3, r2
 80028a0:	b298      	uxth	r0, r3
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	88bb      	ldrh	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	f000 fcc5 	bl	800323c <LCD_DrawPoint>
		        temp>>=1; 
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80028b8:	7b7b      	ldrb	r3, [r7, #13]
 80028ba:	3301      	adds	r3, #1
 80028bc:	737b      	strb	r3, [r7, #13]
 80028be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	7b7a      	ldrb	r2, [r7, #13]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3dd      	bcc.n	8002888 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	3301      	adds	r3, #1
 80028d0:	73bb      	strb	r3, [r7, #14]
 80028d2:	7bba      	ldrb	r2, [r7, #14]
 80028d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3b8      	bcc.n	800284e <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 80028dc:	4a09      	ldr	r2, [pc, #36]	@ (8002904 <LCD_ShowChar+0x1a8>)
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��    	   	 	  
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <LCD_ShowChar+0x1b4>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <LCD_ShowChar+0x1b4>)
 80028ec:	885b      	ldrh	r3, [r3, #2]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2100      	movs	r1, #0
 80028f4:	2000      	movs	r0, #0
 80028f6:	f000 fe1f 	bl	8003538 <LCD_SetWindows>
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	bf00      	nop
 8002904:	20025c62 	.word	0x20025c62
 8002908:	08009b60 	.word	0x08009b60
 800290c:	08009fd4 	.word	0x08009fd4
 8002910:	20025c54 	.word	0x20025c54

08002914 <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	4604      	mov	r4, r0
 800291c:	4608      	mov	r0, r1
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4623      	mov	r3, r4
 8002924:	80fb      	strh	r3, [r7, #6]
 8002926:	4603      	mov	r3, r0
 8002928:	80bb      	strh	r3, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	807b      	strh	r3, [r7, #2]
 800292e:	4613      	mov	r3, r2
 8002930:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//�Զ�ͳ�ƺ�����Ŀ
 8002936:	233e      	movs	r3, #62	@ 0x3e
 8002938:	813b      	strh	r3, [r7, #8]
	
			
	for (k=0;k<HZnum;k++) 
 800293a:	2300      	movs	r3, #0
 800293c:	81bb      	strh	r3, [r7, #12]
 800293e:	e084      	b.n	8002a4a <GUI_DrawFont16+0x136>
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8002940:	89ba      	ldrh	r2, [r7, #12]
 8002942:	494c      	ldr	r1, [pc, #304]	@ (8002a74 <GUI_DrawFont16+0x160>)
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	4413      	add	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	440b      	add	r3, r1
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d174      	bne.n	8002a42 <GUI_DrawFont16+0x12e>
 8002958:	89ba      	ldrh	r2, [r7, #12]
 800295a:	4946      	ldr	r1, [pc, #280]	@ (8002a74 <GUI_DrawFont16+0x160>)
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	440b      	add	r3, r1
 8002966:	3301      	adds	r3, #1
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	3301      	adds	r3, #1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d166      	bne.n	8002a42 <GUI_DrawFont16+0x12e>
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	330f      	adds	r3, #15
 8002978:	b29a      	uxth	r2, r3
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	330f      	adds	r3, #15
 800297e:	b29b      	uxth	r3, r3
 8002980:	88b9      	ldrh	r1, [r7, #4]
 8002982:	88f8      	ldrh	r0, [r7, #6]
 8002984:	f000 fdd8 	bl	8003538 <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	e056      	b.n	8002a3c <GUI_DrawFont16+0x128>
		    {
				for(j=0;j<8;j++)
 800298e:	2300      	movs	r3, #0
 8002990:	73bb      	strb	r3, [r7, #14]
 8002992:	e04d      	b.n	8002a30 <GUI_DrawFont16+0x11c>
		    	{	
					if(!mode) //�ǵ��ӷ�ʽ
 8002994:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	d11c      	bne.n	80029d6 <GUI_DrawFont16+0xc2>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 800299c:	89ba      	ldrh	r2, [r7, #12]
 800299e:	7bf9      	ldrb	r1, [r7, #15]
 80029a0:	4834      	ldr	r0, [pc, #208]	@ (8002a74 <GUI_DrawFont16+0x160>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4403      	add	r3, r0
 80029ac:	440b      	add	r3, r1
 80029ae:	3302      	adds	r3, #2
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	7bbb      	ldrb	r3, [r7, #14]
 80029b6:	2280      	movs	r2, #128	@ 0x80
 80029b8:	fa42 f303 	asr.w	r3, r2, r3
 80029bc:	400b      	ands	r3, r1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <GUI_DrawFont16+0xb8>
 80029c2:	887b      	ldrh	r3, [r7, #2]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fc1b 	bl	8003200 <Lcd_WriteData_16Bit>
 80029ca:	e02e      	b.n	8002a2a <GUI_DrawFont16+0x116>
						else Lcd_WriteData_16Bit(bc);
 80029cc:	883b      	ldrh	r3, [r7, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fc16 	bl	8003200 <Lcd_WriteData_16Bit>
 80029d4:	e029      	b.n	8002a2a <GUI_DrawFont16+0x116>
					}
					else
					{
						POINT_COLOR=fc;
 80029d6:	4a28      	ldr	r2, [pc, #160]	@ (8002a78 <GUI_DrawFont16+0x164>)
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	8013      	strh	r3, [r2, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 80029dc:	89ba      	ldrh	r2, [r7, #12]
 80029de:	7bf9      	ldrb	r1, [r7, #15]
 80029e0:	4824      	ldr	r0, [pc, #144]	@ (8002a74 <GUI_DrawFont16+0x160>)
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4403      	add	r3, r0
 80029ec:	440b      	add	r3, r1
 80029ee:	3302      	adds	r3, #2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	7bbb      	ldrb	r3, [r7, #14]
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	fa42 f303 	asr.w	r3, r2, r3
 80029fc:	400b      	ands	r3, r1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <GUI_DrawFont16+0xfa>
 8002a02:	88ba      	ldrh	r2, [r7, #4]
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fc17 	bl	800323c <LCD_DrawPoint>
						x++;
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	3301      	adds	r3, #1
 8002a12:	80fb      	strh	r3, [r7, #6]
						if((x-x0)==16)
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	897b      	ldrh	r3, [r7, #10]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d105      	bne.n	8002a2a <GUI_DrawFont16+0x116>
						{
							x=x0;
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	80fb      	strh	r3, [r7, #6]
							y++;
 8002a22:	88bb      	ldrh	r3, [r7, #4]
 8002a24:	3301      	adds	r3, #1
 8002a26:	80bb      	strh	r3, [r7, #4]
							break;
 8002a28:	e005      	b.n	8002a36 <GUI_DrawFont16+0x122>
				for(j=0;j<8;j++)
 8002a2a:	7bbb      	ldrb	r3, [r7, #14]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	73bb      	strb	r3, [r7, #14]
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	2b07      	cmp	r3, #7
 8002a34:	d9ae      	bls.n	8002994 <GUI_DrawFont16+0x80>
		    for(i=0;i<16*2;i++)
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b1f      	cmp	r3, #31
 8002a40:	d9a5      	bls.n	800298e <GUI_DrawFont16+0x7a>
				
			}
			
			
		}				  	
		continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 8002a42:	bf00      	nop
	for (k=0;k<HZnum;k++) 
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	89ba      	ldrh	r2, [r7, #12]
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	f4ff af76 	bcc.w	8002940 <GUI_DrawFont16+0x2c>
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <GUI_DrawFont16+0x168>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <GUI_DrawFont16+0x168>)
 8002a5e:	885b      	ldrh	r3, [r3, #2]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	2000      	movs	r0, #0
 8002a68:	f000 fd66 	bl	8003538 <LCD_SetWindows>
} 
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}
 8002a74:	0800a5c4 	.word	0x0800a5c4
 8002a78:	20025c62 	.word	0x20025c62
 8002a7c:	20025c54 	.word	0x20025c54

08002a80 <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4604      	mov	r4, r0
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4623      	mov	r3, r4
 8002a90:	80fb      	strh	r3, [r7, #6]
 8002a92:	4603      	mov	r3, r0
 8002a94:	80bb      	strh	r3, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	807b      	strh	r3, [r7, #2]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	813b      	strh	r3, [r7, #8]
		
			for (k=0;k<HZnum;k++) 
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	81bb      	strh	r3, [r7, #12]
 8002aaa:	e080      	b.n	8002bae <GUI_DrawFont24+0x12e>
			{
			  if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8002aac:	89bb      	ldrh	r3, [r7, #12]
 8002aae:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd8 <GUI_DrawFont24+0x158>)
 8002ab0:	214a      	movs	r1, #74	@ 0x4a
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d171      	bne.n	8002ba6 <GUI_DrawFont24+0x126>
 8002ac2:	89bb      	ldrh	r3, [r7, #12]
 8002ac4:	4a44      	ldr	r2, [pc, #272]	@ (8002bd8 <GUI_DrawFont24+0x158>)
 8002ac6:	214a      	movs	r1, #74	@ 0x4a
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3301      	adds	r3, #1
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d164      	bne.n	8002ba6 <GUI_DrawFont24+0x126>
			  { 	LCD_SetWindows(x,y,x+24-1,y+24-1);
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	3317      	adds	r3, #23
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	88bb      	ldrh	r3, [r7, #4]
 8002ae4:	3317      	adds	r3, #23
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	88b9      	ldrh	r1, [r7, #4]
 8002aea:	88f8      	ldrh	r0, [r7, #6]
 8002aec:	f000 fd24 	bl	8003538 <LCD_SetWindows>
				    for(i=0;i<24*3;i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e054      	b.n	8002ba0 <GUI_DrawFont24+0x120>
				    {
							for(j=0;j<8;j++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	73bb      	strb	r3, [r7, #14]
 8002afa:	e04b      	b.n	8002b94 <GUI_DrawFont24+0x114>
							{
								if(!mode) //�ǵ��ӷ�ʽ
 8002afc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11b      	bne.n	8002b3c <GUI_DrawFont24+0xbc>
								{
									if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8002b04:	89ba      	ldrh	r2, [r7, #12]
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	4933      	ldr	r1, [pc, #204]	@ (8002bd8 <GUI_DrawFont24+0x158>)
 8002b0a:	204a      	movs	r0, #74	@ 0x4a
 8002b0c:	fb00 f202 	mul.w	r2, r0, r2
 8002b10:	440a      	add	r2, r1
 8002b12:	4413      	add	r3, r2
 8002b14:	3302      	adds	r3, #2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	7bbb      	ldrb	r3, [r7, #14]
 8002b1c:	2280      	movs	r2, #128	@ 0x80
 8002b1e:	fa42 f303 	asr.w	r3, r2, r3
 8002b22:	400b      	ands	r3, r1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <GUI_DrawFont24+0xb2>
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fb68 	bl	8003200 <Lcd_WriteData_16Bit>
 8002b30:	e02d      	b.n	8002b8e <GUI_DrawFont24+0x10e>
									else Lcd_WriteData_16Bit(bc);
 8002b32:	883b      	ldrh	r3, [r7, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fb63 	bl	8003200 <Lcd_WriteData_16Bit>
 8002b3a:	e028      	b.n	8002b8e <GUI_DrawFont24+0x10e>
								}
							else
							{
								POINT_COLOR=fc;
 8002b3c:	4a27      	ldr	r2, [pc, #156]	@ (8002bdc <GUI_DrawFont24+0x15c>)
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	8013      	strh	r3, [r2, #0]
								if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8002b42:	89ba      	ldrh	r2, [r7, #12]
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	4924      	ldr	r1, [pc, #144]	@ (8002bd8 <GUI_DrawFont24+0x158>)
 8002b48:	204a      	movs	r0, #74	@ 0x4a
 8002b4a:	fb00 f202 	mul.w	r2, r0, r2
 8002b4e:	440a      	add	r2, r1
 8002b50:	4413      	add	r3, r2
 8002b52:	3302      	adds	r3, #2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4619      	mov	r1, r3
 8002b58:	7bbb      	ldrb	r3, [r7, #14]
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	fa42 f303 	asr.w	r3, r2, r3
 8002b60:	400b      	ands	r3, r1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <GUI_DrawFont24+0xf2>
 8002b66:	88ba      	ldrh	r2, [r7, #4]
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fb65 	bl	800323c <LCD_DrawPoint>
								x++;
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	3301      	adds	r3, #1
 8002b76:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==24)
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b18      	cmp	r3, #24
 8002b80:	d105      	bne.n	8002b8e <GUI_DrawFont24+0x10e>
								{
									x=x0;
 8002b82:	897b      	ldrh	r3, [r7, #10]
 8002b84:	80fb      	strh	r3, [r7, #6]
									y++;
 8002b86:	88bb      	ldrh	r3, [r7, #4]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	80bb      	strh	r3, [r7, #4]
									break;
 8002b8c:	e005      	b.n	8002b9a <GUI_DrawFont24+0x11a>
							for(j=0;j<8;j++)
 8002b8e:	7bbb      	ldrb	r3, [r7, #14]
 8002b90:	3301      	adds	r3, #1
 8002b92:	73bb      	strb	r3, [r7, #14]
 8002b94:	7bbb      	ldrb	r3, [r7, #14]
 8002b96:	2b07      	cmp	r3, #7
 8002b98:	d9b0      	bls.n	8002afc <GUI_DrawFont24+0x7c>
				    for(i=0;i<24*3;i++)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b47      	cmp	r3, #71	@ 0x47
 8002ba4:	d9a7      	bls.n	8002af6 <GUI_DrawFont24+0x76>
						}
					}
					
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 8002ba6:	bf00      	nop
			for (k=0;k<HZnum;k++) 
 8002ba8:	89bb      	ldrh	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	81bb      	strh	r3, [r7, #12]
 8002bae:	89ba      	ldrh	r2, [r7, #12]
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	f4ff af7a 	bcc.w	8002aac <GUI_DrawFont24+0x2c>
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <GUI_DrawFont24+0x160>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <GUI_DrawFont24+0x160>)
 8002bc2:	885b      	ldrh	r3, [r3, #2]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f000 fcb4 	bl	8003538 <LCD_SetWindows>
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}
 8002bd8:	0800ae00 	.word	0x0800ae00
 8002bdc:	20025c62 	.word	0x20025c62
 8002be0:	20025c54 	.word	0x20025c54

08002be4 <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4604      	mov	r4, r0
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	80fb      	strh	r3, [r7, #6]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80bb      	strh	r3, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	807b      	strh	r3, [r7, #2]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//�Զ�ͳ�ƺ�����Ŀ
 8002c06:	2304      	movs	r3, #4
 8002c08:	813b      	strh	r3, [r7, #8]
	for (k=0;k<HZnum;k++) 
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	81bb      	strh	r3, [r7, #12]
 8002c0e:	e085      	b.n	8002d1c <GUI_DrawFont32+0x138>
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8002c10:	89ba      	ldrh	r2, [r7, #12]
 8002c12:	494d      	ldr	r1, [pc, #308]	@ (8002d48 <GUI_DrawFont32+0x164>)
 8002c14:	4613      	mov	r3, r2
 8002c16:	019b      	lsls	r3, r3, #6
 8002c18:	4413      	add	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	440b      	add	r3, r1
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d175      	bne.n	8002d14 <GUI_DrawFont32+0x130>
 8002c28:	89ba      	ldrh	r2, [r7, #12]
 8002c2a:	4947      	ldr	r1, [pc, #284]	@ (8002d48 <GUI_DrawFont32+0x164>)
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	019b      	lsls	r3, r3, #6
 8002c30:	4413      	add	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	440b      	add	r3, r1
 8002c36:	3301      	adds	r3, #1
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d167      	bne.n	8002d14 <GUI_DrawFont32+0x130>
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	331f      	adds	r3, #31
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	88bb      	ldrh	r3, [r7, #4]
 8002c4c:	331f      	adds	r3, #31
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	88b9      	ldrh	r1, [r7, #4]
 8002c52:	88f8      	ldrh	r0, [r7, #6]
 8002c54:	f000 fc70 	bl	8003538 <LCD_SetWindows>
				    for(i=0;i<32*4;i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e056      	b.n	8002d0c <GUI_DrawFont32+0x128>
				    {
						for(j=0;j<8;j++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73bb      	strb	r3, [r7, #14]
 8002c62:	e04d      	b.n	8002d00 <GUI_DrawFont32+0x11c>
				    	{
							if(!mode) //�ǵ��ӷ�ʽ
 8002c64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d11c      	bne.n	8002ca6 <GUI_DrawFont32+0xc2>
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8002c6c:	89ba      	ldrh	r2, [r7, #12]
 8002c6e:	7bf9      	ldrb	r1, [r7, #15]
 8002c70:	4835      	ldr	r0, [pc, #212]	@ (8002d48 <GUI_DrawFont32+0x164>)
 8002c72:	4613      	mov	r3, r2
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	4413      	add	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4403      	add	r3, r0
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3302      	adds	r3, #2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4619      	mov	r1, r3
 8002c84:	7bbb      	ldrb	r3, [r7, #14]
 8002c86:	2280      	movs	r2, #128	@ 0x80
 8002c88:	fa42 f303 	asr.w	r3, r2, r3
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <GUI_DrawFont32+0xb8>
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fab3 	bl	8003200 <Lcd_WriteData_16Bit>
 8002c9a:	e02e      	b.n	8002cfa <GUI_DrawFont32+0x116>
								else Lcd_WriteData_16Bit(bc);
 8002c9c:	883b      	ldrh	r3, [r7, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 faae 	bl	8003200 <Lcd_WriteData_16Bit>
 8002ca4:	e029      	b.n	8002cfa <GUI_DrawFont32+0x116>
							}
							else
							{
								POINT_COLOR=fc;
 8002ca6:	4a29      	ldr	r2, [pc, #164]	@ (8002d4c <GUI_DrawFont32+0x168>)
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	8013      	strh	r3, [r2, #0]
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8002cac:	89ba      	ldrh	r2, [r7, #12]
 8002cae:	7bf9      	ldrb	r1, [r7, #15]
 8002cb0:	4825      	ldr	r0, [pc, #148]	@ (8002d48 <GUI_DrawFont32+0x164>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4403      	add	r3, r0
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	7bbb      	ldrb	r3, [r7, #14]
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	fa42 f303 	asr.w	r3, r2, r3
 8002ccc:	400b      	ands	r3, r1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <GUI_DrawFont32+0xfa>
 8002cd2:	88ba      	ldrh	r2, [r7, #4]
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 faaf 	bl	800323c <LCD_DrawPoint>
								x++;
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==32)
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d105      	bne.n	8002cfa <GUI_DrawFont32+0x116>
								{
									x=x0;
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	80fb      	strh	r3, [r7, #6]
									y++;
 8002cf2:	88bb      	ldrh	r3, [r7, #4]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	80bb      	strh	r3, [r7, #4]
									break;
 8002cf8:	e005      	b.n	8002d06 <GUI_DrawFont32+0x122>
						for(j=0;j<8;j++)
 8002cfa:	7bbb      	ldrb	r3, [r7, #14]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	73bb      	strb	r3, [r7, #14]
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	2b07      	cmp	r3, #7
 8002d04:	d9ae      	bls.n	8002c64 <GUI_DrawFont32+0x80>
				    for(i=0;i<32*4;i++)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	daa4      	bge.n	8002c5e <GUI_DrawFont32+0x7a>
						}
					}
					
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 8002d14:	bf00      	nop
	for (k=0;k<HZnum;k++) 
 8002d16:	89bb      	ldrh	r3, [r7, #12]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	81bb      	strh	r3, [r7, #12]
 8002d1c:	89ba      	ldrh	r2, [r7, #12]
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f4ff af75 	bcc.w	8002c10 <GUI_DrawFont32+0x2c>
			}
	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8002d26:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <GUI_DrawFont32+0x16c>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <GUI_DrawFont32+0x16c>)
 8002d30:	885b      	ldrh	r3, [r3, #2]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2100      	movs	r1, #0
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f000 fbfd 	bl	8003538 <LCD_SetWindows>
} 
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	bf00      	nop
 8002d48:	0800b008 	.word	0x0800b008
 8002d4c:	20025c62 	.word	0x20025c62
 8002d50:	20025c54 	.word	0x20025c54

08002d54 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/	   		   
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{					
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af04      	add	r7, sp, #16
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	80fb      	strh	r3, [r7, #6]
 8002d66:	4603      	mov	r3, r0
 8002d68:	80bb      	strh	r3, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	807b      	strh	r3, [r7, #2]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	803b      	strh	r3, [r7, #0]
	u16 x0=x;							  	  
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ��������� 
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 8002d7a:	e0af      	b.n	8002edc <Show_Str+0x188>
    { 
        if(!bHz)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d161      	bne.n	8002e46 <Show_Str+0xf2>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size)) 
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef4 <Show_Str+0x1a0>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	1acb      	subs	r3, r1, r3
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f300 80a7 	bgt.w	8002ee8 <Show_Str+0x194>
 8002d9a:	88ba      	ldrh	r2, [r7, #4]
 8002d9c:	4b55      	ldr	r3, [pc, #340]	@ (8002ef4 <Show_Str+0x1a0>)
 8002d9e:	885b      	ldrh	r3, [r3, #2]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002da6:	1acb      	subs	r3, r1, r3
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f300 809d 	bgt.w	8002ee8 <Show_Str+0x194>
			return; 
	        if(*str>0x80)bHz=1;//���� 
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b80      	cmp	r3, #128	@ 0x80
 8002db4:	d902      	bls.n	8002dbc <Show_Str+0x68>
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e08f      	b.n	8002edc <Show_Str+0x188>
	        else              //�ַ�
	        {          
		        if(*str==0x0D)//���з���
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b0d      	cmp	r3, #13
 8002dc2:	d10b      	bne.n	8002ddc <Show_Str+0x88>
		        {         
		            y+=size;
 8002dc4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8002dd0:	89bb      	ldrh	r3, [r7, #12]
 8002dd2:	80fb      	strh	r3, [r7, #6]
		            str++; 
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	e030      	b.n	8002e3e <Show_Str+0xea>
		        }  
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8002ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d913      	bls.n	8002e0c <Show_Str+0xb8>
					{  
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	883d      	ldrh	r5, [r7, #0]
 8002dea:	887c      	ldrh	r4, [r7, #2]
 8002dec:	88b9      	ldrh	r1, [r7, #4]
 8002dee:	88f8      	ldrh	r0, [r7, #6]
 8002df0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002df4:	9202      	str	r2, [sp, #8]
 8002df6:	2210      	movs	r2, #16
 8002df8:	9201      	str	r2, [sp, #4]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	4622      	mov	r2, r4
 8002e00:	f7ff fcac 	bl	800275c <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ�� 
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	3308      	adds	r3, #8
 8002e08:	80fb      	strh	r3, [r7, #6]
 8002e0a:	e018      	b.n	8002e3e <Show_Str+0xea>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	883d      	ldrh	r5, [r7, #0]
 8002e12:	887c      	ldrh	r4, [r7, #2]
 8002e14:	88b9      	ldrh	r1, [r7, #4]
 8002e16:	88f8      	ldrh	r0, [r7, #6]
 8002e18:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002e1c:	9202      	str	r2, [sp, #8]
 8002e1e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002e22:	9201      	str	r2, [sp, #4]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	462b      	mov	r3, r5
 8002e28:	4622      	mov	r2, r4
 8002e2a:	f7ff fc97 	bl	800275c <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ�� 
 8002e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
					}
				} 
				str++; 
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	3301      	adds	r3, #1
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	e04a      	b.n	8002edc <Show_Str+0x188>
		        
	        }
        }else//���� 
        {   
			if(x>(lcddev.width-size)||y>(lcddev.height-size)) 
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <Show_Str+0x1a0>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e52:	1acb      	subs	r3, r1, r3
 8002e54:	429a      	cmp	r2, r3
 8002e56:	dc49      	bgt.n	8002eec <Show_Str+0x198>
 8002e58:	88ba      	ldrh	r2, [r7, #4]
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <Show_Str+0x1a0>)
 8002e5c:	885b      	ldrh	r3, [r3, #2]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e64:	1acb      	subs	r3, r1, r3
 8002e66:	429a      	cmp	r2, r3
 8002e68:	dc40      	bgt.n	8002eec <Show_Str+0x198>
			return;  
            bHz=0;//�к��ֿ�    
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
			if(size==32)
 8002e6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d10c      	bne.n	8002e90 <Show_Str+0x13c>
			GUI_DrawFont32(x,y,fc,bc,str,mode);	 	
 8002e76:	883c      	ldrh	r4, [r7, #0]
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	88b9      	ldrh	r1, [r7, #4]
 8002e7c:	88f8      	ldrh	r0, [r7, #6]
 8002e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4623      	mov	r3, r4
 8002e8a:	f7ff feab 	bl	8002be4 <GUI_DrawFont32>
 8002e8e:	e01c      	b.n	8002eca <Show_Str+0x176>
			else if(size==24)
 8002e90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e94:	2b18      	cmp	r3, #24
 8002e96:	d10c      	bne.n	8002eb2 <Show_Str+0x15e>
			GUI_DrawFont24(x,y,fc,bc,str,mode);	
 8002e98:	883c      	ldrh	r4, [r7, #0]
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	88b9      	ldrh	r1, [r7, #4]
 8002e9e:	88f8      	ldrh	r0, [r7, #6]
 8002ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	4623      	mov	r3, r4
 8002eac:	f7ff fde8 	bl	8002a80 <GUI_DrawFont24>
 8002eb0:	e00b      	b.n	8002eca <Show_Str+0x176>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 8002eb2:	883c      	ldrh	r4, [r7, #0]
 8002eb4:	887a      	ldrh	r2, [r7, #2]
 8002eb6:	88b9      	ldrh	r1, [r7, #4]
 8002eb8:	88f8      	ldrh	r0, [r7, #6]
 8002eba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	f7ff fd25 	bl	8002914 <GUI_DrawFont16>
				
	        str+=2; 
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��	    
 8002ed0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	4413      	add	r3, r2
 8002eda:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f47f af4b 	bne.w	8002d7c <Show_Str+0x28>
 8002ee6:	e002      	b.n	8002eee <Show_Str+0x19a>
			return; 
 8002ee8:	bf00      	nop
 8002eea:	e000      	b.n	8002eee <Show_Str+0x19a>
			return;  
 8002eec:	bf00      	nop
        }						 
    }   
}
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef4:	20025c54 	.word	0x20025c54

08002ef8 <LL_SPI_Enable>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_SPI_Disable>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 0201 	bic.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_SPI_StartMasterTransfer>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_SPI_SetDataWidth>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 021f 	bic.w	r2, r3, #31
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d101      	bne.n	8002f96 <LL_SPI_IsActiveFlag_TXP+0x18>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <LL_SPI_IsActiveFlag_TXP+0x1a>
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_SPI_IsActiveFlag_TXC>:
  * @rmtoll SR           TXC           LL_SPI_IsActiveFlag_TXC
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXC(const SPI_TypeDef *SPIx)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb8:	d101      	bne.n	8002fbe <LL_SPI_IsActiveFlag_TXC+0x1a>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <LL_SPI_IsActiveFlag_TXC+0x1c>
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_SPI_ClearFlag_EOT>:
  * @rmtoll IFCR         EOTC          LL_SPI_ClearFlag_EOT
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_EOT(SPI_TypeDef *SPIx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->IFCR, SPI_IFCR_EOTC);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f043 0208 	orr.w	r2, r3, #8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	619a      	str	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	701a      	strb	r2, [r3, #0]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spitxdr = ((__IO uint16_t *)&SPIx->TXDR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3320      	adds	r3, #32
 800301c:	60fb      	str	r3, [r7, #12]
  *spitxdr = TxData;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	887a      	ldrh	r2, [r7, #2]
 8003022:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&SPIx->TXDR) = TxData;
#endif /* __GNUC__ */
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <SPI_WriteByte>:
 * @function   :Write a byte of data using STM32's hardware SPI
 * @parameters :TxData:Data to be written
 * @retvalue   :Data received by the bus
******************************************************************************/
u8 SPI_WriteByte(u8 TxData)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    //HAL_SPI_TransmitReceive(&SPI5_Handler,&TxData,&Rxdata,1, 1000);
    //LL_SPI_TransmitData8(SPI3, TxData);
    //LL_SPI_StartMasterTransfer(SPI3);
    LL_SPI_SetDataWidth(SPI3, LL_SPI_DATAWIDTH_8BIT);
 800303a:	2107      	movs	r1, #7
 800303c:	4813      	ldr	r0, [pc, #76]	@ (800308c <SPI_WriteByte+0x5c>)
 800303e:	f7ff ff8b 	bl	8002f58 <LL_SPI_SetDataWidth>
    //LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
    LL_SPI_Enable(SPI3);
 8003042:	4812      	ldr	r0, [pc, #72]	@ (800308c <SPI_WriteByte+0x5c>)
 8003044:	f7ff ff58 	bl	8002ef8 <LL_SPI_Enable>
    //LL_SPI_SetTransferSize(SPI3, 0);
    if(LL_SPI_IsActiveFlag_TXP(SPI3) == 1)
 8003048:	4810      	ldr	r0, [pc, #64]	@ (800308c <SPI_WriteByte+0x5c>)
 800304a:	f7ff ff98 	bl	8002f7e <LL_SPI_IsActiveFlag_TXP>
 800304e:	4603      	mov	r3, r0
 8003050:	2b01      	cmp	r3, #1
 8003052:	d104      	bne.n	800305e <SPI_WriteByte+0x2e>
    {
    	LL_SPI_TransmitData8(SPI3, TxData);
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	4619      	mov	r1, r3
 8003058:	480c      	ldr	r0, [pc, #48]	@ (800308c <SPI_WriteByte+0x5c>)
 800305a:	f7ff ffc7 	bl	8002fec <LL_SPI_TransmitData8>
    }
//    while(LL_SPI_IsActiveFlag_TXTF(SPI3) == 0)
//    {
//    	__NOP();
//    }
    LL_SPI_StartMasterTransfer(SPI3);
 800305e:	480b      	ldr	r0, [pc, #44]	@ (800308c <SPI_WriteByte+0x5c>)
 8003060:	f7ff ff6a 	bl	8002f38 <LL_SPI_StartMasterTransfer>
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 8003064:	e000      	b.n	8003068 <SPI_WriteByte+0x38>
    {
    	__NOP();
 8003066:	bf00      	nop
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 8003068:	4808      	ldr	r0, [pc, #32]	@ (800308c <SPI_WriteByte+0x5c>)
 800306a:	f7ff ff9b 	bl	8002fa4 <LL_SPI_IsActiveFlag_TXC>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f8      	beq.n	8003066 <SPI_WriteByte+0x36>
    }
    LL_SPI_ClearFlag_EOT(SPI3);
 8003074:	4805      	ldr	r0, [pc, #20]	@ (800308c <SPI_WriteByte+0x5c>)
 8003076:	f7ff ffa9 	bl	8002fcc <LL_SPI_ClearFlag_EOT>
    LL_SPI_Disable(SPI3);
 800307a:	4804      	ldr	r0, [pc, #16]	@ (800308c <SPI_WriteByte+0x5c>)
 800307c:	f7ff ff4c 	bl	8002f18 <LL_SPI_Disable>
 	return Rxdata;           	     //�����յ�������			
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40003c00 	.word	0x40003c00

08003090 <SPI_WriteByte_16>:
////    GPIO_Initure.Alternate=GPIO_AF5_SPI5;           //����ΪSPI5
////    HAL_GPIO_Init(GPIOF,&GPIO_Initure);
//}
//******************************************************************************/
u8 SPI_WriteByte_16(u16 TxData)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
    u8 Rxdata;
    //HAL_SPI_TransmitReceive(&SPI5_Handler,&TxData,&Rxdata,1, 1000);
    //LL_SPI_TransmitData8(SPI3, TxData);
    //LL_SPI_StartMasterTransfer(SPI3);
    LL_SPI_SetDataWidth(SPI3, LL_SPI_DATAWIDTH_16BIT);
 800309a:	210f      	movs	r1, #15
 800309c:	4813      	ldr	r0, [pc, #76]	@ (80030ec <SPI_WriteByte_16+0x5c>)
 800309e:	f7ff ff5b 	bl	8002f58 <LL_SPI_SetDataWidth>
    //LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_02DATA);
    LL_SPI_Enable(SPI3);
 80030a2:	4812      	ldr	r0, [pc, #72]	@ (80030ec <SPI_WriteByte_16+0x5c>)
 80030a4:	f7ff ff28 	bl	8002ef8 <LL_SPI_Enable>
    //LL_SPI_SetTransferSize(SPI3, 2);
    if(LL_SPI_IsActiveFlag_TXP(SPI3) == 1)
 80030a8:	4810      	ldr	r0, [pc, #64]	@ (80030ec <SPI_WriteByte_16+0x5c>)
 80030aa:	f7ff ff68 	bl	8002f7e <LL_SPI_IsActiveFlag_TXP>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d104      	bne.n	80030be <SPI_WriteByte_16+0x2e>
    {
    	LL_SPI_TransmitData16(SPI3, TxData);
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	4619      	mov	r1, r3
 80030b8:	480c      	ldr	r0, [pc, #48]	@ (80030ec <SPI_WriteByte_16+0x5c>)
 80030ba:	f7ff ffa7 	bl	800300c <LL_SPI_TransmitData16>
    }
//    while(LL_SPI_IsActiveFlag_TXTF(SPI3) == 0)
//    {
//    	__NOP();
//    }
    LL_SPI_StartMasterTransfer(SPI3);
 80030be:	480b      	ldr	r0, [pc, #44]	@ (80030ec <SPI_WriteByte_16+0x5c>)
 80030c0:	f7ff ff3a 	bl	8002f38 <LL_SPI_StartMasterTransfer>
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 80030c4:	e000      	b.n	80030c8 <SPI_WriteByte_16+0x38>
    {
    	__NOP();
 80030c6:	bf00      	nop
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 80030c8:	4808      	ldr	r0, [pc, #32]	@ (80030ec <SPI_WriteByte_16+0x5c>)
 80030ca:	f7ff ff6b 	bl	8002fa4 <LL_SPI_IsActiveFlag_TXC>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f8      	beq.n	80030c6 <SPI_WriteByte_16+0x36>
    }
    LL_SPI_ClearFlag_EOT(SPI3);
 80030d4:	4805      	ldr	r0, [pc, #20]	@ (80030ec <SPI_WriteByte_16+0x5c>)
 80030d6:	f7ff ff79 	bl	8002fcc <LL_SPI_ClearFlag_EOT>
    LL_SPI_Disable(SPI3);
 80030da:	4804      	ldr	r0, [pc, #16]	@ (80030ec <SPI_WriteByte_16+0x5c>)
 80030dc:	f7ff ff1c 	bl	8002f18 <LL_SPI_Disable>
 	return Rxdata;           	     //�����յ�������
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40003c00 	.word	0x40003c00

080030f0 <delay_ms>:
}

//��ʱnms
//nms:Ҫ��ʱ��ms��
void delay_ms(u16 nms)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
//	u32 i;
//	for(i=0;i<nms;i++) delay_us(1000);
	LL_mDelay(nms);
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 fccb 	bl	8006a98 <LL_mDelay>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <LL_GPIO_SetOutputPin>:
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	619a      	str	r2, [r3, #24]
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_GPIO_ResetOutputPin>:
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{ 
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;     
 800314e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003152:	480a      	ldr	r0, [pc, #40]	@ (800317c <LCD_WR_REG+0x38>)
 8003154:	f7ff ffe7 	bl	8003126 <LL_GPIO_ResetOutputPin>
	 LCD_RS_CLR;	  
 8003158:	2101      	movs	r1, #1
 800315a:	4808      	ldr	r0, [pc, #32]	@ (800317c <LCD_WR_REG+0x38>)
 800315c:	f7ff ffe3 	bl	8003126 <LL_GPIO_ResetOutputPin>
   SPI_WriteByte(data);
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ff64 	bl	8003030 <SPI_WriteByte>
   LCD_CS_SET;	
 8003168:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800316c:	4803      	ldr	r0, [pc, #12]	@ (800317c <LCD_WR_REG+0x38>)
 800316e:	f7ff ffcc 	bl	800310a <LL_GPIO_SetOutputPin>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	42020800 	.word	0x42020800

08003180 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 800318a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800318e:	480a      	ldr	r0, [pc, #40]	@ (80031b8 <LCD_WR_DATA+0x38>)
 8003190:	f7ff ffc9 	bl	8003126 <LL_GPIO_ResetOutputPin>
	 LCD_RS_SET;
 8003194:	2101      	movs	r1, #1
 8003196:	4808      	ldr	r0, [pc, #32]	@ (80031b8 <LCD_WR_DATA+0x38>)
 8003198:	f7ff ffb7 	bl	800310a <LL_GPIO_SetOutputPin>
   SPI_WriteByte(data);
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff46 	bl	8003030 <SPI_WriteByte>
   LCD_CS_SET;
 80031a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031a8:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <LCD_WR_DATA+0x38>)
 80031aa:	f7ff ffae 	bl	800310a <LL_GPIO_SetOutputPin>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	42020800 	.word	0x42020800

080031bc <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{	
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	460a      	mov	r2, r1
 80031c6:	71fb      	strb	r3, [r7, #7]
 80031c8:	4613      	mov	r3, r2
 80031ca:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ffb8 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 80031d4:	88bb      	ldrh	r3, [r7, #4]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ffd1 	bl	8003180 <LCD_WR_DATA>
}	   
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80031ec:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <LCD_WriteRAM_Prepare+0x14>)
 80031ee:	891b      	ldrh	r3, [r3, #8]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ffa6 	bl	8003144 <LCD_WR_REG>
}	 
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20025c54 	.word	0x20025c54

08003200 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 800320a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800320e:	480a      	ldr	r0, [pc, #40]	@ (8003238 <Lcd_WriteData_16Bit+0x38>)
 8003210:	f7ff ff89 	bl	8003126 <LL_GPIO_ResetOutputPin>
   LCD_RS_SET;  
 8003214:	2101      	movs	r1, #1
 8003216:	4808      	ldr	r0, [pc, #32]	@ (8003238 <Lcd_WriteData_16Bit+0x38>)
 8003218:	f7ff ff77 	bl	800310a <LL_GPIO_SetOutputPin>
//   SPI_WriteByte(Data>>8);
//	 SPI_WriteByte(Data);
	 SPI_WriteByte_16(Data);
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff36 	bl	8003090 <SPI_WriteByte_16>
   LCD_CS_SET;
 8003224:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003228:	4803      	ldr	r0, [pc, #12]	@ (8003238 <Lcd_WriteData_16Bit+0x38>)
 800322a:	f7ff ff6e 	bl	800310a <LL_GPIO_SetOutputPin>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	42020800 	.word	0x42020800

0800323c <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	460a      	mov	r2, r1
 8003246:	80fb      	strh	r3, [r7, #6]
 8003248:	4613      	mov	r3, r2
 800324a:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 800324c:	88ba      	ldrh	r2, [r7, #4]
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f9c4 	bl	80035e0 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8003258:	4b04      	ldr	r3, [pc, #16]	@ (800326c <LCD_DrawPoint+0x30>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ffcf 	bl	8003200 <Lcd_WriteData_16Bit>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20025c62 	.word	0x20025c62

08003270 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 800327a:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <LCD_Clear+0x80>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <LCD_Clear+0x80>)
 8003284:	885b      	ldrh	r3, [r3, #2]
 8003286:	3b01      	subs	r3, #1
 8003288:	b29b      	uxth	r3, r3
 800328a:	2100      	movs	r1, #0
 800328c:	2000      	movs	r0, #0
 800328e:	f000 f953 	bl	8003538 <LCD_SetWindows>
	LCD_CS_CLR;
 8003292:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003296:	4817      	ldr	r0, [pc, #92]	@ (80032f4 <LCD_Clear+0x84>)
 8003298:	f7ff ff45 	bl	8003126 <LL_GPIO_ResetOutputPin>
	LCD_RS_SET;
 800329c:	2101      	movs	r1, #1
 800329e:	4815      	ldr	r0, [pc, #84]	@ (80032f4 <LCD_Clear+0x84>)
 80032a0:	f7ff ff33 	bl	800310a <LL_GPIO_SetOutputPin>
	for(i=0;i<lcddev.height;i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e012      	b.n	80032d0 <LCD_Clear+0x60>
	{
    for(m=0;m<lcddev.width;m++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	e006      	b.n	80032be <LCD_Clear+0x4e>
    {	
			Lcd_WriteData_16Bit(Color);
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ffa4 	bl	8003200 <Lcd_WriteData_16Bit>
    for(m=0;m<lcddev.width;m++)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <LCD_Clear+0x80>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d3f2      	bcc.n	80032b0 <LCD_Clear+0x40>
	for(i=0;i<lcddev.height;i++)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <LCD_Clear+0x80>)
 80032d2:	885b      	ldrh	r3, [r3, #2]
 80032d4:	461a      	mov	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4293      	cmp	r3, r2
 80032da:	d3e6      	bcc.n	80032aa <LCD_Clear+0x3a>
		}
	}
	 LCD_CS_SET;
 80032dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032e0:	4804      	ldr	r0, [pc, #16]	@ (80032f4 <LCD_Clear+0x84>)
 80032e2:	f7ff ff12 	bl	800310a <LL_GPIO_SetOutputPin>
} 
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20025c54 	.word	0x20025c54
 80032f4:	42020800 	.word	0x42020800

080032f8 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
	//SPI5_Init();		   			        //��ʼ��SPI
//	SPI_SetSpeed(SPI_BAUDRATEPRESCALER_2); //����Ϊ45Mʱ��,����ģʽ
	//LCD_GPIOInit();//LCD GPIO��ʼ��
 	//LCD_RESET(); //LCD ��λ
//*************2.8inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 80032fc:	20cf      	movs	r0, #207	@ 0xcf
 80032fe:	f7ff ff21 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8003302:	2000      	movs	r0, #0
 8003304:	f7ff ff3c 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0xC9); //C1 
 8003308:	20c9      	movs	r0, #201	@ 0xc9
 800330a:	f7ff ff39 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 800330e:	2030      	movs	r0, #48	@ 0x30
 8003310:	f7ff ff36 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 8003314:	20ed      	movs	r0, #237	@ 0xed
 8003316:	f7ff ff15 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 800331a:	2064      	movs	r0, #100	@ 0x64
 800331c:	f7ff ff30 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 8003320:	2003      	movs	r0, #3
 8003322:	f7ff ff2d 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 8003326:	2012      	movs	r0, #18
 8003328:	f7ff ff2a 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 800332c:	2081      	movs	r0, #129	@ 0x81
 800332e:	f7ff ff27 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 8003332:	20e8      	movs	r0, #232	@ 0xe8
 8003334:	f7ff ff06 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8003338:	2085      	movs	r0, #133	@ 0x85
 800333a:	f7ff ff21 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 800333e:	2010      	movs	r0, #16
 8003340:	f7ff ff1e 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 8003344:	207a      	movs	r0, #122	@ 0x7a
 8003346:	f7ff ff1b 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 800334a:	20cb      	movs	r0, #203	@ 0xcb
 800334c:	f7ff fefa 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8003350:	2039      	movs	r0, #57	@ 0x39
 8003352:	f7ff ff15 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 8003356:	202c      	movs	r0, #44	@ 0x2c
 8003358:	f7ff ff12 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800335c:	2000      	movs	r0, #0
 800335e:	f7ff ff0f 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 8003362:	2034      	movs	r0, #52	@ 0x34
 8003364:	f7ff ff0c 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8003368:	2002      	movs	r0, #2
 800336a:	f7ff ff09 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 800336e:	20f7      	movs	r0, #247	@ 0xf7
 8003370:	f7ff fee8 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8003374:	2020      	movs	r0, #32
 8003376:	f7ff ff03 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 800337a:	20ea      	movs	r0, #234	@ 0xea
 800337c:	f7ff fee2 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8003380:	2000      	movs	r0, #0
 8003382:	f7ff fefd 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8003386:	2000      	movs	r0, #0
 8003388:	f7ff fefa 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 800338c:	20c0      	movs	r0, #192	@ 0xc0
 800338e:	f7ff fed9 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8003392:	201b      	movs	r0, #27
 8003394:	f7ff fef4 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 8003398:	20c1      	movs	r0, #193	@ 0xc1
 800339a:	f7ff fed3 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   //SAP[2:0];BT[3:0] 01 
 800339e:	2000      	movs	r0, #0
 80033a0:	f7ff feee 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 80033a4:	20c5      	movs	r0, #197	@ 0xc5
 80033a6:	f7ff fecd 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80033aa:	2030      	movs	r0, #48	@ 0x30
 80033ac:	f7ff fee8 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80033b0:	2030      	movs	r0, #48	@ 0x30
 80033b2:	f7ff fee5 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 80033b6:	20c7      	movs	r0, #199	@ 0xc7
 80033b8:	f7ff fec4 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 80033bc:	20b7      	movs	r0, #183	@ 0xb7
 80033be:	f7ff fedf 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 80033c2:	2036      	movs	r0, #54	@ 0x36
 80033c4:	f7ff febe 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 80033c8:	2008      	movs	r0, #8
 80033ca:	f7ff fed9 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 80033ce:	203a      	movs	r0, #58	@ 0x3a
 80033d0:	f7ff feb8 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 80033d4:	2055      	movs	r0, #85	@ 0x55
 80033d6:	f7ff fed3 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 80033da:	20b1      	movs	r0, #177	@ 0xb1
 80033dc:	f7ff feb2 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7ff fecd 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 80033e6:	201a      	movs	r0, #26
 80033e8:	f7ff feca 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 80033ec:	20b6      	movs	r0, #182	@ 0xb6
 80033ee:	f7ff fea9 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80033f2:	200a      	movs	r0, #10
 80033f4:	f7ff fec4 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 80033f8:	20a2      	movs	r0, #162	@ 0xa2
 80033fa:	f7ff fec1 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80033fe:	20f2      	movs	r0, #242	@ 0xf2
 8003400:	f7ff fea0 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8003404:	2000      	movs	r0, #0
 8003406:	f7ff febb 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 800340a:	2026      	movs	r0, #38	@ 0x26
 800340c:	f7ff fe9a 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 8003410:	2001      	movs	r0, #1
 8003412:	f7ff feb5 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma 
 8003416:	20e0      	movs	r0, #224	@ 0xe0
 8003418:	f7ff fe94 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 800341c:	200f      	movs	r0, #15
 800341e:	f7ff feaf 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A); 
 8003422:	202a      	movs	r0, #42	@ 0x2a
 8003424:	f7ff feac 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x28); 
 8003428:	2028      	movs	r0, #40	@ 0x28
 800342a:	f7ff fea9 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 800342e:	2008      	movs	r0, #8
 8003430:	f7ff fea6 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E); 
 8003434:	200e      	movs	r0, #14
 8003436:	f7ff fea3 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 800343a:	2008      	movs	r0, #8
 800343c:	f7ff fea0 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x54); 
 8003440:	2054      	movs	r0, #84	@ 0x54
 8003442:	f7ff fe9d 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9); 
 8003446:	20a9      	movs	r0, #169	@ 0xa9
 8003448:	f7ff fe9a 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x43); 
 800344c:	2043      	movs	r0, #67	@ 0x43
 800344e:	f7ff fe97 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A); 
 8003452:	200a      	movs	r0, #10
 8003454:	f7ff fe94 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8003458:	200f      	movs	r0, #15
 800345a:	f7ff fe91 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800345e:	2000      	movs	r0, #0
 8003460:	f7ff fe8e 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8003464:	2000      	movs	r0, #0
 8003466:	f7ff fe8b 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800346a:	2000      	movs	r0, #0
 800346c:	f7ff fe88 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 		 
 8003470:	2000      	movs	r0, #0
 8003472:	f7ff fe85 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma 
 8003476:	20e1      	movs	r0, #225	@ 0xe1
 8003478:	f7ff fe64 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800347c:	2000      	movs	r0, #0
 800347e:	f7ff fe7f 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x15); 
 8003482:	2015      	movs	r0, #21
 8003484:	f7ff fe7c 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x17); 
 8003488:	2017      	movs	r0, #23
 800348a:	f7ff fe79 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 800348e:	2007      	movs	r0, #7
 8003490:	f7ff fe76 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x11); 
 8003494:	2011      	movs	r0, #17
 8003496:	f7ff fe73 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x06); 
 800349a:	2006      	movs	r0, #6
 800349c:	f7ff fe70 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B); 
 80034a0:	202b      	movs	r0, #43	@ 0x2b
 80034a2:	f7ff fe6d 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x56); 
 80034a6:	2056      	movs	r0, #86	@ 0x56
 80034a8:	f7ff fe6a 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C); 
 80034ac:	203c      	movs	r0, #60	@ 0x3c
 80034ae:	f7ff fe67 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 80034b2:	2005      	movs	r0, #5
 80034b4:	f7ff fe64 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 80034b8:	2010      	movs	r0, #16
 80034ba:	f7ff fe61 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 80034be:	200f      	movs	r0, #15
 80034c0:	f7ff fe5e 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 80034c4:	203f      	movs	r0, #63	@ 0x3f
 80034c6:	f7ff fe5b 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 80034ca:	203f      	movs	r0, #63	@ 0x3f
 80034cc:	f7ff fe58 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 80034d0:	200f      	movs	r0, #15
 80034d2:	f7ff fe55 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0x2B); 
 80034d6:	202b      	movs	r0, #43	@ 0x2b
 80034d8:	f7ff fe34 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80034dc:	2000      	movs	r0, #0
 80034de:	f7ff fe4f 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80034e2:	2000      	movs	r0, #0
 80034e4:	f7ff fe4c 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80034e8:	2001      	movs	r0, #1
 80034ea:	f7ff fe49 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80034ee:	203f      	movs	r0, #63	@ 0x3f
 80034f0:	f7ff fe46 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 80034f4:	202a      	movs	r0, #42	@ 0x2a
 80034f6:	f7ff fe25 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80034fa:	2000      	movs	r0, #0
 80034fc:	f7ff fe40 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003500:	2000      	movs	r0, #0
 8003502:	f7ff fe3d 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003506:	2000      	movs	r0, #0
 8003508:	f7ff fe3a 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 800350c:	20ef      	movs	r0, #239	@ 0xef
 800350e:	f7ff fe37 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8003512:	2011      	movs	r0, #17
 8003514:	f7ff fe16 	bl	8003144 <LCD_WR_REG>
	delay_ms(120);
 8003518:	2078      	movs	r0, #120	@ 0x78
 800351a:	f7ff fde9 	bl	80030f0 <delay_ms>
	LCD_WR_REG(0x29); //display on		
 800351e:	2029      	movs	r0, #41	@ 0x29
 8003520:	f7ff fe10 	bl	8003144 <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8003524:	2000      	movs	r0, #0
 8003526:	f000 f86d 	bl	8003604 <LCD_direction>
	//LCD_LED=1;//��������
	LCD_Clear(WHITE);//��ȫ����ɫ
 800352a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800352e:	f7ff fe9f 	bl	8003270 <LCD_Clear>
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4623      	mov	r3, r4
 8003548:	80fb      	strh	r3, [r7, #6]
 800354a:	4603      	mov	r3, r0
 800354c:	80bb      	strh	r3, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	807b      	strh	r3, [r7, #2]
 8003552:	4613      	mov	r3, r2
 8003554:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <LCD_SetWindows+0xa4>)
 8003558:	895b      	ldrh	r3, [r3, #10]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fdf1 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	b29b      	uxth	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fe08 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fe03 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	b29b      	uxth	r3, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fdfc 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fdf7 	bl	8003180 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <LCD_SetWindows+0xa4>)
 8003594:	899b      	ldrh	r3, [r3, #12]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fdd3 	bl	8003144 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 800359e:	88bb      	ldrh	r3, [r7, #4]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fdea 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fde5 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 80035b6:	883b      	ldrh	r3, [r7, #0]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fdde 	bl	8003180 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 80035c4:	883b      	ldrh	r3, [r7, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fdd9 	bl	8003180 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 80035ce:	f7ff fe0b 	bl	80031e8 <LCD_WriteRAM_Prepare>
}   
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	bf00      	nop
 80035dc:	20025c54 	.word	0x20025c54

080035e0 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	460a      	mov	r2, r1
 80035ea:	80fb      	strh	r3, [r7, #6]
 80035ec:	4613      	mov	r3, r2
 80035ee:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 80035f0:	88bb      	ldrh	r3, [r7, #4]
 80035f2:	88fa      	ldrh	r2, [r7, #6]
 80035f4:	88b9      	ldrh	r1, [r7, #4]
 80035f6:	88f8      	ldrh	r0, [r7, #6]
 80035f8:	f7ff ff9e 	bl	8003538 <LCD_SetWindows>
} 
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 800360e:	4b26      	ldr	r3, [pc, #152]	@ (80036a8 <LCD_direction+0xa4>)
 8003610:	222a      	movs	r2, #42	@ 0x2a
 8003612:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 8003614:	4b24      	ldr	r3, [pc, #144]	@ (80036a8 <LCD_direction+0xa4>)
 8003616:	222b      	movs	r2, #43	@ 0x2b
 8003618:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 800361a:	4b23      	ldr	r3, [pc, #140]	@ (80036a8 <LCD_direction+0xa4>)
 800361c:	222c      	movs	r2, #44	@ 0x2c
 800361e:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d83a      	bhi.n	800369c <LCD_direction+0x98>
 8003626:	a201      	add	r2, pc, #4	@ (adr r2, 800362c <LCD_direction+0x28>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	0800363d 	.word	0x0800363d
 8003630:	08003655 	.word	0x08003655
 8003634:	0800366d 	.word	0x0800366d
 8003638:	08003685 	.word	0x08003685
		case 0:						 	 		
			lcddev.width=LCD_W;
 800363c:	4b1a      	ldr	r3, [pc, #104]	@ (80036a8 <LCD_direction+0xa4>)
 800363e:	22f0      	movs	r2, #240	@ 0xf0
 8003640:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8003642:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <LCD_direction+0xa4>)
 8003644:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003648:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 800364a:	2108      	movs	r1, #8
 800364c:	2036      	movs	r0, #54	@ 0x36
 800364e:	f7ff fdb5 	bl	80031bc <LCD_WriteReg>
		break;
 8003652:	e024      	b.n	800369e <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 8003654:	4b14      	ldr	r3, [pc, #80]	@ (80036a8 <LCD_direction+0xa4>)
 8003656:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800365a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800365c:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <LCD_direction+0xa4>)
 800365e:	22f0      	movs	r2, #240	@ 0xf0
 8003660:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8003662:	2168      	movs	r1, #104	@ 0x68
 8003664:	2036      	movs	r0, #54	@ 0x36
 8003666:	f7ff fda9 	bl	80031bc <LCD_WriteReg>
		break;
 800366a:	e018      	b.n	800369e <LCD_direction+0x9a>
		case 2:						 	 		
			lcddev.width=LCD_W;
 800366c:	4b0e      	ldr	r3, [pc, #56]	@ (80036a8 <LCD_direction+0xa4>)
 800366e:	22f0      	movs	r2, #240	@ 0xf0
 8003670:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8003672:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <LCD_direction+0xa4>)
 8003674:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003678:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800367a:	21c8      	movs	r1, #200	@ 0xc8
 800367c:	2036      	movs	r0, #54	@ 0x36
 800367e:	f7ff fd9d 	bl	80031bc <LCD_WriteReg>
		break;
 8003682:	e00c      	b.n	800369e <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 8003684:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <LCD_direction+0xa4>)
 8003686:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800368a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <LCD_direction+0xa4>)
 800368e:	22f0      	movs	r2, #240	@ 0xf0
 8003690:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8003692:	21a8      	movs	r1, #168	@ 0xa8
 8003694:	2036      	movs	r0, #54	@ 0x36
 8003696:	f7ff fd91 	bl	80031bc <LCD_WriteReg>
		break;	
 800369a:	e000      	b.n	800369e <LCD_direction+0x9a>
		default:break;
 800369c:	bf00      	nop
	}		
}	 
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20025c54 	.word	0x20025c54

080036ac <LL_GPIO_IsInputPinSet>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	4013      	ands	r3, r2
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d101      	bne.n	80036c8 <LL_GPIO_IsInputPinSet+0x1c>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <LL_GPIO_IsInputPinSet+0x1e>
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_GPIO_SetOutputPin>:
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <LL_GPIO_ResetOutputPin>:
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <LL_SPI_Enable>:
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <LL_SPI_Disable>:
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0201 	bic.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_SPI_StartMasterTransfer>:
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <LL_SPI_SetDataWidth>:
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 021f 	bic.w	r2, r3, #31
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_SPI_IsActiveFlag_RXP>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <LL_SPI_IsActiveFlag_RXP+0x18>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <LL_SPI_IsActiveFlag_RXP+0x1a>
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_SPI_IsActiveFlag_TXP>:
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d101      	bne.n	80037d2 <LL_SPI_IsActiveFlag_TXP+0x18>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <LL_SPI_IsActiveFlag_TXP+0x1a>
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_SPI_IsActiveFlag_TXC>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f4:	d101      	bne.n	80037fa <LL_SPI_IsActiveFlag_TXC+0x1a>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <LL_SPI_IsActiveFlag_TXC+0x1c>
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_SPI_ClearFlag_EOT>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->IFCR, SPI_IFCR_EOTC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f043 0208 	orr.w	r2, r3, #8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	619a      	str	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_SPI_ReceiveData8>:
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3330      	adds	r3, #48	@ 0x30
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b2db      	uxtb	r3, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_SPI_TransmitData8>:
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3320      	adds	r3, #32
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	701a      	strb	r2, [r3, #0]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <delay_nus>:
Matrix matrix ;
Coordinate display ;
Matrix Matrix_Default;
//--------------------------------------------------------------------------------delay
static void delay_nus(int cnt)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	int i,us;
	for(i = 0;i<cnt;i++)
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e00a      	b.n	8003888 <delay_nus+0x24>
	{
		us = 40;
 8003872:	2328      	movs	r3, #40	@ 0x28
 8003874:	60bb      	str	r3, [r7, #8]
		while (us--)     /* delay	*/
 8003876:	bf00      	nop
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	60ba      	str	r2, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1fa      	bne.n	8003878 <delay_nus+0x14>
	for(i = 0;i<cnt;i++)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	dbf0      	blt.n	8003872 <delay_nus+0xe>
		{
		}
	}
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <xpt2046_init>:
 //----------------------------------------------------------------------------XPT2046 SPI initialization
void xpt2046_init(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
//	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
//	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
//	SPI_InitStructure.SPI_CRCPolynomial = 7;
//	SPI_Init(SPI2, &SPI_InitStructure);
//	SPI_Cmd(SPI2, ENABLE);
	Matrix_Default.An = 52;
 80038a4:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <xpt2046_init+0x3c>)
 80038a6:	2234      	movs	r2, #52	@ 0x34
 80038a8:	601a      	str	r2, [r3, #0]
	Matrix_Default.Bn = 4360;
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <xpt2046_init+0x3c>)
 80038ac:	f241 1208 	movw	r2, #4360	@ 0x1108
 80038b0:	605a      	str	r2, [r3, #4]
	Matrix_Default.Cn = -979832;
 80038b2:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <xpt2046_init+0x3c>)
 80038b4:	4a0a      	ldr	r2, [pc, #40]	@ (80038e0 <xpt2046_init+0x40>)
 80038b6:	609a      	str	r2, [r3, #8]
	Matrix_Default.Dn = -5923;
 80038b8:	4b08      	ldr	r3, [pc, #32]	@ (80038dc <xpt2046_init+0x3c>)
 80038ba:	4a0a      	ldr	r2, [pc, #40]	@ (80038e4 <xpt2046_init+0x44>)
 80038bc:	60da      	str	r2, [r3, #12]
	Matrix_Default.En = 5;
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <xpt2046_init+0x3c>)
 80038c0:	2205      	movs	r2, #5
 80038c2:	611a      	str	r2, [r3, #16]
	Matrix_Default.Fn = 23070954;
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <xpt2046_init+0x3c>)
 80038c6:	4a08      	ldr	r2, [pc, #32]	@ (80038e8 <xpt2046_init+0x48>)
 80038c8:	615a      	str	r2, [r3, #20]
	Matrix_Default.Divider = 65536;
 80038ca:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <xpt2046_init+0x3c>)
 80038cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038d0:	619a      	str	r2, [r3, #24]
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20025c88 	.word	0x20025c88
 80038e0:	fff10c88 	.word	0xfff10c88
 80038e4:	ffffe8dd 	.word	0xffffe8dd
 80038e8:	016008ea 	.word	0x016008ea

080038ec <getDisplayPoint>:
//------------------------------------------------------------------------------delay function
int getDisplayPoint(Coordinate * displayPtr, Coordinate * screenPtr, Matrix * matrixPtr )
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
	/* Operation order is important since we are doing integer math. 
	   Make sure you add all terms together before dividing, so that 
	   the remainder is not rounded off prematurely. */
	if(screenPtr == 0) {return -1;}
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <getDisplayPoint+0x18>
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	e033      	b.n	800396c <getDisplayPoint+0x80>
  if( matrixPtr->Divider != 0 )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02d      	beq.n	8003968 <getDisplayPoint+0x7c>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	fb03 f202 	mul.w	r2, r3, r2
                      (matrixPtr->Bn * screenPtr->y) + 
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	6849      	ldr	r1, [r1, #4]
 8003920:	fb01 f303 	mul.w	r3, r1, r3
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8003924:	441a      	add	r2, r3
                       matrixPtr->Cn 
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
                      (matrixPtr->Bn * screenPtr->y) + 
 800392a:	441a      	add	r2, r3
                    ) / matrixPtr->Divider ;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	fb92 f2f3 	sdiv	r2, r2, r3
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]
	/* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	fb03 f202 	mul.w	r2, r3, r2
                      (matrixPtr->En * screenPtr->y) + 
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	6849      	ldr	r1, [r1, #4]
 800394c:	fb01 f303 	mul.w	r3, r1, r3
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8003950:	441a      	add	r2, r3
                       matrixPtr->Fn 
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
                      (matrixPtr->En * screenPtr->y) + 
 8003956:	441a      	add	r2, r3
                    ) / matrixPtr->Divider ;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	fb92 f2f3 	sdiv	r2, r2, r3
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	605a      	str	r2, [r3, #4]
  }
  else
  {
    return -1;
  }
  return 0;
 8003964:	2300      	movs	r3, #0
 8003966:	e001      	b.n	800396c <getDisplayPoint+0x80>
    return -1;
 8003968:	f04f 33ff 	mov.w	r3, #4294967295
} 
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <ts_draw_point>:
	LCD_DrawLine(xpos+7, ypos-15, xpos+15, ypos-15, RED);
	LCD_DrawLine(xpos+15, ypos-15, xpos+15, ypos-7, RED);
}
//------------------------------------------------------------------------------------------------------------------------------
void ts_draw_point(int x, int y, int color)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
	//if( x >= LCD_X_SIZE || y >= LCD_Y_SIZE )
	if( x >= LCD_W || y >= LCD_H )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2bef      	cmp	r3, #239	@ 0xef
 8003988:	dc73      	bgt.n	8003a72 <ts_draw_point+0xfa>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003990:	da6f      	bge.n	8003a72 <ts_draw_point+0xfa>
	{
		return;
	}

	if( x == 0 || y == 0 )
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d06e      	beq.n	8003a76 <ts_draw_point+0xfe>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d06b      	beq.n	8003a76 <ts_draw_point+0xfe>
//	LCD_SetPixel_16bpp(x,y+1,color);
//	LCD_SetPixel_16bpp(x-1,y+1,color);
//	LCD_SetPixel_16bpp(x+1,y+1,color);
//	LCD_SetPixel_16bpp(x+1,y,color);

	GUI_DrawPoint(x,y,color);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	b291      	uxth	r1, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	b292      	uxth	r2, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe febe 	bl	800272c <GUI_DrawPoint>
	GUI_DrawPoint(x-1,y,color);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	b291      	uxth	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	b292      	uxth	r2, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe feb3 	bl	800272c <GUI_DrawPoint>
	GUI_DrawPoint(x,y-1,color);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	b298      	uxth	r0, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	b292      	uxth	r2, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	f7fe fea8 	bl	800272c <GUI_DrawPoint>
	GUI_DrawPoint(x-1,y-1,color);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b298      	uxth	r0, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	b292      	uxth	r2, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	f7fe fe9b 	bl	800272c <GUI_DrawPoint>
	GUI_DrawPoint(x+1,y-1,color);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	b298      	uxth	r0, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	b292      	uxth	r2, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f7fe fe8e 	bl	800272c <GUI_DrawPoint>
	GUI_DrawPoint(x,y+1,color);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	b298      	uxth	r0, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	f7fe fe83 	bl	800272c <GUI_DrawPoint>
	GUI_DrawPoint(x-1,y+1,color);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b298      	uxth	r0, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f7fe fe76 	bl	800272c <GUI_DrawPoint>
	GUI_DrawPoint(x+1,y+1,color);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3301      	adds	r3, #1
 8003a46:	b298      	uxth	r0, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	b292      	uxth	r2, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7fe fe69 	bl	800272c <GUI_DrawPoint>
	GUI_DrawPoint(x+1,y,color);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	b291      	uxth	r1, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fe5e 	bl	800272c <GUI_DrawPoint>
 8003a70:	e002      	b.n	8003a78 <ts_draw_point+0x100>
		return;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <ts_draw_point+0x100>
		return;
 8003a76:	bf00      	nop
}
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <WR_CMD>:
//------------------------------------------------------------------------SPI bus transmit and receive data
unsigned char WR_CMD (unsigned char cmd)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
	unsigned char Ret = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
//	/* Wait for SPI data reception */
//	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
//	/* Read SPI received data */
//	return SPI_I2S_ReceiveData(SPI2);

	LL_SPI_SetDataWidth(SPI6, LL_SPI_DATAWIDTH_8BIT);
 8003a8e:	2107      	movs	r1, #7
 8003a90:	4819      	ldr	r0, [pc, #100]	@ (8003af8 <WR_CMD+0x78>)
 8003a92:	f7ff fe6c 	bl	800376e <LL_SPI_SetDataWidth>
	LL_SPI_Enable(SPI6);
 8003a96:	4818      	ldr	r0, [pc, #96]	@ (8003af8 <WR_CMD+0x78>)
 8003a98:	f7ff fe39 	bl	800370e <LL_SPI_Enable>
	if(LL_SPI_IsActiveFlag_TXP(SPI6) == 1)
 8003a9c:	4816      	ldr	r0, [pc, #88]	@ (8003af8 <WR_CMD+0x78>)
 8003a9e:	f7ff fe8c 	bl	80037ba <LL_SPI_IsActiveFlag_TXP>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d104      	bne.n	8003ab2 <WR_CMD+0x32>
	{
		LL_SPI_TransmitData8(SPI6, cmd);
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4812      	ldr	r0, [pc, #72]	@ (8003af8 <WR_CMD+0x78>)
 8003aae:	f7ff fec9 	bl	8003844 <LL_SPI_TransmitData8>
	}
	LL_SPI_StartMasterTransfer(SPI6);
 8003ab2:	4811      	ldr	r0, [pc, #68]	@ (8003af8 <WR_CMD+0x78>)
 8003ab4:	f7ff fe4b 	bl	800374e <LL_SPI_StartMasterTransfer>
	while( !( /*LL_SPI_IsActiveFlag_EOT(SPI6) &&*/ LL_SPI_IsActiveFlag_TXC(SPI6) ) )
 8003ab8:	e000      	b.n	8003abc <WR_CMD+0x3c>
	{
		__NOP();
 8003aba:	bf00      	nop
	while( !( /*LL_SPI_IsActiveFlag_EOT(SPI6) &&*/ LL_SPI_IsActiveFlag_TXC(SPI6) ) )
 8003abc:	480e      	ldr	r0, [pc, #56]	@ (8003af8 <WR_CMD+0x78>)
 8003abe:	f7ff fe8f 	bl	80037e0 <LL_SPI_IsActiveFlag_TXC>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f8      	beq.n	8003aba <WR_CMD+0x3a>
	}
	LL_SPI_ClearFlag_EOT(SPI6);
 8003ac8:	480b      	ldr	r0, [pc, #44]	@ (8003af8 <WR_CMD+0x78>)
 8003aca:	f7ff fe9d 	bl	8003808 <LL_SPI_ClearFlag_EOT>
	while( !( LL_SPI_IsActiveFlag_RXP(SPI6) ) )
 8003ace:	e000      	b.n	8003ad2 <WR_CMD+0x52>
	{
		__NOP();
 8003ad0:	bf00      	nop
	while( !( LL_SPI_IsActiveFlag_RXP(SPI6) ) )
 8003ad2:	4809      	ldr	r0, [pc, #36]	@ (8003af8 <WR_CMD+0x78>)
 8003ad4:	f7ff fe5e 	bl	8003794 <LL_SPI_IsActiveFlag_RXP>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f8      	beq.n	8003ad0 <WR_CMD+0x50>
	}
	Ret = LL_SPI_ReceiveData8(SPI6);
 8003ade:	4806      	ldr	r0, [pc, #24]	@ (8003af8 <WR_CMD+0x78>)
 8003ae0:	f7ff fea2 	bl	8003828 <LL_SPI_ReceiveData8>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]
	LL_SPI_Disable(SPI6);
 8003ae8:	4803      	ldr	r0, [pc, #12]	@ (8003af8 <WR_CMD+0x78>)
 8003aea:	f7ff fe20 	bl	800372e <LL_SPI_Disable>
	return Ret;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
} 
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40015000 	.word	0x40015000

08003afc <RD_AD>:
//-------------------------------------------------------------------------read xpt2046 adc value
unsigned short RD_AD(void)
{ 
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
	unsigned short buf,temp;
	//int buf,temp;
	buf = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	80fb      	strh	r3, [r7, #6]
	temp = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	80bb      	strh	r3, [r7, #4]

	temp = WR_CMD(0x00);
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f7ff ffb8 	bl	8003a80 <WR_CMD>
 8003b10:	4603      	mov	r3, r0
 8003b12:	80bb      	strh	r3, [r7, #4]
	buf = temp << 8; 
 8003b14:	88bb      	ldrh	r3, [r7, #4]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	80fb      	strh	r3, [r7, #6]
	delay_nus(1); 
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f7ff fea2 	bl	8003864 <delay_nus>
	temp = WR_CMD(0x00);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7ff ffad 	bl	8003a80 <WR_CMD>
 8003b26:	4603      	mov	r3, r0
 8003b28:	80bb      	strh	r3, [r7, #4]
	buf |= temp; 
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	88bb      	ldrh	r3, [r7, #4]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
	buf >>= 4;
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	80fb      	strh	r3, [r7, #6]
	buf &= 0xfff;
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3e:	80fb      	strh	r3, [r7, #6]
	return buf;
 8003b40:	88fb      	ldrh	r3, [r7, #6]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <Read_X>:
//------------------------------------------------------------------------read xpt2046 channel X+ adc value
unsigned short Read_X(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
	unsigned short temp = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	80fb      	strh	r3, [r7, #6]
	//int temp = 0;
	TP_CS(0); 
 8003b56:	2102      	movs	r1, #2
 8003b58:	480c      	ldr	r0, [pc, #48]	@ (8003b8c <Read_X+0x40>)
 8003b5a:	f7ff fdca 	bl	80036f2 <LL_GPIO_ResetOutputPin>
	delay_nus(1); 
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f7ff fe80 	bl	8003864 <delay_nus>
	WR_CMD(CHX); 
 8003b64:	2090      	movs	r0, #144	@ 0x90
 8003b66:	f7ff ff8b 	bl	8003a80 <WR_CMD>
	delay_nus(1); 
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7ff fe7a 	bl	8003864 <delay_nus>
	temp = RD_AD(); 
 8003b70:	f7ff ffc4 	bl	8003afc <RD_AD>
 8003b74:	4603      	mov	r3, r0
 8003b76:	80fb      	strh	r3, [r7, #6]
	TP_CS(1); 
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4804      	ldr	r0, [pc, #16]	@ (8003b8c <Read_X+0x40>)
 8003b7c:	f7ff fdab 	bl	80036d6 <LL_GPIO_SetOutputPin>
	return temp;    
 8003b80:	88fb      	ldrh	r3, [r7, #6]
}  
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	42020800 	.word	0x42020800

08003b90 <Read_Y>:
//-----------------------------------------------------------------------read xpt2046 channel Y+ adc value
unsigned short Read_Y(void)
{  
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
	unsigned short temp = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	80fb      	strh	r3, [r7, #6]
	//int temp = 0;
	TP_CS(0);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	480c      	ldr	r0, [pc, #48]	@ (8003bd0 <Read_Y+0x40>)
 8003b9e:	f7ff fda8 	bl	80036f2 <LL_GPIO_ResetOutputPin>
	delay_nus(1);
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f7ff fe5e 	bl	8003864 <delay_nus>
	WR_CMD(CHY);
 8003ba8:	20d0      	movs	r0, #208	@ 0xd0
 8003baa:	f7ff ff69 	bl	8003a80 <WR_CMD>
	delay_nus(1);
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f7ff fe58 	bl	8003864 <delay_nus>
	temp = RD_AD();
 8003bb4:	f7ff ffa2 	bl	8003afc <RD_AD>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	80fb      	strh	r3, [r7, #6]
	TP_CS(1); 
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4804      	ldr	r0, [pc, #16]	@ (8003bd0 <Read_Y+0x40>)
 8003bc0:	f7ff fd89 	bl	80036d6 <LL_GPIO_SetOutputPin>
	return temp;
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
} 
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	42020800 	.word	0x42020800

08003bd4 <TP_GetAdXY>:
//----------------------------------------------------------------read xpt2046 channel X+ channel Y+ adc value
void TP_GetAdXY(int *x,int *y)  
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
	int adx,ady;
	adx = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
	ady = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
	adx = Read_X(); 
 8003be6:	f7ff ffb1 	bl	8003b4c <Read_X>
 8003bea:	4603      	mov	r3, r0
 8003bec:	60fb      	str	r3, [r7, #12]
	delay_nus(1); 
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7ff fe38 	bl	8003864 <delay_nus>
	ady = Read_Y(); 
 8003bf4:	f7ff ffcc 	bl	8003b90 <Read_Y>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	60bb      	str	r3, [r7, #8]
	*x = adx;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]
	*y = ady;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	601a      	str	r2, [r3, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <Read_Value>:
//-------------------------------------------get xpt2046 channel X+ channel Y+ adc filtering value, some interference values can be excluded
Coordinate *Read_Value(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b09e      	sub	sp, #120	@ 0x78
 8003c14:	af00      	add	r7, sp, #0
	static Coordinate screen;
	Coordinate screen_fail;
	int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
	unsigned char count=0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	int buffer[2][9]={{0},{0}};  /* channel X+ Y+ for sampling buffer */
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	2248      	movs	r2, #72	@ 0x48
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f005 fed8 	bl	80099d8 <memset>
	TP_X[0] = 0; TP_Y[0] = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
	screen.x=0; screen.y=0;
 8003c30:	4b9a      	ldr	r3, [pc, #616]	@ (8003e9c <Read_Value+0x28c>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	4b99      	ldr	r3, [pc, #612]	@ (8003e9c <Read_Value+0x28c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
	screen_fail.x=65535; screen_fail.y=65535;
 8003c3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c46:	667b      	str	r3, [r7, #100]	@ 0x64
	do                           /* 9 sampling times */
	{
		TP_GetAdXY(TP_X,TP_Y);
 8003c48:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8003c4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ffbe 	bl	8003bd4 <TP_GetAdXY>
		buffer[0][count]=TP_X[0];
 8003c58:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003c5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	3378      	adds	r3, #120	@ 0x78
 8003c62:	443b      	add	r3, r7
 8003c64:	f843 2c74 	str.w	r2, [r3, #-116]
		buffer[1][count]=TP_Y[0];
 8003c68:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003c6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c6e:	3309      	adds	r3, #9
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	3378      	adds	r3, #120	@ 0x78
 8003c74:	443b      	add	r3, r7
 8003c76:	f843 2c74 	str.w	r2, [r3, #-116]
		count++;
 8003c7a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}
	while(!TP_INT_IN&& count<9);  /* TP_INT_IN interrupt pin for the touch screen, when the user clicks on the touch screen��
 8003c84:	2104      	movs	r1, #4
 8003c86:	4886      	ldr	r0, [pc, #536]	@ (8003ea0 <Read_Value+0x290>)
 8003c88:	f7ff fd10 	bl	80036ac <LL_GPIO_IsInputPinSet>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <Read_Value+0x8a>
 8003c92:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d9d6      	bls.n	8003c48 <Read_Value+0x38>
	                                 TP_INT_IN Low level */
//TP_GetAdXY(&TP_X[0],&TP_Y[0]);
//screen.x=0; screen.y=0;
//screen.x=TP_X[0]; screen.y=TP_Y[0];
	if(count==9)   /* sampled 9 times, then filtering some interference values can be excluded*/
 8003c9a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003c9e:	2b09      	cmp	r3, #9
 8003ca0:	f040 80f6 	bne.w	8003e90 <Read_Value+0x280>
		{
			/* average value of the 3 groups */
			temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	441a      	add	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4413      	add	r3, r2
 8003cae:	4a7d      	ldr	r2, [pc, #500]	@ (8003ea4 <Read_Value+0x294>)
 8003cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8003cb4:	17db      	asrs	r3, r3, #31
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	441a      	add	r2, r3
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	4a77      	ldr	r2, [pc, #476]	@ (8003ea4 <Read_Value+0x294>)
 8003cc6:	fb82 1203 	smull	r1, r2, r2, r3
 8003cca:	17db      	asrs	r3, r3, #31
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	653b      	str	r3, [r7, #80]	@ 0x50
			temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	441a      	add	r2, r3
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	4413      	add	r3, r2
 8003cda:	4a72      	ldr	r2, [pc, #456]	@ (8003ea4 <Read_Value+0x294>)
 8003cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ce0:	17db      	asrs	r3, r3, #31
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	657b      	str	r3, [r7, #84]	@ 0x54
			/* D-value between the 3 groups */
			m0=temp[0]-temp[1];
 8003ce6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=temp[1]-temp[2];
 8003cee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=temp[2]-temp[0];
 8003cf6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
			/* absolute value of D-value */
			m0=m0>0?m0:(-m0);
 8003cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bfb8      	it	lt
 8003d04:	425b      	neglt	r3, r3
 8003d06:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=m1>0?m1:(-m1);
 8003d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bfb8      	it	lt
 8003d0e:	425b      	neglt	r3, r3
 8003d10:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=m2>0?m2:(-m2);
 8003d12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bfb8      	it	lt
 8003d18:	425b      	neglt	r3, r3
 8003d1a:	66bb      	str	r3, [r7, #104]	@ 0x68

			/* judging Whether the absolute value of D-value is more than threshold, if three absolute value of D-value is
			   more than threshold value, then determine the sampling point for the interference, ignore the sampling point,
			   the threshold value is setting to 2, in this example */
			if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8003d1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	dd07      	ble.n	8003d32 <Read_Value+0x122>
 8003d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	dd04      	ble.n	8003d32 <Read_Value+0x122>
 8003d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	dd01      	ble.n	8003d32 <Read_Value+0x122>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e0af      	b.n	8003e92 <Read_Value+0x282>
			/* calculate channel X+ average values,then assign them to screen */
			if(m0<m1)
 8003d32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d36:	429a      	cmp	r2, r3
 8003d38:	da17      	bge.n	8003d6a <Read_Value+0x15a>
			{
				if(m2<m0)
 8003d3a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	da09      	bge.n	8003d56 <Read_Value+0x146>
				screen.x=(temp[0]+temp[2])/2;
 8003d42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d46:	4413      	add	r3, r2
 8003d48:	0fda      	lsrs	r2, r3, #31
 8003d4a:	4413      	add	r3, r2
 8003d4c:	105b      	asrs	r3, r3, #1
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b52      	ldr	r3, [pc, #328]	@ (8003e9c <Read_Value+0x28c>)
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e020      	b.n	8003d98 <Read_Value+0x188>
				else
				screen.x=(temp[0]+temp[1])/2;
 8003d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d5a:	4413      	add	r3, r2
 8003d5c:	0fda      	lsrs	r2, r3, #31
 8003d5e:	4413      	add	r3, r2
 8003d60:	105b      	asrs	r3, r3, #1
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b4d      	ldr	r3, [pc, #308]	@ (8003e9c <Read_Value+0x28c>)
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e016      	b.n	8003d98 <Read_Value+0x188>
			}
			else if(m2<m1)
 8003d6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	da09      	bge.n	8003d86 <Read_Value+0x176>
				screen.x=(temp[0]+temp[2])/2;
 8003d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d76:	4413      	add	r3, r2
 8003d78:	0fda      	lsrs	r2, r3, #31
 8003d7a:	4413      	add	r3, r2
 8003d7c:	105b      	asrs	r3, r3, #1
 8003d7e:	461a      	mov	r2, r3
 8003d80:	4b46      	ldr	r3, [pc, #280]	@ (8003e9c <Read_Value+0x28c>)
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e008      	b.n	8003d98 <Read_Value+0x188>
			else
				screen.x=(temp[1]+temp[2])/2;
 8003d86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8a:	4413      	add	r3, r2
 8003d8c:	0fda      	lsrs	r2, r3, #31
 8003d8e:	4413      	add	r3, r2
 8003d90:	105b      	asrs	r3, r3, #1
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b41      	ldr	r3, [pc, #260]	@ (8003e9c <Read_Value+0x28c>)
 8003d96:	601a      	str	r2, [r3, #0]

			/* same as above, this is channel Y+ */
			temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8003d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	441a      	add	r2, r3
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	4413      	add	r3, r2
 8003da2:	4a40      	ldr	r2, [pc, #256]	@ (8003ea4 <Read_Value+0x294>)
 8003da4:	fb82 1203 	smull	r1, r2, r2, r3
 8003da8:	17db      	asrs	r3, r3, #31
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
			temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8003dae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	441a      	add	r2, r3
 8003db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db6:	4413      	add	r3, r2
 8003db8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ea4 <Read_Value+0x294>)
 8003dba:	fb82 1203 	smull	r1, r2, r2, r3
 8003dbe:	17db      	asrs	r3, r3, #31
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	653b      	str	r3, [r7, #80]	@ 0x50
			temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 8003dc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc8:	441a      	add	r2, r3
 8003dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dcc:	4413      	add	r3, r2
 8003dce:	4a35      	ldr	r2, [pc, #212]	@ (8003ea4 <Read_Value+0x294>)
 8003dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8003dd4:	17db      	asrs	r3, r3, #31
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	657b      	str	r3, [r7, #84]	@ 0x54
			m0=temp[0]-temp[1];
 8003dda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=temp[1]-temp[2];
 8003de2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=temp[2]-temp[0];
 8003dea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	66bb      	str	r3, [r7, #104]	@ 0x68
			m0=m0>0?m0:(-m0);
 8003df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bfb8      	it	lt
 8003df8:	425b      	neglt	r3, r3
 8003dfa:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=m1>0?m1:(-m1);
 8003dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bfb8      	it	lt
 8003e02:	425b      	neglt	r3, r3
 8003e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=m2>0?m2:(-m2);
 8003e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bfb8      	it	lt
 8003e0c:	425b      	neglt	r3, r3
 8003e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
			if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 8003e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	dd07      	ble.n	8003e26 <Read_Value+0x216>
 8003e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	dd04      	ble.n	8003e26 <Read_Value+0x216>
 8003e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	dd01      	ble.n	8003e26 <Read_Value+0x216>
 8003e22:	2300      	movs	r3, #0
 8003e24:	e035      	b.n	8003e92 <Read_Value+0x282>

			if(m0<m1)
 8003e26:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	da17      	bge.n	8003e5e <Read_Value+0x24e>
			{
				if(m2<m0)
 8003e2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003e30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e32:	429a      	cmp	r2, r3
 8003e34:	da09      	bge.n	8003e4a <Read_Value+0x23a>
					screen.y=(temp[0]+temp[2])/2;
 8003e36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3a:	4413      	add	r3, r2
 8003e3c:	0fda      	lsrs	r2, r3, #31
 8003e3e:	4413      	add	r3, r2
 8003e40:	105b      	asrs	r3, r3, #1
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <Read_Value+0x28c>)
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	e020      	b.n	8003e8c <Read_Value+0x27c>
				else
					screen.y=(temp[0]+temp[1])/2;
 8003e4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e4e:	4413      	add	r3, r2
 8003e50:	0fda      	lsrs	r2, r3, #31
 8003e52:	4413      	add	r3, r2
 8003e54:	105b      	asrs	r3, r3, #1
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <Read_Value+0x28c>)
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	e016      	b.n	8003e8c <Read_Value+0x27c>
			}
			else if(m2<m1)
 8003e5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e62:	429a      	cmp	r2, r3
 8003e64:	da09      	bge.n	8003e7a <Read_Value+0x26a>
				screen.y=(temp[0]+temp[2])/2;
 8003e66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6a:	4413      	add	r3, r2
 8003e6c:	0fda      	lsrs	r2, r3, #31
 8003e6e:	4413      	add	r3, r2
 8003e70:	105b      	asrs	r3, r3, #1
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <Read_Value+0x28c>)
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	e008      	b.n	8003e8c <Read_Value+0x27c>
			else
				screen.y=(temp[1]+temp[2])/2;
 8003e7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7e:	4413      	add	r3, r2
 8003e80:	0fda      	lsrs	r2, r3, #31
 8003e82:	4413      	add	r3, r2
 8003e84:	105b      	asrs	r3, r3, #1
 8003e86:	461a      	mov	r2, r3
 8003e88:	4b04      	ldr	r3, [pc, #16]	@ (8003e9c <Read_Value+0x28c>)
 8003e8a:	605a      	str	r2, [r3, #4]

			return &screen;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	@ (8003e9c <Read_Value+0x28c>)
 8003e8e:	e000      	b.n	8003e92 <Read_Value+0x282>
		}
		return 0;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3778      	adds	r7, #120	@ 0x78
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20025ca4 	.word	0x20025ca4
 8003ea0:	42020800 	.word	0x42020800
 8003ea4:	55555556 	.word	0x55555556

08003ea8 <TS_Touched>:
//-------------------------------------------------------------------------------------------
uint8_t TS_Touched(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
//	return 1;
	return !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2);
 8003eac:	2104      	movs	r1, #4
 8003eae:	4805      	ldr	r0, [pc, #20]	@ (8003ec4 <TS_Touched+0x1c>)
 8003eb0:	f7ff fbfc 	bl	80036ac <LL_GPIO_IsInputPinSet>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	42020800 	.word	0x42020800

08003ec8 <LL_DMA_SetLinkedListBaseAddr>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CLBAR, DMA_CLBAR_LBA,
 8003ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8003f0c <LL_DMA_SetLinkedListBaseAddr+0x44>)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	4807      	ldr	r0, [pc, #28]	@ (8003f0c <LL_DMA_SetLinkedListBaseAddr+0x44>)
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8003ef6:	6979      	ldr	r1, [r7, #20]
 8003ef8:	4401      	add	r1, r0
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	0800b210 	.word	0x0800b210

08003f10 <LL_DMA_ConfigControl>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR,
 8003f20:	4a0c      	ldr	r2, [pc, #48]	@ (8003f54 <LL_DMA_ConfigControl+0x44>)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f423 0243 	bic.w	r2, r3, #12779520	@ 0xc30000
 8003f32:	4908      	ldr	r1, [pc, #32]	@ (8003f54 <LL_DMA_ConfigControl+0x44>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	440b      	add	r3, r1
 8003f3e:	4619      	mov	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	614b      	str	r3, [r1, #20]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	0800b210 	.word	0x0800b210

08003f58 <LL_DMA_ConfigTransfer>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR1,
 8003f68:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <LL_DMA_ConfigTransfer+0x44>)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4413      	add	r3, r2
 8003f74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f76:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <LL_DMA_ConfigTransfer+0x48>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	4908      	ldr	r1, [pc, #32]	@ (8003f9c <LL_DMA_ConfigTransfer+0x44>)
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	440a      	add	r2, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	0800b210 	.word	0x0800b210
 8003fa0:	b3f487f4 	.word	0xb3f487f4

08003fa4 <LL_DMA_ConfigBurstLength>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR1,
 8003fb6:	4a12      	ldr	r2, [pc, #72]	@ (8004000 <LL_DMA_ConfigBurstLength+0x5c>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8003fc8:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	3a01      	subs	r2, #1
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	f402 717c 	and.w	r1, r2, #1008	@ 0x3f0
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	3a01      	subs	r2, #1
 8003fda:	0512      	lsls	r2, r2, #20
 8003fdc:	f002 727c 	and.w	r2, r2, #66060288	@ 0x3f00000
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	4807      	ldr	r0, [pc, #28]	@ (8004000 <LL_DMA_ConfigBurstLength+0x5c>)
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8003fea:	6979      	ldr	r1, [r7, #20]
 8003fec:	4401      	add	r1, r0
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	0800b210 	.word	0x0800b210

08004004 <LL_DMA_ConfigChannelTransfer>:
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2,
 8004014:	4a0d      	ldr	r2, [pc, #52]	@ (800404c <LL_DMA_ConfigChannelTransfer+0x48>)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4413      	add	r3, r2
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f023 4343 	bic.w	r3, r3, #3271557120	@ 0xc3000000
 8004026:	f423 435e 	bic.w	r3, r3, #56832	@ 0xde00
 800402a:	4908      	ldr	r1, [pc, #32]	@ (800404c <LL_DMA_ConfigChannelTransfer+0x48>)
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	440a      	add	r2, r1
 8004036:	4611      	mov	r1, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4313      	orrs	r3, r2
 800403c:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	0800b210 	.word	0x0800b210

08004050 <LL_DMA_SetTriggerMode>:
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_TRIGM,
 8004060:	4a0c      	ldr	r2, [pc, #48]	@ (8004094 <LL_DMA_SetTriggerMode+0x44>)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4413      	add	r3, r2
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004072:	4908      	ldr	r1, [pc, #32]	@ (8004094 <LL_DMA_SetTriggerMode+0x44>)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	440b      	add	r3, r1
 800407e:	4619      	mov	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4313      	orrs	r3, r2
 8004084:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	0800b210 	.word	0x0800b210

08004098 <LL_DMA_SetPeriphRequest>:
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_REQSEL, Request);
 80040a8:	4a0c      	ldr	r2, [pc, #48]	@ (80040dc <LL_DMA_SetPeriphRequest+0x44>)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4413      	add	r3, r2
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040ba:	4908      	ldr	r1, [pc, #32]	@ (80040dc <LL_DMA_SetPeriphRequest+0x44>)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	440b      	add	r3, r1
 80040c6:	4619      	mov	r1, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	644b      	str	r3, [r1, #68]	@ 0x44
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	0800b210 	.word	0x0800b210

080040e0 <LL_DMA_SetHWTrigger>:
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_TRIGSEL,
 80040f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004128 <LL_DMA_SetHWTrigger+0x48>)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4413      	add	r3, r2
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800410a:	4807      	ldr	r0, [pc, #28]	@ (8004128 <LL_DMA_SetHWTrigger+0x48>)
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8004112:	6979      	ldr	r1, [r7, #20]
 8004114:	4401      	add	r1, r0
 8004116:	4313      	orrs	r3, r2
 8004118:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	0800b210 	.word	0x0800b210

0800412c <LL_DMA_ConfigBlkRptAddrUpdate>:
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1,
 800413c:	4a0c      	ldr	r2, [pc, #48]	@ (8004170 <LL_DMA_ConfigBlkRptAddrUpdate+0x44>)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4413      	add	r3, r2
 8004148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800414a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800414e:	4908      	ldr	r1, [pc, #32]	@ (8004170 <LL_DMA_ConfigBlkRptAddrUpdate+0x44>)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	440b      	add	r3, r1
 800415a:	4619      	mov	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4313      	orrs	r3, r2
 8004160:	648b      	str	r3, [r1, #72]	@ 0x48
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	0800b210 	.word	0x0800b210

08004174 <LL_DMA_SetBlkRptCount>:
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BRC,
 8004184:	4a0e      	ldr	r2, [pc, #56]	@ (80041c0 <LL_DMA_SetBlkRptCount+0x4c>)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	4413      	add	r3, r2
 8004190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004192:	f023 63ff 	bic.w	r3, r3, #133693440	@ 0x7f80000
 8004196:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	0411      	lsls	r1, r2, #16
 800419e:	4a09      	ldr	r2, [pc, #36]	@ (80041c4 <LL_DMA_SetBlkRptCount+0x50>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	4807      	ldr	r0, [pc, #28]	@ (80041c0 <LL_DMA_SetBlkRptCount+0x4c>)
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80041aa:	6979      	ldr	r1, [r7, #20]
 80041ac:	4401      	add	r1, r0
 80041ae:	4313      	orrs	r3, r2
 80041b0:	648b      	str	r3, [r1, #72]	@ 0x48
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	0800b210 	.word	0x0800b210
 80041c4:	07ff0000 	.word	0x07ff0000

080041c8 <LL_DMA_SetBlkDataLength>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BNDT,
 80041d8:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <LL_DMA_SetBlkDataLength+0x44>)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	4413      	add	r3, r2
 80041e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	4908      	ldr	r1, [pc, #32]	@ (800420c <LL_DMA_SetBlkDataLength+0x44>)
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	440a      	add	r2, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	648b      	str	r3, [r1, #72]	@ 0x48
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	0800b210 	.word	0x0800b210

08004210 <LL_DMA_ConfigAddresses>:
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CSAR, SrcAddress);
 8004222:	4a0c      	ldr	r2, [pc, #48]	@ (8004254 <LL_DMA_ConfigAddresses+0x44>)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	4413      	add	r3, r2
 800422e:	461a      	mov	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	64d3      	str	r3, [r2, #76]	@ 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 8004234:	4a07      	ldr	r2, [pc, #28]	@ (8004254 <LL_DMA_ConfigAddresses+0x44>)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4413      	add	r3, r2
 8004240:	461a      	mov	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	0800b210 	.word	0x0800b210

08004258 <LL_DMA_ConfigAddrUpdateValue>:
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR3,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	0419      	lsls	r1, r3, #16
 8004274:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <LL_DMA_ConfigAddrUpdateValue+0x3c>)
 8004276:	400b      	ands	r3, r1
 8004278:	4807      	ldr	r0, [pc, #28]	@ (8004298 <LL_DMA_ConfigAddrUpdateValue+0x40>)
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	4401      	add	r1, r0
 8004284:	4313      	orrs	r3, r2
 8004286:	654b      	str	r3, [r1, #84]	@ 0x54
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	1fff0000 	.word	0x1fff0000
 8004298:	0800b210 	.word	0x0800b210

0800429c <LL_DMA_ConfigBlkRptAddrUpdateValue>:
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR2,
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	041a      	lsls	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4807      	ldr	r0, [pc, #28]	@ (80042d4 <LL_DMA_ConfigBlkRptAddrUpdateValue+0x38>)
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80042be:	6979      	ldr	r1, [r7, #20]
 80042c0:	4401      	add	r1, r0
 80042c2:	4313      	orrs	r3, r2
 80042c4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	0800b210 	.word	0x0800b210

080042d8 <LL_DMA_SetLinkedListAddrOffset>:
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CLLR, DMA_CLLR_LA,
 80042e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004324 <LL_DMA_SetLinkedListAddrOffset+0x4c>)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4413      	add	r3, r2
 80042f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042fa:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004304:	400a      	ands	r2, r1
 8004306:	4807      	ldr	r0, [pc, #28]	@ (8004324 <LL_DMA_SetLinkedListAddrOffset+0x4c>)
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800430e:	6979      	ldr	r1, [r7, #20]
 8004310:	4401      	add	r1, r0
 8004312:	4313      	orrs	r3, r2
 8004314:	67cb      	str	r3, [r1, #124]	@ 0x7c
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	0800b210 	.word	0x0800b210

08004328 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS : DMA registers are initialized.
  *          - ERROR   : Not applicable.
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  {
    assert_param(IS_LL_DMA_PFREQ_INSTANCE(DMAx, Channel));
  }

  /* Check DMA instance */
  if (IS_LL_GPDMA_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a8a      	ldr	r2, [pc, #552]	@ (8004560 <LL_DMA_Init+0x238>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d117      	bne.n	800436c <LL_DMA_Init+0x44>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02f      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d02c      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d029      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d026      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d023      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b05      	cmp	r3, #5
 800435e:	d020      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b06      	cmp	r3, #6
 8004364:	d01d      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b07      	cmp	r3, #7
 800436a:	d01a      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a7d      	ldr	r2, [pc, #500]	@ (8004564 <LL_DMA_Init+0x23c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d116      	bne.n	80043a2 <LL_DMA_Init+0x7a>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d013      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d010      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d00d      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d00a      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d007      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b05      	cmp	r3, #5
 8004396:	d004      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d001      	beq.n	80043a2 <LL_DMA_Init+0x7a>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b07      	cmp	r3, #7
    assert_param(IS_LL_DMA_TRIGGER_MODE(DMA_InitStruct->TriggerMode));
    assert_param(IS_LL_DMA_TRIGGER_SELECTION(DMA_InitStruct->TriggerSelection));
  }

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004560 <LL_DMA_Init+0x238>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d105      	bne.n	80043b6 <LL_DMA_Init+0x8e>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d00b      	beq.n	80043c8 <LL_DMA_Init+0xa0>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b07      	cmp	r3, #7
 80043b4:	d008      	beq.n	80043c8 <LL_DMA_Init+0xa0>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004564 <LL_DMA_Init+0x23c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d104      	bne.n	80043c8 <LL_DMA_Init+0xa0>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d001      	beq.n	80043c8 <LL_DMA_Init+0xa0>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b07      	cmp	r3, #7

  /*-------------------------- DMAx CLBAR Configuration ------------------------
   * Configure the Transfer linked list address with parameter :
   * - LinkedListBaseAdd:                              DMA_CLBAR_LBA[31:16] bits
   */
  LL_DMA_SetLinkedListBaseAddr(DMAx, Channel, DMA_InitStruct->LinkedListBaseAddr);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	461a      	mov	r2, r3
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff fd78 	bl	8003ec8 <LL_DMA_SetLinkedListBaseAddr>
   * Configure the control parameter :
   * - LinkAllocatedPort:                              DMA_CCR_LAP bit
   * - LinkStepMode:                                   DMA_CCR_LSM bit
   * - Priority:                                       DMA_CCR_PRIO [23:22] bits
   */
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                       DMA_InitStruct->LinkAllocatedPort       | \
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 80043e0:	431a      	orrs	r2, r3
                       DMA_InitStruct->LinkStepMode);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 80043e6:	4313      	orrs	r3, r2
 80043e8:	461a      	mov	r2, r3
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff fd8f 	bl	8003f10 <LL_DMA_ConfigControl>
   * - SrcIncMode:                                DMA_CTR1_SINC bit
   * - SrcDataWidth:                              DMA_CTR1_SDW_LOG2 [1:0] bits
   * - SrcBurstLength:                            DMA_CTR1_SBL_1 [9:4] bits
   * - DestBurstLength:                           DMA_CTR1_DBL_1 [25:20] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
                        DMA_InitStruct->DestHWordExchange                | \
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 80043fa:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestByteExchange                 | \
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        DMA_InitStruct->DestHWordExchange                | \
 8004400:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestIncMode                      | \
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                        DMA_InitStruct->DestByteExchange                 | \
 8004406:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestDataWidth                    | \
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
                        DMA_InitStruct->DestIncMode                      | \
 800440c:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcAllocatedPort                 | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                        DMA_InitStruct->DestDataWidth                    | \
 8004412:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcByteExchange                  | \
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                        DMA_InitStruct->SrcAllocatedPort                 | \
 8004418:	431a      	orrs	r2, r3
                        DMA_InitStruct->DataAlignment                    | \
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->SrcByteExchange                  | \
 800441e:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcIncMode                       | \
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        DMA_InitStruct->DataAlignment                    | \
 8004424:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcDataWidth);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 800442a:	4313      	orrs	r3, r2
 800442c:	461a      	mov	r2, r3
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fd91 	bl	8003f58 <LL_DMA_ConfigTransfer>
  /* Check DMA instance */
  if (IS_LL_GPDMA_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a49      	ldr	r2, [pc, #292]	@ (8004560 <LL_DMA_Init+0x238>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d117      	bne.n	800446e <LL_DMA_Init+0x146>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d030      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d02d      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d02a      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d027      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d024      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b05      	cmp	r3, #5
 8004460:	d021      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b06      	cmp	r3, #6
 8004466:	d01e      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b07      	cmp	r3, #7
 800446c:	d01b      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4a3c      	ldr	r2, [pc, #240]	@ (8004564 <LL_DMA_Init+0x23c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d119      	bne.n	80044aa <LL_DMA_Init+0x182>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d014      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d011      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d00e      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b03      	cmp	r3, #3
 800448c:	d00b      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d008      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d005      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b06      	cmp	r3, #6
 800449e:	d002      	beq.n	80044a6 <LL_DMA_Init+0x17e>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b07      	cmp	r3, #7
 80044a4:	d101      	bne.n	80044aa <LL_DMA_Init+0x182>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <LL_DMA_Init+0x184>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <LL_DMA_Init+0x198>
  {
    LL_DMA_ConfigBurstLength(DMAx, Channel,  DMA_InitStruct->SrcBurstLength,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff fd72 	bl	8003fa4 <LL_DMA_ConfigBurstLength>
   * - Direction:                                  DMA_CTR2_DREQ bit
   * - Direction:                                  DMA_CTR2_SWREQ bit
   * - TriggerSelection:                           DMA_CTR2_TRIGSEL [21:16] bits
   * - Request:                                    DMA_CTR2_REQSEL [6:0] bits
   */
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
                               DMA_InitStruct->TriggerPolarity                  | \
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 80044c8:	431a      	orrs	r2, r3
                               DMA_InitStruct->BlkHWRequest                     | \
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
                               DMA_InitStruct->TriggerPolarity                  | \
 80044ce:	431a      	orrs	r2, r3
                               DMA_InitStruct->Mode                             | \
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
                               DMA_InitStruct->BlkHWRequest                     | \
 80044d6:	431a      	orrs	r2, r3
                               DMA_InitStruct->Direction);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 80044dc:	4313      	orrs	r3, r2
 80044de:	461a      	mov	r2, r3
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff fd8e 	bl	8004004 <LL_DMA_ConfigChannelTransfer>

  /* Check direction */
  if (DMA_InitStruct->Direction != LL_DMA_DIRECTION_MEMORY_TO_MEMORY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f0:	d006      	beq.n	8004500 <LL_DMA_Init+0x1d8>
  {
    LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->Request);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	461a      	mov	r2, r3
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff fdcc 	bl	8004098 <LL_DMA_SetPeriphRequest>
  }

  /* Check trigger polarity */
  if (DMA_InitStruct->TriggerPolarity != LL_DMA_TRIG_POLARITY_MASKED)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <LL_DMA_Init+0x1fc>
  {
    LL_DMA_SetHWTrigger(DMAx, Channel, DMA_InitStruct->TriggerSelection);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	461a      	mov	r2, r3
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff fde5 	bl	80040e0 <LL_DMA_SetHWTrigger>
    LL_DMA_SetTriggerMode(DMAx, Channel, DMA_InitStruct->TriggerMode);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	461a      	mov	r2, r3
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff fd96 	bl	8004050 <LL_DMA_SetTriggerMode>
   * - SrcAddrUpdateMode:                                      DMA_CBR1_SDEC bit
   *   SrcAddrUpdateMode field is supported only by 2D addressing channels.
   * - DestAddrUpdateMode:                                     DMA_CBR1_DDEC bit
   *   DestAddrUpdateMode field is supported only by 2D addressing channels.
   */
  LL_DMA_SetBlkDataLength(DMAx, Channel, DMA_InitStruct->BlkDataLength);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	461a      	mov	r2, r3
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fe4b 	bl	80041c8 <LL_DMA_SetBlkDataLength>

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <LL_DMA_Init+0x238>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d105      	bne.n	8004546 <LL_DMA_Init+0x21e>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b06      	cmp	r3, #6
 800453e:	d00c      	beq.n	800455a <LL_DMA_Init+0x232>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b07      	cmp	r3, #7
 8004544:	d009      	beq.n	800455a <LL_DMA_Init+0x232>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a06      	ldr	r2, [pc, #24]	@ (8004564 <LL_DMA_Init+0x23c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10c      	bne.n	8004568 <LL_DMA_Init+0x240>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b06      	cmp	r3, #6
 8004552:	d002      	beq.n	800455a <LL_DMA_Init+0x232>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b07      	cmp	r3, #7
 8004558:	d106      	bne.n	8004568 <LL_DMA_Init+0x240>
 800455a:	2301      	movs	r3, #1
 800455c:	e005      	b.n	800456a <LL_DMA_Init+0x242>
 800455e:	bf00      	nop
 8004560:	40020000 	.word	0x40020000
 8004564:	40021000 	.word	0x40021000
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <LL_DMA_Init+0x274>
  {
    LL_DMA_SetBlkRptCount(DMAx, Channel, DMA_InitStruct->BlkRptCount);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004572:	461a      	mov	r2, r3
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fdfc 	bl	8004174 <LL_DMA_SetBlkRptCount>
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                                  DMA_InitStruct->BlkRptDestAddrUpdateMode                | \
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 8004584:	431a      	orrs	r2, r3
                                  DMA_InitStruct->SrcAddrUpdateMode                       | \
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                                  DMA_InitStruct->BlkRptDestAddrUpdateMode                | \
 800458a:	431a      	orrs	r2, r3
                                  DMA_InitStruct->DestAddrUpdateMode);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 8004590:	4313      	orrs	r3, r2
 8004592:	461a      	mov	r2, r3
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff fdc8 	bl	800412c <LL_DMA_ConfigBlkRptAddrUpdate>
  /*-------------------------- DMAx CSAR and CDAR Configuration ----------------
   * Configure the Transfer source address with parameter :
   * - SrcAddress:                                        DMA_CSAR_SA[31:0] bits
   * - DestAddress:                                       DMA_CDAR_DA[31:0] bits
   */
  LL_DMA_ConfigAddresses(DMAx, Channel, DMA_InitStruct->SrcAddress, DMA_InitStruct->DestAddress);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff fe32 	bl	8004210 <LL_DMA_ConfigAddresses>

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	@ (800461c <LL_DMA_Init+0x2f4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d105      	bne.n	80045c0 <LL_DMA_Init+0x298>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d00c      	beq.n	80045d4 <LL_DMA_Init+0x2ac>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b07      	cmp	r3, #7
 80045be:	d009      	beq.n	80045d4 <LL_DMA_Init+0x2ac>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <LL_DMA_Init+0x2f8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d107      	bne.n	80045d8 <LL_DMA_Init+0x2b0>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d002      	beq.n	80045d4 <LL_DMA_Init+0x2ac>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b07      	cmp	r3, #7
 80045d2:	d101      	bne.n	80045d8 <LL_DMA_Init+0x2b0>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <LL_DMA_Init+0x2b2>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d011      	beq.n	8004602 <LL_DMA_Init+0x2da>
     * - SrcAddrOffset:                                 DMA_CTR3_SAO[28:16] bits
     *   SrcAddrOffset field is supported only by 2D addressing channels.
     * - DestAddrOffset:                                DMA_CTR3_DAO[12:0] bits
     *   DestAddrOffset field is supported only by 2D addressing channels.
     */
    LL_DMA_ConfigAddrUpdateValue(DMAx, Channel, DMA_InitStruct->SrcAddrOffset, DMA_InitStruct->DestAddrOffset);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff fe35 	bl	8004258 <LL_DMA_ConfigAddrUpdateValue>
     * - BlkRptSrcAddrOffset:                         DMA_CBR2_BRSAO[15:0] bits
     *   BlkRptSrcAddrOffset field is supported only by 2D addressing channels.
     * - BlkRptDestAddrOffset:                        DMA_CBR2_BRDAO[31:16] bits
     *   BlkRptDestAddrOffset field is supported only by 2D addressing channels.
     */
    LL_DMA_ConfigBlkRptAddrUpdateValue(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrOffset,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fe4d 	bl	800429c <LL_DMA_ConfigBlkRptAddrUpdateValue>

  /*-------------------------- DMAx CLLR Configuration -------------------------
   * Configure the Transfer linked list address with parameter :
   * - DestAddrOffset:                                    DMA_CLLR_LA[15:2] bits
   */
  LL_DMA_SetLinkedListAddrOffset(DMAx, Channel, DMA_InitStruct->LinkedListAddrOffset);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004608:	461a      	mov	r2, r3
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff fe63 	bl	80042d8 <LL_DMA_SetLinkedListAddrOffset>

  return (uint32_t)SUCCESS;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40020000 	.word	0x40020000
 8004620:	40021000 	.word	0x40021000

08004624 <LL_GPIO_SetPinMode>:
{
 8004624:	b480      	push	{r7}
 8004626:	b08b      	sub	sp, #44	@ 0x2c
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	613b      	str	r3, [r7, #16]
  return result;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e003      	b.n	8004656 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	2103      	movs	r1, #3
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	401a      	ands	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	61fb      	str	r3, [r7, #28]
  return result;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004678:	2320      	movs	r3, #32
 800467a:	e003      	b.n	8004684 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	fa01 f303 	lsl.w	r3, r1, r3
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]
}
 8004692:	bf00      	nop
 8004694:	372c      	adds	r7, #44	@ 0x2c
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <LL_GPIO_SetPinOutputType>:
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	431a      	orrs	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	605a      	str	r2, [r3, #4]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <LL_GPIO_SetPinSpeed>:
{
 80046ce:	b480      	push	{r7}
 80046d0:	b08b      	sub	sp, #44	@ 0x2c
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	613b      	str	r3, [r7, #16]
  return result;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80046f4:	2320      	movs	r3, #32
 80046f6:	e003      	b.n	8004700 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	2103      	movs	r1, #3
 8004704:	fa01 f303 	lsl.w	r3, r1, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	401a      	ands	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	61fb      	str	r3, [r7, #28]
  return result;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004722:	2320      	movs	r3, #32
 8004724:	e003      	b.n	800472e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	431a      	orrs	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	bf00      	nop
 800473e:	372c      	adds	r7, #44	@ 0x2c
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <LL_GPIO_SetPinPull>:
{
 8004748:	b480      	push	{r7}
 800474a:	b08b      	sub	sp, #44	@ 0x2c
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	613b      	str	r3, [r7, #16]
  return result;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800476e:	2320      	movs	r3, #32
 8004770:	e003      	b.n	800477a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	2103      	movs	r1, #3
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	401a      	ands	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	61fb      	str	r3, [r7, #28]
  return result;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800479c:	2320      	movs	r3, #32
 800479e:	e003      	b.n	80047a8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	60da      	str	r2, [r3, #12]
}
 80047b6:	bf00      	nop
 80047b8:	372c      	adds	r7, #44	@ 0x2c
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <LL_GPIO_SetAFPin_0_7>:
{
 80047c2:	b480      	push	{r7}
 80047c4:	b08b      	sub	sp, #44	@ 0x2c
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	613b      	str	r3, [r7, #16]
  return result;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80047e8:	2320      	movs	r3, #32
 80047ea:	e003      	b.n	80047f4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	210f      	movs	r1, #15
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	401a      	ands	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	fa93 f3a3 	rbit	r3, r3
 800480a:	61fb      	str	r3, [r7, #28]
  return result;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004816:	2320      	movs	r3, #32
 8004818:	e003      	b.n	8004822 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	431a      	orrs	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	372c      	adds	r7, #44	@ 0x2c
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <LL_GPIO_SetAFPin_8_15>:
{
 800483c:	b480      	push	{r7}
 800483e:	b08b      	sub	sp, #44	@ 0x2c
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	fa93 f3a3 	rbit	r3, r3
 8004858:	613b      	str	r3, [r7, #16]
  return result;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004864:	2320      	movs	r3, #32
 8004866:	e003      	b.n	8004870 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	210f      	movs	r1, #15
 8004874:	fa01 f303 	lsl.w	r3, r1, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	401a      	ands	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	61fb      	str	r3, [r7, #28]
  return result;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004894:	2320      	movs	r3, #32
 8004896:	e003      	b.n	80048a0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	fab3 f383 	clz	r3, r3
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80048ae:	bf00      	nop
 80048b0:	372c      	adds	r7, #44	@ 0x2c
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b08a      	sub	sp, #40	@ 0x28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	617b      	str	r3, [r7, #20]
  return result;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <LL_GPIO_Init+0x26>
    return 32U;
 80048dc:	2320      	movs	r3, #32
 80048de:	e003      	b.n	80048e8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80048ea:	e058      	b.n	800499e <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2101      	movs	r1, #1
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	4013      	ands	r3, r2
 80048fa:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04a      	beq.n	8004998 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d003      	beq.n	8004912 <LL_GPIO_Init+0x58>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d10e      	bne.n	8004930 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	461a      	mov	r2, r3
 8004918:	6a39      	ldr	r1, [r7, #32]
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fed7 	bl	80046ce <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	461a      	mov	r2, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff feb7 	bl	800469e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	461a      	mov	r2, r3
 8004936:	6a39      	ldr	r1, [r7, #32]
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff05 	bl	8004748 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d121      	bne.n	800498a <LL_GPIO_Init+0xd0>
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	fa93 f3a3 	rbit	r3, r3
 8004950:	60bb      	str	r3, [r7, #8]
  return result;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <LL_GPIO_Init+0xa6>
    return 32U;
 800495c:	2320      	movs	r3, #32
 800495e:	e003      	b.n	8004968 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8004968:	2b07      	cmp	r3, #7
 800496a:	d807      	bhi.n	800497c <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	461a      	mov	r2, r3
 8004972:	6a39      	ldr	r1, [r7, #32]
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff24 	bl	80047c2 <LL_GPIO_SetAFPin_0_7>
 800497a:	e006      	b.n	800498a <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	461a      	mov	r2, r3
 8004982:	6a39      	ldr	r1, [r7, #32]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff59 	bl	800483c <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	6a39      	ldr	r1, [r7, #32]
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fe46 	bl	8004624 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	3301      	adds	r3, #1
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d19f      	bne.n	80048ec <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3728      	adds	r7, #40	@ 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <LL_LPUART_IsEnabled>:
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <LL_LPUART_IsEnabled+0x18>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <LL_LPUART_IsEnabled+0x1a>
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_LPUART_SetPrescaler>:
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	f023 030f 	bic.w	r3, r3, #15
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	b292      	uxth	r2, r2
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_LPUART_SetStopBitsLength>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	605a      	str	r2, [r3, #4]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <LL_LPUART_SetHWFlowCtrl>:
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <LL_LPUART_SetBaudRate>:
{
 8004a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	61f8      	str	r0, [r7, #28]
 8004a5a:	61b9      	str	r1, [r7, #24]
 8004a5c:	617a      	str	r2, [r7, #20]
 8004a5e:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d039      	beq.n	8004ada <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	60fa      	str	r2, [r7, #12]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <LL_LPUART_SetBaudRate+0x94>)
 8004a76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a8a:	f7fb fc01 	bl	8000290 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	020b      	lsls	r3, r1, #8
 8004aa0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004aa4:	0202      	lsls	r2, r0, #8
 8004aa6:	6939      	ldr	r1, [r7, #16]
 8004aa8:	0849      	lsrs	r1, r1, #1
 8004aaa:	2000      	movs	r0, #0
 8004aac:	460c      	mov	r4, r1
 8004aae:	4605      	mov	r5, r0
 8004ab0:	eb12 0804 	adds.w	r8, r2, r4
 8004ab4:	eb43 0905 	adc.w	r9, r3, r5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2200      	movs	r2, #0
 8004abc:	469a      	mov	sl, r3
 8004abe:	4693      	mov	fp, r2
 8004ac0:	4652      	mov	r2, sl
 8004ac2:	465b      	mov	r3, fp
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	f7fb fbe2 	bl	8000290 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	60da      	str	r2, [r3, #12]
}
 8004ada:	bf00      	nop
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae4:	0800b230 	.word	0x0800b230

08004ae8 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ff5d 	bl	80049b6 <LL_LPUART_IsEnabled>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d136      	bne.n	8004b70 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b1d      	ldr	r3, [pc, #116]	@ (8004b7c <LL_LPUART_Init+0x94>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	6891      	ldr	r1, [r2, #8]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	6912      	ldr	r2, [r2, #16]
 8004b12:	4311      	orrs	r1, r2
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	6952      	ldr	r2, [r2, #20]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ff6c 	bl	8004a04 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff ff79 	bl	8004a2a <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8004b38:	f04f 60e0 	mov.w	r0, #117440512	@ 0x7000000
 8004b3c:	f001 fbb8 	bl	80062b0 <LL_RCC_GetLPUARTClockFreq>
 8004b40:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ff76 	bl	8004a50 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ff36 	bl	80049dc <LL_LPUART_SetPrescaler>
  }

  return (status);
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	efffe9f3 	.word	0xefffe9f3

08004b80 <LL_RCC_HSE_IsReady>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8004b84:	4b07      	ldr	r3, [pc, #28]	@ (8004ba4 <LL_RCC_HSE_IsReady+0x24>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b90:	d101      	bne.n	8004b96 <LL_RCC_HSE_IsReady+0x16>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <LL_RCC_HSE_IsReady+0x18>
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	44020c00 	.word	0x44020c00

08004ba8 <LL_RCC_HSI_IsReady>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <LL_RCC_HSI_IsReady+0x20>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d101      	bne.n	8004bbc <LL_RCC_HSI_IsReady+0x14>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <LL_RCC_HSI_IsReady+0x16>
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	44020c00 	.word	0x44020c00

08004bcc <LL_RCC_HSI_GetDivider>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8004bd0:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <LL_RCC_HSI_GetDivider+0x18>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0318 	and.w	r3, r3, #24
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	44020c00 	.word	0x44020c00

08004be8 <LL_RCC_CSI_IsReady>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8004bec:	4b07      	ldr	r3, [pc, #28]	@ (8004c0c <LL_RCC_CSI_IsReady+0x24>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf8:	d101      	bne.n	8004bfe <LL_RCC_CSI_IsReady+0x16>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <LL_RCC_CSI_IsReady+0x18>
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	44020c00 	.word	0x44020c00

08004c10 <LL_RCC_LSE_IsReady>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8004c14:	4b07      	ldr	r3, [pc, #28]	@ (8004c34 <LL_RCC_LSE_IsReady+0x24>)
 8004c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d101      	bne.n	8004c26 <LL_RCC_LSE_IsReady+0x16>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <LL_RCC_LSE_IsReady+0x18>
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	44020c00 	.word	0x44020c00

08004c38 <LL_RCC_GetSysClkSource>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8004c3c:	4b04      	ldr	r3, [pc, #16]	@ (8004c50 <LL_RCC_GetSysClkSource+0x18>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 0318 	and.w	r3, r3, #24
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	44020c00 	.word	0x44020c00

08004c54 <LL_RCC_GetAHBPrescaler>:
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <LL_RCC_GetAHBPrescaler+0x18>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	44020c00 	.word	0x44020c00

08004c70 <LL_RCC_GetAPB1Prescaler>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
 8004c74:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	44020c00 	.word	0x44020c00

08004c8c <LL_RCC_GetAPB2Prescaler>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
 8004c90:	4b04      	ldr	r3, [pc, #16]	@ (8004ca4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	44020c00 	.word	0x44020c00

08004ca8 <LL_RCC_GetAPB3Prescaler>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE3));
 8004cac:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <LL_RCC_GetAPB3Prescaler+0x18>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	44020c00 	.word	0x44020c00

08004cc4 <LL_RCC_GetClockSource>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d0c <LL_RCC_GetClockSource+0x48>)
 8004cd2:	4413      	add	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	0e19      	lsrs	r1, r3, #24
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	401a      	ands	r2, r3
                               LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	f003 031f 	and.w	r3, r3, #31
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
                               LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8004cf8:	041a      	lsls	r2, r3, #16
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4313      	orrs	r3, r2
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	44020cd8 	.word	0x44020cd8

08004d10 <LL_RCC_GetUSARTClockSource>:
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(USARTx);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ffd3 	bl	8004cc4 <LL_RCC_GetClockSource>
 8004d1e:	4603      	mov	r3, r0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <LL_RCC_GetUARTClockSource>:
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(UARTx);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ffc7 	bl	8004cc4 <LL_RCC_GetClockSource>
 8004d36:	4603      	mov	r3, r0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <LL_RCC_GetLPUARTClockSource>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, LPUARTx));
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <LL_RCC_GetLPUARTClockSource+0x20>)
 8004d4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4013      	ands	r3, r2
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	44020c00 	.word	0x44020c00

08004d64 <LL_RCC_PLL1_GetSource>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC));
 8004d68:	4b04      	ldr	r3, [pc, #16]	@ (8004d7c <LL_RCC_PLL1_GetSource+0x18>)
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	f003 0303 	and.w	r3, r3, #3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	44020c00 	.word	0x44020c00

08004d80 <LL_RCC_PLL1_GetN>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 8004d84:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <LL_RCC_PLL1_GetN+0x18>)
 8004d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8c:	3301      	adds	r3, #1
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	44020c00 	.word	0x44020c00

08004d9c <LL_RCC_PLL1_GetP>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P) >>  RCC_PLL1DIVR_PLL1P_Pos) + 1UL);
 8004da0:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <LL_RCC_PLL1_GetP+0x1c>)
 8004da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da4:	0a5b      	lsrs	r3, r3, #9
 8004da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004daa:	3301      	adds	r3, #1
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	44020c00 	.word	0x44020c00

08004dbc <LL_RCC_PLL1_GetM>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos);
 8004dc0:	4b04      	ldr	r3, [pc, #16]	@ (8004dd4 <LL_RCC_PLL1_GetM+0x18>)
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	0a1b      	lsrs	r3, r3, #8
 8004dc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	44020c00 	.word	0x44020c00

08004dd8 <LL_RCC_PLL2_IsReady>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == RCC_CR_PLL2RDY) ? 1UL : 0UL);
 8004ddc:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <LL_RCC_PLL2_IsReady+0x24>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004de4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004de8:	d101      	bne.n	8004dee <LL_RCC_PLL2_IsReady+0x16>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <LL_RCC_PLL2_IsReady+0x18>
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	44020c00 	.word	0x44020c00

08004e00 <LL_RCC_PLL2_GetSource>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2SRC));
 8004e04:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <LL_RCC_PLL2_GetSource+0x18>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	f003 0303 	and.w	r3, r3, #3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	44020c00 	.word	0x44020c00

08004e1c <LL_RCC_PLL2_GetM>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2M) >>  RCC_PLL2CFGR_PLL2M_Pos);
 8004e20:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <LL_RCC_PLL2_GetM+0x18>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	44020c00 	.word	0x44020c00

08004e38 <LL_RCC_PLL2_GetN>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2N) >>  RCC_PLL2DIVR_PLL2N_Pos) + 1UL);
 8004e3c:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <LL_RCC_PLL2_GetN+0x18>)
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e44:	3301      	adds	r3, #1
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	44020c00 	.word	0x44020c00

08004e54 <LL_RCC_PLL2_GetP>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2P) >>  RCC_PLL2DIVR_PLL2P_Pos) + 1UL);
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <LL_RCC_PLL2_GetP+0x1c>)
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5c:	0a5b      	lsrs	r3, r3, #9
 8004e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e62:	3301      	adds	r3, #1
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	44020c00 	.word	0x44020c00

08004e74 <LL_RCC_PLL2_GetQ>:
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2Q) >>  RCC_PLL2DIVR_PLL2Q_Pos) + 1UL);
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <LL_RCC_PLL2_GetQ+0x1c>)
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e82:	3301      	adds	r3, #1
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	44020c00 	.word	0x44020c00

08004e94 <LL_RCC_PLL2_GetR>:
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2R) >>  RCC_PLL2DIVR_PLL2R_Pos) + 1UL);
 8004e98:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <LL_RCC_PLL2_GetR+0x1c>)
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9c:	0e1b      	lsrs	r3, r3, #24
 8004e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ea2:	3301      	adds	r3, #1
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	44020c00 	.word	0x44020c00

08004eb4 <LL_RCC_PLL2P_IsEnabled>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2PEN) == RCC_PLL2CFGR_PLL2PEN) ? 1UL : 0UL);
 8004eb8:	4b07      	ldr	r3, [pc, #28]	@ (8004ed8 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec4:	d101      	bne.n	8004eca <LL_RCC_PLL2P_IsEnabled+0x16>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <LL_RCC_PLL2P_IsEnabled+0x18>
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	44020c00 	.word	0x44020c00

08004edc <LL_RCC_PLL2Q_IsEnabled>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2QEN) == RCC_PLL2CFGR_PLL2QEN) ? 1UL : 0UL);
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eec:	d101      	bne.n	8004ef2 <LL_RCC_PLL2Q_IsEnabled+0x16>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	44020c00 	.word	0x44020c00

08004f04 <LL_RCC_PLL2R_IsEnabled>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2REN) == RCC_PLL2CFGR_PLL2REN) ? 1UL : 0UL);
 8004f08:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f14:	d101      	bne.n	8004f1a <LL_RCC_PLL2R_IsEnabled+0x16>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <LL_RCC_PLL2R_IsEnabled+0x18>
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	44020c00 	.word	0x44020c00

08004f2c <LL_RCC_PLL2FRACN_IsEnabled>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2FRACEN) == RCC_PLL2CFGR_PLL2FRACEN) ? 1UL : 0UL);
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d101      	bne.n	8004f40 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	44020c00 	.word	0x44020c00

08004f50 <LL_RCC_PLL2_GetFRACN>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_PLL2FRACN) >>  RCC_PLL2FRACR_PLL2FRACN_Pos);
 8004f54:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <LL_RCC_PLL2_GetFRACN+0x18>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	08db      	lsrs	r3, r3, #3
 8004f5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	44020c00 	.word	0x44020c00

08004f6c <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 is Ready
  * @rmtoll CR           PLL3RDY    LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == RCC_CR_PLL3RDY) ? 1UL : 0UL);
 8004f70:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <LL_RCC_PLL3_IsReady+0x24>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f7c:	d101      	bne.n	8004f82 <LL_RCC_PLL3_IsReady+0x16>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <LL_RCC_PLL3_IsReady+0x18>
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	44020c00 	.word	0x44020c00

08004f94 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLL3SOURCE_CSI
  *         @arg @ref LL_RCC_PLL3SOURCE_HSI
  *         @arg @ref LL_RCC_PLL3SOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3SRC));
 8004f98:	4b04      	ldr	r3, [pc, #16]	@ (8004fac <LL_RCC_PLL3_GetSource+0x18>)
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9c:	f003 0303 	and.w	r3, r3, #3
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	44020c00 	.word	0x44020c00

08004fb0 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 multiplication factor N
  * @rmtoll PLL3CFGR      PLL3N          LL_RCC_PLL3_GetN
  * @retval Between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3N) >>  RCC_PLL3DIVR_PLL3N_Pos) + 1UL);
 8004fb4:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <LL_RCC_PLL3_GetN+0x18>)
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbc:	3301      	adds	r3, #1
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	44020c00 	.word	0x44020c00

08004fcc <LL_RCC_PLL3_GetP>:
  * @note Used for peripherals clocks
  * @rmtoll PLL3CFGR      PLL3P      LL_RCC_PLL3_GetP
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3P) >>  RCC_PLL3DIVR_PLL3P_Pos) + 1UL);
 8004fd0:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <LL_RCC_PLL3_GetP+0x1c>)
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd4:	0a5b      	lsrs	r3, r3, #9
 8004fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fda:	3301      	adds	r3, #1
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	44020c00 	.word	0x44020c00

08004fec <LL_RCC_PLL3_GetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLL3CFGR      PLL3Q          LL_RCC_PLL3_GetQ
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3Q) >>  RCC_PLL3DIVR_PLL3Q_Pos) + 1UL);
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <LL_RCC_PLL3_GetQ+0x1c>)
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff4:	0c1b      	lsrs	r3, r3, #16
 8004ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ffa:	3301      	adds	r3, #1
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	44020c00 	.word	0x44020c00

0800500c <LL_RCC_PLL3_GetR>:
  * @note Used for PLL3CLK (system clock)
  * @rmtoll PLL3DIVR      PLL3R          LL_RCC_PLL3_GetR
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3R) >>  RCC_PLL3DIVR_PLL3R_Pos) + 1UL);
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <LL_RCC_PLL3_GetR+0x1c>)
 8005012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005014:	0e1b      	lsrs	r3, r3, #24
 8005016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800501a:	3301      	adds	r3, #1
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	44020c00 	.word	0x44020c00

0800502c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 Division factor M
  * @rmtoll PLL3CFGR      PLL3M          LL_RCC_PLL3_GetM
  * @retval Between 1 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005030:	4b04      	ldr	r3, [pc, #16]	@ (8005044 <LL_RCC_PLL3_GetM+0x18>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800503a:	4618      	mov	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	44020c00 	.word	0x44020c00

08005048 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLL3CFGR           PLL3PEN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3PEN) == RCC_PLL3CFGR_PLL3PEN) ? 1UL : 0UL);
 800504c:	4b07      	ldr	r3, [pc, #28]	@ (800506c <LL_RCC_PLL3P_IsEnabled+0x24>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005058:	d101      	bne.n	800505e <LL_RCC_PLL3P_IsEnabled+0x16>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <LL_RCC_PLL3P_IsEnabled+0x18>
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	44020c00 	.word	0x44020c00

08005070 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLL3CFGR           PLL3QEN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3QEN) == RCC_PLL3CFGR_PLL3QEN) ? 1UL : 0UL);
 8005074:	4b07      	ldr	r3, [pc, #28]	@ (8005094 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005080:	d101      	bne.n	8005086 <LL_RCC_PLL3Q_IsEnabled+0x16>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	44020c00 	.word	0x44020c00

08005098 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLL3CFGR           PLL3REN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3REN) == RCC_PLL3CFGR_PLL3REN) ? 1UL : 0UL);
 800509c:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <LL_RCC_PLL3R_IsEnabled+0x24>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050a8:	d101      	bne.n	80050ae <LL_RCC_PLL3R_IsEnabled+0x16>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <LL_RCC_PLL3R_IsEnabled+0x18>
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	44020c00 	.word	0x44020c00

080050c0 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLL3CFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3FRACEN) == RCC_PLL3CFGR_PLL3FRACEN) ? 1UL : 0UL);
 80050c4:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <LL_RCC_PLL3FRACN_IsEnabled+0x20>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d101      	bne.n	80050d4 <LL_RCC_PLL3FRACN_IsEnabled+0x14>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	44020c00 	.word	0x44020c00

080050e4 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      PLL3FRACN          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_PLL3FRACN) >>  RCC_PLL3FRACR_PLL3FRACN_Pos);
 80050e8:	4b04      	ldr	r3, [pc, #16]	@ (80050fc <LL_RCC_PLL3_GetFRACN+0x18>)
 80050ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	44020c00 	.word	0x44020c00

08005100 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *pPLL_Clocks)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	@ 0x28
 8005104:	af02      	add	r7, sp, #8
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t plln;
  uint32_t fracn = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */

  pPLL_Clocks->PLL_P_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
  pPLL_Clocks->PLL_Q_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
  pPLL_Clocks->PLL_R_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]

  if (LL_RCC_PLL2_IsReady() != 0U)
 8005122:	f7ff fe59 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d07e      	beq.n	800522a <LL_RCC_GetPLL2ClockFreq+0x12a>
  {

    pllsource = LL_RCC_PLL2_GetSource();
 800512c:	f7ff fe68 	bl	8004e00 <LL_RCC_PLL2_GetSource>
 8005130:	6178      	str	r0, [r7, #20]

    switch (pllsource)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d01f      	beq.n	8005178 <LL_RCC_GetPLL2ClockFreq+0x78>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d824      	bhi.n	8005188 <LL_RCC_GetPLL2ClockFreq+0x88>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d003      	beq.n	800514c <LL_RCC_GetPLL2ClockFreq+0x4c>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d00e      	beq.n	8005168 <LL_RCC_GetPLL2ClockFreq+0x68>
        break;

      case LL_RCC_PLL2SOURCE_NONE:
      default:
        /* PLL clock disabled */
        break;
 800514a:	e01d      	b.n	8005188 <LL_RCC_GetPLL2ClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 800514c:	f7ff fd2c 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01a      	beq.n	800518c <LL_RCC_GetPLL2ClockFreq+0x8c>
          pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8005156:	f7ff fd39 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 800515a:	4603      	mov	r3, r0
 800515c:	08db      	lsrs	r3, r3, #3
 800515e:	4a35      	ldr	r2, [pc, #212]	@ (8005234 <LL_RCC_GetPLL2ClockFreq+0x134>)
 8005160:	fa42 f303 	asr.w	r3, r2, r3
 8005164:	61fb      	str	r3, [r7, #28]
        break;
 8005166:	e011      	b.n	800518c <LL_RCC_GetPLL2ClockFreq+0x8c>
        if (LL_RCC_CSI_IsReady() != 0U)
 8005168:	f7ff fd3e 	bl	8004be8 <LL_RCC_CSI_IsReady>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00e      	beq.n	8005190 <LL_RCC_GetPLL2ClockFreq+0x90>
          pllinputfreq = CSI_VALUE;
 8005172:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <LL_RCC_GetPLL2ClockFreq+0x138>)
 8005174:	61fb      	str	r3, [r7, #28]
        break;
 8005176:	e00b      	b.n	8005190 <LL_RCC_GetPLL2ClockFreq+0x90>
        if (LL_RCC_HSE_IsReady() != 0U)
 8005178:	f7ff fd02 	bl	8004b80 <LL_RCC_HSE_IsReady>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <LL_RCC_GetPLL2ClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005182:	4b2e      	ldr	r3, [pc, #184]	@ (800523c <LL_RCC_GetPLL2ClockFreq+0x13c>)
 8005184:	61fb      	str	r3, [r7, #28]
        break;
 8005186:	e005      	b.n	8005194 <LL_RCC_GetPLL2ClockFreq+0x94>
        break;
 8005188:	bf00      	nop
 800518a:	e004      	b.n	8005196 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 800518c:	bf00      	nop
 800518e:	e002      	b.n	8005196 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 8005190:	bf00      	nop
 8005192:	e000      	b.n	8005196 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 8005194:	bf00      	nop
    }

    pllm = LL_RCC_PLL2_GetM();
 8005196:	f7ff fe41 	bl	8004e1c <LL_RCC_PLL2_GetM>
 800519a:	6138      	str	r0, [r7, #16]
    plln = LL_RCC_PLL2_GetN();
 800519c:	f7ff fe4c 	bl	8004e38 <LL_RCC_PLL2_GetN>
 80051a0:	60f8      	str	r0, [r7, #12]

    if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 80051a2:	f7ff fec3 	bl	8004f2c <LL_RCC_PLL2FRACN_IsEnabled>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <LL_RCC_GetPLL2ClockFreq+0xb2>
    {
      fracn = LL_RCC_PLL2_GetFRACN();
 80051ac:	f7ff fed0 	bl	8004f50 <LL_RCC_PLL2_GetFRACN>
 80051b0:	61b8      	str	r0, [r7, #24]
    }

    if ((pllinputfreq != LL_RCC_PERIPH_FREQUENCY_NO) && (pllm != 0U))
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d038      	beq.n	800522a <LL_RCC_GetPLL2ClockFreq+0x12a>
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d035      	beq.n	800522a <LL_RCC_GetPLL2ClockFreq+0x12a>
    {
      if (LL_RCC_PLL2P_IsEnabled() != 0U)
 80051be:	f7ff fe79 	bl	8004eb4 <LL_RCC_PLL2P_IsEnabled>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <LL_RCC_GetPLL2ClockFreq+0xe2>
      {
        pPLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetP());
 80051c8:	f7ff fe44 	bl	8004e54 <LL_RCC_PLL2_GetP>
 80051cc:	4603      	mov	r3, r0
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	6939      	ldr	r1, [r7, #16]
 80051d6:	69f8      	ldr	r0, [r7, #28]
 80051d8:	f000 f8d2 	bl	8005380 <LL_RCC_CalcPLLClockFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	601a      	str	r2, [r3, #0]
      }

      if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80051e2:	f7ff fe7b 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <LL_RCC_GetPLL2ClockFreq+0x106>
      {
        pPLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetQ());
 80051ec:	f7ff fe42 	bl	8004e74 <LL_RCC_PLL2_GetQ>
 80051f0:	4603      	mov	r3, r0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	6939      	ldr	r1, [r7, #16]
 80051fa:	69f8      	ldr	r0, [r7, #28]
 80051fc:	f000 f8c0 	bl	8005380 <LL_RCC_CalcPLLClockFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	605a      	str	r2, [r3, #4]
      }

      if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8005206:	f7ff fe7d 	bl	8004f04 <LL_RCC_PLL2R_IsEnabled>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <LL_RCC_GetPLL2ClockFreq+0x12a>
      {
        pPLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetR());
 8005210:	f7ff fe40 	bl	8004e94 <LL_RCC_PLL2_GetR>
 8005214:	4603      	mov	r3, r0
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	6939      	ldr	r1, [r7, #16]
 800521e:	69f8      	ldr	r0, [r7, #28]
 8005220:	f000 f8ae 	bl	8005380 <LL_RCC_CalcPLLClockFreq>
 8005224:	4602      	mov	r2, r0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
      }
    }
  }
}
 800522a:	bf00      	nop
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	03d09000 	.word	0x03d09000
 8005238:	003d0900 	.word	0x003d0900
 800523c:	01312d00 	.word	0x01312d00

08005240 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *pPLL_Clocks)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	@ 0x28
 8005244:	af02      	add	r7, sp, #8
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t plln;
  uint32_t fracn = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */

  pPLL_Clocks->PLL_P_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
  pPLL_Clocks->PLL_Q_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]
  pPLL_Clocks->PLL_R_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]

  if (LL_RCC_PLL3_IsReady() != 0U)
 8005262:	f7ff fe83 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d07e      	beq.n	800536a <LL_RCC_GetPLL3ClockFreq+0x12a>
  {

    pllsource = LL_RCC_PLL3_GetSource();
 800526c:	f7ff fe92 	bl	8004f94 <LL_RCC_PLL3_GetSource>
 8005270:	6178      	str	r0, [r7, #20]

    switch (pllsource)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d01f      	beq.n	80052b8 <LL_RCC_GetPLL3ClockFreq+0x78>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d824      	bhi.n	80052c8 <LL_RCC_GetPLL3ClockFreq+0x88>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d003      	beq.n	800528c <LL_RCC_GetPLL3ClockFreq+0x4c>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d00e      	beq.n	80052a8 <LL_RCC_GetPLL3ClockFreq+0x68>
        break;

      case LL_RCC_PLL3SOURCE_NONE:
      default:
        /* PLL clock disabled */
        break;
 800528a:	e01d      	b.n	80052c8 <LL_RCC_GetPLL3ClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 800528c:	f7ff fc8c 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01a      	beq.n	80052cc <LL_RCC_GetPLL3ClockFreq+0x8c>
          pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8005296:	f7ff fc99 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 800529a:	4603      	mov	r3, r0
 800529c:	08db      	lsrs	r3, r3, #3
 800529e:	4a35      	ldr	r2, [pc, #212]	@ (8005374 <LL_RCC_GetPLL3ClockFreq+0x134>)
 80052a0:	fa42 f303 	asr.w	r3, r2, r3
 80052a4:	61fb      	str	r3, [r7, #28]
        break;
 80052a6:	e011      	b.n	80052cc <LL_RCC_GetPLL3ClockFreq+0x8c>
        if (LL_RCC_CSI_IsReady() != 0U)
 80052a8:	f7ff fc9e 	bl	8004be8 <LL_RCC_CSI_IsReady>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00e      	beq.n	80052d0 <LL_RCC_GetPLL3ClockFreq+0x90>
          pllinputfreq = CSI_VALUE;
 80052b2:	4b31      	ldr	r3, [pc, #196]	@ (8005378 <LL_RCC_GetPLL3ClockFreq+0x138>)
 80052b4:	61fb      	str	r3, [r7, #28]
        break;
 80052b6:	e00b      	b.n	80052d0 <LL_RCC_GetPLL3ClockFreq+0x90>
        if (LL_RCC_HSE_IsReady() != 0U)
 80052b8:	f7ff fc62 	bl	8004b80 <LL_RCC_HSE_IsReady>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <LL_RCC_GetPLL3ClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80052c2:	4b2e      	ldr	r3, [pc, #184]	@ (800537c <LL_RCC_GetPLL3ClockFreq+0x13c>)
 80052c4:	61fb      	str	r3, [r7, #28]
        break;
 80052c6:	e005      	b.n	80052d4 <LL_RCC_GetPLL3ClockFreq+0x94>
        break;
 80052c8:	bf00      	nop
 80052ca:	e004      	b.n	80052d6 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 80052cc:	bf00      	nop
 80052ce:	e002      	b.n	80052d6 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 80052d0:	bf00      	nop
 80052d2:	e000      	b.n	80052d6 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 80052d4:	bf00      	nop
    }

    pllm = LL_RCC_PLL3_GetM();
 80052d6:	f7ff fea9 	bl	800502c <LL_RCC_PLL3_GetM>
 80052da:	6138      	str	r0, [r7, #16]
    plln = LL_RCC_PLL3_GetN();
 80052dc:	f7ff fe68 	bl	8004fb0 <LL_RCC_PLL3_GetN>
 80052e0:	60f8      	str	r0, [r7, #12]
    if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 80052e2:	f7ff feed 	bl	80050c0 <LL_RCC_PLL3FRACN_IsEnabled>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <LL_RCC_GetPLL3ClockFreq+0xb2>
    {
      fracn = LL_RCC_PLL3_GetFRACN();
 80052ec:	f7ff fefa 	bl	80050e4 <LL_RCC_PLL3_GetFRACN>
 80052f0:	61b8      	str	r0, [r7, #24]
    }

    if ((pllinputfreq != LL_RCC_PERIPH_FREQUENCY_NO) && (pllm != 0U))
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d038      	beq.n	800536a <LL_RCC_GetPLL3ClockFreq+0x12a>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d035      	beq.n	800536a <LL_RCC_GetPLL3ClockFreq+0x12a>
    {
      if (LL_RCC_PLL3P_IsEnabled() != 0U)
 80052fe:	f7ff fea3 	bl	8005048 <LL_RCC_PLL3P_IsEnabled>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00c      	beq.n	8005322 <LL_RCC_GetPLL3ClockFreq+0xe2>
      {
        pPLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetP());
 8005308:	f7ff fe60 	bl	8004fcc <LL_RCC_PLL3_GetP>
 800530c:	4603      	mov	r3, r0
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	6939      	ldr	r1, [r7, #16]
 8005316:	69f8      	ldr	r0, [r7, #28]
 8005318:	f000 f832 	bl	8005380 <LL_RCC_CalcPLLClockFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
      }

      if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005322:	f7ff fea5 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <LL_RCC_GetPLL3ClockFreq+0x106>
      {
        pPLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetQ());
 800532c:	f7ff fe5e 	bl	8004fec <LL_RCC_PLL3_GetQ>
 8005330:	4603      	mov	r3, r0
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	6939      	ldr	r1, [r7, #16]
 800533a:	69f8      	ldr	r0, [r7, #28]
 800533c:	f000 f820 	bl	8005380 <LL_RCC_CalcPLLClockFreq>
 8005340:	4602      	mov	r2, r0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	605a      	str	r2, [r3, #4]
      }

      if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8005346:	f7ff fea7 	bl	8005098 <LL_RCC_PLL3R_IsEnabled>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <LL_RCC_GetPLL3ClockFreq+0x12a>
      {
        pPLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetR());
 8005350:	f7ff fe5c 	bl	800500c <LL_RCC_PLL3_GetR>
 8005354:	4603      	mov	r3, r0
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6939      	ldr	r1, [r7, #16]
 800535e:	69f8      	ldr	r0, [r7, #28]
 8005360:	f000 f80e 	bl	8005380 <LL_RCC_CalcPLLClockFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
      }
    }
  }
}
 800536a:	bf00      	nop
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	03d09000 	.word	0x03d09000
 8005378:	003d0900 	.word	0x003d0900
 800537c:	01312d00 	.word	0x01312d00

08005380 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 output clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80053ba:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80053fc <LL_RCC_CalcPLLClockFreq+0x7c>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ca:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	ee07 3a90 	vmov	s15, r3
 80053d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80053dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e0:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 80053e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80053e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ec:	ee17 3a90 	vmov	r3, s15
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	46000000 	.word	0x46000000

08005400 <LL_RCC_GetUSARTClockFreq>:
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8005412:	d17c      	bne.n	800550e <LL_RCC_GetUSARTClockFreq+0x10e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fc7b 	bl	8004d10 <LL_RCC_GetUSARTClockSource>
 800541a:	4603      	mov	r3, r0
 800541c:	4aad      	ldr	r2, [pc, #692]	@ (80056d4 <LL_RCC_GetUSARTClockFreq+0x2d4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d06b      	beq.n	80054fa <LL_RCC_GetUSARTClockFreq+0xfa>
 8005422:	4aac      	ldr	r2, [pc, #688]	@ (80056d4 <LL_RCC_GetUSARTClockFreq+0x2d4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	f200 8346 	bhi.w	8005ab6 <LL_RCC_GetUSARTClockFreq+0x6b6>
 800542a:	4aab      	ldr	r2, [pc, #684]	@ (80056d8 <LL_RCC_GetUSARTClockFreq+0x2d8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d05b      	beq.n	80054e8 <LL_RCC_GetUSARTClockFreq+0xe8>
 8005430:	4aa9      	ldr	r2, [pc, #676]	@ (80056d8 <LL_RCC_GetUSARTClockFreq+0x2d8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f200 833f 	bhi.w	8005ab6 <LL_RCC_GetUSARTClockFreq+0x6b6>
 8005438:	4aa8      	ldr	r2, [pc, #672]	@ (80056dc <LL_RCC_GetUSARTClockFreq+0x2dc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d045      	beq.n	80054ca <LL_RCC_GetUSARTClockFreq+0xca>
 800543e:	4aa7      	ldr	r2, [pc, #668]	@ (80056dc <LL_RCC_GetUSARTClockFreq+0x2dc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	f200 8338 	bhi.w	8005ab6 <LL_RCC_GetUSARTClockFreq+0x6b6>
 8005446:	4aa6      	ldr	r2, [pc, #664]	@ (80056e0 <LL_RCC_GetUSARTClockFreq+0x2e0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d02a      	beq.n	80054a2 <LL_RCC_GetUSARTClockFreq+0xa2>
 800544c:	4aa4      	ldr	r2, [pc, #656]	@ (80056e0 <LL_RCC_GetUSARTClockFreq+0x2e0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	f200 8331 	bhi.w	8005ab6 <LL_RCC_GetUSARTClockFreq+0x6b6>
 8005454:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8005458:	d003      	beq.n	8005462 <LL_RCC_GetUSARTClockFreq+0x62>
 800545a:	4aa2      	ldr	r2, [pc, #648]	@ (80056e4 <LL_RCC_GetUSARTClockFreq+0x2e4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00c      	beq.n	800547a <LL_RCC_GetUSARTClockFreq+0x7a>
        }
        break;

      default:
        /* unreachable code */
        break;
 8005460:	e329      	b.n	8005ab6 <LL_RCC_GetUSARTClockFreq+0x6b6>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005462:	f000 ffb1 	bl	80063c8 <RCC_GetSystemClockFreq>
 8005466:	4603      	mov	r3, r0
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f813 	bl	8006494 <RCC_GetHCLKClockFreq>
 800546e:	4603      	mov	r3, r0
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f839 	bl	80064e8 <RCC_GetPCLK2ClockFreq>
 8005476:	6178      	str	r0, [r7, #20]
        break;
 8005478:	e364      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800547a:	f7ff fcad 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 831a 	beq.w	8005aba <LL_RCC_GetUSARTClockFreq+0x6ba>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005486:	f7ff fd29 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8314 	beq.w	8005aba <LL_RCC_GetUSARTClockFreq+0x6ba>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fe32 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	617b      	str	r3, [r7, #20]
        break;
 80054a0:	e30b      	b.n	8005aba <LL_RCC_GetUSARTClockFreq+0x6ba>
        if (LL_RCC_PLL3_IsReady() != 0U)
 80054a2:	f7ff fd63 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8308 	beq.w	8005abe <LL_RCC_GetUSARTClockFreq+0x6be>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 80054ae:	f7ff fddf 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8302 	beq.w	8005abe <LL_RCC_GetUSARTClockFreq+0x6be>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80054ba:	f107 0308 	add.w	r3, r7, #8
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff febe 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	617b      	str	r3, [r7, #20]
        break;
 80054c8:	e2f9      	b.n	8005abe <LL_RCC_GetUSARTClockFreq+0x6be>
        if (LL_RCC_HSI_IsReady() == 1U)
 80054ca:	f7ff fb6d 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	f040 82f6 	bne.w	8005ac2 <LL_RCC_GetUSARTClockFreq+0x6c2>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 80054d6:	f7ff fb79 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 80054da:	4603      	mov	r3, r0
 80054dc:	08db      	lsrs	r3, r3, #3
 80054de:	4a82      	ldr	r2, [pc, #520]	@ (80056e8 <LL_RCC_GetUSARTClockFreq+0x2e8>)
 80054e0:	fa42 f303 	asr.w	r3, r2, r3
 80054e4:	617b      	str	r3, [r7, #20]
        break;
 80054e6:	e2ec      	b.n	8005ac2 <LL_RCC_GetUSARTClockFreq+0x6c2>
        if (LL_RCC_CSI_IsReady() == 1U)
 80054e8:	f7ff fb7e 	bl	8004be8 <LL_RCC_CSI_IsReady>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	f040 82e9 	bne.w	8005ac6 <LL_RCC_GetUSARTClockFreq+0x6c6>
          usart_frequency = CSI_VALUE;
 80054f4:	4b7d      	ldr	r3, [pc, #500]	@ (80056ec <LL_RCC_GetUSARTClockFreq+0x2ec>)
 80054f6:	617b      	str	r3, [r7, #20]
        break;
 80054f8:	e2e5      	b.n	8005ac6 <LL_RCC_GetUSARTClockFreq+0x6c6>
        if (LL_RCC_LSE_IsReady() == 1U)
 80054fa:	f7ff fb89 	bl	8004c10 <LL_RCC_LSE_IsReady>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	f040 82e2 	bne.w	8005aca <LL_RCC_GetUSARTClockFreq+0x6ca>
          usart_frequency = LSE_VALUE;
 8005506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800550a:	617b      	str	r3, [r7, #20]
        break;
 800550c:	e2dd      	b.n	8005aca <LL_RCC_GetUSARTClockFreq+0x6ca>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a77      	ldr	r2, [pc, #476]	@ (80056f0 <LL_RCC_GetUSARTClockFreq+0x2f0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d17c      	bne.n	8005610 <LL_RCC_GetUSARTClockFreq+0x210>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff fbfa 	bl	8004d10 <LL_RCC_GetUSARTClockSource>
 800551c:	4603      	mov	r3, r0
 800551e:	4a75      	ldr	r2, [pc, #468]	@ (80056f4 <LL_RCC_GetUSARTClockFreq+0x2f4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d06b      	beq.n	80055fc <LL_RCC_GetUSARTClockFreq+0x1fc>
 8005524:	4a73      	ldr	r2, [pc, #460]	@ (80056f4 <LL_RCC_GetUSARTClockFreq+0x2f4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	f200 82d1 	bhi.w	8005ace <LL_RCC_GetUSARTClockFreq+0x6ce>
 800552c:	4a72      	ldr	r2, [pc, #456]	@ (80056f8 <LL_RCC_GetUSARTClockFreq+0x2f8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d05b      	beq.n	80055ea <LL_RCC_GetUSARTClockFreq+0x1ea>
 8005532:	4a71      	ldr	r2, [pc, #452]	@ (80056f8 <LL_RCC_GetUSARTClockFreq+0x2f8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	f200 82ca 	bhi.w	8005ace <LL_RCC_GetUSARTClockFreq+0x6ce>
 800553a:	4a70      	ldr	r2, [pc, #448]	@ (80056fc <LL_RCC_GetUSARTClockFreq+0x2fc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d045      	beq.n	80055cc <LL_RCC_GetUSARTClockFreq+0x1cc>
 8005540:	4a6e      	ldr	r2, [pc, #440]	@ (80056fc <LL_RCC_GetUSARTClockFreq+0x2fc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	f200 82c3 	bhi.w	8005ace <LL_RCC_GetUSARTClockFreq+0x6ce>
 8005548:	4a6d      	ldr	r2, [pc, #436]	@ (8005700 <LL_RCC_GetUSARTClockFreq+0x300>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02a      	beq.n	80055a4 <LL_RCC_GetUSARTClockFreq+0x1a4>
 800554e:	4a6c      	ldr	r2, [pc, #432]	@ (8005700 <LL_RCC_GetUSARTClockFreq+0x300>)
 8005550:	4293      	cmp	r3, r2
 8005552:	f200 82bc 	bhi.w	8005ace <LL_RCC_GetUSARTClockFreq+0x6ce>
 8005556:	4a66      	ldr	r2, [pc, #408]	@ (80056f0 <LL_RCC_GetUSARTClockFreq+0x2f0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <LL_RCC_GetUSARTClockFreq+0x164>
 800555c:	4a69      	ldr	r2, [pc, #420]	@ (8005704 <LL_RCC_GetUSARTClockFreq+0x304>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00c      	beq.n	800557c <LL_RCC_GetUSARTClockFreq+0x17c>
        }
        break;

      default:
        /* unreachable code */
        break;
 8005562:	e2b4      	b.n	8005ace <LL_RCC_GetUSARTClockFreq+0x6ce>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005564:	f000 ff30 	bl	80063c8 <RCC_GetSystemClockFreq>
 8005568:	4603      	mov	r3, r0
 800556a:	4618      	mov	r0, r3
 800556c:	f000 ff92 	bl	8006494 <RCC_GetHCLKClockFreq>
 8005570:	4603      	mov	r3, r0
 8005572:	4618      	mov	r0, r3
 8005574:	f000 ffa2 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 8005578:	6178      	str	r0, [r7, #20]
        break;
 800557a:	e2e3      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800557c:	f7ff fc2c 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 82a5 	beq.w	8005ad2 <LL_RCC_GetUSARTClockFreq+0x6d2>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005588:	f7ff fca8 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 829f 	beq.w	8005ad2 <LL_RCC_GetUSARTClockFreq+0x6d2>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005594:	f107 0308 	add.w	r3, r7, #8
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fdb1 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	617b      	str	r3, [r7, #20]
        break;
 80055a2:	e296      	b.n	8005ad2 <LL_RCC_GetUSARTClockFreq+0x6d2>
        if (LL_RCC_PLL3_IsReady() != 0U)
 80055a4:	f7ff fce2 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8293 	beq.w	8005ad6 <LL_RCC_GetUSARTClockFreq+0x6d6>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 80055b0:	f7ff fd5e 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 828d 	beq.w	8005ad6 <LL_RCC_GetUSARTClockFreq+0x6d6>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80055bc:	f107 0308 	add.w	r3, r7, #8
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fe3d 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	617b      	str	r3, [r7, #20]
        break;
 80055ca:	e284      	b.n	8005ad6 <LL_RCC_GetUSARTClockFreq+0x6d6>
        if (LL_RCC_HSI_IsReady() == 1U)
 80055cc:	f7ff faec 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	f040 8281 	bne.w	8005ada <LL_RCC_GetUSARTClockFreq+0x6da>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 80055d8:	f7ff faf8 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 80055dc:	4603      	mov	r3, r0
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	4a41      	ldr	r2, [pc, #260]	@ (80056e8 <LL_RCC_GetUSARTClockFreq+0x2e8>)
 80055e2:	fa42 f303 	asr.w	r3, r2, r3
 80055e6:	617b      	str	r3, [r7, #20]
        break;
 80055e8:	e277      	b.n	8005ada <LL_RCC_GetUSARTClockFreq+0x6da>
        if (LL_RCC_CSI_IsReady() == 1U)
 80055ea:	f7ff fafd 	bl	8004be8 <LL_RCC_CSI_IsReady>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 8274 	bne.w	8005ade <LL_RCC_GetUSARTClockFreq+0x6de>
          usart_frequency = CSI_VALUE;
 80055f6:	4b3d      	ldr	r3, [pc, #244]	@ (80056ec <LL_RCC_GetUSARTClockFreq+0x2ec>)
 80055f8:	617b      	str	r3, [r7, #20]
        break;
 80055fa:	e270      	b.n	8005ade <LL_RCC_GetUSARTClockFreq+0x6de>
        if (LL_RCC_LSE_IsReady() == 1U)
 80055fc:	f7ff fb08 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005600:	4603      	mov	r3, r0
 8005602:	2b01      	cmp	r3, #1
 8005604:	f040 826d 	bne.w	8005ae2 <LL_RCC_GetUSARTClockFreq+0x6e2>
          usart_frequency = LSE_VALUE;
 8005608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800560c:	617b      	str	r3, [r7, #20]
        break;
 800560e:	e268      	b.n	8005ae2 <LL_RCC_GetUSARTClockFreq+0x6e2>
    }
  }
  else if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3d      	ldr	r2, [pc, #244]	@ (8005708 <LL_RCC_GetUSARTClockFreq+0x308>)
 8005614:	4293      	cmp	r3, r2
 8005616:	f040 80a5 	bne.w	8005764 <LL_RCC_GetUSARTClockFreq+0x364>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff fb78 	bl	8004d10 <LL_RCC_GetUSARTClockSource>
 8005620:	4603      	mov	r3, r0
 8005622:	4a3a      	ldr	r2, [pc, #232]	@ (800570c <LL_RCC_GetUSARTClockFreq+0x30c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	f000 8093 	beq.w	8005750 <LL_RCC_GetUSARTClockFreq+0x350>
 800562a:	4a38      	ldr	r2, [pc, #224]	@ (800570c <LL_RCC_GetUSARTClockFreq+0x30c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	f200 825a 	bhi.w	8005ae6 <LL_RCC_GetUSARTClockFreq+0x6e6>
 8005632:	4a37      	ldr	r2, [pc, #220]	@ (8005710 <LL_RCC_GetUSARTClockFreq+0x310>)
 8005634:	4293      	cmp	r3, r2
 8005636:	f000 8082 	beq.w	800573e <LL_RCC_GetUSARTClockFreq+0x33e>
 800563a:	4a35      	ldr	r2, [pc, #212]	@ (8005710 <LL_RCC_GetUSARTClockFreq+0x310>)
 800563c:	4293      	cmp	r3, r2
 800563e:	f200 8252 	bhi.w	8005ae6 <LL_RCC_GetUSARTClockFreq+0x6e6>
 8005642:	4a34      	ldr	r2, [pc, #208]	@ (8005714 <LL_RCC_GetUSARTClockFreq+0x314>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d06b      	beq.n	8005720 <LL_RCC_GetUSARTClockFreq+0x320>
 8005648:	4a32      	ldr	r2, [pc, #200]	@ (8005714 <LL_RCC_GetUSARTClockFreq+0x314>)
 800564a:	4293      	cmp	r3, r2
 800564c:	f200 824b 	bhi.w	8005ae6 <LL_RCC_GetUSARTClockFreq+0x6e6>
 8005650:	4a31      	ldr	r2, [pc, #196]	@ (8005718 <LL_RCC_GetUSARTClockFreq+0x318>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d02a      	beq.n	80056ac <LL_RCC_GetUSARTClockFreq+0x2ac>
 8005656:	4a30      	ldr	r2, [pc, #192]	@ (8005718 <LL_RCC_GetUSARTClockFreq+0x318>)
 8005658:	4293      	cmp	r3, r2
 800565a:	f200 8244 	bhi.w	8005ae6 <LL_RCC_GetUSARTClockFreq+0x6e6>
 800565e:	4a2a      	ldr	r2, [pc, #168]	@ (8005708 <LL_RCC_GetUSARTClockFreq+0x308>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <LL_RCC_GetUSARTClockFreq+0x26c>
 8005664:	4a2d      	ldr	r2, [pc, #180]	@ (800571c <LL_RCC_GetUSARTClockFreq+0x31c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00c      	beq.n	8005684 <LL_RCC_GetUSARTClockFreq+0x284>
        }
        break;

      default:
        /* unreachable code */
        break;
 800566a:	e23c      	b.n	8005ae6 <LL_RCC_GetUSARTClockFreq+0x6e6>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800566c:	f000 feac 	bl	80063c8 <RCC_GetSystemClockFreq>
 8005670:	4603      	mov	r3, r0
 8005672:	4618      	mov	r0, r3
 8005674:	f000 ff0e 	bl	8006494 <RCC_GetHCLKClockFreq>
 8005678:	4603      	mov	r3, r0
 800567a:	4618      	mov	r0, r3
 800567c:	f000 ff1e 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 8005680:	6178      	str	r0, [r7, #20]
        break;
 8005682:	e25f      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8005684:	f7ff fba8 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 822d 	beq.w	8005aea <LL_RCC_GetUSARTClockFreq+0x6ea>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005690:	f7ff fc24 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8227 	beq.w	8005aea <LL_RCC_GetUSARTClockFreq+0x6ea>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800569c:	f107 0308 	add.w	r3, r7, #8
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fd2d 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	617b      	str	r3, [r7, #20]
        break;
 80056aa:	e21e      	b.n	8005aea <LL_RCC_GetUSARTClockFreq+0x6ea>
        if (LL_RCC_PLL3_IsReady() != 0U)
 80056ac:	f7ff fc5e 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 821b 	beq.w	8005aee <LL_RCC_GetUSARTClockFreq+0x6ee>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 80056b8:	f7ff fcda 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 8215 	beq.w	8005aee <LL_RCC_GetUSARTClockFreq+0x6ee>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80056c4:	f107 0308 	add.w	r3, r7, #8
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fdb9 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	617b      	str	r3, [r7, #20]
        break;
 80056d2:	e20c      	b.n	8005aee <LL_RCC_GetUSARTClockFreq+0x6ee>
 80056d4:	07050000 	.word	0x07050000
 80056d8:	07040000 	.word	0x07040000
 80056dc:	07030000 	.word	0x07030000
 80056e0:	07020000 	.word	0x07020000
 80056e4:	07010000 	.word	0x07010000
 80056e8:	03d09000 	.word	0x03d09000
 80056ec:	003d0900 	.word	0x003d0900
 80056f0:	07000300 	.word	0x07000300
 80056f4:	07050300 	.word	0x07050300
 80056f8:	07040300 	.word	0x07040300
 80056fc:	07030300 	.word	0x07030300
 8005700:	07020300 	.word	0x07020300
 8005704:	07010300 	.word	0x07010300
 8005708:	07000600 	.word	0x07000600
 800570c:	07050600 	.word	0x07050600
 8005710:	07040600 	.word	0x07040600
 8005714:	07030600 	.word	0x07030600
 8005718:	07020600 	.word	0x07020600
 800571c:	07010600 	.word	0x07010600
        if (LL_RCC_HSI_IsReady() == 1U)
 8005720:	f7ff fa42 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005724:	4603      	mov	r3, r0
 8005726:	2b01      	cmp	r3, #1
 8005728:	f040 81e3 	bne.w	8005af2 <LL_RCC_GetUSARTClockFreq+0x6f2>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800572c:	f7ff fa4e 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8005730:	4603      	mov	r3, r0
 8005732:	08db      	lsrs	r3, r3, #3
 8005734:	4aa9      	ldr	r2, [pc, #676]	@ (80059dc <LL_RCC_GetUSARTClockFreq+0x5dc>)
 8005736:	fa42 f303 	asr.w	r3, r2, r3
 800573a:	617b      	str	r3, [r7, #20]
        break;
 800573c:	e1d9      	b.n	8005af2 <LL_RCC_GetUSARTClockFreq+0x6f2>
        if (LL_RCC_CSI_IsReady() == 1U)
 800573e:	f7ff fa53 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8005742:	4603      	mov	r3, r0
 8005744:	2b01      	cmp	r3, #1
 8005746:	f040 81d6 	bne.w	8005af6 <LL_RCC_GetUSARTClockFreq+0x6f6>
          usart_frequency = CSI_VALUE;
 800574a:	4ba5      	ldr	r3, [pc, #660]	@ (80059e0 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 800574c:	617b      	str	r3, [r7, #20]
        break;
 800574e:	e1d2      	b.n	8005af6 <LL_RCC_GetUSARTClockFreq+0x6f6>
        if (LL_RCC_LSE_IsReady() == 1U)
 8005750:	f7ff fa5e 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005754:	4603      	mov	r3, r0
 8005756:	2b01      	cmp	r3, #1
 8005758:	f040 81cf 	bne.w	8005afa <LL_RCC_GetUSARTClockFreq+0x6fa>
          usart_frequency = LSE_VALUE;
 800575c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005760:	617b      	str	r3, [r7, #20]
        break;
 8005762:	e1ca      	b.n	8005afa <LL_RCC_GetUSARTClockFreq+0x6fa>
    }
  }

#if defined(USART6)
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a9f      	ldr	r2, [pc, #636]	@ (80059e4 <LL_RCC_GetUSARTClockFreq+0x5e4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d17c      	bne.n	8005866 <LL_RCC_GetUSARTClockFreq+0x466>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff facf 	bl	8004d10 <LL_RCC_GetUSARTClockSource>
 8005772:	4603      	mov	r3, r0
 8005774:	4a9c      	ldr	r2, [pc, #624]	@ (80059e8 <LL_RCC_GetUSARTClockFreq+0x5e8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d06b      	beq.n	8005852 <LL_RCC_GetUSARTClockFreq+0x452>
 800577a:	4a9b      	ldr	r2, [pc, #620]	@ (80059e8 <LL_RCC_GetUSARTClockFreq+0x5e8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	f200 81be 	bhi.w	8005afe <LL_RCC_GetUSARTClockFreq+0x6fe>
 8005782:	4a9a      	ldr	r2, [pc, #616]	@ (80059ec <LL_RCC_GetUSARTClockFreq+0x5ec>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d05b      	beq.n	8005840 <LL_RCC_GetUSARTClockFreq+0x440>
 8005788:	4a98      	ldr	r2, [pc, #608]	@ (80059ec <LL_RCC_GetUSARTClockFreq+0x5ec>)
 800578a:	4293      	cmp	r3, r2
 800578c:	f200 81b7 	bhi.w	8005afe <LL_RCC_GetUSARTClockFreq+0x6fe>
 8005790:	4a97      	ldr	r2, [pc, #604]	@ (80059f0 <LL_RCC_GetUSARTClockFreq+0x5f0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d045      	beq.n	8005822 <LL_RCC_GetUSARTClockFreq+0x422>
 8005796:	4a96      	ldr	r2, [pc, #600]	@ (80059f0 <LL_RCC_GetUSARTClockFreq+0x5f0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	f200 81b0 	bhi.w	8005afe <LL_RCC_GetUSARTClockFreq+0x6fe>
 800579e:	4a95      	ldr	r2, [pc, #596]	@ (80059f4 <LL_RCC_GetUSARTClockFreq+0x5f4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d02a      	beq.n	80057fa <LL_RCC_GetUSARTClockFreq+0x3fa>
 80057a4:	4a93      	ldr	r2, [pc, #588]	@ (80059f4 <LL_RCC_GetUSARTClockFreq+0x5f4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f200 81a9 	bhi.w	8005afe <LL_RCC_GetUSARTClockFreq+0x6fe>
 80057ac:	4a8d      	ldr	r2, [pc, #564]	@ (80059e4 <LL_RCC_GetUSARTClockFreq+0x5e4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <LL_RCC_GetUSARTClockFreq+0x3ba>
 80057b2:	4a91      	ldr	r2, [pc, #580]	@ (80059f8 <LL_RCC_GetUSARTClockFreq+0x5f8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00c      	beq.n	80057d2 <LL_RCC_GetUSARTClockFreq+0x3d2>
        }
        break;

      default:
        /* unreachable code */
        break;
 80057b8:	e1a1      	b.n	8005afe <LL_RCC_GetUSARTClockFreq+0x6fe>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80057ba:	f000 fe05 	bl	80063c8 <RCC_GetSystemClockFreq>
 80057be:	4603      	mov	r3, r0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fe67 	bl	8006494 <RCC_GetHCLKClockFreq>
 80057c6:	4603      	mov	r3, r0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fe77 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 80057ce:	6178      	str	r0, [r7, #20]
        break;
 80057d0:	e1b8      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 80057d2:	f7ff fb01 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8192 	beq.w	8005b02 <LL_RCC_GetUSARTClockFreq+0x702>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80057de:	f7ff fb7d 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 818c 	beq.w	8005b02 <LL_RCC_GetUSARTClockFreq+0x702>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 80057ea:	f107 0308 	add.w	r3, r7, #8
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff fc86 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	617b      	str	r3, [r7, #20]
        break;
 80057f8:	e183      	b.n	8005b02 <LL_RCC_GetUSARTClockFreq+0x702>
        if (LL_RCC_PLL3_IsReady() != 0U)
 80057fa:	f7ff fbb7 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8180 	beq.w	8005b06 <LL_RCC_GetUSARTClockFreq+0x706>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005806:	f7ff fc33 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 817a 	beq.w	8005b06 <LL_RCC_GetUSARTClockFreq+0x706>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fd12 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	617b      	str	r3, [r7, #20]
        break;
 8005820:	e171      	b.n	8005b06 <LL_RCC_GetUSARTClockFreq+0x706>
        if (LL_RCC_HSI_IsReady() == 1U)
 8005822:	f7ff f9c1 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005826:	4603      	mov	r3, r0
 8005828:	2b01      	cmp	r3, #1
 800582a:	f040 816e 	bne.w	8005b0a <LL_RCC_GetUSARTClockFreq+0x70a>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800582e:	f7ff f9cd 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8005832:	4603      	mov	r3, r0
 8005834:	08db      	lsrs	r3, r3, #3
 8005836:	4a69      	ldr	r2, [pc, #420]	@ (80059dc <LL_RCC_GetUSARTClockFreq+0x5dc>)
 8005838:	fa42 f303 	asr.w	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]
        break;
 800583e:	e164      	b.n	8005b0a <LL_RCC_GetUSARTClockFreq+0x70a>
        if (LL_RCC_CSI_IsReady() == 1U)
 8005840:	f7ff f9d2 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	f040 8161 	bne.w	8005b0e <LL_RCC_GetUSARTClockFreq+0x70e>
          usart_frequency = CSI_VALUE;
 800584c:	4b64      	ldr	r3, [pc, #400]	@ (80059e0 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 800584e:	617b      	str	r3, [r7, #20]
        break;
 8005850:	e15d      	b.n	8005b0e <LL_RCC_GetUSARTClockFreq+0x70e>
        if (LL_RCC_LSE_IsReady() == 1U)
 8005852:	f7ff f9dd 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005856:	4603      	mov	r3, r0
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 815a 	bne.w	8005b12 <LL_RCC_GetUSARTClockFreq+0x712>
          usart_frequency = LSE_VALUE;
 800585e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005862:	617b      	str	r3, [r7, #20]
        break;
 8005864:	e155      	b.n	8005b12 <LL_RCC_GetUSARTClockFreq+0x712>
    }
  }
#endif /* USART6 */

#if defined(USART10)
  else if (USARTxSource == LL_RCC_USART10_CLKSOURCE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a64      	ldr	r2, [pc, #400]	@ (80059fc <LL_RCC_GetUSARTClockFreq+0x5fc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d17c      	bne.n	8005968 <LL_RCC_GetUSARTClockFreq+0x568>
  {
    /* USART10CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fa4e 	bl	8004d10 <LL_RCC_GetUSARTClockSource>
 8005874:	4603      	mov	r3, r0
 8005876:	4a62      	ldr	r2, [pc, #392]	@ (8005a00 <LL_RCC_GetUSARTClockFreq+0x600>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d06b      	beq.n	8005954 <LL_RCC_GetUSARTClockFreq+0x554>
 800587c:	4a60      	ldr	r2, [pc, #384]	@ (8005a00 <LL_RCC_GetUSARTClockFreq+0x600>)
 800587e:	4293      	cmp	r3, r2
 8005880:	f200 8149 	bhi.w	8005b16 <LL_RCC_GetUSARTClockFreq+0x716>
 8005884:	4a5f      	ldr	r2, [pc, #380]	@ (8005a04 <LL_RCC_GetUSARTClockFreq+0x604>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d05b      	beq.n	8005942 <LL_RCC_GetUSARTClockFreq+0x542>
 800588a:	4a5e      	ldr	r2, [pc, #376]	@ (8005a04 <LL_RCC_GetUSARTClockFreq+0x604>)
 800588c:	4293      	cmp	r3, r2
 800588e:	f200 8142 	bhi.w	8005b16 <LL_RCC_GetUSARTClockFreq+0x716>
 8005892:	4a5d      	ldr	r2, [pc, #372]	@ (8005a08 <LL_RCC_GetUSARTClockFreq+0x608>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d045      	beq.n	8005924 <LL_RCC_GetUSARTClockFreq+0x524>
 8005898:	4a5b      	ldr	r2, [pc, #364]	@ (8005a08 <LL_RCC_GetUSARTClockFreq+0x608>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f200 813b 	bhi.w	8005b16 <LL_RCC_GetUSARTClockFreq+0x716>
 80058a0:	4a5a      	ldr	r2, [pc, #360]	@ (8005a0c <LL_RCC_GetUSARTClockFreq+0x60c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d02a      	beq.n	80058fc <LL_RCC_GetUSARTClockFreq+0x4fc>
 80058a6:	4a59      	ldr	r2, [pc, #356]	@ (8005a0c <LL_RCC_GetUSARTClockFreq+0x60c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	f200 8134 	bhi.w	8005b16 <LL_RCC_GetUSARTClockFreq+0x716>
 80058ae:	4a53      	ldr	r2, [pc, #332]	@ (80059fc <LL_RCC_GetUSARTClockFreq+0x5fc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <LL_RCC_GetUSARTClockFreq+0x4bc>
 80058b4:	4a56      	ldr	r2, [pc, #344]	@ (8005a10 <LL_RCC_GetUSARTClockFreq+0x610>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00c      	beq.n	80058d4 <LL_RCC_GetUSARTClockFreq+0x4d4>
        }
        break;

      default:
        /* unreachable code */
        break;
 80058ba:	e12c      	b.n	8005b16 <LL_RCC_GetUSARTClockFreq+0x716>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80058bc:	f000 fd84 	bl	80063c8 <RCC_GetSystemClockFreq>
 80058c0:	4603      	mov	r3, r0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fde6 	bl	8006494 <RCC_GetHCLKClockFreq>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fdf6 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 80058d0:	6178      	str	r0, [r7, #20]
        break;
 80058d2:	e137      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 80058d4:	f7ff fa80 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 811d 	beq.w	8005b1a <LL_RCC_GetUSARTClockFreq+0x71a>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80058e0:	f7ff fafc 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8117 	beq.w	8005b1a <LL_RCC_GetUSARTClockFreq+0x71a>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 80058ec:	f107 0308 	add.w	r3, r7, #8
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff fc05 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	617b      	str	r3, [r7, #20]
        break;
 80058fa:	e10e      	b.n	8005b1a <LL_RCC_GetUSARTClockFreq+0x71a>
        if (LL_RCC_PLL3_IsReady() != 0U)
 80058fc:	f7ff fb36 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 810b 	beq.w	8005b1e <LL_RCC_GetUSARTClockFreq+0x71e>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005908:	f7ff fbb2 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8105 	beq.w	8005b1e <LL_RCC_GetUSARTClockFreq+0x71e>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005914:	f107 0308 	add.w	r3, r7, #8
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fc91 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	617b      	str	r3, [r7, #20]
        break;
 8005922:	e0fc      	b.n	8005b1e <LL_RCC_GetUSARTClockFreq+0x71e>
        if (LL_RCC_HSI_IsReady() == 1U)
 8005924:	f7ff f940 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005928:	4603      	mov	r3, r0
 800592a:	2b01      	cmp	r3, #1
 800592c:	f040 80f9 	bne.w	8005b22 <LL_RCC_GetUSARTClockFreq+0x722>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8005930:	f7ff f94c 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8005934:	4603      	mov	r3, r0
 8005936:	08db      	lsrs	r3, r3, #3
 8005938:	4a28      	ldr	r2, [pc, #160]	@ (80059dc <LL_RCC_GetUSARTClockFreq+0x5dc>)
 800593a:	fa42 f303 	asr.w	r3, r2, r3
 800593e:	617b      	str	r3, [r7, #20]
        break;
 8005940:	e0ef      	b.n	8005b22 <LL_RCC_GetUSARTClockFreq+0x722>
        if (LL_RCC_CSI_IsReady() == 1U)
 8005942:	f7ff f951 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	f040 80ec 	bne.w	8005b26 <LL_RCC_GetUSARTClockFreq+0x726>
          usart_frequency = CSI_VALUE;
 800594e:	4b24      	ldr	r3, [pc, #144]	@ (80059e0 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 8005950:	617b      	str	r3, [r7, #20]
        break;
 8005952:	e0e8      	b.n	8005b26 <LL_RCC_GetUSARTClockFreq+0x726>
        if (LL_RCC_LSE_IsReady() == 1U)
 8005954:	f7ff f95c 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005958:	4603      	mov	r3, r0
 800595a:	2b01      	cmp	r3, #1
 800595c:	f040 80e5 	bne.w	8005b2a <LL_RCC_GetUSARTClockFreq+0x72a>
          usart_frequency = LSE_VALUE;
 8005960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005964:	617b      	str	r3, [r7, #20]
        break;
 8005966:	e0e0      	b.n	8005b2a <LL_RCC_GetUSARTClockFreq+0x72a>
    }
  }
#endif /* USART10 */

#if defined(USART11)
  else if (USARTxSource == LL_RCC_USART11_CLKSOURCE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a2a      	ldr	r2, [pc, #168]	@ (8005a14 <LL_RCC_GetUSARTClockFreq+0x614>)
 800596c:	4293      	cmp	r3, r2
 800596e:	f040 80e9 	bne.w	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
  {
    /* USART11CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff f9cc 	bl	8004d10 <LL_RCC_GetUSARTClockSource>
 8005978:	4603      	mov	r3, r0
 800597a:	4a27      	ldr	r2, [pc, #156]	@ (8005a18 <LL_RCC_GetUSARTClockFreq+0x618>)
 800597c:	4293      	cmp	r3, r2
 800597e:	f000 8091 	beq.w	8005aa4 <LL_RCC_GetUSARTClockFreq+0x6a4>
 8005982:	4a26      	ldr	r2, [pc, #152]	@ (8005a1c <LL_RCC_GetUSARTClockFreq+0x61c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	f080 80d2 	bcs.w	8005b2e <LL_RCC_GetUSARTClockFreq+0x72e>
 800598a:	4a25      	ldr	r2, [pc, #148]	@ (8005a20 <LL_RCC_GetUSARTClockFreq+0x620>)
 800598c:	4293      	cmp	r3, r2
 800598e:	f000 8081 	beq.w	8005a94 <LL_RCC_GetUSARTClockFreq+0x694>
 8005992:	4a23      	ldr	r2, [pc, #140]	@ (8005a20 <LL_RCC_GetUSARTClockFreq+0x620>)
 8005994:	4293      	cmp	r3, r2
 8005996:	f200 80ca 	bhi.w	8005b2e <LL_RCC_GetUSARTClockFreq+0x72e>
 800599a:	4a22      	ldr	r2, [pc, #136]	@ (8005a24 <LL_RCC_GetUSARTClockFreq+0x624>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d06b      	beq.n	8005a78 <LL_RCC_GetUSARTClockFreq+0x678>
 80059a0:	4a20      	ldr	r2, [pc, #128]	@ (8005a24 <LL_RCC_GetUSARTClockFreq+0x624>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	f200 80c3 	bhi.w	8005b2e <LL_RCC_GetUSARTClockFreq+0x72e>
 80059a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a28 <LL_RCC_GetUSARTClockFreq+0x628>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d052      	beq.n	8005a54 <LL_RCC_GetUSARTClockFreq+0x654>
 80059ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005a28 <LL_RCC_GetUSARTClockFreq+0x628>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	f200 80bc 	bhi.w	8005b2e <LL_RCC_GetUSARTClockFreq+0x72e>
 80059b6:	4a17      	ldr	r2, [pc, #92]	@ (8005a14 <LL_RCC_GetUSARTClockFreq+0x614>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <LL_RCC_GetUSARTClockFreq+0x5c4>
 80059bc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <LL_RCC_GetUSARTClockFreq+0x62c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d036      	beq.n	8005a30 <LL_RCC_GetUSARTClockFreq+0x630>
        }
        break;

      default:
        /* unreachable code */
        break;
 80059c2:	e0b4      	b.n	8005b2e <LL_RCC_GetUSARTClockFreq+0x72e>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80059c4:	f000 fd00 	bl	80063c8 <RCC_GetSystemClockFreq>
 80059c8:	4603      	mov	r3, r0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fd62 	bl	8006494 <RCC_GetHCLKClockFreq>
 80059d0:	4603      	mov	r3, r0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fd72 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 80059d8:	6178      	str	r0, [r7, #20]
        break;
 80059da:	e0b3      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
 80059dc:	03d09000 	.word	0x03d09000
 80059e0:	003d0900 	.word	0x003d0900
 80059e4:	07000f00 	.word	0x07000f00
 80059e8:	07050f00 	.word	0x07050f00
 80059ec:	07040f00 	.word	0x07040f00
 80059f0:	07030f00 	.word	0x07030f00
 80059f4:	07020f00 	.word	0x07020f00
 80059f8:	07010f00 	.word	0x07010f00
 80059fc:	07001b00 	.word	0x07001b00
 8005a00:	07051b00 	.word	0x07051b00
 8005a04:	07041b00 	.word	0x07041b00
 8005a08:	07031b00 	.word	0x07031b00
 8005a0c:	07021b00 	.word	0x07021b00
 8005a10:	07011b00 	.word	0x07011b00
 8005a14:	07000004 	.word	0x07000004
 8005a18:	07050004 	.word	0x07050004
 8005a1c:	07050005 	.word	0x07050005
 8005a20:	07040004 	.word	0x07040004
 8005a24:	07030004 	.word	0x07030004
 8005a28:	07020004 	.word	0x07020004
 8005a2c:	07010004 	.word	0x07010004
        if (LL_RCC_PLL2_IsReady() != 0U)
 8005a30:	f7ff f9d2 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d07b      	beq.n	8005b32 <LL_RCC_GetUSARTClockFreq+0x732>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005a3a:	f7ff fa4f 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d076      	beq.n	8005b32 <LL_RCC_GetUSARTClockFreq+0x732>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005a44:	f107 0308 	add.w	r3, r7, #8
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fb59 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	617b      	str	r3, [r7, #20]
        break;
 8005a52:	e06e      	b.n	8005b32 <LL_RCC_GetUSARTClockFreq+0x732>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8005a54:	f7ff fa8a 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d06b      	beq.n	8005b36 <LL_RCC_GetUSARTClockFreq+0x736>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005a5e:	f7ff fb07 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d066      	beq.n	8005b36 <LL_RCC_GetUSARTClockFreq+0x736>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005a68:	f107 0308 	add.w	r3, r7, #8
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fbe7 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	617b      	str	r3, [r7, #20]
        break;
 8005a76:	e05e      	b.n	8005b36 <LL_RCC_GetUSARTClockFreq+0x736>
        if (LL_RCC_HSI_IsReady() == 1U)
 8005a78:	f7ff f896 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d15b      	bne.n	8005b3a <LL_RCC_GetUSARTClockFreq+0x73a>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8005a82:	f7ff f8a3 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8005a86:	4603      	mov	r3, r0
 8005a88:	08db      	lsrs	r3, r3, #3
 8005a8a:	4a31      	ldr	r2, [pc, #196]	@ (8005b50 <LL_RCC_GetUSARTClockFreq+0x750>)
 8005a8c:	fa42 f303 	asr.w	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
        break;
 8005a92:	e052      	b.n	8005b3a <LL_RCC_GetUSARTClockFreq+0x73a>
        if (LL_RCC_CSI_IsReady() == 1U)
 8005a94:	f7ff f8a8 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d14f      	bne.n	8005b3e <LL_RCC_GetUSARTClockFreq+0x73e>
          usart_frequency = CSI_VALUE;
 8005a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005b54 <LL_RCC_GetUSARTClockFreq+0x754>)
 8005aa0:	617b      	str	r3, [r7, #20]
        break;
 8005aa2:	e04c      	b.n	8005b3e <LL_RCC_GetUSARTClockFreq+0x73e>
        if (LL_RCC_LSE_IsReady() == 1U)
 8005aa4:	f7ff f8b4 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d149      	bne.n	8005b42 <LL_RCC_GetUSARTClockFreq+0x742>
          usart_frequency = LSE_VALUE;
 8005aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ab2:	617b      	str	r3, [r7, #20]
        break;
 8005ab4:	e045      	b.n	8005b42 <LL_RCC_GetUSARTClockFreq+0x742>
        break;
 8005ab6:	bf00      	nop
 8005ab8:	e044      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005aba:	bf00      	nop
 8005abc:	e042      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e040      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ac2:	bf00      	nop
 8005ac4:	e03e      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ac6:	bf00      	nop
 8005ac8:	e03c      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005aca:	bf00      	nop
 8005acc:	e03a      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e038      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e036      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ad6:	bf00      	nop
 8005ad8:	e034      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ada:	bf00      	nop
 8005adc:	e032      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ade:	bf00      	nop
 8005ae0:	e030      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ae2:	bf00      	nop
 8005ae4:	e02e      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005ae6:	bf00      	nop
 8005ae8:	e02c      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005aea:	bf00      	nop
 8005aec:	e02a      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005aee:	bf00      	nop
 8005af0:	e028      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005af2:	bf00      	nop
 8005af4:	e026      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005af6:	bf00      	nop
 8005af8:	e024      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005afa:	bf00      	nop
 8005afc:	e022      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005afe:	bf00      	nop
 8005b00:	e020      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b02:	bf00      	nop
 8005b04:	e01e      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b06:	bf00      	nop
 8005b08:	e01c      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e01a      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b0e:	bf00      	nop
 8005b10:	e018      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b12:	bf00      	nop
 8005b14:	e016      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b16:	bf00      	nop
 8005b18:	e014      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b1a:	bf00      	nop
 8005b1c:	e012      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b1e:	bf00      	nop
 8005b20:	e010      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b22:	bf00      	nop
 8005b24:	e00e      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b26:	bf00      	nop
 8005b28:	e00c      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e00a      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b2e:	bf00      	nop
 8005b30:	e008      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b32:	bf00      	nop
 8005b34:	e006      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b36:	bf00      	nop
 8005b38:	e004      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b3a:	bf00      	nop
 8005b3c:	e002      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b3e:	bf00      	nop
 8005b40:	e000      	b.n	8005b44 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8005b42:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return usart_frequency;
 8005b44:	697b      	ldr	r3, [r7, #20]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	03d09000 	.word	0x03d09000
 8005b54:	003d0900 	.word	0x003d0900

08005b58 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART12_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4ab1      	ldr	r2, [pc, #708]	@ (8005e2c <LL_RCC_GetUARTClockFreq+0x2d4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d17c      	bne.n	8005c66 <LL_RCC_GetUARTClockFreq+0x10e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff f8db 	bl	8004d28 <LL_RCC_GetUARTClockSource>
 8005b72:	4603      	mov	r3, r0
 8005b74:	4aae      	ldr	r2, [pc, #696]	@ (8005e30 <LL_RCC_GetUARTClockFreq+0x2d8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d06b      	beq.n	8005c52 <LL_RCC_GetUARTClockFreq+0xfa>
 8005b7a:	4aad      	ldr	r2, [pc, #692]	@ (8005e30 <LL_RCC_GetUARTClockFreq+0x2d8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	f200 8346 	bhi.w	800620e <LL_RCC_GetUARTClockFreq+0x6b6>
 8005b82:	4aac      	ldr	r2, [pc, #688]	@ (8005e34 <LL_RCC_GetUARTClockFreq+0x2dc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d05b      	beq.n	8005c40 <LL_RCC_GetUARTClockFreq+0xe8>
 8005b88:	4aaa      	ldr	r2, [pc, #680]	@ (8005e34 <LL_RCC_GetUARTClockFreq+0x2dc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	f200 833f 	bhi.w	800620e <LL_RCC_GetUARTClockFreq+0x6b6>
 8005b90:	4aa9      	ldr	r2, [pc, #676]	@ (8005e38 <LL_RCC_GetUARTClockFreq+0x2e0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <LL_RCC_GetUARTClockFreq+0xca>
 8005b96:	4aa8      	ldr	r2, [pc, #672]	@ (8005e38 <LL_RCC_GetUARTClockFreq+0x2e0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	f200 8338 	bhi.w	800620e <LL_RCC_GetUARTClockFreq+0x6b6>
 8005b9e:	4aa7      	ldr	r2, [pc, #668]	@ (8005e3c <LL_RCC_GetUARTClockFreq+0x2e4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d02a      	beq.n	8005bfa <LL_RCC_GetUARTClockFreq+0xa2>
 8005ba4:	4aa5      	ldr	r2, [pc, #660]	@ (8005e3c <LL_RCC_GetUARTClockFreq+0x2e4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f200 8331 	bhi.w	800620e <LL_RCC_GetUARTClockFreq+0x6b6>
 8005bac:	4a9f      	ldr	r2, [pc, #636]	@ (8005e2c <LL_RCC_GetUARTClockFreq+0x2d4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <LL_RCC_GetUARTClockFreq+0x62>
 8005bb2:	4aa3      	ldr	r2, [pc, #652]	@ (8005e40 <LL_RCC_GetUARTClockFreq+0x2e8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00c      	beq.n	8005bd2 <LL_RCC_GetUARTClockFreq+0x7a>
        }
        break;

      default:
        /* unreachable code */
        break;
 8005bb8:	e329      	b.n	800620e <LL_RCC_GetUARTClockFreq+0x6b6>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005bba:	f000 fc05 	bl	80063c8 <RCC_GetSystemClockFreq>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fc67 	bl	8006494 <RCC_GetHCLKClockFreq>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fc77 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 8005bce:	6178      	str	r0, [r7, #20]
        break;
 8005bd0:	e364      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8005bd2:	f7ff f901 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 831a 	beq.w	8006212 <LL_RCC_GetUARTClockFreq+0x6ba>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005bde:	f7ff f97d 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8314 	beq.w	8006212 <LL_RCC_GetUARTClockFreq+0x6ba>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005bea:	f107 0308 	add.w	r3, r7, #8
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fa86 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	617b      	str	r3, [r7, #20]
        break;
 8005bf8:	e30b      	b.n	8006212 <LL_RCC_GetUARTClockFreq+0x6ba>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8005bfa:	f7ff f9b7 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8308 	beq.w	8006216 <LL_RCC_GetUARTClockFreq+0x6be>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005c06:	f7ff fa33 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8302 	beq.w	8006216 <LL_RCC_GetUARTClockFreq+0x6be>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005c12:	f107 0308 	add.w	r3, r7, #8
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fb12 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	617b      	str	r3, [r7, #20]
        break;
 8005c20:	e2f9      	b.n	8006216 <LL_RCC_GetUARTClockFreq+0x6be>
        if (LL_RCC_HSI_IsReady() == 1U)
 8005c22:	f7fe ffc1 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f040 82f6 	bne.w	800621a <LL_RCC_GetUARTClockFreq+0x6c2>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8005c2e:	f7fe ffcd 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8005c32:	4603      	mov	r3, r0
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	4a83      	ldr	r2, [pc, #524]	@ (8005e44 <LL_RCC_GetUARTClockFreq+0x2ec>)
 8005c38:	fa42 f303 	asr.w	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]
        break;
 8005c3e:	e2ec      	b.n	800621a <LL_RCC_GetUARTClockFreq+0x6c2>
        if (LL_RCC_CSI_IsReady() == 1U)
 8005c40:	f7fe ffd2 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	f040 82e9 	bne.w	800621e <LL_RCC_GetUARTClockFreq+0x6c6>
          uart_frequency = CSI_VALUE;
 8005c4c:	4b7e      	ldr	r3, [pc, #504]	@ (8005e48 <LL_RCC_GetUARTClockFreq+0x2f0>)
 8005c4e:	617b      	str	r3, [r7, #20]
        break;
 8005c50:	e2e5      	b.n	800621e <LL_RCC_GetUARTClockFreq+0x6c6>
        if (LL_RCC_LSE_IsReady() == 1U)
 8005c52:	f7fe ffdd 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f040 82e2 	bne.w	8006222 <LL_RCC_GetUARTClockFreq+0x6ca>
          uart_frequency = LSE_VALUE;
 8005c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c62:	617b      	str	r3, [r7, #20]
        break;
 8005c64:	e2dd      	b.n	8006222 <LL_RCC_GetUARTClockFreq+0x6ca>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a78      	ldr	r2, [pc, #480]	@ (8005e4c <LL_RCC_GetUARTClockFreq+0x2f4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d17c      	bne.n	8005d68 <LL_RCC_GetUARTClockFreq+0x210>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff f85a 	bl	8004d28 <LL_RCC_GetUARTClockSource>
 8005c74:	4603      	mov	r3, r0
 8005c76:	4a76      	ldr	r2, [pc, #472]	@ (8005e50 <LL_RCC_GetUARTClockFreq+0x2f8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d06b      	beq.n	8005d54 <LL_RCC_GetUARTClockFreq+0x1fc>
 8005c7c:	4a74      	ldr	r2, [pc, #464]	@ (8005e50 <LL_RCC_GetUARTClockFreq+0x2f8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f200 82d1 	bhi.w	8006226 <LL_RCC_GetUARTClockFreq+0x6ce>
 8005c84:	4a73      	ldr	r2, [pc, #460]	@ (8005e54 <LL_RCC_GetUARTClockFreq+0x2fc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d05b      	beq.n	8005d42 <LL_RCC_GetUARTClockFreq+0x1ea>
 8005c8a:	4a72      	ldr	r2, [pc, #456]	@ (8005e54 <LL_RCC_GetUARTClockFreq+0x2fc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	f200 82ca 	bhi.w	8006226 <LL_RCC_GetUARTClockFreq+0x6ce>
 8005c92:	4a71      	ldr	r2, [pc, #452]	@ (8005e58 <LL_RCC_GetUARTClockFreq+0x300>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d045      	beq.n	8005d24 <LL_RCC_GetUARTClockFreq+0x1cc>
 8005c98:	4a6f      	ldr	r2, [pc, #444]	@ (8005e58 <LL_RCC_GetUARTClockFreq+0x300>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	f200 82c3 	bhi.w	8006226 <LL_RCC_GetUARTClockFreq+0x6ce>
 8005ca0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e5c <LL_RCC_GetUARTClockFreq+0x304>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d02a      	beq.n	8005cfc <LL_RCC_GetUARTClockFreq+0x1a4>
 8005ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8005e5c <LL_RCC_GetUARTClockFreq+0x304>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	f200 82bc 	bhi.w	8006226 <LL_RCC_GetUARTClockFreq+0x6ce>
 8005cae:	4a67      	ldr	r2, [pc, #412]	@ (8005e4c <LL_RCC_GetUARTClockFreq+0x2f4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <LL_RCC_GetUARTClockFreq+0x164>
 8005cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e60 <LL_RCC_GetUARTClockFreq+0x308>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00c      	beq.n	8005cd4 <LL_RCC_GetUARTClockFreq+0x17c>
        }
        break;

      default:
        /* unreachable code */
        break;
 8005cba:	e2b4      	b.n	8006226 <LL_RCC_GetUARTClockFreq+0x6ce>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005cbc:	f000 fb84 	bl	80063c8 <RCC_GetSystemClockFreq>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fbe6 	bl	8006494 <RCC_GetHCLKClockFreq>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fbf6 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 8005cd0:	6178      	str	r0, [r7, #20]
        break;
 8005cd2:	e2e3      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8005cd4:	f7ff f880 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 82a5 	beq.w	800622a <LL_RCC_GetUARTClockFreq+0x6d2>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005ce0:	f7ff f8fc 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 829f 	beq.w	800622a <LL_RCC_GetUARTClockFreq+0x6d2>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005cec:	f107 0308 	add.w	r3, r7, #8
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fa05 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	617b      	str	r3, [r7, #20]
        break;
 8005cfa:	e296      	b.n	800622a <LL_RCC_GetUARTClockFreq+0x6d2>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8005cfc:	f7ff f936 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8293 	beq.w	800622e <LL_RCC_GetUARTClockFreq+0x6d6>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005d08:	f7ff f9b2 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 828d 	beq.w	800622e <LL_RCC_GetUARTClockFreq+0x6d6>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fa91 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	617b      	str	r3, [r7, #20]
        break;
 8005d22:	e284      	b.n	800622e <LL_RCC_GetUARTClockFreq+0x6d6>
        if (LL_RCC_HSI_IsReady() == 1U)
 8005d24:	f7fe ff40 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	f040 8281 	bne.w	8006232 <LL_RCC_GetUARTClockFreq+0x6da>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8005d30:	f7fe ff4c 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8005d34:	4603      	mov	r3, r0
 8005d36:	08db      	lsrs	r3, r3, #3
 8005d38:	4a42      	ldr	r2, [pc, #264]	@ (8005e44 <LL_RCC_GetUARTClockFreq+0x2ec>)
 8005d3a:	fa42 f303 	asr.w	r3, r2, r3
 8005d3e:	617b      	str	r3, [r7, #20]
        break;
 8005d40:	e277      	b.n	8006232 <LL_RCC_GetUARTClockFreq+0x6da>
        if (LL_RCC_CSI_IsReady() == 1U)
 8005d42:	f7fe ff51 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	f040 8274 	bne.w	8006236 <LL_RCC_GetUARTClockFreq+0x6de>
          uart_frequency = CSI_VALUE;
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e48 <LL_RCC_GetUARTClockFreq+0x2f0>)
 8005d50:	617b      	str	r3, [r7, #20]
        break;
 8005d52:	e270      	b.n	8006236 <LL_RCC_GetUARTClockFreq+0x6de>
        if (LL_RCC_LSE_IsReady() == 1U)
 8005d54:	f7fe ff5c 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	f040 826d 	bne.w	800623a <LL_RCC_GetUARTClockFreq+0x6e2>
          uart_frequency = LSE_VALUE;
 8005d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d64:	617b      	str	r3, [r7, #20]
        break;
 8005d66:	e268      	b.n	800623a <LL_RCC_GetUARTClockFreq+0x6e2>
    }
  }
#if defined(UART7)
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e64 <LL_RCC_GetUARTClockFreq+0x30c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	f040 80a7 	bne.w	8005ec0 <LL_RCC_GetUARTClockFreq+0x368>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fe ffd8 	bl	8004d28 <LL_RCC_GetUARTClockSource>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e68 <LL_RCC_GetUARTClockFreq+0x310>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	f000 8095 	beq.w	8005eac <LL_RCC_GetUARTClockFreq+0x354>
 8005d82:	4a39      	ldr	r2, [pc, #228]	@ (8005e68 <LL_RCC_GetUARTClockFreq+0x310>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	f200 825a 	bhi.w	800623e <LL_RCC_GetUARTClockFreq+0x6e6>
 8005d8a:	4a38      	ldr	r2, [pc, #224]	@ (8005e6c <LL_RCC_GetUARTClockFreq+0x314>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	f000 8084 	beq.w	8005e9a <LL_RCC_GetUARTClockFreq+0x342>
 8005d92:	4a36      	ldr	r2, [pc, #216]	@ (8005e6c <LL_RCC_GetUARTClockFreq+0x314>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	f200 8252 	bhi.w	800623e <LL_RCC_GetUARTClockFreq+0x6e6>
 8005d9a:	4a35      	ldr	r2, [pc, #212]	@ (8005e70 <LL_RCC_GetUARTClockFreq+0x318>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d06d      	beq.n	8005e7c <LL_RCC_GetUARTClockFreq+0x324>
 8005da0:	4a33      	ldr	r2, [pc, #204]	@ (8005e70 <LL_RCC_GetUARTClockFreq+0x318>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f200 824b 	bhi.w	800623e <LL_RCC_GetUARTClockFreq+0x6e6>
 8005da8:	4a32      	ldr	r2, [pc, #200]	@ (8005e74 <LL_RCC_GetUARTClockFreq+0x31c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d02a      	beq.n	8005e04 <LL_RCC_GetUARTClockFreq+0x2ac>
 8005dae:	4a31      	ldr	r2, [pc, #196]	@ (8005e74 <LL_RCC_GetUARTClockFreq+0x31c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	f200 8244 	bhi.w	800623e <LL_RCC_GetUARTClockFreq+0x6e6>
 8005db6:	4a2b      	ldr	r2, [pc, #172]	@ (8005e64 <LL_RCC_GetUARTClockFreq+0x30c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <LL_RCC_GetUARTClockFreq+0x26c>
 8005dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8005e78 <LL_RCC_GetUARTClockFreq+0x320>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00c      	beq.n	8005ddc <LL_RCC_GetUARTClockFreq+0x284>
        }
        break;

      default:
        /* unreachable code */
        break;
 8005dc2:	e23c      	b.n	800623e <LL_RCC_GetUARTClockFreq+0x6e6>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005dc4:	f000 fb00 	bl	80063c8 <RCC_GetSystemClockFreq>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fb62 	bl	8006494 <RCC_GetHCLKClockFreq>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fb72 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 8005dd8:	6178      	str	r0, [r7, #20]
        break;
 8005dda:	e25f      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8005ddc:	f7fe fffc 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 822d 	beq.w	8006242 <LL_RCC_GetUARTClockFreq+0x6ea>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005de8:	f7ff f878 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8227 	beq.w	8006242 <LL_RCC_GetUARTClockFreq+0x6ea>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005df4:	f107 0308 	add.w	r3, r7, #8
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff f981 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	617b      	str	r3, [r7, #20]
        break;
 8005e02:	e21e      	b.n	8006242 <LL_RCC_GetUARTClockFreq+0x6ea>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8005e04:	f7ff f8b2 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 821b 	beq.w	8006246 <LL_RCC_GetUARTClockFreq+0x6ee>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005e10:	f7ff f92e 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8215 	beq.w	8006246 <LL_RCC_GetUARTClockFreq+0x6ee>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff fa0d 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	617b      	str	r3, [r7, #20]
        break;
 8005e2a:	e20c      	b.n	8006246 <LL_RCC_GetUARTClockFreq+0x6ee>
 8005e2c:	07000900 	.word	0x07000900
 8005e30:	07050900 	.word	0x07050900
 8005e34:	07040900 	.word	0x07040900
 8005e38:	07030900 	.word	0x07030900
 8005e3c:	07020900 	.word	0x07020900
 8005e40:	07010900 	.word	0x07010900
 8005e44:	03d09000 	.word	0x03d09000
 8005e48:	003d0900 	.word	0x003d0900
 8005e4c:	07000c00 	.word	0x07000c00
 8005e50:	07050c00 	.word	0x07050c00
 8005e54:	07040c00 	.word	0x07040c00
 8005e58:	07030c00 	.word	0x07030c00
 8005e5c:	07020c00 	.word	0x07020c00
 8005e60:	07010c00 	.word	0x07010c00
 8005e64:	07001200 	.word	0x07001200
 8005e68:	07051200 	.word	0x07051200
 8005e6c:	07041200 	.word	0x07041200
 8005e70:	07031200 	.word	0x07031200
 8005e74:	07021200 	.word	0x07021200
 8005e78:	07011200 	.word	0x07011200
        if (LL_RCC_HSI_IsReady() == 1U)
 8005e7c:	f7fe fe94 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	f040 81e1 	bne.w	800624a <LL_RCC_GetUARTClockFreq+0x6f2>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8005e88:	f7fe fea0 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	08db      	lsrs	r3, r3, #3
 8005e90:	4aa9      	ldr	r2, [pc, #676]	@ (8006138 <LL_RCC_GetUARTClockFreq+0x5e0>)
 8005e92:	fa42 f303 	asr.w	r3, r2, r3
 8005e96:	617b      	str	r3, [r7, #20]
        break;
 8005e98:	e1d7      	b.n	800624a <LL_RCC_GetUARTClockFreq+0x6f2>
        if (LL_RCC_CSI_IsReady() == 1U)
 8005e9a:	f7fe fea5 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	f040 81d4 	bne.w	800624e <LL_RCC_GetUARTClockFreq+0x6f6>
          uart_frequency = CSI_VALUE;
 8005ea6:	4ba5      	ldr	r3, [pc, #660]	@ (800613c <LL_RCC_GetUARTClockFreq+0x5e4>)
 8005ea8:	617b      	str	r3, [r7, #20]
        break;
 8005eaa:	e1d0      	b.n	800624e <LL_RCC_GetUARTClockFreq+0x6f6>
        if (LL_RCC_LSE_IsReady() == 1U)
 8005eac:	f7fe feb0 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	f040 81cd 	bne.w	8006252 <LL_RCC_GetUARTClockFreq+0x6fa>
          uart_frequency = LSE_VALUE;
 8005eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ebc:	617b      	str	r3, [r7, #20]
        break;
 8005ebe:	e1c8      	b.n	8006252 <LL_RCC_GetUARTClockFreq+0x6fa>
    }
  }
#endif /* UART7 */
#if defined(UART8)
  else if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a9f      	ldr	r2, [pc, #636]	@ (8006140 <LL_RCC_GetUARTClockFreq+0x5e8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d17c      	bne.n	8005fc2 <LL_RCC_GetUARTClockFreq+0x46a>
  {
    /* UART8CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fe ff2d 	bl	8004d28 <LL_RCC_GetUARTClockSource>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4a9c      	ldr	r2, [pc, #624]	@ (8006144 <LL_RCC_GetUARTClockFreq+0x5ec>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d06b      	beq.n	8005fae <LL_RCC_GetUARTClockFreq+0x456>
 8005ed6:	4a9b      	ldr	r2, [pc, #620]	@ (8006144 <LL_RCC_GetUARTClockFreq+0x5ec>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	f200 81bc 	bhi.w	8006256 <LL_RCC_GetUARTClockFreq+0x6fe>
 8005ede:	4a9a      	ldr	r2, [pc, #616]	@ (8006148 <LL_RCC_GetUARTClockFreq+0x5f0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d05b      	beq.n	8005f9c <LL_RCC_GetUARTClockFreq+0x444>
 8005ee4:	4a98      	ldr	r2, [pc, #608]	@ (8006148 <LL_RCC_GetUARTClockFreq+0x5f0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f200 81b5 	bhi.w	8006256 <LL_RCC_GetUARTClockFreq+0x6fe>
 8005eec:	4a97      	ldr	r2, [pc, #604]	@ (800614c <LL_RCC_GetUARTClockFreq+0x5f4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d045      	beq.n	8005f7e <LL_RCC_GetUARTClockFreq+0x426>
 8005ef2:	4a96      	ldr	r2, [pc, #600]	@ (800614c <LL_RCC_GetUARTClockFreq+0x5f4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	f200 81ae 	bhi.w	8006256 <LL_RCC_GetUARTClockFreq+0x6fe>
 8005efa:	4a95      	ldr	r2, [pc, #596]	@ (8006150 <LL_RCC_GetUARTClockFreq+0x5f8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d02a      	beq.n	8005f56 <LL_RCC_GetUARTClockFreq+0x3fe>
 8005f00:	4a93      	ldr	r2, [pc, #588]	@ (8006150 <LL_RCC_GetUARTClockFreq+0x5f8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	f200 81a7 	bhi.w	8006256 <LL_RCC_GetUARTClockFreq+0x6fe>
 8005f08:	4a8d      	ldr	r2, [pc, #564]	@ (8006140 <LL_RCC_GetUARTClockFreq+0x5e8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d003      	beq.n	8005f16 <LL_RCC_GetUARTClockFreq+0x3be>
 8005f0e:	4a91      	ldr	r2, [pc, #580]	@ (8006154 <LL_RCC_GetUARTClockFreq+0x5fc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00c      	beq.n	8005f2e <LL_RCC_GetUARTClockFreq+0x3d6>
        }
        break;

      default:
        /* unreachable code */
        break;
 8005f14:	e19f      	b.n	8006256 <LL_RCC_GetUARTClockFreq+0x6fe>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005f16:	f000 fa57 	bl	80063c8 <RCC_GetSystemClockFreq>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fab9 	bl	8006494 <RCC_GetHCLKClockFreq>
 8005f22:	4603      	mov	r3, r0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fac9 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 8005f2a:	6178      	str	r0, [r7, #20]
        break;
 8005f2c:	e1b6      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8005f2e:	f7fe ff53 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8190 	beq.w	800625a <LL_RCC_GetUARTClockFreq+0x702>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8005f3a:	f7fe ffcf 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 818a 	beq.w	800625a <LL_RCC_GetUARTClockFreq+0x702>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005f46:	f107 0308 	add.w	r3, r7, #8
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff f8d8 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	617b      	str	r3, [r7, #20]
        break;
 8005f54:	e181      	b.n	800625a <LL_RCC_GetUARTClockFreq+0x702>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8005f56:	f7ff f809 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 817e 	beq.w	800625e <LL_RCC_GetUARTClockFreq+0x706>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005f62:	f7ff f885 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8178 	beq.w	800625e <LL_RCC_GetUARTClockFreq+0x706>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005f6e:	f107 0308 	add.w	r3, r7, #8
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff f964 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	617b      	str	r3, [r7, #20]
        break;
 8005f7c:	e16f      	b.n	800625e <LL_RCC_GetUARTClockFreq+0x706>
        if (LL_RCC_HSI_IsReady() == 1U)
 8005f7e:	f7fe fe13 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 816c 	bne.w	8006262 <LL_RCC_GetUARTClockFreq+0x70a>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8005f8a:	f7fe fe1f 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	08db      	lsrs	r3, r3, #3
 8005f92:	4a69      	ldr	r2, [pc, #420]	@ (8006138 <LL_RCC_GetUARTClockFreq+0x5e0>)
 8005f94:	fa42 f303 	asr.w	r3, r2, r3
 8005f98:	617b      	str	r3, [r7, #20]
        break;
 8005f9a:	e162      	b.n	8006262 <LL_RCC_GetUARTClockFreq+0x70a>
        if (LL_RCC_CSI_IsReady() == 1U)
 8005f9c:	f7fe fe24 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	f040 815f 	bne.w	8006266 <LL_RCC_GetUARTClockFreq+0x70e>
          uart_frequency = CSI_VALUE;
 8005fa8:	4b64      	ldr	r3, [pc, #400]	@ (800613c <LL_RCC_GetUARTClockFreq+0x5e4>)
 8005faa:	617b      	str	r3, [r7, #20]
        break;
 8005fac:	e15b      	b.n	8006266 <LL_RCC_GetUARTClockFreq+0x70e>
        if (LL_RCC_LSE_IsReady() == 1U)
 8005fae:	f7fe fe2f 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	f040 8158 	bne.w	800626a <LL_RCC_GetUARTClockFreq+0x712>
          uart_frequency = LSE_VALUE;
 8005fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fbe:	617b      	str	r3, [r7, #20]
        break;
 8005fc0:	e153      	b.n	800626a <LL_RCC_GetUARTClockFreq+0x712>
    }
  }
#endif /* UART8 */
#if defined(UART9)
  else if (UARTxSource == LL_RCC_UART9_CLKSOURCE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a64      	ldr	r2, [pc, #400]	@ (8006158 <LL_RCC_GetUARTClockFreq+0x600>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d17c      	bne.n	80060c4 <LL_RCC_GetUARTClockFreq+0x56c>
  {
    /* UART9CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fe feac 	bl	8004d28 <LL_RCC_GetUARTClockSource>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4a62      	ldr	r2, [pc, #392]	@ (800615c <LL_RCC_GetUARTClockFreq+0x604>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d06b      	beq.n	80060b0 <LL_RCC_GetUARTClockFreq+0x558>
 8005fd8:	4a60      	ldr	r2, [pc, #384]	@ (800615c <LL_RCC_GetUARTClockFreq+0x604>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f200 8147 	bhi.w	800626e <LL_RCC_GetUARTClockFreq+0x716>
 8005fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8006160 <LL_RCC_GetUARTClockFreq+0x608>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d05b      	beq.n	800609e <LL_RCC_GetUARTClockFreq+0x546>
 8005fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8006160 <LL_RCC_GetUARTClockFreq+0x608>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	f200 8140 	bhi.w	800626e <LL_RCC_GetUARTClockFreq+0x716>
 8005fee:	4a5d      	ldr	r2, [pc, #372]	@ (8006164 <LL_RCC_GetUARTClockFreq+0x60c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d045      	beq.n	8006080 <LL_RCC_GetUARTClockFreq+0x528>
 8005ff4:	4a5b      	ldr	r2, [pc, #364]	@ (8006164 <LL_RCC_GetUARTClockFreq+0x60c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	f200 8139 	bhi.w	800626e <LL_RCC_GetUARTClockFreq+0x716>
 8005ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8006168 <LL_RCC_GetUARTClockFreq+0x610>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d02a      	beq.n	8006058 <LL_RCC_GetUARTClockFreq+0x500>
 8006002:	4a59      	ldr	r2, [pc, #356]	@ (8006168 <LL_RCC_GetUARTClockFreq+0x610>)
 8006004:	4293      	cmp	r3, r2
 8006006:	f200 8132 	bhi.w	800626e <LL_RCC_GetUARTClockFreq+0x716>
 800600a:	4a53      	ldr	r2, [pc, #332]	@ (8006158 <LL_RCC_GetUARTClockFreq+0x600>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <LL_RCC_GetUARTClockFreq+0x4c0>
 8006010:	4a56      	ldr	r2, [pc, #344]	@ (800616c <LL_RCC_GetUARTClockFreq+0x614>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00c      	beq.n	8006030 <LL_RCC_GetUARTClockFreq+0x4d8>
        }
        break;

      default:
        /* unreachable code */
        break;
 8006016:	e12a      	b.n	800626e <LL_RCC_GetUARTClockFreq+0x716>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006018:	f000 f9d6 	bl	80063c8 <RCC_GetSystemClockFreq>
 800601c:	4603      	mov	r3, r0
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fa38 	bl	8006494 <RCC_GetHCLKClockFreq>
 8006024:	4603      	mov	r3, r0
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fa48 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 800602c:	6178      	str	r0, [r7, #20]
        break;
 800602e:	e135      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8006030:	f7fe fed2 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 811b 	beq.w	8006272 <LL_RCC_GetUARTClockFreq+0x71a>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800603c:	f7fe ff4e 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8115 	beq.w	8006272 <LL_RCC_GetUARTClockFreq+0x71a>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff f857 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	617b      	str	r3, [r7, #20]
        break;
 8006056:	e10c      	b.n	8006272 <LL_RCC_GetUARTClockFreq+0x71a>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8006058:	f7fe ff88 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8109 	beq.w	8006276 <LL_RCC_GetUARTClockFreq+0x71e>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8006064:	f7ff f804 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8103 	beq.w	8006276 <LL_RCC_GetUARTClockFreq+0x71e>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8006070:	f107 0308 	add.w	r3, r7, #8
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff f8e3 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	617b      	str	r3, [r7, #20]
        break;
 800607e:	e0fa      	b.n	8006276 <LL_RCC_GetUARTClockFreq+0x71e>
        if (LL_RCC_HSI_IsReady() == 1U)
 8006080:	f7fe fd92 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8006084:	4603      	mov	r3, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	f040 80f7 	bne.w	800627a <LL_RCC_GetUARTClockFreq+0x722>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800608c:	f7fe fd9e 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8006090:	4603      	mov	r3, r0
 8006092:	08db      	lsrs	r3, r3, #3
 8006094:	4a28      	ldr	r2, [pc, #160]	@ (8006138 <LL_RCC_GetUARTClockFreq+0x5e0>)
 8006096:	fa42 f303 	asr.w	r3, r2, r3
 800609a:	617b      	str	r3, [r7, #20]
        break;
 800609c:	e0ed      	b.n	800627a <LL_RCC_GetUARTClockFreq+0x722>
        if (LL_RCC_CSI_IsReady() == 1U)
 800609e:	f7fe fda3 	bl	8004be8 <LL_RCC_CSI_IsReady>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 80ea 	bne.w	800627e <LL_RCC_GetUARTClockFreq+0x726>
          uart_frequency = CSI_VALUE;
 80060aa:	4b24      	ldr	r3, [pc, #144]	@ (800613c <LL_RCC_GetUARTClockFreq+0x5e4>)
 80060ac:	617b      	str	r3, [r7, #20]
        break;
 80060ae:	e0e6      	b.n	800627e <LL_RCC_GetUARTClockFreq+0x726>
        if (LL_RCC_LSE_IsReady() == 1U)
 80060b0:	f7fe fdae 	bl	8004c10 <LL_RCC_LSE_IsReady>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	f040 80e3 	bne.w	8006282 <LL_RCC_GetUARTClockFreq+0x72a>
          uart_frequency = LSE_VALUE;
 80060bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060c0:	617b      	str	r3, [r7, #20]
        break;
 80060c2:	e0de      	b.n	8006282 <LL_RCC_GetUARTClockFreq+0x72a>
    }
  }
#endif /* UART9 */
#if defined(UART12)
  else if (UARTxSource == LL_RCC_UART12_CLKSOURCE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006170 <LL_RCC_GetUARTClockFreq+0x618>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	f040 80e7 	bne.w	800629c <LL_RCC_GetUARTClockFreq+0x744>
  {
    /* UART12CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fe fe2a 	bl	8004d28 <LL_RCC_GetUARTClockSource>
 80060d4:	4603      	mov	r3, r0
 80060d6:	4a27      	ldr	r2, [pc, #156]	@ (8006174 <LL_RCC_GetUARTClockFreq+0x61c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	f000 808f 	beq.w	80061fc <LL_RCC_GetUARTClockFreq+0x6a4>
 80060de:	4a25      	ldr	r2, [pc, #148]	@ (8006174 <LL_RCC_GetUARTClockFreq+0x61c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	f200 80d0 	bhi.w	8006286 <LL_RCC_GetUARTClockFreq+0x72e>
 80060e6:	4a24      	ldr	r2, [pc, #144]	@ (8006178 <LL_RCC_GetUARTClockFreq+0x620>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d07f      	beq.n	80061ec <LL_RCC_GetUARTClockFreq+0x694>
 80060ec:	4a22      	ldr	r2, [pc, #136]	@ (8006178 <LL_RCC_GetUARTClockFreq+0x620>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	f200 80c9 	bhi.w	8006286 <LL_RCC_GetUARTClockFreq+0x72e>
 80060f4:	4a21      	ldr	r2, [pc, #132]	@ (800617c <LL_RCC_GetUARTClockFreq+0x624>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d06a      	beq.n	80061d0 <LL_RCC_GetUARTClockFreq+0x678>
 80060fa:	4a20      	ldr	r2, [pc, #128]	@ (800617c <LL_RCC_GetUARTClockFreq+0x624>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	f200 80c2 	bhi.w	8006286 <LL_RCC_GetUARTClockFreq+0x72e>
 8006102:	4a1f      	ldr	r2, [pc, #124]	@ (8006180 <LL_RCC_GetUARTClockFreq+0x628>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d051      	beq.n	80061ac <LL_RCC_GetUARTClockFreq+0x654>
 8006108:	4a1d      	ldr	r2, [pc, #116]	@ (8006180 <LL_RCC_GetUARTClockFreq+0x628>)
 800610a:	4293      	cmp	r3, r2
 800610c:	f200 80bb 	bhi.w	8006286 <LL_RCC_GetUARTClockFreq+0x72e>
 8006110:	4a17      	ldr	r2, [pc, #92]	@ (8006170 <LL_RCC_GetUARTClockFreq+0x618>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d003      	beq.n	800611e <LL_RCC_GetUARTClockFreq+0x5c6>
 8006116:	4a1b      	ldr	r2, [pc, #108]	@ (8006184 <LL_RCC_GetUARTClockFreq+0x62c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d035      	beq.n	8006188 <LL_RCC_GetUARTClockFreq+0x630>
        }
        break;

      default:
        /* unreachable code */
        break;
 800611c:	e0b3      	b.n	8006286 <LL_RCC_GetUARTClockFreq+0x72e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800611e:	f000 f953 	bl	80063c8 <RCC_GetSystemClockFreq>
 8006122:	4603      	mov	r3, r0
 8006124:	4618      	mov	r0, r3
 8006126:	f000 f9b5 	bl	8006494 <RCC_GetHCLKClockFreq>
 800612a:	4603      	mov	r3, r0
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f9c5 	bl	80064bc <RCC_GetPCLK1ClockFreq>
 8006132:	6178      	str	r0, [r7, #20]
        break;
 8006134:	e0b2      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
 8006136:	bf00      	nop
 8006138:	03d09000 	.word	0x03d09000
 800613c:	003d0900 	.word	0x003d0900
 8006140:	07001500 	.word	0x07001500
 8006144:	07051500 	.word	0x07051500
 8006148:	07041500 	.word	0x07041500
 800614c:	07031500 	.word	0x07031500
 8006150:	07021500 	.word	0x07021500
 8006154:	07011500 	.word	0x07011500
 8006158:	07001800 	.word	0x07001800
 800615c:	07051800 	.word	0x07051800
 8006160:	07041800 	.word	0x07041800
 8006164:	07031800 	.word	0x07031800
 8006168:	07021800 	.word	0x07021800
 800616c:	07011800 	.word	0x07011800
 8006170:	07000404 	.word	0x07000404
 8006174:	07050404 	.word	0x07050404
 8006178:	07040404 	.word	0x07040404
 800617c:	07030404 	.word	0x07030404
 8006180:	07020404 	.word	0x07020404
 8006184:	07010404 	.word	0x07010404
        if (LL_RCC_PLL2_IsReady() != 0U)
 8006188:	f7fe fe26 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d07b      	beq.n	800628a <LL_RCC_GetUARTClockFreq+0x732>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8006192:	f7fe fea3 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d076      	beq.n	800628a <LL_RCC_GetUARTClockFreq+0x732>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800619c:	f107 0308 	add.w	r3, r7, #8
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe ffad 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	617b      	str	r3, [r7, #20]
        break;
 80061aa:	e06e      	b.n	800628a <LL_RCC_GetUARTClockFreq+0x732>
        if (LL_RCC_PLL3_IsReady() != 0U)
 80061ac:	f7fe fede 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d06b      	beq.n	800628e <LL_RCC_GetUARTClockFreq+0x736>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 80061b6:	f7fe ff5b 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d066      	beq.n	800628e <LL_RCC_GetUARTClockFreq+0x736>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff f83b 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	617b      	str	r3, [r7, #20]
        break;
 80061ce:	e05e      	b.n	800628e <LL_RCC_GetUARTClockFreq+0x736>
        if (LL_RCC_HSI_IsReady() == 1U)
 80061d0:	f7fe fcea 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d15b      	bne.n	8006292 <LL_RCC_GetUARTClockFreq+0x73a>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 80061da:	f7fe fcf7 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 80061de:	4603      	mov	r3, r0
 80061e0:	08db      	lsrs	r3, r3, #3
 80061e2:	4a31      	ldr	r2, [pc, #196]	@ (80062a8 <LL_RCC_GetUARTClockFreq+0x750>)
 80061e4:	fa42 f303 	asr.w	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]
        break;
 80061ea:	e052      	b.n	8006292 <LL_RCC_GetUARTClockFreq+0x73a>
        if (LL_RCC_CSI_IsReady() == 1U)
 80061ec:	f7fe fcfc 	bl	8004be8 <LL_RCC_CSI_IsReady>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d14f      	bne.n	8006296 <LL_RCC_GetUARTClockFreq+0x73e>
          uart_frequency = CSI_VALUE;
 80061f6:	4b2d      	ldr	r3, [pc, #180]	@ (80062ac <LL_RCC_GetUARTClockFreq+0x754>)
 80061f8:	617b      	str	r3, [r7, #20]
        break;
 80061fa:	e04c      	b.n	8006296 <LL_RCC_GetUARTClockFreq+0x73e>
        if (LL_RCC_LSE_IsReady() == 1U)
 80061fc:	f7fe fd08 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8006200:	4603      	mov	r3, r0
 8006202:	2b01      	cmp	r3, #1
 8006204:	d149      	bne.n	800629a <LL_RCC_GetUARTClockFreq+0x742>
          uart_frequency = LSE_VALUE;
 8006206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620a:	617b      	str	r3, [r7, #20]
        break;
 800620c:	e045      	b.n	800629a <LL_RCC_GetUARTClockFreq+0x742>
        break;
 800620e:	bf00      	nop
 8006210:	e044      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006212:	bf00      	nop
 8006214:	e042      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006216:	bf00      	nop
 8006218:	e040      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800621a:	bf00      	nop
 800621c:	e03e      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800621e:	bf00      	nop
 8006220:	e03c      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006222:	bf00      	nop
 8006224:	e03a      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006226:	bf00      	nop
 8006228:	e038      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800622a:	bf00      	nop
 800622c:	e036      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800622e:	bf00      	nop
 8006230:	e034      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006232:	bf00      	nop
 8006234:	e032      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006236:	bf00      	nop
 8006238:	e030      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800623a:	bf00      	nop
 800623c:	e02e      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800623e:	bf00      	nop
 8006240:	e02c      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006242:	bf00      	nop
 8006244:	e02a      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006246:	bf00      	nop
 8006248:	e028      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800624a:	bf00      	nop
 800624c:	e026      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800624e:	bf00      	nop
 8006250:	e024      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006252:	bf00      	nop
 8006254:	e022      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006256:	bf00      	nop
 8006258:	e020      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800625a:	bf00      	nop
 800625c:	e01e      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800625e:	bf00      	nop
 8006260:	e01c      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006262:	bf00      	nop
 8006264:	e01a      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006266:	bf00      	nop
 8006268:	e018      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800626a:	bf00      	nop
 800626c:	e016      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800626e:	bf00      	nop
 8006270:	e014      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006272:	bf00      	nop
 8006274:	e012      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006276:	bf00      	nop
 8006278:	e010      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800627a:	bf00      	nop
 800627c:	e00e      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800627e:	bf00      	nop
 8006280:	e00c      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006282:	bf00      	nop
 8006284:	e00a      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006286:	bf00      	nop
 8006288:	e008      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800628a:	bf00      	nop
 800628c:	e006      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800628e:	bf00      	nop
 8006290:	e004      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006292:	bf00      	nop
 8006294:	e002      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800629a:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return uart_frequency;
 800629c:	697b      	ldr	r3, [r7, #20]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	03d09000 	.word	0x03d09000
 80062ac:	003d0900 	.word	0x003d0900

080062b0 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fe fd3f 	bl	8004d40 <LL_RCC_GetLPUARTClockSource>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062c8:	d060      	beq.n	800638c <LL_RCC_GetLPUARTClockFreq+0xdc>
 80062ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062ce:	d866      	bhi.n	800639e <LL_RCC_GetLPUARTClockFreq+0xee>
 80062d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062d4:	d052      	beq.n	800637c <LL_RCC_GetLPUARTClockFreq+0xcc>
 80062d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062da:	d860      	bhi.n	800639e <LL_RCC_GetLPUARTClockFreq+0xee>
 80062dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062e0:	d03e      	beq.n	8006360 <LL_RCC_GetLPUARTClockFreq+0xb0>
 80062e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062e6:	d85a      	bhi.n	800639e <LL_RCC_GetLPUARTClockFreq+0xee>
 80062e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ec:	d026      	beq.n	800633c <LL_RCC_GetLPUARTClockFreq+0x8c>
 80062ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062f2:	d854      	bhi.n	800639e <LL_RCC_GetLPUARTClockFreq+0xee>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <LL_RCC_GetLPUARTClockFreq+0x50>
 80062f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062fc:	d00c      	beq.n	8006318 <LL_RCC_GetLPUARTClockFreq+0x68>
      }
      break;

    default:
      /* unreachable code */
      break;
 80062fe:	e04e      	b.n	800639e <LL_RCC_GetLPUARTClockFreq+0xee>
      lpuart_frequency = RCC_GetPCLK3ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006300:	f000 f862 	bl	80063c8 <RCC_GetSystemClockFreq>
 8006304:	4603      	mov	r3, r0
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f8c4 	bl	8006494 <RCC_GetHCLKClockFreq>
 800630c:	4603      	mov	r3, r0
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f8fe 	bl	8006510 <RCC_GetPCLK3ClockFreq>
 8006314:	6178      	str	r0, [r7, #20]
      break;
 8006316:	e04d      	b.n	80063b4 <LL_RCC_GetLPUARTClockFreq+0x104>
      if (LL_RCC_PLL2_IsReady() != 0U)
 8006318:	f7fe fd5e 	bl	8004dd8 <LL_RCC_PLL2_IsReady>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d03f      	beq.n	80063a2 <LL_RCC_GetLPUARTClockFreq+0xf2>
        if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8006322:	f7fe fddb 	bl	8004edc <LL_RCC_PLL2Q_IsEnabled>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d03a      	beq.n	80063a2 <LL_RCC_GetLPUARTClockFreq+0xf2>
          LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800632c:	f107 0308 	add.w	r3, r7, #8
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe fee5 	bl	8005100 <LL_RCC_GetPLL2ClockFreq>
          lpuart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	617b      	str	r3, [r7, #20]
      break;
 800633a:	e032      	b.n	80063a2 <LL_RCC_GetLPUARTClockFreq+0xf2>
      if (LL_RCC_PLL3_IsReady() != 0U)
 800633c:	f7fe fe16 	bl	8004f6c <LL_RCC_PLL3_IsReady>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d02f      	beq.n	80063a6 <LL_RCC_GetLPUARTClockFreq+0xf6>
        if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8006346:	f7fe fe93 	bl	8005070 <LL_RCC_PLL3Q_IsEnabled>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02a      	beq.n	80063a6 <LL_RCC_GetLPUARTClockFreq+0xf6>
          LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8006350:	f107 0308 	add.w	r3, r7, #8
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe ff73 	bl	8005240 <LL_RCC_GetPLL3ClockFreq>
          lpuart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	617b      	str	r3, [r7, #20]
      break;
 800635e:	e022      	b.n	80063a6 <LL_RCC_GetLPUARTClockFreq+0xf6>
      if (LL_RCC_HSI_IsReady() == 1U)
 8006360:	f7fe fc22 	bl	8004ba8 <LL_RCC_HSI_IsReady>
 8006364:	4603      	mov	r3, r0
 8006366:	2b01      	cmp	r3, #1
 8006368:	d11f      	bne.n	80063aa <LL_RCC_GetLPUARTClockFreq+0xfa>
        lpuart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800636a:	f7fe fc2f 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 800636e:	4603      	mov	r3, r0
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	4a13      	ldr	r2, [pc, #76]	@ (80063c0 <LL_RCC_GetLPUARTClockFreq+0x110>)
 8006374:	fa42 f303 	asr.w	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
      break;
 800637a:	e016      	b.n	80063aa <LL_RCC_GetLPUARTClockFreq+0xfa>
      if (LL_RCC_CSI_IsReady() == 1U)
 800637c:	f7fe fc34 	bl	8004be8 <LL_RCC_CSI_IsReady>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d113      	bne.n	80063ae <LL_RCC_GetLPUARTClockFreq+0xfe>
        lpuart_frequency = CSI_VALUE;
 8006386:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <LL_RCC_GetLPUARTClockFreq+0x114>)
 8006388:	617b      	str	r3, [r7, #20]
      break;
 800638a:	e010      	b.n	80063ae <LL_RCC_GetLPUARTClockFreq+0xfe>
      if (LL_RCC_LSE_IsReady() == 1U)
 800638c:	f7fe fc40 	bl	8004c10 <LL_RCC_LSE_IsReady>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d10d      	bne.n	80063b2 <LL_RCC_GetLPUARTClockFreq+0x102>
        lpuart_frequency = LSE_VALUE;
 8006396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800639a:	617b      	str	r3, [r7, #20]
      break;
 800639c:	e009      	b.n	80063b2 <LL_RCC_GetLPUARTClockFreq+0x102>
      break;
 800639e:	bf00      	nop
 80063a0:	e008      	b.n	80063b4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 80063a2:	bf00      	nop
 80063a4:	e006      	b.n	80063b4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 80063a6:	bf00      	nop
 80063a8:	e004      	b.n	80063b4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 80063aa:	bf00      	nop
 80063ac:	e002      	b.n	80063b4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 80063ae:	bf00      	nop
 80063b0:	e000      	b.n	80063b4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 80063b2:	bf00      	nop
  }

  return lpuart_frequency;
 80063b4:	697b      	ldr	r3, [r7, #20]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	03d09000 	.word	0x03d09000
 80063c4:	003d0900 	.word	0x003d0900

080063c8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80063ce:	f7fe fc33 	bl	8004c38 <LL_RCC_GetSysClkSource>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b18      	cmp	r3, #24
 80063d6:	d848      	bhi.n	800646a <RCC_GetSystemClockFreq+0xa2>
 80063d8:	a201      	add	r2, pc, #4	@ (adr r2, 80063e0 <RCC_GetSystemClockFreq+0x18>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	08006445 	.word	0x08006445
 80063e4:	0800646b 	.word	0x0800646b
 80063e8:	0800646b 	.word	0x0800646b
 80063ec:	0800646b 	.word	0x0800646b
 80063f0:	0800646b 	.word	0x0800646b
 80063f4:	0800646b 	.word	0x0800646b
 80063f8:	0800646b 	.word	0x0800646b
 80063fc:	0800646b 	.word	0x0800646b
 8006400:	08006457 	.word	0x08006457
 8006404:	0800646b 	.word	0x0800646b
 8006408:	0800646b 	.word	0x0800646b
 800640c:	0800646b 	.word	0x0800646b
 8006410:	0800646b 	.word	0x0800646b
 8006414:	0800646b 	.word	0x0800646b
 8006418:	0800646b 	.word	0x0800646b
 800641c:	0800646b 	.word	0x0800646b
 8006420:	0800645d 	.word	0x0800645d
 8006424:	0800646b 	.word	0x0800646b
 8006428:	0800646b 	.word	0x0800646b
 800642c:	0800646b 	.word	0x0800646b
 8006430:	0800646b 	.word	0x0800646b
 8006434:	0800646b 	.word	0x0800646b
 8006438:	0800646b 	.word	0x0800646b
 800643c:	0800646b 	.word	0x0800646b
 8006440:	08006463 	.word	0x08006463
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:   /* HSI used as system clock  source */
      frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8006444:	f7fe fbc2 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8006448:	4603      	mov	r3, r0
 800644a:	08db      	lsrs	r3, r3, #3
 800644c:	4a0e      	ldr	r2, [pc, #56]	@ (8006488 <RCC_GetSystemClockFreq+0xc0>)
 800644e:	fa42 f303 	asr.w	r3, r2, r3
 8006452:	607b      	str	r3, [r7, #4]
      break;
 8006454:	e012      	b.n	800647c <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:   /* CSI used as system clock  source */
      frequency = CSI_VALUE;
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <RCC_GetSystemClockFreq+0xc4>)
 8006458:	607b      	str	r3, [r7, #4]
      break;
 800645a:	e00f      	b.n	800647c <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:   /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800645c:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <RCC_GetSystemClockFreq+0xc8>)
 800645e:	607b      	str	r3, [r7, #4]
      break;
 8006460:	e00c      	b.n	800647c <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:  /* PLL1 used as system clock  source */
      frequency = RCC_PLL1_GetFreqSystem();
 8006462:	f000 f869 	bl	8006538 <RCC_PLL1_GetFreqSystem>
 8006466:	6078      	str	r0, [r7, #4]
      break;
 8006468:	e008      	b.n	800647c <RCC_GetSystemClockFreq+0xb4>

    default:
      frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800646a:	f7fe fbaf 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 800646e:	4603      	mov	r3, r0
 8006470:	08db      	lsrs	r3, r3, #3
 8006472:	4a05      	ldr	r2, [pc, #20]	@ (8006488 <RCC_GetSystemClockFreq+0xc0>)
 8006474:	fa42 f303 	asr.w	r3, r2, r3
 8006478:	607b      	str	r3, [r7, #4]
      break;
 800647a:	bf00      	nop
  }

  return frequency;
 800647c:	687b      	ldr	r3, [r7, #4]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	03d09000 	.word	0x03d09000
 800648c:	003d0900 	.word	0x003d0900
 8006490:	01312d00 	.word	0x01312d00

08006494 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800649c:	f7fe fbda 	bl	8004c54 <LL_RCC_GetAHBPrescaler>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	4a04      	ldr	r2, [pc, #16]	@ (80064b8 <RCC_GetHCLKClockFreq+0x24>)
 80064a8:	5cd3      	ldrb	r3, [r2, r3]
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	40d3      	lsrs	r3, r2
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	08009b48 	.word	0x08009b48

080064bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80064c4:	f7fe fbd4 	bl	8004c70 <LL_RCC_GetAPB1Prescaler>
 80064c8:	4603      	mov	r3, r0
 80064ca:	091b      	lsrs	r3, r3, #4
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	4a04      	ldr	r2, [pc, #16]	@ (80064e4 <RCC_GetPCLK1ClockFreq+0x28>)
 80064d2:	5cd3      	ldrb	r3, [r2, r3]
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	40d3      	lsrs	r3, r2
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	08009b58 	.word	0x08009b58

080064e8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80064f0:	f7fe fbcc 	bl	8004c8c <LL_RCC_GetAPB2Prescaler>
 80064f4:	4603      	mov	r3, r0
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	4a04      	ldr	r2, [pc, #16]	@ (800650c <RCC_GetPCLK2ClockFreq+0x24>)
 80064fa:	5cd3      	ldrb	r3, [r2, r3]
 80064fc:	461a      	mov	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	40d3      	lsrs	r3, r2
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	08009b58 	.word	0x08009b58

08006510 <RCC_GetPCLK3ClockFreq>:
  * @brief  Return PCLK3 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK3 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK3ClockFreq(uint32_t HCLK_Frequency)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* PCLK3 clock frequency */
  return __LL_RCC_CALC_PCLK3_FREQ(HCLK_Frequency, LL_RCC_GetAPB3Prescaler());
 8006518:	f7fe fbc6 	bl	8004ca8 <LL_RCC_GetAPB3Prescaler>
 800651c:	4603      	mov	r3, r0
 800651e:	0b1b      	lsrs	r3, r3, #12
 8006520:	4a04      	ldr	r2, [pc, #16]	@ (8006534 <RCC_GetPCLK3ClockFreq+0x24>)
 8006522:	5cd3      	ldrb	r3, [r2, r3]
 8006524:	461a      	mov	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	40d3      	lsrs	r3, r2
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	08009b58 	.word	0x08009b58

08006538 <RCC_PLL1_GetFreqSystem>:
/**
  * @brief  Return PLL1 clock frequency used for system clock
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t RCC_PLL1_GetFreqSystem(void)
{
 8006538:	b590      	push	{r4, r7, lr}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL1_GetSource();
 800653e:	f7fe fc11 	bl	8004d64 <LL_RCC_PLL1_GetSource>
 8006542:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b03      	cmp	r3, #3
 8006548:	d015      	beq.n	8006576 <RCC_PLL1_GetFreqSystem+0x3e>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d815      	bhi.n	800657c <RCC_PLL1_GetFreqSystem+0x44>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d003      	beq.n	800655e <RCC_PLL1_GetFreqSystem+0x26>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d009      	beq.n	8006570 <RCC_PLL1_GetFreqSystem+0x38>
 800655c:	e00e      	b.n	800657c <RCC_PLL1_GetFreqSystem+0x44>
  {
    case LL_RCC_PLL1SOURCE_HSI:  /* HSI used as PLL1 clock source */
      pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800655e:	f7fe fb35 	bl	8004bcc <LL_RCC_HSI_GetDivider>
 8006562:	4603      	mov	r3, r0
 8006564:	08db      	lsrs	r3, r3, #3
 8006566:	4a11      	ldr	r2, [pc, #68]	@ (80065ac <RCC_PLL1_GetFreqSystem+0x74>)
 8006568:	fa42 f303 	asr.w	r3, r2, r3
 800656c:	607b      	str	r3, [r7, #4]
      break;
 800656e:	e008      	b.n	8006582 <RCC_PLL1_GetFreqSystem+0x4a>

    case LL_RCC_PLL1SOURCE_CSI:  /* CSI used as PLL1 clock source */
      pllinputfreq = CSI_VALUE;
 8006570:	4b0f      	ldr	r3, [pc, #60]	@ (80065b0 <RCC_PLL1_GetFreqSystem+0x78>)
 8006572:	607b      	str	r3, [r7, #4]
      break;
 8006574:	e005      	b.n	8006582 <RCC_PLL1_GetFreqSystem+0x4a>

    case LL_RCC_PLL1SOURCE_HSE:  /* HSE used as PLL1 clock source */
      pllinputfreq = HSE_VALUE;
 8006576:	4b0f      	ldr	r3, [pc, #60]	@ (80065b4 <RCC_PLL1_GetFreqSystem+0x7c>)
 8006578:	607b      	str	r3, [r7, #4]
      break;
 800657a:	e002      	b.n	8006582 <RCC_PLL1_GetFreqSystem+0x4a>

    default:
      pllinputfreq = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	607b      	str	r3, [r7, #4]
      break;
 8006580:	bf00      	nop
  }
  return __LL_RCC_CALC_PLL1CLK_P_FREQ(pllinputfreq, LL_RCC_PLL1_GetM(),
 8006582:	f7fe fc1b 	bl	8004dbc <LL_RCC_PLL1_GetM>
 8006586:	4602      	mov	r2, r0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	fbb3 f4f2 	udiv	r4, r3, r2
 800658e:	f7fe fbf7 	bl	8004d80 <LL_RCC_PLL1_GetN>
 8006592:	4603      	mov	r3, r0
 8006594:	fb03 f404 	mul.w	r4, r3, r4
 8006598:	f7fe fc00 	bl	8004d9c <LL_RCC_PLL1_GetP>
 800659c:	4603      	mov	r3, r0
 800659e:	fbb4 f3f3 	udiv	r3, r4, r3
                                      LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetP());
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd90      	pop	{r4, r7, pc}
 80065aa:	bf00      	nop
 80065ac:	03d09000 	.word	0x03d09000
 80065b0:	003d0900 	.word	0x003d0900
 80065b4:	01312d00 	.word	0x01312d00

080065b8 <LL_SPI_IsEnabled>:
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <LL_SPI_IsEnabled+0x18>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <LL_SPI_IsEnabled+0x1a>
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <LL_SPI_SetInternalSSLevel>:
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <LL_SPI_GetNSSPolarity>:
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff ffb4 	bl	80065b8 <LL_SPI_IsEnabled>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d169      	bne.n	800672a <LL_SPI_Init+0xee>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits & SPI_CFG1_BPASS bit
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_BPASS | SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	4b36      	ldr	r3, [pc, #216]	@ (8006734 <LL_SPI_Init+0xf8>)
 800665c:	4013      	ands	r3, r2
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	6991      	ldr	r1, [r2, #24]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	6a12      	ldr	r2, [r2, #32]
 8006666:	4311      	orrs	r1, r2
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	6892      	ldr	r2, [r2, #8]
 800666c:	430a      	orrs	r2, r1
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff ffbf 	bl	8006604 <LL_SPI_GetNSSPolarity>
 8006686:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800668e:	d112      	bne.n	80066b6 <LL_SPI_Init+0x7a>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <LL_SPI_Init+0x62>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800669c:	d006      	beq.n	80066ac <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a4:	d107      	bne.n	80066b6 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 80066ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ff94 	bl	80065de <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f023 531f 	bic.w	r3, r3, #666894336	@ 0x27c00000
 80066be:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	6951      	ldr	r1, [r2, #20]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	68d2      	ldr	r2, [r2, #12]
 80066ca:	4311      	orrs	r1, r2
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	6912      	ldr	r2, [r2, #16]
 80066d0:	4311      	orrs	r1, r2
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	69d2      	ldr	r2, [r2, #28]
 80066d6:	4311      	orrs	r1, r2
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	6852      	ldr	r2, [r2, #4]
 80066dc:	4311      	orrs	r1, r2
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 80066e6:	430a      	orrs	r2, r1
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800670c:	d105      	bne.n	800671a <LL_SPI_Init+0xde>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff ff83 	bl	8006620 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800671e:	f023 0201 	bic.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	0fbfffe0 	.word	0x0fbfffe0

08006738 <LL_USART_IsEnabled>:
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <LL_USART_IsEnabled+0x18>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <LL_USART_IsEnabled+0x1a>
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <LL_USART_SetPrescaler>:
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676c:	f023 030f 	bic.w	r3, r3, #15
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	b292      	uxth	r2, r2
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <LL_USART_SetStopBitsLength>:
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	605a      	str	r2, [r3, #4]
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <LL_USART_SetHWFlowCtrl>:
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	609a      	str	r2, [r3, #8]
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <LL_USART_SetBaudRate>:
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b0b      	cmp	r3, #11
 80067e6:	d83c      	bhi.n	8006862 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d039      	beq.n	8006862 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067f4:	d122      	bne.n	800683c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006870 <LL_USART_SetBaudRate+0x9c>)
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	005a      	lsls	r2, r3, #1
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	441a      	add	r2, r3
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	b29b      	uxth	r3, r3
 8006818:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8006820:	4013      	ands	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	b29b      	uxth	r3, r3
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	60da      	str	r2, [r3, #12]
}
 800683a:	e012      	b.n	8006862 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <LL_USART_SetBaudRate+0x9c>)
 8006844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	fbb2 f2f3 	udiv	r2, r2, r3
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	441a      	add	r2, r3
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	fbb2 f3f3 	udiv	r3, r2, r3
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	60da      	str	r2, [r3, #12]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	0800b248 	.word	0x0800b248

08006874 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006882:	2300      	movs	r3, #0
 8006884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff ff56 	bl	8006738 <LL_USART_IsEnabled>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 80a5 	bne.w	80069de <LL_USART_Init+0x16a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	4b53      	ldr	r3, [pc, #332]	@ (80069e8 <LL_USART_Init+0x174>)
 800689a:	4013      	ands	r3, r2
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	6891      	ldr	r1, [r2, #8]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	6912      	ldr	r2, [r2, #16]
 80068a4:	4311      	orrs	r1, r2
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	6952      	ldr	r2, [r2, #20]
 80068aa:	4311      	orrs	r1, r2
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	69d2      	ldr	r2, [r2, #28]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff ff61 	bl	8006786 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ff6e 	bl	80067ac <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a46      	ldr	r2, [pc, #280]	@ (80069ec <LL_USART_Init+0x178>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d105      	bne.n	80068e4 <LL_USART_Init+0x70>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80068d8:	f04f 60e0 	mov.w	r0, #117440512	@ 0x7000000
 80068dc:	f7fe fd90 	bl	8005400 <LL_RCC_GetUSARTClockFreq>
 80068e0:	60b8      	str	r0, [r7, #8]
 80068e2:	e061      	b.n	80069a8 <LL_USART_Init+0x134>
    }
    else if (USARTx == USART2)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a42      	ldr	r2, [pc, #264]	@ (80069f0 <LL_USART_Init+0x17c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d104      	bne.n	80068f6 <LL_USART_Init+0x82>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80068ec:	4841      	ldr	r0, [pc, #260]	@ (80069f4 <LL_USART_Init+0x180>)
 80068ee:	f7fe fd87 	bl	8005400 <LL_RCC_GetUSARTClockFreq>
 80068f2:	60b8      	str	r0, [r7, #8]
 80068f4:	e058      	b.n	80069a8 <LL_USART_Init+0x134>
    }
    else if (USARTx == USART3)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a3f      	ldr	r2, [pc, #252]	@ (80069f8 <LL_USART_Init+0x184>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d104      	bne.n	8006908 <LL_USART_Init+0x94>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80068fe:	483f      	ldr	r0, [pc, #252]	@ (80069fc <LL_USART_Init+0x188>)
 8006900:	f7fe fd7e 	bl	8005400 <LL_RCC_GetUSARTClockFreq>
 8006904:	60b8      	str	r0, [r7, #8]
 8006906:	e04f      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a00 <LL_USART_Init+0x18c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d104      	bne.n	800691a <LL_USART_Init+0xa6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006910:	483c      	ldr	r0, [pc, #240]	@ (8006a04 <LL_USART_Init+0x190>)
 8006912:	f7ff f921 	bl	8005b58 <LL_RCC_GetUARTClockFreq>
 8006916:	60b8      	str	r0, [r7, #8]
 8006918:	e046      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a3a      	ldr	r2, [pc, #232]	@ (8006a08 <LL_USART_Init+0x194>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d104      	bne.n	800692c <LL_USART_Init+0xb8>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8006922:	483a      	ldr	r0, [pc, #232]	@ (8006a0c <LL_USART_Init+0x198>)
 8006924:	f7ff f918 	bl	8005b58 <LL_RCC_GetUARTClockFreq>
 8006928:	60b8      	str	r0, [r7, #8]
 800692a:	e03d      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#endif /* UART5 */
#if defined(USART6)
    else if (USARTx == USART6)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a38      	ldr	r2, [pc, #224]	@ (8006a10 <LL_USART_Init+0x19c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d104      	bne.n	800693e <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8006934:	4837      	ldr	r0, [pc, #220]	@ (8006a14 <LL_USART_Init+0x1a0>)
 8006936:	f7fe fd63 	bl	8005400 <LL_RCC_GetUSARTClockFreq>
 800693a:	60b8      	str	r0, [r7, #8]
 800693c:	e034      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#endif /* USART6 */
#if defined(UART7)
    else if (USARTx == UART7)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a35      	ldr	r2, [pc, #212]	@ (8006a18 <LL_USART_Init+0x1a4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d104      	bne.n	8006950 <LL_USART_Init+0xdc>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8006946:	4835      	ldr	r0, [pc, #212]	@ (8006a1c <LL_USART_Init+0x1a8>)
 8006948:	f7ff f906 	bl	8005b58 <LL_RCC_GetUARTClockFreq>
 800694c:	60b8      	str	r0, [r7, #8]
 800694e:	e02b      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a33      	ldr	r2, [pc, #204]	@ (8006a20 <LL_USART_Init+0x1ac>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d104      	bne.n	8006962 <LL_USART_Init+0xee>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8006958:	4832      	ldr	r0, [pc, #200]	@ (8006a24 <LL_USART_Init+0x1b0>)
 800695a:	f7ff f8fd 	bl	8005b58 <LL_RCC_GetUARTClockFreq>
 800695e:	60b8      	str	r0, [r7, #8]
 8006960:	e022      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#endif /* UART8 */
#if defined(UART9)
    else if (USARTx == UART9)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a30      	ldr	r2, [pc, #192]	@ (8006a28 <LL_USART_Init+0x1b4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d104      	bne.n	8006974 <LL_USART_Init+0x100>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART9_CLKSOURCE);
 800696a:	4830      	ldr	r0, [pc, #192]	@ (8006a2c <LL_USART_Init+0x1b8>)
 800696c:	f7ff f8f4 	bl	8005b58 <LL_RCC_GetUARTClockFreq>
 8006970:	60b8      	str	r0, [r7, #8]
 8006972:	e019      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a2e      	ldr	r2, [pc, #184]	@ (8006a30 <LL_USART_Init+0x1bc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d104      	bne.n	8006986 <LL_USART_Init+0x112>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART10_CLKSOURCE);
 800697c:	482d      	ldr	r0, [pc, #180]	@ (8006a34 <LL_USART_Init+0x1c0>)
 800697e:	f7fe fd3f 	bl	8005400 <LL_RCC_GetUSARTClockFreq>
 8006982:	60b8      	str	r0, [r7, #8]
 8006984:	e010      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#endif /* USART10 */
#if defined(USART11)
    else if (USARTx == USART11)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a2b      	ldr	r2, [pc, #172]	@ (8006a38 <LL_USART_Init+0x1c4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d104      	bne.n	8006998 <LL_USART_Init+0x124>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART11_CLKSOURCE);
 800698e:	482b      	ldr	r0, [pc, #172]	@ (8006a3c <LL_USART_Init+0x1c8>)
 8006990:	f7fe fd36 	bl	8005400 <LL_RCC_GetUSARTClockFreq>
 8006994:	60b8      	str	r0, [r7, #8]
 8006996:	e007      	b.n	80069a8 <LL_USART_Init+0x134>
    }
#endif /* USART11 */
#if defined(UART12)
    else if (USARTx == UART12)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a29      	ldr	r2, [pc, #164]	@ (8006a40 <LL_USART_Init+0x1cc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d103      	bne.n	80069a8 <LL_USART_Init+0x134>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART12_CLKSOURCE);
 80069a0:	4828      	ldr	r0, [pc, #160]	@ (8006a44 <LL_USART_Init+0x1d0>)
 80069a2:	f7ff f8d9 	bl	8005b58 <LL_RCC_GetUARTClockFreq>
 80069a6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d011      	beq.n	80069d2 <LL_USART_Init+0x15e>
        && (USART_InitStruct->BaudRate != 0U))
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00d      	beq.n	80069d2 <LL_USART_Init+0x15e>
    {
      status = SUCCESS;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	460b      	mov	r3, r1
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff ff01 	bl	80067d4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff fec0 	bl	800675e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	efff69f3 	.word	0xefff69f3
 80069ec:	40013800 	.word	0x40013800
 80069f0:	40004400 	.word	0x40004400
 80069f4:	07000300 	.word	0x07000300
 80069f8:	40004800 	.word	0x40004800
 80069fc:	07000600 	.word	0x07000600
 8006a00:	40004c00 	.word	0x40004c00
 8006a04:	07000900 	.word	0x07000900
 8006a08:	40005000 	.word	0x40005000
 8006a0c:	07000c00 	.word	0x07000c00
 8006a10:	40006400 	.word	0x40006400
 8006a14:	07000f00 	.word	0x07000f00
 8006a18:	40007800 	.word	0x40007800
 8006a1c:	07001200 	.word	0x07001200
 8006a20:	40007c00 	.word	0x40007c00
 8006a24:	07001500 	.word	0x07001500
 8006a28:	40008000 	.word	0x40008000
 8006a2c:	07001800 	.word	0x07001800
 8006a30:	40006800 	.word	0x40006800
 8006a34:	07001b00 	.word	0x07001b00
 8006a38:	40006c00 	.word	0x40006c00
 8006a3c:	07000004 	.word	0x07000004
 8006a40:	40008400 	.word	0x40008400
 8006a44:	07000404 	.word	0x07000404

08006a48 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	4a07      	ldr	r2, [pc, #28]	@ (8006a78 <LL_InitTick+0x30>)
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006a60:	4b05      	ldr	r3, [pc, #20]	@ (8006a78 <LL_InitTick+0x30>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a66:	4b04      	ldr	r3, [pc, #16]	@ (8006a78 <LL_InitTick+0x30>)
 8006a68:	2205      	movs	r2, #5
 8006a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	e000e010 	.word	0xe000e010

08006a7c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006a84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ffdd 	bl	8006a48 <LL_InitTick>
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the minimum delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006aa0:	4b10      	ldr	r3, [pc, #64]	@ (8006ae4 <LL_mDelay+0x4c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006aaa:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if (tmpDelay < LL_MAX_DELAY)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	d00c      	beq.n	8006ace <LL_mDelay+0x36>
  {
    tmpDelay++;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8006aba:	e008      	b.n	8006ace <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006abc:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <LL_mDelay+0x4c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <LL_mDelay+0x36>
    {
      tmpDelay--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f3      	bne.n	8006abc <LL_mDelay+0x24>
    }
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	e000e010 	.word	0xe000e010

08006ae8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006af0:	4a04      	ldr	r2, [pc, #16]	@ (8006b04 <LL_SetSystemCoreClock+0x1c>)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6013      	str	r3, [r2, #0]
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000000 	.word	0x20000000

08006b08 <__NVIC_SetPriority>:
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	6039      	str	r1, [r7, #0]
 8006b12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	db0a      	blt.n	8006b32 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	490c      	ldr	r1, [pc, #48]	@ (8006b54 <__NVIC_SetPriority+0x4c>)
 8006b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b26:	0112      	lsls	r2, r2, #4
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006b30:	e00a      	b.n	8006b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	4908      	ldr	r1, [pc, #32]	@ (8006b58 <__NVIC_SetPriority+0x50>)
 8006b38:	88fb      	ldrh	r3, [r7, #6]
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	3b04      	subs	r3, #4
 8006b40:	0112      	lsls	r2, r2, #4
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	440b      	add	r3, r1
 8006b46:	761a      	strb	r2, [r3, #24]
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	e000e100 	.word	0xe000e100
 8006b58:	e000ed00 	.word	0xe000ed00

08006b5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b60:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <SysTick_Handler+0x1c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b64:	f002 f932 	bl	8008dcc <xTaskGetSchedulerState>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d001      	beq.n	8006b72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b6e:	f000 fc25 	bl	80073bc <xPortSysTickHandler>
  }
}
 8006b72:	bf00      	nop
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	e000e010 	.word	0xe000e010

08006b7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8006b80:	2100      	movs	r1, #0
 8006b82:	f06f 0004 	mvn.w	r0, #4
 8006b86:	f7ff ffbf 	bl	8006b08 <__NVIC_SetPriority>
#endif
}
 8006b8a:	bf00      	nop
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b086      	sub	sp, #24
 8006b92:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b98:	f3ef 8305 	mrs	r3, IPSR
 8006b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b9e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	e013      	b.n	8006bd2 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8006baa:	f002 f90f 	bl	8008dcc <xTaskGetSchedulerState>
 8006bae:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d00d      	beq.n	8006bd2 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bba:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d105      	bne.n	8006bce <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc6:	607b      	str	r3, [r7, #4]
  return(result);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8006bd2:	697b      	ldr	r3, [r7, #20]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006be2:	f7ff ffd4 	bl	8006b8e <IRQ_Context>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8006bec:	f06f 0305 	mvn.w	r3, #5
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	e012      	b.n	8006c1a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8006bf4:	f002 f8ea 	bl	8008dcc <xTaskGetSchedulerState>
 8006bf8:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d109      	bne.n	8006c14 <osKernelInitialize+0x38>
 8006c00:	4b08      	ldr	r3, [pc, #32]	@ (8006c24 <osKernelInitialize+0x48>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d105      	bne.n	8006c14 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c08:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <osKernelInitialize+0x48>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
 8006c12:	e002      	b.n	8006c1a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295
 8006c18:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006c1a:	687b      	ldr	r3, [r7, #4]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20025cac 	.word	0x20025cac

08006c28 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006c2e:	f7ff ffae 	bl	8006b8e <IRQ_Context>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <osKernelStart+0x18>
    stat = osErrorISR;
 8006c38:	f06f 0305 	mvn.w	r3, #5
 8006c3c:	607b      	str	r3, [r7, #4]
 8006c3e:	e016      	b.n	8006c6e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8006c40:	f002 f8c4 	bl	8008dcc <xTaskGetSchedulerState>
 8006c44:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d10d      	bne.n	8006c68 <osKernelStart+0x40>
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c78 <osKernelStart+0x50>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d109      	bne.n	8006c68 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c54:	f7ff ff92 	bl	8006b7c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8006c58:	4b07      	ldr	r3, [pc, #28]	@ (8006c78 <osKernelStart+0x50>)
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c5e:	f001 fb83 	bl	8008368 <vTaskStartScheduler>
      stat = osOK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	e002      	b.n	8006c6e <osKernelStart+0x46>
    } else {
      stat = osError;
 8006c68:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006c6e:	687b      	ldr	r3, [r7, #4]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20025cac 	.word	0x20025cac

08006c7c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08e      	sub	sp, #56	@ 0x38
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8006c8c:	f7ff ff7f 	bl	8006b8e <IRQ_Context>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d17e      	bne.n	8006d94 <osThreadNew+0x118>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d07b      	beq.n	8006d94 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8006c9c:	2380      	movs	r3, #128	@ 0x80
 8006c9e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ca0:	2318      	movs	r3, #24
 8006ca2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d045      	beq.n	8006d40 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <osThreadNew+0x46>
        name = attr->name;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <osThreadNew+0x6c>
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2b38      	cmp	r3, #56	@ 0x38
 8006cda:	d805      	bhi.n	8006ce8 <osThreadNew+0x6c>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e054      	b.n	8006d96 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	089b      	lsrs	r3, r3, #2
 8006cfa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00e      	beq.n	8006d22 <osThreadNew+0xa6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2b5b      	cmp	r3, #91	@ 0x5b
 8006d0a:	d90a      	bls.n	8006d22 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d006      	beq.n	8006d22 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e010      	b.n	8006d44 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10c      	bne.n	8006d44 <osThreadNew+0xc8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d108      	bne.n	8006d44 <osThreadNew+0xc8>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61bb      	str	r3, [r7, #24]
 8006d3e:	e001      	b.n	8006d44 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d110      	bne.n	8006d6c <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d52:	9202      	str	r2, [sp, #8]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f001 f931 	bl	8007fc8 <xTaskCreateStatic>
 8006d66:	4603      	mov	r3, r0
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	e013      	b.n	8006d94 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d110      	bne.n	8006d94 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f107 0314 	add.w	r3, r7, #20
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f001 f96c 	bl	8008062 <xTaskCreate>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d001      	beq.n	8006d94 <osThreadNew+0x118>
            hTask = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8006d94:	697b      	ldr	r3, [r7, #20]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3728      	adds	r7, #40	@ 0x28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8006da6:	f7ff fef2 	bl	8006b8e <IRQ_Context>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <osDelay+0x1a>
    stat = osErrorISR;
 8006db0:	f06f 0305 	mvn.w	r3, #5
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	e007      	b.n	8006dc8 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <osDelay+0x2a>
      vTaskDelay(ticks);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 faaa 	bl	800831c <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <TimerCallback>:

/* ==== Timer Management Functions ==== */

#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  /* Retrieve pointer to callback function and argument */
  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 fc32 	bl	8009644 <pvTimerGetTimerID>
 8006de0:	60f8      	str	r0, [r7, #12]

  /* Remove dynamic allocation flag */
  callb = (TimerCallback_t *)((uint32_t)callb & ~1U);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <TimerCallback+0x2a>
    callb->func (callb->arg);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	6852      	ldr	r2, [r2, #4]
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <osTimerNew>:

/*
  Create and Initialize a timer.
*/
osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08c      	sub	sp, #48	@ 0x30
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	607a      	str	r2, [r7, #4]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	460b      	mov	r3, r1
 8006e12:	72fb      	strb	r3, [r7, #11]
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;
  uint32_t callb_dyn;

  hTimer = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	623b      	str	r3, [r7, #32]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8006e18:	f7ff feb9 	bl	8006b8e <IRQ_Context>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 808b 	bne.w	8006f3a <osTimerNew+0x136>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 8087 	beq.w	8006f3a <osTimerNew+0x136>
    callb     = NULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
    callb_dyn = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]

    #if (configSUPPORT_STATIC_ALLOCATION == 1)
      /* Static memory allocation is available: check if memory for control block */
      /* is provided and if it also contains space for callback and its argument  */
      if ((attr != NULL) && (attr->cb_mem != NULL)) {
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <osTimerNew+0x4e>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <osTimerNew+0x4e>
        if (attr->cb_size >= (sizeof(StaticTimer_t) + sizeof(TimerCallback_t))) {
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2b33      	cmp	r3, #51	@ 0x33
 8006e48:	d903      	bls.n	8006e52 <osTimerNew+0x4e>
          callb = (TimerCallback_t *)((uint32_t)attr->cb_mem + sizeof(StaticTimer_t));
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	332c      	adds	r3, #44	@ 0x2c
 8006e50:	61fb      	str	r3, [r7, #28]
    #endif

    #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
      /* Dynamic memory allocation is available: if memory for callback and */
      /* its argument is not provided, allocate it from dynamic memory pool */
      if (callb == NULL) {
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d108      	bne.n	8006e6a <osTimerNew+0x66>
        callb = (TimerCallback_t *)pvPortMalloc (sizeof(TimerCallback_t));
 8006e58:	2008      	movs	r0, #8
 8006e5a:	f002 fc0d 	bl	8009678 <pvPortMalloc>
 8006e5e:	61f8      	str	r0, [r7, #28]

        if (callb != NULL) {
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <osTimerNew+0x66>
          /* Callback memory was allocated from dynamic pool, set flag */
          callb_dyn = 1U;
 8006e66:	2301      	movs	r3, #1
 8006e68:	613b      	str	r3, [r7, #16]
        }
      }
    #endif

    if (callb != NULL) {
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d064      	beq.n	8006f3a <osTimerNew+0x136>
      callb->func = func;
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <osTimerNew+0x84>
        reload = pdFALSE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	e001      	b.n	8006e8c <osTimerNew+0x88>
      } else {
        reload = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	61bb      	str	r3, [r7, #24]
      }

      mem  = -1;
 8006e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e90:	617b      	str	r3, [r7, #20]
      name = NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01c      	beq.n	8006ed6 <osTimerNew+0xd2>
        if (attr->name != NULL) {
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <osTimerNew+0xa6>
          name = attr->name;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d006      	beq.n	8006ec0 <osTimerNew+0xbc>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2b2b      	cmp	r3, #43	@ 0x2b
 8006eb8:	d902      	bls.n	8006ec0 <osTimerNew+0xbc>
          /* The memory for control block is provided, use static object */
          mem = 1;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	e00c      	b.n	8006eda <osTimerNew+0xd6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d108      	bne.n	8006eda <osTimerNew+0xd6>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <osTimerNew+0xd6>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e001      	b.n	8006eda <osTimerNew+0xd6>
          }
        }
      }
      else {
        mem = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
      }
      /* Store callback memory dynamic allocation flag */
      callb = (TimerCallback_t *)((uint32_t)callb | callb_dyn);
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	61fb      	str	r3, [r7, #28]
      /*
        TimerCallback function is always provided as a callback and is used to call application
        specified function with its argument both stored in structure callb.
      */
      if (mem == 1) {
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d10c      	bne.n	8006f02 <osTimerNew+0xfe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	4b14      	ldr	r3, [pc, #80]	@ (8006f44 <osTimerNew+0x140>)
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006efa:	f002 f8dc 	bl	80090b6 <xTimerCreateStatic>
 8006efe:	6238      	str	r0, [r7, #32]
 8006f00:	e00b      	b.n	8006f1a <osTimerNew+0x116>
        #endif
      }
      else {
        if (mem == 0) {
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d108      	bne.n	8006f1a <osTimerNew+0x116>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f44 <osTimerNew+0x140>)
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	2101      	movs	r1, #1
 8006f12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f14:	f002 f8ae 	bl	8009074 <xTimerCreate>
 8006f18:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
      if ((hTimer == NULL) && (callb != NULL) && (callb_dyn == 1U)) {
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10c      	bne.n	8006f3a <osTimerNew+0x136>
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d009      	beq.n	8006f3a <osTimerNew+0x136>
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d106      	bne.n	8006f3a <osTimerNew+0x136>
        /* Failed to create a timer, release allocated resources */
        callb = (TimerCallback_t *)((uint32_t)callb & ~1U);
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	61fb      	str	r3, [r7, #28]

        vPortFree (callb);
 8006f34:	69f8      	ldr	r0, [r7, #28]
 8006f36:	f002 fc4b 	bl	80097d0 <vPortFree>
      #endif
    }
  }

  /* Return timer ID */
  return ((osTimerId_t)hTimer);
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3728      	adds	r7, #40	@ 0x28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	08006dd3 	.word	0x08006dd3

08006f48 <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 8006f54:	f7ff fe1b 	bl	8006b8e <IRQ_Context>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d174      	bne.n	8007048 <osMutexNew+0x100>
    if (attr != NULL) {
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <osMutexNew+0x24>
      type = attr->attr_bits;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	e001      	b.n	8006f70 <osMutexNew+0x28>
    } else {
      type = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <osMutexNew+0x38>
      rmtx = 1U;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	e001      	b.n	8006f84 <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d15c      	bne.n	8007048 <osMutexNew+0x100>
      mem = -1;
 8006f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f92:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d015      	beq.n	8006fc6 <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d006      	beq.n	8006fb0 <osMutexNew+0x68>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2b4f      	cmp	r3, #79	@ 0x4f
 8006fa8:	d902      	bls.n	8006fb0 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 8006faa:	2301      	movs	r3, #1
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	e00c      	b.n	8006fca <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d108      	bne.n	8006fca <osMutexNew+0x82>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	e001      	b.n	8006fca <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d112      	bne.n	8006ff6 <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	2004      	movs	r0, #4
 8006fde:	f000 fcc5 	bl	800796c <xQueueCreateMutexStatic>
 8006fe2:	6178      	str	r0, [r7, #20]
 8006fe4:	e016      	b.n	8007014 <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	4619      	mov	r1, r3
 8006fec:	2001      	movs	r0, #1
 8006fee:	f000 fcbd 	bl	800796c <xQueueCreateMutexStatic>
 8006ff2:	6178      	str	r0, [r7, #20]
 8006ff4:	e00e      	b.n	8007014 <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007002:	2004      	movs	r0, #4
 8007004:	f000 fc9a 	bl	800793c <xQueueCreateMutex>
 8007008:	6178      	str	r0, [r7, #20]
 800700a:	e003      	b.n	8007014 <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800700c:	2001      	movs	r0, #1
 800700e:	f000 fc95 	bl	800793c <xQueueCreateMutex>
 8007012:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00c      	beq.n	8007034 <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <osMutexNew+0xec>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4619      	mov	r1, r3
 800702e:	6978      	ldr	r0, [r7, #20]
 8007030:	f000 ff50 	bl	8007ed4 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d006      	beq.n	8007048 <osMutexNew+0x100>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 8007048:	697b      	ldr	r3, [r7, #20]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007052:	b580      	push	{r7, lr}
 8007054:	b088      	sub	sp, #32
 8007056:	af02      	add	r7, sp, #8
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 8007062:	f7ff fd94 	bl	8006b8e <IRQ_Context>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d15f      	bne.n	800712c <osMessageQueueNew+0xda>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d05c      	beq.n	800712c <osMessageQueueNew+0xda>
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d059      	beq.n	800712c <osMessageQueueNew+0xda>
    mem = -1;
 8007078:	f04f 33ff 	mov.w	r3, #4294967295
 800707c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d029      	beq.n	80070d8 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d012      	beq.n	80070b2 <osMessageQueueNew+0x60>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b4f      	cmp	r3, #79	@ 0x4f
 8007092:	d90e      	bls.n	80070b2 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	e014      	b.n	80070dc <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d110      	bne.n	80070dc <osMessageQueueNew+0x8a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10c      	bne.n	80070dc <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d108      	bne.n	80070dc <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	e001      	b.n	80070dc <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d10b      	bne.n	80070fa <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691a      	ldr	r2, [r3, #16]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2100      	movs	r1, #0
 80070ec:	9100      	str	r1, [sp, #0]
 80070ee:	68b9      	ldr	r1, [r7, #8]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fb52 	bl	800779a <xQueueGenericCreateStatic>
 80070f6:	6178      	str	r0, [r7, #20]
 80070f8:	e008      	b.n	800710c <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d105      	bne.n	800710c <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007100:	2200      	movs	r2, #0
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 fb91 	bl	800782c <xQueueGenericCreate>
 800710a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <osMessageQueueNew+0xda>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4619      	mov	r1, r3
 8007126:	6978      	ldr	r0, [r7, #20]
 8007128:	f000 fed4 	bl	8007ed4 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800712c:	697b      	ldr	r3, [r7, #20]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4a07      	ldr	r2, [pc, #28]	@ (8007164 <vApplicationGetIdleTaskMemory+0x2c>)
 8007148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	4a06      	ldr	r2, [pc, #24]	@ (8007168 <vApplicationGetIdleTaskMemory+0x30>)
 800714e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2280      	movs	r2, #128	@ 0x80
 8007154:	601a      	str	r2, [r3, #0]
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20025cb0 	.word	0x20025cb0
 8007168:	20025d0c 	.word	0x20025d0c

0800716c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4a07      	ldr	r2, [pc, #28]	@ (8007198 <vApplicationGetTimerTaskMemory+0x2c>)
 800717c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	4a06      	ldr	r2, [pc, #24]	@ (800719c <vApplicationGetTimerTaskMemory+0x30>)
 8007182:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2280      	movs	r2, #128	@ 0x80
 8007188:	601a      	str	r2, [r3, #0]
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20025f0c 	.word	0x20025f0c
 800719c:	20025f68 	.word	0x20025f68

080071a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f103 0208 	add.w	r2, r3, #8
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295
 80071b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f103 0208 	add.w	r2, r3, #8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f103 0208 	add.w	r2, r3, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d103      	bne.n	800721a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e00c      	b.n	8007234 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3308      	adds	r3, #8
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e002      	b.n	8007228 <vListInsert+0x2e>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	429a      	cmp	r2, r3
 8007232:	d2f6      	bcs.n	8007222 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	601a      	str	r2, [r3, #0]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6892      	ldr	r2, [r2, #8]
 8007282:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6852      	ldr	r2, [r2, #4]
 800728c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d103      	bne.n	80072a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	1e5a      	subs	r2, r3, #1
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072c4:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <vPortSetupTimerInterrupt+0x34>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <vPortSetupTimerInterrupt+0x38>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072d0:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <vPortSetupTimerInterrupt+0x3c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007300 <vPortSetupTimerInterrupt+0x40>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	099b      	lsrs	r3, r3, #6
 80072dc:	4a09      	ldr	r2, [pc, #36]	@ (8007304 <vPortSetupTimerInterrupt+0x44>)
 80072de:	3b01      	subs	r3, #1
 80072e0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80072e2:	4b04      	ldr	r3, [pc, #16]	@ (80072f4 <vPortSetupTimerInterrupt+0x34>)
 80072e4:	2207      	movs	r2, #7
 80072e6:	601a      	str	r2, [r3, #0]
}
 80072e8:	bf00      	nop
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	e000e010 	.word	0xe000e010
 80072f8:	e000e018 	.word	0xe000e018
 80072fc:	20000000 	.word	0x20000000
 8007300:	10624dd3 	.word	0x10624dd3
 8007304:	e000e014 	.word	0xe000e014

08007308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8007312:	4b0a      	ldr	r3, [pc, #40]	@ (800733c <prvTaskExitError+0x34>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d003      	beq.n	8007324 <prvTaskExitError+0x1c>
 800731c:	f000 f964 	bl	80075e8 <ulSetInterruptMask>
 8007320:	bf00      	nop
 8007322:	e7fd      	b.n	8007320 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8007324:	f000 f960 	bl	80075e8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8007328:	bf00      	nop
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0fc      	beq.n	800732a <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000004 	.word	0x20000004

08007340 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007344:	4b06      	ldr	r3, [pc, #24]	@ (8007360 <vPortYield+0x20>)
 8007346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800734c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8007350:	f3bf 8f6f 	isb	sy
}
 8007354:	bf00      	nop
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007368:	f000 f93e 	bl	80075e8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <vPortEnterCritical+0x20>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3301      	adds	r3, #1
 8007372:	4a04      	ldr	r2, [pc, #16]	@ (8007384 <vPortEnterCritical+0x20>)
 8007374:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8007376:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800737a:	f3bf 8f6f 	isb	sy
}
 800737e:	bf00      	nop
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000004 	.word	0x20000004

08007388 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <vPortExitCritical+0x30>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <vPortExitCritical+0x14>
 8007394:	f000 f928 	bl	80075e8 <ulSetInterruptMask>
 8007398:	bf00      	nop
 800739a:	e7fd      	b.n	8007398 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800739c:	4b06      	ldr	r3, [pc, #24]	@ (80073b8 <vPortExitCritical+0x30>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	4a05      	ldr	r2, [pc, #20]	@ (80073b8 <vPortExitCritical+0x30>)
 80073a4:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 80073a6:	4b04      	ldr	r3, [pc, #16]	@ (80073b8 <vPortExitCritical+0x30>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 80073ae:	2000      	movs	r0, #0
 80073b0:	f000 f927 	bl	8007602 <vClearInterruptMask>
    }
}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20000004 	.word	0x20000004

080073bc <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80073c2:	f000 f911 	bl	80075e8 <ulSetInterruptMask>
 80073c6:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80073c8:	f001 f936 	bl	8008638 <xTaskIncrementTick>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073d2:	4b05      	ldr	r3, [pc, #20]	@ (80073e8 <xPortSysTickHandler+0x2c>)
 80073d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d8:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f911 	bl	8007602 <vClearInterruptMask>
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3b02      	subs	r3, #2
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d102      	bne.n	800740e <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8007408:	f000 f8ba 	bl	8007580 <vRestoreContextOfFirstTask>
            break;
 800740c:	e003      	b.n	8007416 <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800740e:	f000 f8eb 	bl	80075e8 <ulSetInterruptMask>
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <vPortSVCHandler_C+0x26>
    }
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3b04      	subs	r3, #4
 8007432:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800743a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3b04      	subs	r3, #4
 8007440:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3b04      	subs	r3, #4
 800744c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800744e:	4a38      	ldr	r2, [pc, #224]	@ (8007530 <pxPortInitialiseStack+0x110>)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3b04      	subs	r3, #4
 8007458:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8007460:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3b04      	subs	r3, #4
 8007466:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800746e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3b04      	subs	r3, #4
 8007474:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800747c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3b04      	subs	r3, #4
 8007482:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800748a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3b04      	subs	r3, #4
 8007490:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3b04      	subs	r3, #4
 800749c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 80074a4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3b04      	subs	r3, #4
 80074aa:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 80074b2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3b04      	subs	r3, #4
 80074b8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80074c0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3b04      	subs	r3, #4
 80074c6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80074ce:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3b04      	subs	r3, #4
 80074d4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80074dc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3b04      	subs	r3, #4
 80074e2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80074ea:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3b04      	subs	r3, #4
 80074f0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80074f8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3b04      	subs	r3, #4
 80074fe:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8007506:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3b04      	subs	r3, #4
 800750c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8007514:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3b04      	subs	r3, #4
 800751a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	08007309 	.word	0x08007309

08007534 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007538:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <xPortStartScheduler+0x38>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a0b      	ldr	r2, [pc, #44]	@ (800756c <xPortStartScheduler+0x38>)
 800753e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007542:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007544:	4b09      	ldr	r3, [pc, #36]	@ (800756c <xPortStartScheduler+0x38>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a08      	ldr	r2, [pc, #32]	@ (800756c <xPortStartScheduler+0x38>)
 800754a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800754e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007550:	f7ff feb6 	bl	80072c0 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8007554:	4b06      	ldr	r3, [pc, #24]	@ (8007570 <xPortStartScheduler+0x3c>)
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800755a:	f000 f831 	bl	80075c0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800755e:	f001 f97b 	bl	8008858 <vTaskSwitchContext>
    prvTaskExitError();
 8007562:	f7ff fed1 	bl	8007308 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	bd80      	pop	{r7, pc}
 800756c:	e000ed20 	.word	0xe000ed20
 8007570:	20000004 	.word	0x20000004
	...

08007580 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8007580:	4a0b      	ldr	r2, [pc, #44]	@ (80075b0 <pxCurrentTCBConst2>)
 8007582:	6811      	ldr	r1, [r2, #0]
 8007584:	6808      	ldr	r0, [r1, #0]
 8007586:	c806      	ldmia	r0!, {r1, r2}
 8007588:	f381 880b 	msr	PSPLIM, r1
 800758c:	2102      	movs	r1, #2
 800758e:	f381 8814 	msr	CONTROL, r1
 8007592:	3020      	adds	r0, #32
 8007594:	f380 8809 	msr	PSP, r0
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f04f 0000 	mov.w	r0, #0
 80075a0:	f380 8811 	msr	BASEPRI, r0
 80075a4:	4710      	bx	r2
 80075a6:	bf00      	nop
 80075a8:	f3af 8000 	nop.w
 80075ac:	f3af 8000 	nop.w

080075b0 <pxCurrentTCBConst2>:
 80075b0:	200261a8 	.word	0x200261a8
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
	...

080075c0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80075c0:	4807      	ldr	r0, [pc, #28]	@ (80075e0 <xVTORConst>)
 80075c2:	6800      	ldr	r0, [r0, #0]
 80075c4:	6800      	ldr	r0, [r0, #0]
 80075c6:	f380 8808 	msr	MSP, r0
 80075ca:	b662      	cpsie	i
 80075cc:	b661      	cpsie	f
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	df02      	svc	2
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	f3af 8000 	nop.w

080075e0 <xVTORConst>:
 80075e0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80075e8:	f3ef 8011 	mrs	r0, BASEPRI
 80075ec:	f04f 0150 	mov.w	r1, #80	@ 0x50
 80075f0:	f381 8811 	msr	BASEPRI, r1
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80075fe:	bf00      	nop
 8007600:	4618      	mov	r0, r3

08007602 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8007602:	f380 8811 	msr	BASEPRI, r0
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8007610:	bf00      	nop
	...

08007620 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8007620:	f3ef 8009 	mrs	r0, PSP
 8007624:	f3ef 820b 	mrs	r2, PSPLIM
 8007628:	4673      	mov	r3, lr
 800762a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800762e:	4a10      	ldr	r2, [pc, #64]	@ (8007670 <pxCurrentTCBConst>)
 8007630:	6811      	ldr	r1, [r2, #0]
 8007632:	6008      	str	r0, [r1, #0]
 8007634:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007638:	f380 8811 	msr	BASEPRI, r0
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f001 f908 	bl	8008858 <vTaskSwitchContext>
 8007648:	f04f 0000 	mov.w	r0, #0
 800764c:	f380 8811 	msr	BASEPRI, r0
 8007650:	4a07      	ldr	r2, [pc, #28]	@ (8007670 <pxCurrentTCBConst>)
 8007652:	6811      	ldr	r1, [r2, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800765a:	f382 880b 	msr	PSPLIM, r2
 800765e:	f380 8809 	msr	PSP, r0
 8007662:	4718      	bx	r3
 8007664:	f3af 8000 	nop.w
 8007668:	f3af 8000 	nop.w
 800766c:	f3af 8000 	nop.w

08007670 <pxCurrentTCBConst>:
 8007670:	200261a8 	.word	0x200261a8
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
	...

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8007680:	f01e 0f04 	tst.w	lr, #4
 8007684:	bf0c      	ite	eq
 8007686:	f3ef 8008 	mrseq	r0, MSP
 800768a:	f3ef 8009 	mrsne	r0, PSP
 800768e:	4904      	ldr	r1, [pc, #16]	@ (80076a0 <svchandler_address_const>)
 8007690:	4708      	bx	r1
 8007692:	bf00      	nop
 8007694:	f3af 8000 	nop.w
 8007698:	f3af 8000 	nop.w
 800769c:	f3af 8000 	nop.w

080076a0 <svchandler_address_const>:
 80076a0:	080073ed 	.word	0x080073ed
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80076b2:	2301      	movs	r3, #1
 80076b4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d103      	bne.n	80076c8 <xQueueGenericReset+0x20>
 80076c0:	f7ff ff92 	bl	80075e8 <ulSetInterruptMask>
 80076c4:	bf00      	nop
 80076c6:	e7fd      	b.n	80076c4 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d057      	beq.n	800777e <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d053      	beq.n	800777e <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076de:	2100      	movs	r1, #0
 80076e0:	fba3 2302 	umull	r2, r3, r3, r2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d000      	beq.n	80076ea <xQueueGenericReset+0x42>
 80076e8:	2101      	movs	r1, #1
 80076ea:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d146      	bne.n	800777e <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 80076f0:	f7ff fe38 	bl	8007364 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	441a      	add	r2, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2200      	movs	r2, #0
 800770e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	3b01      	subs	r3, #1
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	441a      	add	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	22ff      	movs	r2, #255	@ 0xff
 8007734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	22ff      	movs	r2, #255	@ 0xff
 800773c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10e      	bne.n	8007764 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d014      	beq.n	8007778 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	3310      	adds	r3, #16
 8007752:	4618      	mov	r0, r3
 8007754:	f001 f930 	bl	80089b8 <xTaskRemoveFromEventList>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00c      	beq.n	8007778 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800775e:	f7ff fdef 	bl	8007340 <vPortYield>
 8007762:	e009      	b.n	8007778 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	3310      	adds	r3, #16
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fd19 	bl	80071a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3324      	adds	r3, #36	@ 0x24
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff fd14 	bl	80071a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007778:	f7ff fe06 	bl	8007388 <vPortExitCritical>
 800777c:	e001      	b.n	8007782 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d103      	bne.n	8007790 <xQueueGenericReset+0xe8>
 8007788:	f7ff ff2e 	bl	80075e8 <ulSetInterruptMask>
 800778c:	bf00      	nop
 800778e:	e7fd      	b.n	800778c <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800779a:	b580      	push	{r7, lr}
 800779c:	b088      	sub	sp, #32
 800779e:	af02      	add	r7, sp, #8
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <xQueueGenericCreateStatic+0x20>
 80077b2:	f7ff ff19 	bl	80075e8 <ulSetInterruptMask>
 80077b6:	bf00      	nop
 80077b8:	e7fd      	b.n	80077b6 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d029      	beq.n	8007814 <xQueueGenericCreateStatic+0x7a>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d026      	beq.n	8007814 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d020      	beq.n	8007814 <xQueueGenericCreateStatic+0x7a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d11a      	bne.n	8007814 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80077de:	2350      	movs	r3, #80	@ 0x50
 80077e0:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b50      	cmp	r3, #80	@ 0x50
 80077e6:	d003      	beq.n	80077f0 <xQueueGenericCreateStatic+0x56>
 80077e8:	f7ff fefe 	bl	80075e8 <ulSetInterruptMask>
 80077ec:	bf00      	nop
 80077ee:	e7fd      	b.n	80077ec <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80077f0:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	4613      	mov	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f858 	bl	80078c2 <prvInitialiseNewQueue>
 8007812:	e006      	b.n	8007822 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d103      	bne.n	8007822 <xQueueGenericCreateStatic+0x88>
 800781a:	f7ff fee5 	bl	80075e8 <ulSetInterruptMask>
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007822:	697b      	ldr	r3, [r7, #20]
    }
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d032      	beq.n	80078aa <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007844:	2100      	movs	r1, #0
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	fba3 2302 	umull	r2, r3, r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d000      	beq.n	8007854 <xQueueGenericCreate+0x28>
 8007852:	2101      	movs	r1, #1
 8007854:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007856:	2b00      	cmp	r3, #0
 8007858:	d127      	bne.n	80078aa <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007862:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8007866:	d820      	bhi.n	80078aa <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	fb02 f303 	mul.w	r3, r2, r3
 8007870:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	3350      	adds	r3, #80	@ 0x50
 8007876:	4618      	mov	r0, r3
 8007878:	f001 fefe 	bl	8009678 <pvPortMalloc>
 800787c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d019      	beq.n	80078b8 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	3350      	adds	r3, #80	@ 0x50
 800788c:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007896:	79fa      	ldrb	r2, [r7, #7]
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 f80d 	bl	80078c2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80078a8:	e006      	b.n	80078b8 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <xQueueGenericCreate+0x8c>
 80078b0:	f7ff fe9a 	bl	80075e8 <ulSetInterruptMask>
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80078b8:	69fb      	ldr	r3, [r7, #28]
    }
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d103      	bne.n	80078de <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e002      	b.n	80078e4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078f0:	2101      	movs	r1, #1
 80078f2:	69b8      	ldr	r0, [r7, #24]
 80078f4:	f7ff fed8 	bl	80076a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007928:	2300      	movs	r3, #0
 800792a:	2200      	movs	r2, #0
 800792c:	2100      	movs	r1, #0
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f837 	bl	80079a2 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007946:	2301      	movs	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	461a      	mov	r2, r3
 8007952:	6939      	ldr	r1, [r7, #16]
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	f7ff ff69 	bl	800782c <xQueueGenericCreate>
 800795a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff ffd3 	bl	8007908 <prvInitialiseMutex>

        return xNewQueue;
 8007962:	68fb      	ldr	r3, [r7, #12]
    }
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af02      	add	r7, sp, #8
 8007972:	4603      	mov	r3, r0
 8007974:	6039      	str	r1, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007978:	2301      	movs	r3, #1
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	2300      	movs	r3, #0
 800797e:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007980:	79fb      	ldrb	r3, [r7, #7]
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2200      	movs	r2, #0
 8007988:	6939      	ldr	r1, [r7, #16]
 800798a:	6978      	ldr	r0, [r7, #20]
 800798c:	f7ff ff05 	bl	800779a <xQueueGenericCreateStatic>
 8007990:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f7ff ffb8 	bl	8007908 <prvInitialiseMutex>

        return xNewQueue;
 8007998:	68fb      	ldr	r3, [r7, #12]
    }
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b08a      	sub	sp, #40	@ 0x28
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079b0:	2300      	movs	r3, #0
 80079b2:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d103      	bne.n	80079c6 <xQueueGenericSend+0x24>
 80079be:	f7ff fe13 	bl	80075e8 <ulSetInterruptMask>
 80079c2:	bf00      	nop
 80079c4:	e7fd      	b.n	80079c2 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <xQueueGenericSend+0x32>
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <xQueueGenericSend+0x36>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <xQueueGenericSend+0x38>
 80079d8:	2300      	movs	r3, #0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <xQueueGenericSend+0x44>
 80079de:	f7ff fe03 	bl	80075e8 <ulSetInterruptMask>
 80079e2:	bf00      	nop
 80079e4:	e7fd      	b.n	80079e2 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d103      	bne.n	80079f4 <xQueueGenericSend+0x52>
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <xQueueGenericSend+0x56>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <xQueueGenericSend+0x58>
 80079f8:	2300      	movs	r3, #0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d103      	bne.n	8007a06 <xQueueGenericSend+0x64>
 80079fe:	f7ff fdf3 	bl	80075e8 <ulSetInterruptMask>
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a06:	f001 f9e1 	bl	8008dcc <xTaskGetSchedulerState>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <xQueueGenericSend+0x74>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <xQueueGenericSend+0x78>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <xQueueGenericSend+0x7a>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d103      	bne.n	8007a28 <xQueueGenericSend+0x86>
 8007a20:	f7ff fde2 	bl	80075e8 <ulSetInterruptMask>
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007a28:	f7ff fc9c 	bl	8007364 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d302      	bcc.n	8007a3e <xQueueGenericSend+0x9c>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d11d      	bne.n	8007a7a <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	68b9      	ldr	r1, [r7, #8]
 8007a42:	6a38      	ldr	r0, [r7, #32]
 8007a44:	f000 f936 	bl	8007cb4 <prvCopyDataToQueue>
 8007a48:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	3324      	adds	r3, #36	@ 0x24
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 ffae 	bl	80089b8 <xTaskRemoveFromEventList>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d007      	beq.n	8007a72 <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007a62:	f7ff fc6d 	bl	8007340 <vPortYield>
 8007a66:	e004      	b.n	8007a72 <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8007a6e:	f7ff fc67 	bl	8007340 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007a72:	f7ff fc89 	bl	8007388 <vPortExitCritical>
                return pdPASS;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e05c      	b.n	8007b34 <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d103      	bne.n	8007a88 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007a80:	f7ff fc82 	bl	8007388 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e055      	b.n	8007b34 <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007a8e:	f107 0314 	add.w	r3, r7, #20
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 f85e 	bl	8008b54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007a9c:	f7ff fc74 	bl	8007388 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007aa0:	f000 fcbe 	bl	8008420 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007aa4:	f7ff fc5e 	bl	8007364 <vPortEnterCritical>
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aae:	b25b      	sxtb	r3, r3
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d103      	bne.n	8007abe <xQueueGenericSend+0x11c>
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aca:	d103      	bne.n	8007ad4 <xQueueGenericSend+0x132>
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ad4:	f7ff fc58 	bl	8007388 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ad8:	1d3a      	adds	r2, r7, #4
 8007ada:	f107 0314 	add.w	r3, r7, #20
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 f84d 	bl	8008b80 <xTaskCheckForTimeOut>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11d      	bne.n	8007b28 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007aec:	6a38      	ldr	r0, [r7, #32]
 8007aee:	f000 f9d9 	bl	8007ea4 <prvIsQueueFull>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d011      	beq.n	8007b1c <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	3310      	adds	r3, #16
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	4611      	mov	r1, r2
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fefd 	bl	8008900 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8007b06:	6a38      	ldr	r0, [r7, #32]
 8007b08:	f000 f964 	bl	8007dd4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8007b0c:	f000 fc96 	bl	800843c <xTaskResumeAll>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d188      	bne.n	8007a28 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 8007b16:	f7ff fc13 	bl	8007340 <vPortYield>
 8007b1a:	e785      	b.n	8007a28 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8007b1c:	6a38      	ldr	r0, [r7, #32]
 8007b1e:	f000 f959 	bl	8007dd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007b22:	f000 fc8b 	bl	800843c <xTaskResumeAll>
 8007b26:	e77f      	b.n	8007a28 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007b28:	6a38      	ldr	r0, [r7, #32]
 8007b2a:	f000 f953 	bl	8007dd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007b2e:	f000 fc85 	bl	800843c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8007b32:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3728      	adds	r7, #40	@ 0x28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	@ 0x28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <xQueueReceive+0x22>
 8007b56:	f7ff fd47 	bl	80075e8 <ulSetInterruptMask>
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <xQueueReceive+0x30>
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <xQueueReceive+0x34>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <xQueueReceive+0x36>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <xQueueReceive+0x42>
 8007b76:	f7ff fd37 	bl	80075e8 <ulSetInterruptMask>
 8007b7a:	bf00      	nop
 8007b7c:	e7fd      	b.n	8007b7a <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b7e:	f001 f925 	bl	8008dcc <xTaskGetSchedulerState>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <xQueueReceive+0x52>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <xQueueReceive+0x56>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <xQueueReceive+0x58>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <xQueueReceive+0x64>
 8007b98:	f7ff fd26 	bl	80075e8 <ulSetInterruptMask>
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007ba0:	f7ff fbe0 	bl	8007364 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba8:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d019      	beq.n	8007be4 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	6a38      	ldr	r0, [r7, #32]
 8007bb4:	f000 f8e8 	bl	8007d88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	1e5a      	subs	r2, r3, #1
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d009      	beq.n	8007bdc <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	3310      	adds	r3, #16
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fef3 	bl	80089b8 <xTaskRemoveFromEventList>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007bd8:	f7ff fbb2 	bl	8007340 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007bdc:	f7ff fbd4 	bl	8007388 <vPortExitCritical>
                return pdPASS;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e063      	b.n	8007cac <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d103      	bne.n	8007bf2 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007bea:	f7ff fbcd 	bl	8007388 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e05c      	b.n	8007cac <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007bf8:	f107 0314 	add.w	r3, r7, #20
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 ffa9 	bl	8008b54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007c02:	2301      	movs	r3, #1
 8007c04:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007c06:	f7ff fbbf 	bl	8007388 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007c0a:	f000 fc09 	bl	8008420 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007c0e:	f7ff fba9 	bl	8007364 <vPortEnterCritical>
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c18:	b25b      	sxtb	r3, r3
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d103      	bne.n	8007c28 <xQueueReceive+0xec>
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c2e:	b25b      	sxtb	r3, r3
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d103      	bne.n	8007c3e <xQueueReceive+0x102>
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c3e:	f7ff fba3 	bl	8007388 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c42:	1d3a      	adds	r2, r7, #4
 8007c44:	f107 0314 	add.w	r3, r7, #20
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 ff98 	bl	8008b80 <xTaskCheckForTimeOut>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d11d      	bne.n	8007c92 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c56:	6a38      	ldr	r0, [r7, #32]
 8007c58:	f000 f90e 	bl	8007e78 <prvIsQueueEmpty>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d011      	beq.n	8007c86 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	3324      	adds	r3, #36	@ 0x24
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fe48 	bl	8008900 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007c70:	6a38      	ldr	r0, [r7, #32]
 8007c72:	f000 f8af 	bl	8007dd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007c76:	f000 fbe1 	bl	800843c <xTaskResumeAll>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d18f      	bne.n	8007ba0 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 8007c80:	f7ff fb5e 	bl	8007340 <vPortYield>
 8007c84:	e78c      	b.n	8007ba0 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8007c86:	6a38      	ldr	r0, [r7, #32]
 8007c88:	f000 f8a4 	bl	8007dd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007c8c:	f000 fbd6 	bl	800843c <xTaskResumeAll>
 8007c90:	e786      	b.n	8007ba0 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8007c92:	6a38      	ldr	r0, [r7, #32]
 8007c94:	f000 f89e 	bl	8007dd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007c98:	f000 fbd0 	bl	800843c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c9c:	6a38      	ldr	r0, [r7, #32]
 8007c9e:	f000 f8eb 	bl	8007e78 <prvIsQueueEmpty>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f43f af7b 	beq.w	8007ba0 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007caa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3728      	adds	r7, #40	@ 0x28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10d      	bne.n	8007cee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d14d      	bne.n	8007d76 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 f892 	bl	8008e08 <xTaskPriorityDisinherit>
 8007ce4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	609a      	str	r2, [r3, #8]
 8007cec:	e043      	b.n	8007d76 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d119      	bne.n	8007d28 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6858      	ldr	r0, [r3, #4]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	f001 fe96 	bl	8009a30 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d32b      	bcc.n	8007d76 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	e026      	b.n	8007d76 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	68d8      	ldr	r0, [r3, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d30:	461a      	mov	r2, r3
 8007d32:	68b9      	ldr	r1, [r7, #8]
 8007d34:	f001 fe7c 	bl	8009a30 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d40:	425b      	negs	r3, r3
 8007d42:	441a      	add	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d207      	bcs.n	8007d64 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5c:	425b      	negs	r3, r3
 8007d5e:	441a      	add	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d105      	bne.n	8007d76 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8007d7e:	697b      	ldr	r3, [r7, #20]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d018      	beq.n	8007dcc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	441a      	add	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d303      	bcc.n	8007dbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68d9      	ldr	r1, [r3, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6838      	ldr	r0, [r7, #0]
 8007dc8:	f001 fe32 	bl	8009a30 <memcpy>
    }
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007ddc:	f7ff fac2 	bl	8007364 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007de6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007de8:	e011      	b.n	8007e0e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d012      	beq.n	8007e18 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3324      	adds	r3, #36	@ 0x24
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fdde 	bl	80089b8 <xTaskRemoveFromEventList>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8007e02:	f000 ff15 	bl	8008c30 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dce9      	bgt.n	8007dea <prvUnlockQueue+0x16>
 8007e16:	e000      	b.n	8007e1a <prvUnlockQueue+0x46>
                    break;
 8007e18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	22ff      	movs	r2, #255	@ 0xff
 8007e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8007e22:	f7ff fab1 	bl	8007388 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8007e26:	f7ff fa9d 	bl	8007364 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e32:	e011      	b.n	8007e58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d012      	beq.n	8007e62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3310      	adds	r3, #16
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fdb9 	bl	80089b8 <xTaskRemoveFromEventList>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007e4c:	f000 fef0 	bl	8008c30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dce9      	bgt.n	8007e34 <prvUnlockQueue+0x60>
 8007e60:	e000      	b.n	8007e64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007e62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	22ff      	movs	r2, #255	@ 0xff
 8007e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8007e6c:	f7ff fa8c 	bl	8007388 <vPortExitCritical>
}
 8007e70:	bf00      	nop
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007e80:	f7ff fa70 	bl	8007364 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e001      	b.n	8007e96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007e96:	f7ff fa77 	bl	8007388 <vPortExitCritical>

    return xReturn;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007eac:	f7ff fa5a 	bl	8007364 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d102      	bne.n	8007ec2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e001      	b.n	8007ec6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007ec6:	f7ff fa5f 	bl	8007388 <vPortExitCritical>

    return xReturn;
 8007eca:	68fb      	ldr	r3, [r7, #12]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <vQueueAddToRegistry+0x1c>
 8007ee8:	f7ff fb7e 	bl	80075e8 <ulSetInterruptMask>
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d024      	beq.n	8007f40 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e01e      	b.n	8007f3a <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007efc:	4a17      	ldr	r2, [pc, #92]	@ (8007f5c <vQueueAddToRegistry+0x88>)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	4413      	add	r3, r2
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d105      	bne.n	8007f18 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	4a12      	ldr	r2, [pc, #72]	@ (8007f5c <vQueueAddToRegistry+0x88>)
 8007f12:	4413      	add	r3, r2
 8007f14:	60bb      	str	r3, [r7, #8]
                    break;
 8007f16:	e013      	b.n	8007f40 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <vQueueAddToRegistry+0x60>
 8007f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8007f5c <vQueueAddToRegistry+0x88>)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8007f5c <vQueueAddToRegistry+0x88>)
 8007f30:	4413      	add	r3, r2
 8007f32:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b07      	cmp	r3, #7
 8007f3e:	d9dd      	bls.n	8007efc <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20026168 	.word	0x20026168

08007f60 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007f70:	f7ff f9f8 	bl	8007364 <vPortEnterCritical>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f7a:	b25b      	sxtb	r3, r3
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d103      	bne.n	8007f8a <vQueueWaitForMessageRestricted+0x2a>
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f90:	b25b      	sxtb	r3, r3
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f96:	d103      	bne.n	8007fa0 <vQueueWaitForMessageRestricted+0x40>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fa0:	f7ff f9f2 	bl	8007388 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	3324      	adds	r3, #36	@ 0x24
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	68b9      	ldr	r1, [r7, #8]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fcc1 	bl	800893c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	f7ff ff0a 	bl	8007dd4 <prvUnlockQueue>
    }
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08c      	sub	sp, #48	@ 0x30
 8007fcc:	af04      	add	r7, sp, #16
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8007fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <xTaskCreateStatic+0x1c>
 8007fdc:	f7ff fb04 	bl	80075e8 <ulSetInterruptMask>
 8007fe0:	bf00      	nop
 8007fe2:	e7fd      	b.n	8007fe0 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d103      	bne.n	8007ff2 <xTaskCreateStatic+0x2a>
 8007fea:	f7ff fafd 	bl	80075e8 <ulSetInterruptMask>
 8007fee:	bf00      	nop
 8007ff0:	e7fd      	b.n	8007fee <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8007ff2:	235c      	movs	r3, #92	@ 0x5c
 8007ff4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007ffa:	d003      	beq.n	8008004 <xTaskCreateStatic+0x3c>
 8007ffc:	f7ff faf4 	bl	80075e8 <ulSetInterruptMask>
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008004:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008008:	2b00      	cmp	r3, #0
 800800a:	d023      	beq.n	8008054 <xTaskCreateStatic+0x8c>
 800800c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d020      	beq.n	8008054 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008016:	225c      	movs	r2, #92	@ 0x5c
 8008018:	2100      	movs	r1, #0
 800801a:	69f8      	ldr	r0, [r7, #28]
 800801c:	f001 fcdc 	bl	80099d8 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008024:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800802e:	2300      	movs	r3, #0
 8008030:	9303      	str	r3, [sp, #12]
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	9302      	str	r3, [sp, #8]
 8008036:	f107 0318 	add.w	r3, r7, #24
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	68b9      	ldr	r1, [r7, #8]
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 f855 	bl	80080f6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800804c:	69f8      	ldr	r0, [r7, #28]
 800804e:	f000 f8d5 	bl	80081fc <prvAddNewTaskToReadyList>
 8008052:	e001      	b.n	8008058 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8008054:	2300      	movs	r3, #0
 8008056:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008058:	69bb      	ldr	r3, [r7, #24]
    }
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008062:	b580      	push	{r7, lr}
 8008064:	b08c      	sub	sp, #48	@ 0x30
 8008066:	af04      	add	r7, sp, #16
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	603b      	str	r3, [r7, #0]
 800806e:	4613      	mov	r3, r2
 8008070:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4618      	mov	r0, r3
 8008078:	f001 fafe 	bl	8009678 <pvPortMalloc>
 800807c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d013      	beq.n	80080ac <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008084:	205c      	movs	r0, #92	@ 0x5c
 8008086:	f001 faf7 	bl	8009678 <pvPortMalloc>
 800808a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008092:	225c      	movs	r2, #92	@ 0x5c
 8008094:	2100      	movs	r1, #0
 8008096:	69f8      	ldr	r0, [r7, #28]
 8008098:	f001 fc9e 	bl	80099d8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80080a2:	e005      	b.n	80080b0 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80080a4:	6978      	ldr	r0, [r7, #20]
 80080a6:	f001 fb93 	bl	80097d0 <vPortFree>
 80080aa:	e001      	b.n	80080b0 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d017      	beq.n	80080e6 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080be:	88fa      	ldrh	r2, [r7, #6]
 80080c0:	2300      	movs	r3, #0
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	9302      	str	r3, [sp, #8]
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f80e 	bl	80080f6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80080da:	69f8      	ldr	r0, [r7, #28]
 80080dc:	f000 f88e 	bl	80081fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80080e0:	2301      	movs	r3, #1
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	e002      	b.n	80080ec <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080e6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80080ec:	69bb      	ldr	r3, [r7, #24]
    }
 80080ee:	4618      	mov	r0, r3
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b086      	sub	sp, #24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	461a      	mov	r2, r3
 800810e:	21a5      	movs	r1, #165	@ 0xa5
 8008110:	f001 fc62 	bl	80099d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800811e:	3b01      	subs	r3, #1
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f023 0307 	bic.w	r3, r3, #7
 800812c:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <prvInitialiseNewTask+0x4a>
 8008138:	f7ff fa56 	bl	80075e8 <ulSetInterruptMask>
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01e      	beq.n	8008184 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008146:	2300      	movs	r3, #0
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e012      	b.n	8008172 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	7819      	ldrb	r1, [r3, #0]
 8008154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	4413      	add	r3, r2
 800815a:	3334      	adds	r3, #52	@ 0x34
 800815c:	460a      	mov	r2, r1
 800815e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	4413      	add	r3, r2
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d006      	beq.n	800817a <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	3301      	adds	r3, #1
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b0f      	cmp	r3, #15
 8008176:	d9e9      	bls.n	800814c <prvInitialiseNewTask+0x56>
 8008178:	e000      	b.n	800817c <prvInitialiseNewTask+0x86>
            {
                break;
 800817a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800817c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	2b37      	cmp	r3, #55	@ 0x37
 8008188:	d903      	bls.n	8008192 <prvInitialiseNewTask+0x9c>
 800818a:	f7ff fa2d 	bl	80075e8 <ulSetInterruptMask>
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	2b37      	cmp	r3, #55	@ 0x37
 8008196:	d901      	bls.n	800819c <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008198:	2337      	movs	r3, #55	@ 0x37
 800819a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819e:	6a3a      	ldr	r2, [r7, #32]
 80081a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	6a3a      	ldr	r2, [r7, #32]
 80081a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	3304      	adds	r3, #4
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff f817 	bl	80071e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b4:	3318      	adds	r3, #24
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff f812 	bl	80071e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081d0:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80081d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f7ff f920 	bl	8007420 <pxPortInitialiseStack>
 80081e0:	4602      	mov	r2, r0
 80081e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80081f2:	bf00      	nop
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008204:	f7ff f8ae 	bl	8007364 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008208:	4b3e      	ldr	r3, [pc, #248]	@ (8008304 <prvAddNewTaskToReadyList+0x108>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	4a3d      	ldr	r2, [pc, #244]	@ (8008304 <prvAddNewTaskToReadyList+0x108>)
 8008210:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008212:	4b3d      	ldr	r3, [pc, #244]	@ (8008308 <prvAddNewTaskToReadyList+0x10c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800821a:	4a3b      	ldr	r2, [pc, #236]	@ (8008308 <prvAddNewTaskToReadyList+0x10c>)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008220:	4b38      	ldr	r3, [pc, #224]	@ (8008304 <prvAddNewTaskToReadyList+0x108>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d110      	bne.n	800824a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008228:	f000 fd1e 	bl	8008c68 <prvInitialiseTaskLists>
 800822c:	e00d      	b.n	800824a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800822e:	4b37      	ldr	r3, [pc, #220]	@ (800830c <prvAddNewTaskToReadyList+0x110>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008236:	4b34      	ldr	r3, [pc, #208]	@ (8008308 <prvAddNewTaskToReadyList+0x10c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008240:	429a      	cmp	r2, r3
 8008242:	d802      	bhi.n	800824a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008244:	4a30      	ldr	r2, [pc, #192]	@ (8008308 <prvAddNewTaskToReadyList+0x10c>)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800824a:	4b31      	ldr	r3, [pc, #196]	@ (8008310 <prvAddNewTaskToReadyList+0x114>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3301      	adds	r3, #1
 8008250:	4a2f      	ldr	r2, [pc, #188]	@ (8008310 <prvAddNewTaskToReadyList+0x114>)
 8008252:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008254:	4b2e      	ldr	r3, [pc, #184]	@ (8008310 <prvAddNewTaskToReadyList+0x114>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008260:	4b2c      	ldr	r3, [pc, #176]	@ (8008314 <prvAddNewTaskToReadyList+0x118>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d903      	bls.n	8008270 <prvAddNewTaskToReadyList+0x74>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826c:	4a29      	ldr	r2, [pc, #164]	@ (8008314 <prvAddNewTaskToReadyList+0x118>)
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008274:	4928      	ldr	r1, [pc, #160]	@ (8008318 <prvAddNewTaskToReadyList+0x11c>)
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	3304      	adds	r3, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	609a      	str	r2, [r3, #8]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	60da      	str	r2, [r3, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	3204      	adds	r2, #4
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	1d1a      	adds	r2, r3, #4
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	609a      	str	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082aa:	4613      	mov	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4a19      	ldr	r2, [pc, #100]	@ (8008318 <prvAddNewTaskToReadyList+0x11c>)
 80082b4:	441a      	add	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	615a      	str	r2, [r3, #20]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082be:	4916      	ldr	r1, [pc, #88]	@ (8008318 <prvAddNewTaskToReadyList+0x11c>)
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	1c59      	adds	r1, r3, #1
 80082ce:	4812      	ldr	r0, [pc, #72]	@ (8008318 <prvAddNewTaskToReadyList+0x11c>)
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4403      	add	r3, r0
 80082da:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80082dc:	f7ff f854 	bl	8007388 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80082e0:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <prvAddNewTaskToReadyList+0x110>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082e8:	4b07      	ldr	r3, [pc, #28]	@ (8008308 <prvAddNewTaskToReadyList+0x10c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d201      	bcs.n	80082fa <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80082f6:	f7ff f823 	bl	8007340 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	2002667c 	.word	0x2002667c
 8008308:	200261a8 	.word	0x200261a8
 800830c:	20026688 	.word	0x20026688
 8008310:	20026698 	.word	0x20026698
 8008314:	20026684 	.word	0x20026684
 8008318:	200261ac 	.word	0x200261ac

0800831c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d010      	beq.n	8008350 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800832e:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <vTaskDelay+0x48>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <vTaskDelay+0x22>
 8008336:	f7ff f957 	bl	80075e8 <ulSetInterruptMask>
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800833e:	f000 f86f 	bl	8008420 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008342:	2100      	movs	r1, #0
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fde7 	bl	8008f18 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800834a:	f000 f877 	bl	800843c <xTaskResumeAll>
 800834e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8008356:	f7fe fff3 	bl	8007340 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	200266a4 	.word	0x200266a4

08008368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008376:	463a      	mov	r2, r7
 8008378:	1d39      	adds	r1, r7, #4
 800837a:	f107 0308 	add.w	r3, r7, #8
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe feda 	bl	8007138 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	9202      	str	r2, [sp, #8]
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	2300      	movs	r3, #0
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	2300      	movs	r3, #0
 8008394:	460a      	mov	r2, r1
 8008396:	491b      	ldr	r1, [pc, #108]	@ (8008404 <vTaskStartScheduler+0x9c>)
 8008398:	481b      	ldr	r0, [pc, #108]	@ (8008408 <vTaskStartScheduler+0xa0>)
 800839a:	f7ff fe15 	bl	8007fc8 <xTaskCreateStatic>
 800839e:	4603      	mov	r3, r0
 80083a0:	4a1a      	ldr	r2, [pc, #104]	@ (800840c <vTaskStartScheduler+0xa4>)
 80083a2:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 80083a4:	4b19      	ldr	r3, [pc, #100]	@ (800840c <vTaskStartScheduler+0xa4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 80083ac:	2301      	movs	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	e001      	b.n	80083b6 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d102      	bne.n	80083c2 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 80083bc:	f000 fe1a 	bl	8008ff4 <xTimerCreateTimerTask>
 80083c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d10e      	bne.n	80083e6 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80083c8:	f7ff f90e 	bl	80075e8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80083cc:	4b10      	ldr	r3, [pc, #64]	@ (8008410 <vTaskStartScheduler+0xa8>)
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80083d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008414 <vTaskStartScheduler+0xac>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083da:	4b0f      	ldr	r3, [pc, #60]	@ (8008418 <vTaskStartScheduler+0xb0>)
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80083e0:	f7ff f8a8 	bl	8007534 <xPortStartScheduler>
 80083e4:	e007      	b.n	80083f6 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d103      	bne.n	80083f6 <vTaskStartScheduler+0x8e>
 80083ee:	f7ff f8fb 	bl	80075e8 <ulSetInterruptMask>
 80083f2:	bf00      	nop
 80083f4:	e7fd      	b.n	80083f2 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80083f6:	4b09      	ldr	r3, [pc, #36]	@ (800841c <vTaskStartScheduler+0xb4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	08009a94 	.word	0x08009a94
 8008408:	08008c49 	.word	0x08008c49
 800840c:	200266a0 	.word	0x200266a0
 8008410:	2002669c 	.word	0x2002669c
 8008414:	20026688 	.word	0x20026688
 8008418:	20026680 	.word	0x20026680
 800841c:	20000008 	.word	0x20000008

08008420 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008424:	4b04      	ldr	r3, [pc, #16]	@ (8008438 <vTaskSuspendAll+0x18>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	4a03      	ldr	r2, [pc, #12]	@ (8008438 <vTaskSuspendAll+0x18>)
 800842c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800842e:	bf00      	nop
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	200266a4 	.word	0x200266a4

0800843c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800844a:	4b6b      	ldr	r3, [pc, #428]	@ (80085f8 <xTaskResumeAll+0x1bc>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d103      	bne.n	800845a <xTaskResumeAll+0x1e>
 8008452:	f7ff f8c9 	bl	80075e8 <ulSetInterruptMask>
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800845a:	f7fe ff83 	bl	8007364 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800845e:	4b66      	ldr	r3, [pc, #408]	@ (80085f8 <xTaskResumeAll+0x1bc>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3b01      	subs	r3, #1
 8008464:	4a64      	ldr	r2, [pc, #400]	@ (80085f8 <xTaskResumeAll+0x1bc>)
 8008466:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008468:	4b63      	ldr	r3, [pc, #396]	@ (80085f8 <xTaskResumeAll+0x1bc>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f040 80bb 	bne.w	80085e8 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008472:	4b62      	ldr	r3, [pc, #392]	@ (80085fc <xTaskResumeAll+0x1c0>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 80b6 	beq.w	80085e8 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800847c:	e08b      	b.n	8008596 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800847e:	4b60      	ldr	r3, [pc, #384]	@ (8008600 <xTaskResumeAll+0x1c4>)
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848a:	60bb      	str	r3, [r7, #8]
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	6a12      	ldr	r2, [r2, #32]
 8008494:	609a      	str	r2, [r3, #8]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	69d2      	ldr	r2, [r2, #28]
 800849e:	605a      	str	r2, [r3, #4]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	3318      	adds	r3, #24
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d103      	bne.n	80084b4 <xTaskResumeAll+0x78>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	6a1a      	ldr	r2, [r3, #32]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	605a      	str	r2, [r3, #4]
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2200      	movs	r2, #0
 80084b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	1e5a      	subs	r2, r3, #1
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	607b      	str	r3, [r7, #4]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	68d2      	ldr	r2, [r2, #12]
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	6892      	ldr	r2, [r2, #8]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	3304      	adds	r3, #4
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d103      	bne.n	80084f2 <xTaskResumeAll+0xb6>
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	605a      	str	r2, [r3, #4]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2200      	movs	r2, #0
 80084f6:	615a      	str	r2, [r3, #20]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	1e5a      	subs	r2, r3, #1
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008506:	4b3f      	ldr	r3, [pc, #252]	@ (8008604 <xTaskResumeAll+0x1c8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d903      	bls.n	8008516 <xTaskResumeAll+0xda>
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008512:	4a3c      	ldr	r2, [pc, #240]	@ (8008604 <xTaskResumeAll+0x1c8>)
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851a:	493b      	ldr	r1, [pc, #236]	@ (8008608 <xTaskResumeAll+0x1cc>)
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	440b      	add	r3, r1
 8008526:	3304      	adds	r3, #4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	609a      	str	r2, [r3, #8]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	60da      	str	r2, [r3, #12]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	3204      	adds	r2, #4
 8008542:	605a      	str	r2, [r3, #4]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	1d1a      	adds	r2, r3, #4
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	609a      	str	r2, [r3, #8]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4a2b      	ldr	r2, [pc, #172]	@ (8008608 <xTaskResumeAll+0x1cc>)
 800855a:	441a      	add	r2, r3
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	615a      	str	r2, [r3, #20]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008564:	4928      	ldr	r1, [pc, #160]	@ (8008608 <xTaskResumeAll+0x1cc>)
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	1c59      	adds	r1, r3, #1
 8008574:	4824      	ldr	r0, [pc, #144]	@ (8008608 <xTaskResumeAll+0x1cc>)
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4403      	add	r3, r0
 8008580:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008586:	4b21      	ldr	r3, [pc, #132]	@ (800860c <xTaskResumeAll+0x1d0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858c:	429a      	cmp	r2, r3
 800858e:	d302      	bcc.n	8008596 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8008590:	4b1f      	ldr	r3, [pc, #124]	@ (8008610 <xTaskResumeAll+0x1d4>)
 8008592:	2201      	movs	r2, #1
 8008594:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008596:	4b1a      	ldr	r3, [pc, #104]	@ (8008600 <xTaskResumeAll+0x1c4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f47f af6f 	bne.w	800847e <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80085a6:	f000 fbf5 	bl	8008d94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008614 <xTaskResumeAll+0x1d8>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d010      	beq.n	80085d8 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80085b6:	f000 f83f 	bl	8008638 <xTaskIncrementTick>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 80085c0:	4b13      	ldr	r3, [pc, #76]	@ (8008610 <xTaskResumeAll+0x1d4>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f1      	bne.n	80085b6 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 80085d2:	4b10      	ldr	r3, [pc, #64]	@ (8008614 <xTaskResumeAll+0x1d8>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80085d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008610 <xTaskResumeAll+0x1d4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80085e0:	2301      	movs	r3, #1
 80085e2:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80085e4:	f7fe feac 	bl	8007340 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80085e8:	f7fe fece 	bl	8007388 <vPortExitCritical>

    return xAlreadyYielded;
 80085ec:	693b      	ldr	r3, [r7, #16]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200266a4 	.word	0x200266a4
 80085fc:	2002667c 	.word	0x2002667c
 8008600:	2002663c 	.word	0x2002663c
 8008604:	20026684 	.word	0x20026684
 8008608:	200261ac 	.word	0x200261ac
 800860c:	200261a8 	.word	0x200261a8
 8008610:	20026690 	.word	0x20026690
 8008614:	2002668c 	.word	0x2002668c

08008618 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800861e:	4b05      	ldr	r3, [pc, #20]	@ (8008634 <xTaskGetTickCount+0x1c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8008624:	687b      	ldr	r3, [r7, #4]
}
 8008626:	4618      	mov	r0, r3
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20026680 	.word	0x20026680

08008638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008642:	4b7a      	ldr	r3, [pc, #488]	@ (800882c <xTaskIncrementTick+0x1f4>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f040 80e6 	bne.w	8008818 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800864c:	4b78      	ldr	r3, [pc, #480]	@ (8008830 <xTaskIncrementTick+0x1f8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3301      	adds	r3, #1
 8008652:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008654:	4a76      	ldr	r2, [pc, #472]	@ (8008830 <xTaskIncrementTick+0x1f8>)
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d119      	bne.n	8008694 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008660:	4b74      	ldr	r3, [pc, #464]	@ (8008834 <xTaskIncrementTick+0x1fc>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <xTaskIncrementTick+0x3a>
 800866a:	f7fe ffbd 	bl	80075e8 <ulSetInterruptMask>
 800866e:	bf00      	nop
 8008670:	e7fd      	b.n	800866e <xTaskIncrementTick+0x36>
 8008672:	4b70      	ldr	r3, [pc, #448]	@ (8008834 <xTaskIncrementTick+0x1fc>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	4b6f      	ldr	r3, [pc, #444]	@ (8008838 <xTaskIncrementTick+0x200>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a6d      	ldr	r2, [pc, #436]	@ (8008834 <xTaskIncrementTick+0x1fc>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	4a6d      	ldr	r2, [pc, #436]	@ (8008838 <xTaskIncrementTick+0x200>)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	4b6d      	ldr	r3, [pc, #436]	@ (800883c <xTaskIncrementTick+0x204>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	4a6b      	ldr	r2, [pc, #428]	@ (800883c <xTaskIncrementTick+0x204>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	f000 fb80 	bl	8008d94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008694:	4b6a      	ldr	r3, [pc, #424]	@ (8008840 <xTaskIncrementTick+0x208>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	429a      	cmp	r2, r3
 800869c:	f0c0 80a7 	bcc.w	80087ee <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a0:	4b64      	ldr	r3, [pc, #400]	@ (8008834 <xTaskIncrementTick+0x1fc>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086aa:	4b65      	ldr	r3, [pc, #404]	@ (8008840 <xTaskIncrementTick+0x208>)
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	601a      	str	r2, [r3, #0]
                    break;
 80086b2:	e09c      	b.n	80087ee <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b4:	4b5f      	ldr	r3, [pc, #380]	@ (8008834 <xTaskIncrementTick+0x1fc>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d203      	bcs.n	80086d4 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80086cc:	4a5c      	ldr	r2, [pc, #368]	@ (8008840 <xTaskIncrementTick+0x208>)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80086d2:	e08c      	b.n	80087ee <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	68d2      	ldr	r2, [r2, #12]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	6892      	ldr	r2, [r2, #8]
 80086ec:	605a      	str	r2, [r3, #4]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3304      	adds	r3, #4
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d103      	bne.n	8008702 <xTaskIncrementTick+0xca>
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	605a      	str	r2, [r3, #4]
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	2200      	movs	r2, #0
 8008706:	615a      	str	r2, [r3, #20]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	1e5a      	subs	r2, r3, #1
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008716:	2b00      	cmp	r3, #0
 8008718:	d01e      	beq.n	8008758 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871e:	607b      	str	r3, [r7, #4]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	6a12      	ldr	r2, [r2, #32]
 8008728:	609a      	str	r2, [r3, #8]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	69d2      	ldr	r2, [r2, #28]
 8008732:	605a      	str	r2, [r3, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	3318      	adds	r3, #24
 800873c:	429a      	cmp	r2, r3
 800873e:	d103      	bne.n	8008748 <xTaskIncrementTick+0x110>
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	6a1a      	ldr	r2, [r3, #32]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	605a      	str	r2, [r3, #4]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2200      	movs	r2, #0
 800874c:	629a      	str	r2, [r3, #40]	@ 0x28
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	1e5a      	subs	r2, r3, #1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800875c:	4b39      	ldr	r3, [pc, #228]	@ (8008844 <xTaskIncrementTick+0x20c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d903      	bls.n	800876c <xTaskIncrementTick+0x134>
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008768:	4a36      	ldr	r2, [pc, #216]	@ (8008844 <xTaskIncrementTick+0x20c>)
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008770:	4935      	ldr	r1, [pc, #212]	@ (8008848 <xTaskIncrementTick+0x210>)
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	3304      	adds	r3, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	603b      	str	r3, [r7, #0]
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	3204      	adds	r2, #4
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	609a      	str	r2, [r3, #8]
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4a26      	ldr	r2, [pc, #152]	@ (8008848 <xTaskIncrementTick+0x210>)
 80087b0:	441a      	add	r2, r3
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	615a      	str	r2, [r3, #20]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ba:	4923      	ldr	r1, [pc, #140]	@ (8008848 <xTaskIncrementTick+0x210>)
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	1c59      	adds	r1, r3, #1
 80087ca:	481f      	ldr	r0, [pc, #124]	@ (8008848 <xTaskIncrementTick+0x210>)
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4403      	add	r3, r0
 80087d6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087dc:	4b1b      	ldr	r3, [pc, #108]	@ (800884c <xTaskIncrementTick+0x214>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	429a      	cmp	r2, r3
 80087e4:	f67f af5c 	bls.w	80086a0 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 80087e8:	2301      	movs	r3, #1
 80087ea:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087ec:	e758      	b.n	80086a0 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087ee:	4b17      	ldr	r3, [pc, #92]	@ (800884c <xTaskIncrementTick+0x214>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f4:	4914      	ldr	r1, [pc, #80]	@ (8008848 <xTaskIncrementTick+0x210>)
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d901      	bls.n	800880a <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8008806:	2301      	movs	r3, #1
 8008808:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800880a:	4b11      	ldr	r3, [pc, #68]	@ (8008850 <xTaskIncrementTick+0x218>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8008812:	2301      	movs	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	e004      	b.n	8008822 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008818:	4b0e      	ldr	r3, [pc, #56]	@ (8008854 <xTaskIncrementTick+0x21c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3301      	adds	r3, #1
 800881e:	4a0d      	ldr	r2, [pc, #52]	@ (8008854 <xTaskIncrementTick+0x21c>)
 8008820:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008822:	69fb      	ldr	r3, [r7, #28]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3720      	adds	r7, #32
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	200266a4 	.word	0x200266a4
 8008830:	20026680 	.word	0x20026680
 8008834:	20026634 	.word	0x20026634
 8008838:	20026638 	.word	0x20026638
 800883c:	20026694 	.word	0x20026694
 8008840:	2002669c 	.word	0x2002669c
 8008844:	20026684 	.word	0x20026684
 8008848:	200261ac 	.word	0x200261ac
 800884c:	200261a8 	.word	0x200261a8
 8008850:	20026690 	.word	0x20026690
 8008854:	2002668c 	.word	0x2002668c

08008858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800885e:	4b23      	ldr	r3, [pc, #140]	@ (80088ec <vTaskSwitchContext+0x94>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008866:	4b22      	ldr	r3, [pc, #136]	@ (80088f0 <vTaskSwitchContext+0x98>)
 8008868:	2201      	movs	r2, #1
 800886a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800886c:	e03a      	b.n	80088e4 <vTaskSwitchContext+0x8c>
        xYieldPending = pdFALSE;
 800886e:	4b20      	ldr	r3, [pc, #128]	@ (80088f0 <vTaskSwitchContext+0x98>)
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008874:	4b1f      	ldr	r3, [pc, #124]	@ (80088f4 <vTaskSwitchContext+0x9c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	607b      	str	r3, [r7, #4]
 800887a:	e009      	b.n	8008890 <vTaskSwitchContext+0x38>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <vTaskSwitchContext+0x32>
 8008882:	f7fe feb1 	bl	80075e8 <ulSetInterruptMask>
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <vTaskSwitchContext+0x2e>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3b01      	subs	r3, #1
 800888e:	607b      	str	r3, [r7, #4]
 8008890:	4919      	ldr	r1, [pc, #100]	@ (80088f8 <vTaskSwitchContext+0xa0>)
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0eb      	beq.n	800887c <vTaskSwitchContext+0x24>
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4a12      	ldr	r2, [pc, #72]	@ (80088f8 <vTaskSwitchContext+0xa0>)
 80088b0:	4413      	add	r3, r2
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	605a      	str	r2, [r3, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	3308      	adds	r3, #8
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d104      	bne.n	80088d4 <vTaskSwitchContext+0x7c>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	605a      	str	r2, [r3, #4]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	4a08      	ldr	r2, [pc, #32]	@ (80088fc <vTaskSwitchContext+0xa4>)
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	4a05      	ldr	r2, [pc, #20]	@ (80088f4 <vTaskSwitchContext+0x9c>)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6013      	str	r3, [r2, #0]
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	200266a4 	.word	0x200266a4
 80088f0:	20026690 	.word	0x20026690
 80088f4:	20026684 	.word	0x20026684
 80088f8:	200261ac 	.word	0x200261ac
 80088fc:	200261a8 	.word	0x200261a8

08008900 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <vTaskPlaceOnEventList+0x18>
 8008910:	f7fe fe6a 	bl	80075e8 <ulSetInterruptMask>
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008918:	4b07      	ldr	r3, [pc, #28]	@ (8008938 <vTaskPlaceOnEventList+0x38>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3318      	adds	r3, #24
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7fe fc6a 	bl	80071fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008926:	2101      	movs	r1, #1
 8008928:	6838      	ldr	r0, [r7, #0]
 800892a:	f000 faf5 	bl	8008f18 <prvAddCurrentTaskToDelayedList>
}
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	200261a8 	.word	0x200261a8

0800893c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <vTaskPlaceOnEventListRestricted+0x1a>
 800894e:	f7fe fe4b 	bl	80075e8 <ulSetInterruptMask>
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	4b15      	ldr	r3, [pc, #84]	@ (80089b4 <vTaskPlaceOnEventListRestricted+0x78>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	61da      	str	r2, [r3, #28]
 8008964:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <vTaskPlaceOnEventListRestricted+0x78>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	6892      	ldr	r2, [r2, #8]
 800896c:	621a      	str	r2, [r3, #32]
 800896e:	4b11      	ldr	r3, [pc, #68]	@ (80089b4 <vTaskPlaceOnEventListRestricted+0x78>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	3218      	adds	r2, #24
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	4b0e      	ldr	r3, [pc, #56]	@ (80089b4 <vTaskPlaceOnEventListRestricted+0x78>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f103 0218 	add.w	r2, r3, #24
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	609a      	str	r2, [r3, #8]
 8008986:	4b0b      	ldr	r3, [pc, #44]	@ (80089b4 <vTaskPlaceOnEventListRestricted+0x78>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	629a      	str	r2, [r3, #40]	@ 0x28
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800899e:	f04f 33ff 	mov.w	r3, #4294967295
 80089a2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	68b8      	ldr	r0, [r7, #8]
 80089a8:	f000 fab6 	bl	8008f18 <prvAddCurrentTaskToDelayedList>
    }
 80089ac:	bf00      	nop
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	200261a8 	.word	0x200261a8

080089b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d103      	bne.n	80089d6 <xTaskRemoveFromEventList+0x1e>
 80089ce:	f7fe fe0b 	bl	80075e8 <ulSetInterruptMask>
 80089d2:	bf00      	nop
 80089d4:	e7fd      	b.n	80089d2 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	6a12      	ldr	r2, [r2, #32]
 80089e4:	609a      	str	r2, [r3, #8]
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	69d2      	ldr	r2, [r2, #28]
 80089ee:	605a      	str	r2, [r3, #4]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	3318      	adds	r3, #24
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d103      	bne.n	8008a04 <xTaskRemoveFromEventList+0x4c>
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	6a1a      	ldr	r2, [r3, #32]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	605a      	str	r2, [r3, #4]
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	2200      	movs	r2, #0
 8008a08:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	1e5a      	subs	r2, r3, #1
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a14:	4b49      	ldr	r3, [pc, #292]	@ (8008b3c <xTaskRemoveFromEventList+0x184>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d15f      	bne.n	8008adc <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	68d2      	ldr	r2, [r2, #12]
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	6892      	ldr	r2, [r2, #8]
 8008a34:	605a      	str	r2, [r3, #4]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d103      	bne.n	8008a4a <xTaskRemoveFromEventList+0x92>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	605a      	str	r2, [r3, #4]
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	615a      	str	r2, [r3, #20]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	1e5a      	subs	r2, r3, #1
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5e:	4b38      	ldr	r3, [pc, #224]	@ (8008b40 <xTaskRemoveFromEventList+0x188>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d903      	bls.n	8008a6e <xTaskRemoveFromEventList+0xb6>
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6a:	4a35      	ldr	r2, [pc, #212]	@ (8008b40 <xTaskRemoveFromEventList+0x188>)
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a72:	4934      	ldr	r1, [pc, #208]	@ (8008b44 <xTaskRemoveFromEventList+0x18c>)
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	3304      	adds	r3, #4
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60bb      	str	r3, [r7, #8]
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	609a      	str	r2, [r3, #8]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	3204      	adds	r2, #4
 8008a9a:	605a      	str	r2, [r3, #4]
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	1d1a      	adds	r2, r3, #4
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	609a      	str	r2, [r3, #8]
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4a24      	ldr	r2, [pc, #144]	@ (8008b44 <xTaskRemoveFromEventList+0x18c>)
 8008ab2:	441a      	add	r2, r3
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	615a      	str	r2, [r3, #20]
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008abc:	4921      	ldr	r1, [pc, #132]	@ (8008b44 <xTaskRemoveFromEventList+0x18c>)
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	1c59      	adds	r1, r3, #1
 8008acc:	481d      	ldr	r0, [pc, #116]	@ (8008b44 <xTaskRemoveFromEventList+0x18c>)
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4403      	add	r3, r0
 8008ad8:	6019      	str	r1, [r3, #0]
 8008ada:	e01b      	b.n	8008b14 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008adc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <xTaskRemoveFromEventList+0x190>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	61da      	str	r2, [r3, #28]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	621a      	str	r2, [r3, #32]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	3218      	adds	r2, #24
 8008af8:	605a      	str	r2, [r3, #4]
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f103 0218 	add.w	r2, r3, #24
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	609a      	str	r2, [r3, #8]
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	4a10      	ldr	r2, [pc, #64]	@ (8008b48 <xTaskRemoveFromEventList+0x190>)
 8008b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <xTaskRemoveFromEventList+0x190>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	4a0d      	ldr	r2, [pc, #52]	@ (8008b48 <xTaskRemoveFromEventList+0x190>)
 8008b12:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b18:	4b0c      	ldr	r3, [pc, #48]	@ (8008b4c <xTaskRemoveFromEventList+0x194>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d905      	bls.n	8008b2e <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008b22:	2301      	movs	r3, #1
 8008b24:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008b26:	4b0a      	ldr	r3, [pc, #40]	@ (8008b50 <xTaskRemoveFromEventList+0x198>)
 8008b28:	2201      	movs	r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	e001      	b.n	8008b32 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8008b32:	69fb      	ldr	r3, [r7, #28]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3720      	adds	r7, #32
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	200266a4 	.word	0x200266a4
 8008b40:	20026684 	.word	0x20026684
 8008b44:	200261ac 	.word	0x200261ac
 8008b48:	2002663c 	.word	0x2002663c
 8008b4c:	200261a8 	.word	0x200261a8
 8008b50:	20026690 	.word	0x20026690

08008b54 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b5c:	4b06      	ldr	r3, [pc, #24]	@ (8008b78 <vTaskInternalSetTimeOutState+0x24>)
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008b64:	4b05      	ldr	r3, [pc, #20]	@ (8008b7c <vTaskInternalSetTimeOutState+0x28>)
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	605a      	str	r2, [r3, #4]
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	20026694 	.word	0x20026694
 8008b7c:	20026680 	.word	0x20026680

08008b80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d103      	bne.n	8008b98 <xTaskCheckForTimeOut+0x18>
 8008b90:	f7fe fd2a 	bl	80075e8 <ulSetInterruptMask>
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <xTaskCheckForTimeOut+0x26>
 8008b9e:	f7fe fd23 	bl	80075e8 <ulSetInterruptMask>
 8008ba2:	bf00      	nop
 8008ba4:	e7fd      	b.n	8008ba2 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 8008ba6:	f7fe fbdd 	bl	8007364 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008baa:	4b1f      	ldr	r3, [pc, #124]	@ (8008c28 <xTaskCheckForTimeOut+0xa8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d102      	bne.n	8008bca <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e026      	b.n	8008c18 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b17      	ldr	r3, [pc, #92]	@ (8008c2c <xTaskCheckForTimeOut+0xac>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d00a      	beq.n	8008bec <xTaskCheckForTimeOut+0x6c>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d305      	bcc.n	8008bec <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008be0:	2301      	movs	r3, #1
 8008be2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	e015      	b.n	8008c18 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d20b      	bcs.n	8008c0e <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	1ad2      	subs	r2, r2, r3
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff ffa6 	bl	8008b54 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	e004      	b.n	8008c18 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008c14:	2301      	movs	r3, #1
 8008c16:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8008c18:	f7fe fbb6 	bl	8007388 <vPortExitCritical>

    return xReturn;
 8008c1c:	697b      	ldr	r3, [r7, #20]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20026680 	.word	0x20026680
 8008c2c:	20026694 	.word	0x20026694

08008c30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008c34:	4b03      	ldr	r3, [pc, #12]	@ (8008c44 <vTaskMissedYield+0x14>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
}
 8008c3a:	bf00      	nop
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	20026690 	.word	0x20026690

08008c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008c50:	f000 f84a 	bl	8008ce8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c54:	4b03      	ldr	r3, [pc, #12]	@ (8008c64 <prvIdleTask+0x1c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d9f9      	bls.n	8008c50 <prvIdleTask+0x8>
            {
                taskYIELD();
 8008c5c:	f7fe fb70 	bl	8007340 <vPortYield>
        prvCheckTasksWaitingTermination();
 8008c60:	e7f6      	b.n	8008c50 <prvIdleTask+0x8>
 8008c62:	bf00      	nop
 8008c64:	200261ac 	.word	0x200261ac

08008c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c6e:	2300      	movs	r3, #0
 8008c70:	607b      	str	r3, [r7, #4]
 8008c72:	e00c      	b.n	8008c8e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4a12      	ldr	r2, [pc, #72]	@ (8008cc8 <prvInitialiseTaskLists+0x60>)
 8008c80:	4413      	add	r3, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fa8c 	bl	80071a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	607b      	str	r3, [r7, #4]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b37      	cmp	r3, #55	@ 0x37
 8008c92:	d9ef      	bls.n	8008c74 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008c94:	480d      	ldr	r0, [pc, #52]	@ (8008ccc <prvInitialiseTaskLists+0x64>)
 8008c96:	f7fe fa83 	bl	80071a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008c9a:	480d      	ldr	r0, [pc, #52]	@ (8008cd0 <prvInitialiseTaskLists+0x68>)
 8008c9c:	f7fe fa80 	bl	80071a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008ca0:	480c      	ldr	r0, [pc, #48]	@ (8008cd4 <prvInitialiseTaskLists+0x6c>)
 8008ca2:	f7fe fa7d 	bl	80071a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8008ca6:	480c      	ldr	r0, [pc, #48]	@ (8008cd8 <prvInitialiseTaskLists+0x70>)
 8008ca8:	f7fe fa7a 	bl	80071a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008cac:	480b      	ldr	r0, [pc, #44]	@ (8008cdc <prvInitialiseTaskLists+0x74>)
 8008cae:	f7fe fa77 	bl	80071a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce0 <prvInitialiseTaskLists+0x78>)
 8008cb4:	4a05      	ldr	r2, [pc, #20]	@ (8008ccc <prvInitialiseTaskLists+0x64>)
 8008cb6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce4 <prvInitialiseTaskLists+0x7c>)
 8008cba:	4a05      	ldr	r2, [pc, #20]	@ (8008cd0 <prvInitialiseTaskLists+0x68>)
 8008cbc:	601a      	str	r2, [r3, #0]
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200261ac 	.word	0x200261ac
 8008ccc:	2002660c 	.word	0x2002660c
 8008cd0:	20026620 	.word	0x20026620
 8008cd4:	2002663c 	.word	0x2002663c
 8008cd8:	20026650 	.word	0x20026650
 8008cdc:	20026668 	.word	0x20026668
 8008ce0:	20026634 	.word	0x20026634
 8008ce4:	20026638 	.word	0x20026638

08008ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cee:	e019      	b.n	8008d24 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008cf0:	f7fe fb38 	bl	8007364 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf4:	4b10      	ldr	r3, [pc, #64]	@ (8008d38 <prvCheckTasksWaitingTermination+0x50>)
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fab3 	bl	800726c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008d06:	4b0d      	ldr	r3, [pc, #52]	@ (8008d3c <prvCheckTasksWaitingTermination+0x54>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8008d3c <prvCheckTasksWaitingTermination+0x54>)
 8008d0e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <prvCheckTasksWaitingTermination+0x58>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	4a0a      	ldr	r2, [pc, #40]	@ (8008d40 <prvCheckTasksWaitingTermination+0x58>)
 8008d18:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008d1a:	f7fe fb35 	bl	8007388 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f810 	bl	8008d44 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d24:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <prvCheckTasksWaitingTermination+0x58>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e1      	bne.n	8008cf0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20026650 	.word	0x20026650
 8008d3c:	2002667c 	.word	0x2002667c
 8008d40:	20026664 	.word	0x20026664

08008d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d108      	bne.n	8008d68 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 fd38 	bl	80097d0 <vPortFree>
                vPortFree( pxTCB );
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fd35 	bl	80097d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008d66:	e011      	b.n	8008d8c <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d103      	bne.n	8008d7a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fd2c 	bl	80097d0 <vPortFree>
    }
 8008d78:	e008      	b.n	8008d8c <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d003      	beq.n	8008d8c <prvDeleteTCB+0x48>
 8008d84:	f7fe fc30 	bl	80075e8 <ulSetInterruptMask>
 8008d88:	bf00      	nop
 8008d8a:	e7fd      	b.n	8008d88 <prvDeleteTCB+0x44>
    }
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d98:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc4 <prvResetNextTaskUnblockTime+0x30>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d104      	bne.n	8008dac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008da2:	4b09      	ldr	r3, [pc, #36]	@ (8008dc8 <prvResetNextTaskUnblockTime+0x34>)
 8008da4:	f04f 32ff 	mov.w	r2, #4294967295
 8008da8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008daa:	e005      	b.n	8008db8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008dac:	4b05      	ldr	r3, [pc, #20]	@ (8008dc4 <prvResetNextTaskUnblockTime+0x30>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a04      	ldr	r2, [pc, #16]	@ (8008dc8 <prvResetNextTaskUnblockTime+0x34>)
 8008db6:	6013      	str	r3, [r2, #0]
}
 8008db8:	bf00      	nop
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20026634 	.word	0x20026634
 8008dc8:	2002669c 	.word	0x2002669c

08008dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008e00 <xTaskGetSchedulerState+0x34>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	607b      	str	r3, [r7, #4]
 8008dde:	e008      	b.n	8008df2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008de0:	4b08      	ldr	r3, [pc, #32]	@ (8008e04 <xTaskGetSchedulerState+0x38>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008de8:	2302      	movs	r3, #2
 8008dea:	607b      	str	r3, [r7, #4]
 8008dec:	e001      	b.n	8008df2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8008dee:	2300      	movs	r3, #0
 8008df0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8008df2:	687b      	ldr	r3, [r7, #4]
    }
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20026688 	.word	0x20026688
 8008e04:	200266a4 	.word	0x200266a4

08008e08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d070      	beq.n	8008f00 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8008e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8008f0c <xTaskPriorityDisinherit+0x104>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d003      	beq.n	8008e30 <xTaskPriorityDisinherit+0x28>
 8008e28:	f7fe fbde 	bl	80075e8 <ulSetInterruptMask>
 8008e2c:	bf00      	nop
 8008e2e:	e7fd      	b.n	8008e2c <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d103      	bne.n	8008e40 <xTaskPriorityDisinherit+0x38>
 8008e38:	f7fe fbd6 	bl	80075e8 <ulSetInterruptMask>
 8008e3c:	bf00      	nop
 8008e3e:	e7fd      	b.n	8008e3c <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e44:	1e5a      	subs	r2, r3, #1
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d054      	beq.n	8008f00 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d150      	bne.n	8008f00 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fa02 	bl	800726c <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e80:	4b23      	ldr	r3, [pc, #140]	@ (8008f10 <xTaskPriorityDisinherit+0x108>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d903      	bls.n	8008e90 <xTaskPriorityDisinherit+0x88>
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	4a20      	ldr	r2, [pc, #128]	@ (8008f10 <xTaskPriorityDisinherit+0x108>)
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e94:	491f      	ldr	r1, [pc, #124]	@ (8008f14 <xTaskPriorityDisinherit+0x10c>)
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	609a      	str	r2, [r3, #8]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	60da      	str	r2, [r3, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	3204      	adds	r2, #4
 8008ebc:	605a      	str	r2, [r3, #4]
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	609a      	str	r2, [r3, #8]
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4a10      	ldr	r2, [pc, #64]	@ (8008f14 <xTaskPriorityDisinherit+0x10c>)
 8008ed4:	441a      	add	r2, r3
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	615a      	str	r2, [r3, #20]
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ede:	490d      	ldr	r1, [pc, #52]	@ (8008f14 <xTaskPriorityDisinherit+0x10c>)
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	440b      	add	r3, r1
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	1c59      	adds	r1, r3, #1
 8008eee:	4809      	ldr	r0, [pc, #36]	@ (8008f14 <xTaskPriorityDisinherit+0x10c>)
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4403      	add	r3, r0
 8008efa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008efc:	2301      	movs	r3, #1
 8008efe:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008f00:	697b      	ldr	r3, [r7, #20]
    }
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200261a8 	.word	0x200261a8
 8008f10:	20026684 	.word	0x20026684
 8008f14:	200261ac 	.word	0x200261ac

08008f18 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8008f22:	4b2e      	ldr	r3, [pc, #184]	@ (8008fdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f28:	4b2d      	ldr	r3, [pc, #180]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe f99c 	bl	800726c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3a:	d124      	bne.n	8008f86 <prvAddCurrentTaskToDelayedList+0x6e>
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d021      	beq.n	8008f86 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f42:	4b28      	ldr	r3, [pc, #160]	@ (8008fe4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	4b25      	ldr	r3, [pc, #148]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	609a      	str	r2, [r3, #8]
 8008f50:	4b23      	ldr	r3, [pc, #140]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	6892      	ldr	r2, [r2, #8]
 8008f58:	60da      	str	r2, [r3, #12]
 8008f5a:	4b21      	ldr	r3, [pc, #132]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	3204      	adds	r2, #4
 8008f64:	605a      	str	r2, [r3, #4]
 8008f66:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	1d1a      	adds	r2, r3, #4
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	609a      	str	r2, [r3, #8]
 8008f70:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a1b      	ldr	r2, [pc, #108]	@ (8008fe4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8008f76:	615a      	str	r2, [r3, #20]
 8008f78:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	4a19      	ldr	r2, [pc, #100]	@ (8008fe4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8008f84:	e026      	b.n	8008fd4 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f8e:	4b14      	ldr	r3, [pc, #80]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d209      	bcs.n	8008fb2 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f9e:	4b12      	ldr	r3, [pc, #72]	@ (8008fe8 <prvAddCurrentTaskToDelayedList+0xd0>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f7fe f925 	bl	80071fa <vListInsert>
}
 8008fb0:	e010      	b.n	8008fd4 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008fec <prvAddCurrentTaskToDelayedList+0xd4>)
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7fe f91b 	bl	80071fa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d202      	bcs.n	8008fd4 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8008fce:	4a08      	ldr	r2, [pc, #32]	@ (8008ff0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6013      	str	r3, [r2, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20026680 	.word	0x20026680
 8008fe0:	200261a8 	.word	0x200261a8
 8008fe4:	20026668 	.word	0x20026668
 8008fe8:	20026638 	.word	0x20026638
 8008fec:	20026634 	.word	0x20026634
 8008ff0:	2002669c 	.word	0x2002669c

08008ff4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8008ffe:	f000 fae1 	bl	80095c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009002:	4b18      	ldr	r3, [pc, #96]	@ (8009064 <xTimerCreateTimerTask+0x70>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d020      	beq.n	800904c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009012:	463a      	mov	r2, r7
 8009014:	1d39      	adds	r1, r7, #4
 8009016:	f107 0308 	add.w	r3, r7, #8
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe f8a6 	bl	800716c <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	9202      	str	r2, [sp, #8]
 8009028:	9301      	str	r3, [sp, #4]
 800902a:	2337      	movs	r3, #55	@ 0x37
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	2300      	movs	r3, #0
 8009030:	460a      	mov	r2, r1
 8009032:	490d      	ldr	r1, [pc, #52]	@ (8009068 <xTimerCreateTimerTask+0x74>)
 8009034:	480d      	ldr	r0, [pc, #52]	@ (800906c <xTimerCreateTimerTask+0x78>)
 8009036:	f7fe ffc7 	bl	8007fc8 <xTaskCreateStatic>
 800903a:	4603      	mov	r3, r0
 800903c:	4a0c      	ldr	r2, [pc, #48]	@ (8009070 <xTimerCreateTimerTask+0x7c>)
 800903e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8009040:	4b0b      	ldr	r3, [pc, #44]	@ (8009070 <xTimerCreateTimerTask+0x7c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8009048:	2301      	movs	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d103      	bne.n	800905a <xTimerCreateTimerTask+0x66>
 8009052:	f7fe fac9 	bl	80075e8 <ulSetInterruptMask>
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800905a:	68fb      	ldr	r3, [r7, #12]
    }
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	200266d8 	.word	0x200266d8
 8009068:	08009a9c 	.word	0x08009a9c
 800906c:	0800921d 	.word	0x0800921d
 8009070:	200266dc 	.word	0x200266dc

08009074 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af02      	add	r7, sp, #8
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009082:	202c      	movs	r0, #44	@ 0x2c
 8009084:	f000 faf8 	bl	8009678 <pvPortMalloc>
 8009088:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00d      	beq.n	80090ac <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 f835 	bl	8009116 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80090ac:	697b      	ldr	r3, [r7, #20]
        }
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af02      	add	r7, sp, #8
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTimer_t equals the size of the real timer
                 * structure. */
                volatile size_t xSize = sizeof( StaticTimer_t );
 80090c4:	232c      	movs	r3, #44	@ 0x2c
 80090c6:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Timer_t ) );
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2b2c      	cmp	r3, #44	@ 0x2c
 80090cc:	d003      	beq.n	80090d6 <xTimerCreateStatic+0x20>
 80090ce:	f7fe fa8b 	bl	80075e8 <ulSetInterruptMask>
 80090d2:	bf00      	nop
 80090d4:	e7fd      	b.n	80090d2 <xTimerCreateStatic+0x1c>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80090d6:	693b      	ldr	r3, [r7, #16]
            }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d103      	bne.n	80090e6 <xTimerCreateStatic+0x30>
 80090de:	f7fe fa83 	bl	80075e8 <ulSetInterruptMask>
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <xTimerCreateStatic+0x2c>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	617b      	str	r3, [r7, #20]

            if( pxNewTimer != NULL )
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00d      	beq.n	800910c <xTimerCreateStatic+0x56>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2202      	movs	r2, #2
 80090f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 f805 	bl	8009116 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800910c:	697b      	ldr	r3, [r7, #20]
        }
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <prvInitialiseNewTimer+0x1c>
 800912a:	f7fe fa5d 	bl	80075e8 <ulSetInterruptMask>
 800912e:	bf00      	nop
 8009130:	e7fd      	b.n	800912e <prvInitialiseNewTimer+0x18>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8009132:	f000 fa47 	bl	80095c4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	3304      	adds	r3, #4
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe f844 	bl	80071e0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d008      	beq.n	8009170 <prvInitialiseNewTimer+0x5a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009164:	f043 0304 	orr.w	r3, r3, #4
 8009168:	b2da      	uxtb	r2, r3
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8009170:	bf00      	nop
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009184:	e008      	b.n	8009198 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	4413      	add	r3, r2
 800918e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	699a      	ldr	r2, [r3, #24]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	18d1      	adds	r1, r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f8d7 	bl	8009358 <prvInsertTimerInActiveList>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1ea      	bne.n	8009186 <prvReloadTimer+0xe>
        }
    }
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c6:	4b14      	ldr	r3, [pc, #80]	@ (8009218 <prvProcessExpiredTimer+0x5c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe f849 	bl	800726c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7ff ffc3 	bl	8009178 <prvReloadTimer>
 80091f2:	e008      	b.n	8009206 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091fa:	f023 0301 	bic.w	r3, r3, #1
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	4798      	blx	r3
    }
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200266d0 	.word	0x200266d0

0800921c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f851 	bl	80092d0 <prvGetNextExpireTime>
 800922e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	4619      	mov	r1, r3
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f805 	bl	8009244 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800923a:	f000 f8cf 	bl	80093dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800923e:	bf00      	nop
 8009240:	e7f0      	b.n	8009224 <prvTimerTask+0x8>
	...

08009244 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800924e:	f7ff f8e7 	bl	8008420 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009252:	f107 0308 	add.w	r3, r7, #8
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f85e 	bl	8009318 <prvSampleTimeNow>
 800925c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d12a      	bne.n	80092ba <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <prvProcessTimerOrBlockTask+0x3c>
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	429a      	cmp	r2, r3
 8009270:	d806      	bhi.n	8009280 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009272:	f7ff f8e3 	bl	800843c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff ff9f 	bl	80091bc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800927e:	e01e      	b.n	80092be <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009286:	4b10      	ldr	r3, [pc, #64]	@ (80092c8 <prvProcessTimerOrBlockTask+0x84>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <prvProcessTimerOrBlockTask+0x50>
 8009290:	2301      	movs	r3, #1
 8009292:	e000      	b.n	8009296 <prvProcessTimerOrBlockTask+0x52>
 8009294:	2300      	movs	r3, #0
 8009296:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009298:	4b0c      	ldr	r3, [pc, #48]	@ (80092cc <prvProcessTimerOrBlockTask+0x88>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	f7fe fe5b 	bl	8007f60 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80092aa:	f7ff f8c7 	bl	800843c <xTaskResumeAll>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 80092b4:	f7fe f844 	bl	8007340 <vPortYield>
    }
 80092b8:	e001      	b.n	80092be <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 80092ba:	f7ff f8bf 	bl	800843c <xTaskResumeAll>
    }
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	200266d4 	.word	0x200266d4
 80092cc:	200266d8 	.word	0x200266d8

080092d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009314 <prvGetNextExpireTime+0x44>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <prvGetNextExpireTime+0x16>
 80092e2:	2201      	movs	r2, #1
 80092e4:	e000      	b.n	80092e8 <prvGetNextExpireTime+0x18>
 80092e6:	2200      	movs	r2, #0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d105      	bne.n	8009300 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092f4:	4b07      	ldr	r3, [pc, #28]	@ (8009314 <prvGetNextExpireTime+0x44>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e001      	b.n	8009304 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009304:	68fb      	ldr	r3, [r7, #12]
    }
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	200266d0 	.word	0x200266d0

08009318 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009320:	f7ff f97a 	bl	8008618 <xTaskGetTickCount>
 8009324:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009326:	4b0b      	ldr	r3, [pc, #44]	@ (8009354 <prvSampleTimeNow+0x3c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	429a      	cmp	r2, r3
 800932e:	d205      	bcs.n	800933c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009330:	f000 f922 	bl	8009578 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e002      	b.n	8009342 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8009342:	4a04      	ldr	r2, [pc, #16]	@ (8009354 <prvSampleTimeNow+0x3c>)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009348:	68fb      	ldr	r3, [r7, #12]
    }
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	200266e0 	.word	0x200266e0

08009358 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	429a      	cmp	r2, r3
 800937c:	d812      	bhi.n	80093a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	1ad2      	subs	r2, r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	429a      	cmp	r2, r3
 800938a:	d302      	bcc.n	8009392 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800938c:	2301      	movs	r3, #1
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	e01b      	b.n	80093ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009392:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <prvInsertTimerInActiveList+0x7c>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fd ff2c 	bl	80071fa <vListInsert>
 80093a2:	e012      	b.n	80093ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d206      	bcs.n	80093ba <prvInsertTimerInActiveList+0x62>
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d302      	bcc.n	80093ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	e007      	b.n	80093ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093ba:	4b07      	ldr	r3, [pc, #28]	@ (80093d8 <prvInsertTimerInActiveList+0x80>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fd ff18 	bl	80071fa <vListInsert>
            }
        }

        return xProcessTimerNow;
 80093ca:	697b      	ldr	r3, [r7, #20]
    }
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	200266d4 	.word	0x200266d4
 80093d8:	200266d0 	.word	0x200266d0

080093dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093e2:	e0b7      	b.n	8009554 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	da11      	bge.n	800940e <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093ea:	1d3b      	adds	r3, r7, #4
 80093ec:	3304      	adds	r3, #4
 80093ee:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <prvProcessReceivedCommands+0x22>
 80093f6:	f7fe f8f7 	bl	80075e8 <ulSetInterruptMask>
 80093fa:	bf00      	nop
 80093fc:	e7fd      	b.n	80093fa <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	6850      	ldr	r0, [r2, #4]
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	6892      	ldr	r2, [r2, #8]
 800940a:	4611      	mov	r1, r2
 800940c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f2c0 809f 	blt.w	8009554 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	3304      	adds	r3, #4
 8009426:	4618      	mov	r0, r3
 8009428:	f7fd ff20 	bl	800726c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800942c:	463b      	mov	r3, r7
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ff72 	bl	8009318 <prvSampleTimeNow>
 8009434:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3b01      	subs	r3, #1
 800943a:	2b08      	cmp	r3, #8
 800943c:	f200 8087 	bhi.w	800954e <prvProcessReceivedCommands+0x172>
 8009440:	a201      	add	r2, pc, #4	@ (adr r2, 8009448 <prvProcessReceivedCommands+0x6c>)
 8009442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009446:	bf00      	nop
 8009448:	0800946d 	.word	0x0800946d
 800944c:	0800946d 	.word	0x0800946d
 8009450:	080094d5 	.word	0x080094d5
 8009454:	080094e9 	.word	0x080094e9
 8009458:	08009525 	.word	0x08009525
 800945c:	0800946d 	.word	0x0800946d
 8009460:	0800946d 	.word	0x0800946d
 8009464:	080094d5 	.word	0x080094d5
 8009468:	080094e9 	.word	0x080094e9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009472:	f043 0301 	orr.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	18d1      	adds	r1, r2, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	69b8      	ldr	r0, [r7, #24]
 800948c:	f7ff ff64 	bl	8009358 <prvInsertTimerInActiveList>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d05d      	beq.n	8009552 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	4413      	add	r3, r2
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4619      	mov	r1, r3
 80094b0:	69b8      	ldr	r0, [r7, #24]
 80094b2:	f7ff fe61 	bl	8009178 <prvReloadTimer>
 80094b6:	e008      	b.n	80094ca <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094be:	f023 0301 	bic.w	r3, r3, #1
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	69b8      	ldr	r0, [r7, #24]
 80094d0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80094d2:	e03e      	b.n	8009552 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80094e6:	e035      	b.n	8009554 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d103      	bne.n	8009510 <prvProcessReceivedCommands+0x134>
 8009508:	f7fe f86e 	bl	80075e8 <ulSetInterruptMask>
 800950c:	bf00      	nop
 800950e:	e7fd      	b.n	800950c <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	699a      	ldr	r2, [r3, #24]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	18d1      	adds	r1, r2, r3
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	69b8      	ldr	r0, [r7, #24]
 800951e:	f7ff ff1b 	bl	8009358 <prvInsertTimerInActiveList>
                        break;
 8009522:	e017      	b.n	8009554 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800952a:	f003 0302 	and.w	r3, r3, #2
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8009532:	69b8      	ldr	r0, [r7, #24]
 8009534:	f000 f94c 	bl	80097d0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8009538:	e00c      	b.n	8009554 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009540:	f023 0301 	bic.w	r3, r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800954c:	e002      	b.n	8009554 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <prvProcessReceivedCommands+0x178>
                        break;
 8009552:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009554:	4b07      	ldr	r3, [pc, #28]	@ (8009574 <prvProcessReceivedCommands+0x198>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	1d39      	adds	r1, r7, #4
 800955a:	2200      	movs	r2, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe faed 	bl	8007b3c <xQueueReceive>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	f47f af3d 	bne.w	80093e4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800956a:	bf00      	nop
 800956c:	bf00      	nop
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	200266d8 	.word	0x200266d8

08009578 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800957e:	e009      	b.n	8009594 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009580:	4b0e      	ldr	r3, [pc, #56]	@ (80095bc <prvSwitchTimerLists+0x44>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800958a:	f04f 31ff 	mov.w	r1, #4294967295
 800958e:	6838      	ldr	r0, [r7, #0]
 8009590:	f7ff fe14 	bl	80091bc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009594:	4b09      	ldr	r3, [pc, #36]	@ (80095bc <prvSwitchTimerLists+0x44>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1f0      	bne.n	8009580 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800959e:	4b07      	ldr	r3, [pc, #28]	@ (80095bc <prvSwitchTimerLists+0x44>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80095a4:	4b06      	ldr	r3, [pc, #24]	@ (80095c0 <prvSwitchTimerLists+0x48>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a04      	ldr	r2, [pc, #16]	@ (80095bc <prvSwitchTimerLists+0x44>)
 80095aa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80095ac:	4a04      	ldr	r2, [pc, #16]	@ (80095c0 <prvSwitchTimerLists+0x48>)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6013      	str	r3, [r2, #0]
    }
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200266d0 	.word	0x200266d0
 80095c0:	200266d4 	.word	0x200266d4

080095c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80095ca:	f7fd fecb 	bl	8007364 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80095ce:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <prvCheckForValidListAndQueue+0x60>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d120      	bne.n	8009618 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80095d6:	4814      	ldr	r0, [pc, #80]	@ (8009628 <prvCheckForValidListAndQueue+0x64>)
 80095d8:	f7fd fde2 	bl	80071a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80095dc:	4813      	ldr	r0, [pc, #76]	@ (800962c <prvCheckForValidListAndQueue+0x68>)
 80095de:	f7fd fddf 	bl	80071a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80095e2:	4b13      	ldr	r3, [pc, #76]	@ (8009630 <prvCheckForValidListAndQueue+0x6c>)
 80095e4:	4a10      	ldr	r2, [pc, #64]	@ (8009628 <prvCheckForValidListAndQueue+0x64>)
 80095e6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80095e8:	4b12      	ldr	r3, [pc, #72]	@ (8009634 <prvCheckForValidListAndQueue+0x70>)
 80095ea:	4a10      	ldr	r2, [pc, #64]	@ (800962c <prvCheckForValidListAndQueue+0x68>)
 80095ec:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095ee:	2300      	movs	r3, #0
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	4b11      	ldr	r3, [pc, #68]	@ (8009638 <prvCheckForValidListAndQueue+0x74>)
 80095f4:	4a11      	ldr	r2, [pc, #68]	@ (800963c <prvCheckForValidListAndQueue+0x78>)
 80095f6:	2110      	movs	r1, #16
 80095f8:	200a      	movs	r0, #10
 80095fa:	f7fe f8ce 	bl	800779a <xQueueGenericCreateStatic>
 80095fe:	4603      	mov	r3, r0
 8009600:	4a08      	ldr	r2, [pc, #32]	@ (8009624 <prvCheckForValidListAndQueue+0x60>)
 8009602:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8009604:	4b07      	ldr	r3, [pc, #28]	@ (8009624 <prvCheckForValidListAndQueue+0x60>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800960c:	4b05      	ldr	r3, [pc, #20]	@ (8009624 <prvCheckForValidListAndQueue+0x60>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	490b      	ldr	r1, [pc, #44]	@ (8009640 <prvCheckForValidListAndQueue+0x7c>)
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fc5e 	bl	8007ed4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009618:	f7fd feb6 	bl	8007388 <vPortExitCritical>
    }
 800961c:	bf00      	nop
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200266d8 	.word	0x200266d8
 8009628:	200266a8 	.word	0x200266a8
 800962c:	200266bc 	.word	0x200266bc
 8009630:	200266d0 	.word	0x200266d0
 8009634:	200266d4 	.word	0x200266d4
 8009638:	20026784 	.word	0x20026784
 800963c:	200266e4 	.word	0x200266e4
 8009640:	08009aa4 	.word	0x08009aa4

08009644 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	60fb      	str	r3, [r7, #12]
        void * pvReturn;

        configASSERT( xTimer );
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d103      	bne.n	800965e <pvTimerGetTimerID+0x1a>
 8009656:	f7fd ffc7 	bl	80075e8 <ulSetInterruptMask>
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <pvTimerGetTimerID+0x16>

        taskENTER_CRITICAL();
 800965e:	f7fd fe81 	bl	8007364 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8009668:	f7fd fe8e 	bl	8007388 <vPortExitCritical>

        return pvReturn;
 800966c:	68bb      	ldr	r3, [r7, #8]
    }
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8009684:	f7fe fecc 	bl	8008420 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009688:	4b4c      	ldr	r3, [pc, #304]	@ (80097bc <pvPortMalloc+0x144>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009690:	f000 f8ec 	bl	800986c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d012      	beq.n	80096c0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800969a:	2208      	movs	r2, #8
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	3308      	adds	r3, #8
 80096a6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	43db      	mvns	r3, r3
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d804      	bhi.n	80096bc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	4413      	add	r3, r2
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	e001      	b.n	80096c0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	db69      	blt.n	800979a <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d066      	beq.n	800979a <pvPortMalloc+0x122>
 80096cc:	4b3c      	ldr	r3, [pc, #240]	@ (80097c0 <pvPortMalloc+0x148>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d861      	bhi.n	800979a <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80096d6:	4b3b      	ldr	r3, [pc, #236]	@ (80097c4 <pvPortMalloc+0x14c>)
 80096d8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80096da:	4b3a      	ldr	r3, [pc, #232]	@ (80097c4 <pvPortMalloc+0x14c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096e0:	e004      	b.n	80096ec <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d903      	bls.n	80096fe <pvPortMalloc+0x86>
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1f1      	bne.n	80096e2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80096fe:	4b2f      	ldr	r3, [pc, #188]	@ (80097bc <pvPortMalloc+0x144>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	429a      	cmp	r2, r3
 8009706:	d048      	beq.n	800979a <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2208      	movs	r2, #8
 800970e:	4413      	add	r3, r2
 8009710:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	1ad2      	subs	r2, r2, r3
 8009722:	2308      	movs	r3, #8
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	429a      	cmp	r2, r3
 8009728:	d918      	bls.n	800975c <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4413      	add	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f003 0307 	and.w	r3, r3, #7
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <pvPortMalloc+0xcc>
 800973c:	f7fd ff54 	bl	80075e8 <ulSetInterruptMask>
 8009740:	bf00      	nop
 8009742:	e7fd      	b.n	8009740 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	1ad2      	subs	r2, r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 f8e4 	bl	8009924 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800975c:	4b18      	ldr	r3, [pc, #96]	@ (80097c0 <pvPortMalloc+0x148>)
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	4a16      	ldr	r2, [pc, #88]	@ (80097c0 <pvPortMalloc+0x148>)
 8009768:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800976a:	4b15      	ldr	r3, [pc, #84]	@ (80097c0 <pvPortMalloc+0x148>)
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	4b16      	ldr	r3, [pc, #88]	@ (80097c8 <pvPortMalloc+0x150>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	429a      	cmp	r2, r3
 8009774:	d203      	bcs.n	800977e <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009776:	4b12      	ldr	r3, [pc, #72]	@ (80097c0 <pvPortMalloc+0x148>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a13      	ldr	r2, [pc, #76]	@ (80097c8 <pvPortMalloc+0x150>)
 800977c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009790:	4b0e      	ldr	r3, [pc, #56]	@ (80097cc <pvPortMalloc+0x154>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	4a0d      	ldr	r2, [pc, #52]	@ (80097cc <pvPortMalloc+0x154>)
 8009798:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800979a:	f7fe fe4f 	bl	800843c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d003      	beq.n	80097b0 <pvPortMalloc+0x138>
 80097a8:	f7fd ff1e 	bl	80075e8 <ulSetInterruptMask>
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <pvPortMalloc+0x134>
    return pvReturn;
 80097b0:	697b      	ldr	r3, [r7, #20]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3720      	adds	r7, #32
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	200287dc 	.word	0x200287dc
 80097c0:	200287e0 	.word	0x200287e0
 80097c4:	200287d4 	.word	0x200287d4
 80097c8:	200287e4 	.word	0x200287e4
 80097cc:	200287e8 	.word	0x200287e8

080097d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d03b      	beq.n	800985a <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80097e2:	2308      	movs	r3, #8
 80097e4:	425b      	negs	r3, r3
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	4413      	add	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	db03      	blt.n	8009800 <vPortFree+0x30>
 80097f8:	f7fd fef6 	bl	80075e8 <ulSetInterruptMask>
 80097fc:	bf00      	nop
 80097fe:	e7fd      	b.n	80097fc <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <vPortFree+0x40>
 8009808:	f7fd feee 	bl	80075e8 <ulSetInterruptMask>
 800980c:	bf00      	nop
 800980e:	e7fd      	b.n	800980c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	0fdb      	lsrs	r3, r3, #31
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b00      	cmp	r3, #0
 800981e:	d01c      	beq.n	800985a <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d118      	bne.n	800985a <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8009834:	f7fe fdf4 	bl	8008420 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4b09      	ldr	r3, [pc, #36]	@ (8009864 <vPortFree+0x94>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4413      	add	r3, r2
 8009842:	4a08      	ldr	r2, [pc, #32]	@ (8009864 <vPortFree+0x94>)
 8009844:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009846:	68b8      	ldr	r0, [r7, #8]
 8009848:	f000 f86c 	bl	8009924 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800984c:	4b06      	ldr	r3, [pc, #24]	@ (8009868 <vPortFree+0x98>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	4a05      	ldr	r2, [pc, #20]	@ (8009868 <vPortFree+0x98>)
 8009854:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009856:	f7fe fdf1 	bl	800843c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	200287e0 	.word	0x200287e0
 8009868:	200287ec 	.word	0x200287ec

0800986c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009872:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009876:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009878:	4b25      	ldr	r3, [pc, #148]	@ (8009910 <prvHeapInit+0xa4>)
 800987a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00c      	beq.n	80098a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3307      	adds	r3, #7
 800988a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 0307 	bic.w	r3, r3, #7
 8009892:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	4a1d      	ldr	r2, [pc, #116]	@ (8009910 <prvHeapInit+0xa4>)
 800989c:	4413      	add	r3, r2
 800989e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009914 <prvHeapInit+0xa8>)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80098aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009914 <prvHeapInit+0xa8>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	4413      	add	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80098b8:	2208      	movs	r2, #8
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	1a9b      	subs	r3, r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0307 	bic.w	r3, r3, #7
 80098c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4a13      	ldr	r2, [pc, #76]	@ (8009918 <prvHeapInit+0xac>)
 80098cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80098ce:	4b12      	ldr	r3, [pc, #72]	@ (8009918 <prvHeapInit+0xac>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2200      	movs	r2, #0
 80098d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80098d6:	4b10      	ldr	r3, [pc, #64]	@ (8009918 <prvHeapInit+0xac>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	1ad2      	subs	r2, r2, r3
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009918 <prvHeapInit+0xac>)
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4a08      	ldr	r2, [pc, #32]	@ (800991c <prvHeapInit+0xb0>)
 80098fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	4a07      	ldr	r2, [pc, #28]	@ (8009920 <prvHeapInit+0xb4>)
 8009902:	6013      	str	r3, [r2, #0]
}
 8009904:	bf00      	nop
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	200267d4 	.word	0x200267d4
 8009914:	200287d4 	.word	0x200287d4
 8009918:	200287dc 	.word	0x200287dc
 800991c:	200287e4 	.word	0x200287e4
 8009920:	200287e0 	.word	0x200287e0

08009924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800992c:	4b28      	ldr	r3, [pc, #160]	@ (80099d0 <prvInsertBlockIntoFreeList+0xac>)
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e002      	b.n	8009938 <prvInsertBlockIntoFreeList+0x14>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	429a      	cmp	r2, r3
 8009940:	d8f7      	bhi.n	8009932 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	4413      	add	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d108      	bne.n	8009966 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	441a      	add	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	441a      	add	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d118      	bne.n	80099ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	4b15      	ldr	r3, [pc, #84]	@ (80099d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d00d      	beq.n	80099a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685a      	ldr	r2, [r3, #4]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	441a      	add	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	e008      	b.n	80099b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099a2:	4b0c      	ldr	r3, [pc, #48]	@ (80099d4 <prvInsertBlockIntoFreeList+0xb0>)
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e003      	b.n	80099b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d002      	beq.n	80099c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80099c2:	bf00      	nop
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	200287d4 	.word	0x200287d4
 80099d4:	200287dc 	.word	0x200287dc

080099d8 <memset>:
 80099d8:	4402      	add	r2, r0
 80099da:	4603      	mov	r3, r0
 80099dc:	4293      	cmp	r3, r2
 80099de:	d100      	bne.n	80099e2 <memset+0xa>
 80099e0:	4770      	bx	lr
 80099e2:	f803 1b01 	strb.w	r1, [r3], #1
 80099e6:	e7f9      	b.n	80099dc <memset+0x4>

080099e8 <__libc_init_array>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	4d0d      	ldr	r5, [pc, #52]	@ (8009a20 <__libc_init_array+0x38>)
 80099ec:	2600      	movs	r6, #0
 80099ee:	4c0d      	ldr	r4, [pc, #52]	@ (8009a24 <__libc_init_array+0x3c>)
 80099f0:	1b64      	subs	r4, r4, r5
 80099f2:	10a4      	asrs	r4, r4, #2
 80099f4:	42a6      	cmp	r6, r4
 80099f6:	d109      	bne.n	8009a0c <__libc_init_array+0x24>
 80099f8:	4d0b      	ldr	r5, [pc, #44]	@ (8009a28 <__libc_init_array+0x40>)
 80099fa:	2600      	movs	r6, #0
 80099fc:	4c0b      	ldr	r4, [pc, #44]	@ (8009a2c <__libc_init_array+0x44>)
 80099fe:	f000 f825 	bl	8009a4c <_init>
 8009a02:	1b64      	subs	r4, r4, r5
 8009a04:	10a4      	asrs	r4, r4, #2
 8009a06:	42a6      	cmp	r6, r4
 8009a08:	d105      	bne.n	8009a16 <__libc_init_array+0x2e>
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a10:	3601      	adds	r6, #1
 8009a12:	4798      	blx	r3
 8009a14:	e7ee      	b.n	80099f4 <__libc_init_array+0xc>
 8009a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1a:	3601      	adds	r6, #1
 8009a1c:	4798      	blx	r3
 8009a1e:	e7f2      	b.n	8009a06 <__libc_init_array+0x1e>
 8009a20:	0800b280 	.word	0x0800b280
 8009a24:	0800b280 	.word	0x0800b280
 8009a28:	0800b280 	.word	0x0800b280
 8009a2c:	0800b284 	.word	0x0800b284

08009a30 <memcpy>:
 8009a30:	440a      	add	r2, r1
 8009a32:	1e43      	subs	r3, r0, #1
 8009a34:	4291      	cmp	r1, r2
 8009a36:	d100      	bne.n	8009a3a <memcpy+0xa>
 8009a38:	4770      	bx	lr
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a40:	4291      	cmp	r1, r2
 8009a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a46:	d1f9      	bne.n	8009a3c <memcpy+0xc>
 8009a48:	bd10      	pop	{r4, pc}
	...

08009a4c <_init>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	bf00      	nop
 8009a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a52:	bc08      	pop	{r3}
 8009a54:	469e      	mov	lr, r3
 8009a56:	4770      	bx	lr

08009a58 <_fini>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	bf00      	nop
 8009a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5e:	bc08      	pop	{r3}
 8009a60:	469e      	mov	lr, r3
 8009a62:	4770      	bx	lr
