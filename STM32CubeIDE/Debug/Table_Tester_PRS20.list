
Table_Tester_PRS20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018790  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e80  080189e0  080189e0  000199e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a860  0801a860  0001c2f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a860  0801a860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a868  0801a868  0001c2f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a868  0801a868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a86c  0801a86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  0801a870  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002a0b4  200002f8  0801ab68  0001c2f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002a3ac  0801ab68  0001c3ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001c2f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027d20  00000000  00000000  0001c32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006724  00000000  00000000  0004404e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002670  00000000  00000000  0004a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cdc  00000000  00000000  0004cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d7f6  00000000  00000000  0004eac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a390  00000000  00000000  0008c2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015cd40  00000000  00000000  000b664a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021338a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0f4  00000000  00000000  002133d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0021e4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200002f8 	.word	0x200002f8
 800026c:	00000000 	.word	0x00000000
 8000270:	080189c8 	.word	0x080189c8

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200002fc 	.word	0x200002fc
 800028c:	080189c8 	.word	0x080189c8

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b97e 	b.w	8000edc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14d      	bne.n	8000ca0 <__udivmoddi4+0xa8>
 8000c04:	428a      	cmp	r2, r1
 8000c06:	460f      	mov	r7, r1
 8000c08:	4684      	mov	ip, r0
 8000c0a:	4696      	mov	lr, r2
 8000c0c:	fab2 f382 	clz	r3, r2
 8000c10:	d960      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c12:	b14b      	cbz	r3, 8000c28 <__udivmoddi4+0x30>
 8000c14:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c22:	fa20 f202 	lsr.w	r2, r0, r2
 8000c26:	4317      	orrs	r7, r2
 8000c28:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c2c:	fa1f f48e 	uxth.w	r4, lr
 8000c30:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c34:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c38:	fb06 7711 	mls	r7, r6, r1, r7
 8000c3c:	fb01 f004 	mul.w	r0, r1, r4
 8000c40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c48:	eb1e 0202 	adds.w	r2, lr, r2
 8000c4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x60>
 8000c52:	4290      	cmp	r0, r2
 8000c54:	f200 812d 	bhi.w	8000eb2 <__udivmoddi4+0x2ba>
 8000c58:	4639      	mov	r1, r7
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	fa1f fc8c 	uxth.w	ip, ip
 8000c60:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c64:	fb06 2210 	mls	r2, r6, r0, r2
 8000c68:	fb00 f404 	mul.w	r4, r0, r4
 8000c6c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c70:	4564      	cmp	r4, ip
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c74:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7c:	d202      	bcs.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	4564      	cmp	r4, ip
 8000c80:	f200 811a 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000c84:	4610      	mov	r0, r2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	ebac 0c04 	sub.w	ip, ip, r4
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b125      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c92:	fa2c f303 	lsr.w	r3, ip, r3
 8000c96:	2200      	movs	r2, #0
 8000c98:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d905      	bls.n	8000cb0 <__udivmoddi4+0xb8>
 8000ca4:	b10d      	cbz	r5, 8000caa <__udivmoddi4+0xb2>
 8000ca6:	e9c5 0100 	strd	r0, r1, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	4608      	mov	r0, r1
 8000cae:	e7f5      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000cb0:	fab3 f183 	clz	r1, r3
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d14d      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb8:	42a3      	cmp	r3, r4
 8000cba:	f0c0 80f2 	bcc.w	8000ea2 <__udivmoddi4+0x2aa>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f080 80ef 	bcs.w	8000ea2 <__udivmoddi4+0x2aa>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	4608      	mov	r0, r1
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e6      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cce:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd2:	e7e3      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 80a2 	bne.w	8000e1e <__udivmoddi4+0x226>
 8000cda:	1a8a      	subs	r2, r1, r2
 8000cdc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ce0:	fa1f f68e 	uxth.w	r6, lr
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cea:	fb07 2014 	mls	r0, r7, r4, r2
 8000cee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb06 f004 	mul.w	r0, r6, r4
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d90f      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000cfe:	eb1e 0202 	adds.w	r2, lr, r2
 8000d02:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80c8 	beq.w	8000eac <__udivmoddi4+0x2b4>
 8000d1c:	4644      	mov	r4, r8
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	fa1f fc8c 	uxth.w	ip, ip
 8000d24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d28:	fb07 2210 	mls	r2, r7, r0, r2
 8000d2c:	fb00 f606 	mul.w	r6, r0, r6
 8000d30:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d34:	4566      	cmp	r6, ip
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d38:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x150>
 8000d42:	4566      	cmp	r6, ip
 8000d44:	f200 80bb 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000d48:	4610      	mov	r0, r2
 8000d4a:	ebac 0c06 	sub.w	ip, ip, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d66:	40f4      	lsrs	r4, r6
 8000d68:	408a      	lsls	r2, r1
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	ea4e 030c 	orr.w	r3, lr, ip
 8000d70:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fa1f fc87 	uxth.w	ip, r7
 8000d80:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d84:	fb08 4410 	mls	r4, r8, r0, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb00 f90c 	mul.w	r9, r0, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d90e      	bls.n	8000db2 <__udivmoddi4+0x1ba>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	bf2c      	ite	cs
 8000d9c:	f04f 0b01 	movcs.w	fp, #1
 8000da0:	f04f 0b00 	movcc.w	fp, #0
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	d903      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000da8:	f1bb 0f00 	cmp.w	fp, #0
 8000dac:	f000 8093 	beq.w	8000ed6 <__udivmoddi4+0x2de>
 8000db0:	4650      	mov	r0, sl
 8000db2:	eba4 0409 	sub.w	r4, r4, r9
 8000db6:	fa1f f983 	uxth.w	r9, r3
 8000dba:	fbb4 f3f8 	udiv	r3, r4, r8
 8000dbe:	fb08 4413 	mls	r4, r8, r3, r4
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d906      	bls.n	8000ddc <__udivmoddi4+0x1e4>
 8000dce:	193c      	adds	r4, r7, r4
 8000dd0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd4:	d201      	bcs.n	8000dda <__udivmoddi4+0x1e2>
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d87a      	bhi.n	8000ed0 <__udivmoddi4+0x2d8>
 8000dda:	4643      	mov	r3, r8
 8000ddc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000de0:	eba4 040c 	sub.w	r4, r4, ip
 8000de4:	fba0 9802 	umull	r9, r8, r0, r2
 8000de8:	4544      	cmp	r4, r8
 8000dea:	46cc      	mov	ip, r9
 8000dec:	4643      	mov	r3, r8
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0x1fe>
 8000df0:	d106      	bne.n	8000e00 <__udivmoddi4+0x208>
 8000df2:	45ce      	cmp	lr, r9
 8000df4:	d204      	bcs.n	8000e00 <__udivmoddi4+0x208>
 8000df6:	3801      	subs	r0, #1
 8000df8:	ebb9 0c02 	subs.w	ip, r9, r2
 8000dfc:	eb68 0307 	sbc.w	r3, r8, r7
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x222>
 8000e02:	ebbe 020c 	subs.w	r2, lr, ip
 8000e06:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e73e      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e1e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e22:	f1c3 0120 	rsb	r1, r3, #32
 8000e26:	fa04 f203 	lsl.w	r2, r4, r3
 8000e2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e2e:	40cc      	lsrs	r4, r1
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa20 f101 	lsr.w	r1, r0, r1
 8000e38:	fa1f f68e 	uxth.w	r6, lr
 8000e3c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fb07 4410 	mls	r4, r7, r0, r4
 8000e46:	0c11      	lsrs	r1, r2, #16
 8000e48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e4c:	fb00 f406 	mul.w	r4, r0, r6
 8000e50:	428c      	cmp	r4, r1
 8000e52:	d90e      	bls.n	8000e72 <__udivmoddi4+0x27a>
 8000e54:	eb1e 0101 	adds.w	r1, lr, r1
 8000e58:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5c:	bf2c      	ite	cs
 8000e5e:	f04f 0901 	movcs.w	r9, #1
 8000e62:	f04f 0900 	movcc.w	r9, #0
 8000e66:	428c      	cmp	r4, r1
 8000e68:	d902      	bls.n	8000e70 <__udivmoddi4+0x278>
 8000e6a:	f1b9 0f00 	cmp.w	r9, #0
 8000e6e:	d02c      	beq.n	8000eca <__udivmoddi4+0x2d2>
 8000e70:	4640      	mov	r0, r8
 8000e72:	1b09      	subs	r1, r1, r4
 8000e74:	b292      	uxth	r2, r2
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e82:	fb04 f106 	mul.w	r1, r4, r6
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x2a2>
 8000e8a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e8e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e92:	d201      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d815      	bhi.n	8000ec4 <__udivmoddi4+0x2cc>
 8000e98:	4644      	mov	r4, r8
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ea0:	e721      	b.n	8000ce6 <__udivmoddi4+0xee>
 8000ea2:	1a86      	subs	r6, r0, r2
 8000ea4:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	e70e      	b.n	8000cca <__udivmoddi4+0xd2>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e735      	b.n	8000d1e <__udivmoddi4+0x126>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4472      	add	r2, lr
 8000eb6:	e6d0      	b.n	8000c5a <__udivmoddi4+0x62>
 8000eb8:	44f4      	add	ip, lr
 8000eba:	3802      	subs	r0, #2
 8000ebc:	e6e3      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000ebe:	44f4      	add	ip, lr
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e742      	b.n	8000d4a <__udivmoddi4+0x152>
 8000ec4:	3c02      	subs	r4, #2
 8000ec6:	4472      	add	r2, lr
 8000ec8:	e7e7      	b.n	8000e9a <__udivmoddi4+0x2a2>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4471      	add	r1, lr
 8000ece:	e7d0      	b.n	8000e72 <__udivmoddi4+0x27a>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	e782      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	e76a      	b.n	8000db2 <__udivmoddi4+0x1ba>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000ee4:	4818      	ldr	r0, [pc, #96]	@ (8000f48 <MX_FREERTOS_Init+0x68>)
 8000ee6:	f00f fe31 	bl	8010b4c <osMutexNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <MX_FREERTOS_Init+0x6c>)
 8000eee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000ef0:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <MX_FREERTOS_Init+0x70>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4817      	ldr	r0, [pc, #92]	@ (8000f54 <MX_FREERTOS_Init+0x74>)
 8000ef8:	f00f fd86 	bl	8010a08 <osTimerNew>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <MX_FREERTOS_Init+0x78>)
 8000f00:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000f02:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <MX_FREERTOS_Init+0x7c>)
 8000f04:	2102      	movs	r1, #2
 8000f06:	2010      	movs	r0, #16
 8000f08:	f00f fea5 	bl	8010c56 <osMessageQueueNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <MX_FREERTOS_Init+0x80>)
 8000f10:	6013      	str	r3, [r2, #0]
  Lines_Seq_Queue_Handle = osMessageQueueNew (100, sizeof(uint8_t), &Lines_Seq_Queue_attributes);
 8000f12:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <MX_FREERTOS_Init+0x84>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	2064      	movs	r0, #100	@ 0x64
 8000f18:	f00f fe9d 	bl	8010c56 <osMessageQueueNew>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <MX_FREERTOS_Init+0x88>)
 8000f20:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  //Lines_Sequence_Task_Handle = osThreadNew(Lines_Sequence_Task, NULL, &Lines_Sequence_Task_attributes);
  RX_Task_Handle = osThreadNew(RX_Task, NULL, &RX_Task_attributes);
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <MX_FREERTOS_Init+0x8c>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4812      	ldr	r0, [pc, #72]	@ (8000f70 <MX_FREERTOS_Init+0x90>)
 8000f28:	f00f fcaa 	bl	8010880 <osThreadNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a11      	ldr	r2, [pc, #68]	@ (8000f74 <MX_FREERTOS_Init+0x94>)
 8000f30:	6013      	str	r3, [r2, #0]
  LCD_Touch_Task_Handle = osThreadNew(LCD_Touch_Task, NULL, &LCD_Touch_Task_attributes);
 8000f32:	4a11      	ldr	r2, [pc, #68]	@ (8000f78 <MX_FREERTOS_Init+0x98>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <MX_FREERTOS_Init+0x9c>)
 8000f38:	f00f fca2 	bl	8010880 <osThreadNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <MX_FREERTOS_Init+0xa0>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08018bd8 	.word	0x08018bd8
 8000f4c:	20000318 	.word	0x20000318
 8000f50:	08018be8 	.word	0x08018be8
 8000f54:	08002ec9 	.word	0x08002ec9
 8000f58:	2000031c 	.word	0x2000031c
 8000f5c:	08018bf8 	.word	0x08018bf8
 8000f60:	20000320 	.word	0x20000320
 8000f64:	08018c58 	.word	0x08018c58
 8000f68:	2000032c 	.word	0x2000032c
 8000f6c:	08018c10 	.word	0x08018c10
 8000f70:	08000f85 	.word	0x08000f85
 8000f74:	20000324 	.word	0x20000324
 8000f78:	08018c34 	.word	0x08018c34
 8000f7c:	08001179 	.word	0x08001179
 8000f80:	20000328 	.word	0x20000328

08000f84 <RX_Task>:
	}
}
//--------------------------------------------------------------------------

void RX_Task(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	uint8_t *Buffer_P = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
//
//	memset(Lines_Sequence, 0, sizeof(Lines_Sequence));

	for(;;)
	{
		RX_Task_Done = 0;
 8000f90:	4b6e      	ldr	r3, [pc, #440]	@ (800114c <RX_Task+0x1c8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
//		if(LL_USART_IsActiveFlag_BUSY(Line4_UART)) {osMessageQueuePut (Lines_Seq_Queue_Handle, &Lines_Sequence[4], 1, 100);}
//		if(LL_USART_IsActiveFlag_BUSY(Line5_UART)) {osMessageQueuePut (Lines_Seq_Queue_Handle, &Lines_Sequence[5], 1, 100);}
//		if(LL_USART_IsActiveFlag_BUSY(Line6_UART)) {osMessageQueuePut (Lines_Seq_Queue_Handle, &Lines_Sequence[6], 1, 100);}
//		if(LL_USART_IsActiveFlag_BUSY(Line7_UART)) {osMessageQueuePut (Lines_Seq_Queue_Handle, &Lines_Sequence[7], 1, 100);}

		switch (Message_Buffering(Line3_RX_Buffer, Line3_Next_SOP))
 8000f96:	4b6e      	ldr	r3, [pc, #440]	@ (8001150 <RX_Task+0x1cc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	486d      	ldr	r0, [pc, #436]	@ (8001154 <RX_Task+0x1d0>)
 8000f9e:	f005 f897 	bl	80060d0 <Message_Buffering>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d815      	bhi.n	8000fd4 <RX_Task+0x50>
 8000fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb0 <RX_Task+0x2c>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	08000fd1 	.word	0x08000fd1
 8000fb4:	08000fd9 	.word	0x08000fd9
 8000fb8:	08000fd9 	.word	0x08000fd9
 8000fbc:	08000fd9 	.word	0x08000fd9
 8000fc0:	08000fd5 	.word	0x08000fd5
 8000fc4:	08000fc9 	.word	0x08000fc9
		{
		case Waiting:
			Delay_ms_OS(2);
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f006 f8a3 	bl	8007114 <Delay_ms_OS>
			//osDelay(1000/portTICK_PERIOD_MS);
			break;
 8000fce:	e004      	b.n	8000fda <RX_Task+0x56>
		case Invalid:
			//
			break;

		case None:
			__NOP();
 8000fd0:	bf00      	nop
			break;
 8000fd2:	e002      	b.n	8000fda <RX_Task+0x56>

		default:
			__NOP();
 8000fd4:	bf00      	nop
			break;
 8000fd6:	e000      	b.n	8000fda <RX_Task+0x56>
			break;
 8000fd8:	bf00      	nop
		}

		if(Parsed_MSG.New_MSG == 1)
 8000fda:	4b5f      	ldr	r3, [pc, #380]	@ (8001158 <RX_Task+0x1d4>)
 8000fdc:	79db      	ldrb	r3, [r3, #7]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	f040 80b0 	bne.w	8001144 <RX_Task+0x1c0>
//					//Parsed_MSG.New_MSG = 0;
//					Count++;
//				}
//			}

			if(Parsed_MSG.PCKT_ID == FEUtoMIU_0)
 8000fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8001158 <RX_Task+0x1d4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d14e      	bne.n	800108a <RX_Task+0x106>
			{
				if( (Parsed_MSG.Data1 & INJ_ON_Bit1) == INJ_ON_Bit1) {FEU_Status.FEU_INJ = ON;}
 8000fec:	4b5a      	ldr	r3, [pc, #360]	@ (8001158 <RX_Task+0x1d4>)
 8000fee:	785a      	ldrb	r2, [r3, #1]
 8000ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800115c <RX_Task+0x1d8>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b58      	ldr	r3, [pc, #352]	@ (800115c <RX_Task+0x1d8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d103      	bne.n	8001008 <RX_Task+0x84>
 8001000:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <RX_Task+0x1dc>)
 8001002:	2201      	movs	r2, #1
 8001004:	709a      	strb	r2, [r3, #2]
 8001006:	e002      	b.n	800100e <RX_Task+0x8a>
				else {FEU_Status.FEU_INJ = OFF;}
 8001008:	4b55      	ldr	r3, [pc, #340]	@ (8001160 <RX_Task+0x1dc>)
 800100a:	2200      	movs	r2, #0
 800100c:	709a      	strb	r2, [r3, #2]

				if( (Parsed_MSG.Data1 & RF_42_63_Bit2_3) == RF_42_63_Bit2_3) {FEU_Status.FEU_RF_Filter = Filter_42_63;}
 800100e:	4b52      	ldr	r3, [pc, #328]	@ (8001158 <RX_Task+0x1d4>)
 8001010:	785a      	ldrb	r2, [r3, #1]
 8001012:	4b54      	ldr	r3, [pc, #336]	@ (8001164 <RX_Task+0x1e0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4013      	ands	r3, r2
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b52      	ldr	r3, [pc, #328]	@ (8001164 <RX_Task+0x1e0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d103      	bne.n	800102a <RX_Task+0xa6>
 8001022:	4b4f      	ldr	r3, [pc, #316]	@ (8001160 <RX_Task+0x1dc>)
 8001024:	2203      	movs	r2, #3
 8001026:	70da      	strb	r2, [r3, #3]
 8001028:	e01e      	b.n	8001068 <RX_Task+0xe4>
				else if( (Parsed_MSG.Data1 & RF_30_46_Bit2_3) == RF_30_46_Bit2_3) {FEU_Status.FEU_RF_Filter = Filter_30_46;}
 800102a:	4b4b      	ldr	r3, [pc, #300]	@ (8001158 <RX_Task+0x1d4>)
 800102c:	785a      	ldrb	r2, [r3, #1]
 800102e:	4b4e      	ldr	r3, [pc, #312]	@ (8001168 <RX_Task+0x1e4>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4013      	ands	r3, r2
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b4c      	ldr	r3, [pc, #304]	@ (8001168 <RX_Task+0x1e4>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d103      	bne.n	8001046 <RX_Task+0xc2>
 800103e:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <RX_Task+0x1dc>)
 8001040:	2202      	movs	r2, #2
 8001042:	70da      	strb	r2, [r3, #3]
 8001044:	e010      	b.n	8001068 <RX_Task+0xe4>
				else if( (Parsed_MSG.Data1 & RF_20_32_Bit2_3) == RF_20_32_Bit2_3) {FEU_Status.FEU_RF_Filter = Filter_20_32;}
 8001046:	4b44      	ldr	r3, [pc, #272]	@ (8001158 <RX_Task+0x1d4>)
 8001048:	785a      	ldrb	r2, [r3, #1]
 800104a:	4b48      	ldr	r3, [pc, #288]	@ (800116c <RX_Task+0x1e8>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4013      	ands	r3, r2
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b46      	ldr	r3, [pc, #280]	@ (800116c <RX_Task+0x1e8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d103      	bne.n	8001062 <RX_Task+0xde>
 800105a:	4b41      	ldr	r3, [pc, #260]	@ (8001160 <RX_Task+0x1dc>)
 800105c:	2201      	movs	r2, #1
 800105e:	70da      	strb	r2, [r3, #3]
 8001060:	e002      	b.n	8001068 <RX_Task+0xe4>
				else {FEU_Status.FEU_RF_Filter = Filter_16_22;}
 8001062:	4b3f      	ldr	r3, [pc, #252]	@ (8001160 <RX_Task+0x1dc>)
 8001064:	2200      	movs	r2, #0
 8001066:	70da      	strb	r2, [r3, #3]

				if( (Parsed_MSG.Data1 & RF_ON_Bit5) == RF_ON_Bit5) {FEU_Status.FEU_RF_Power = ON;}
 8001068:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <RX_Task+0x1d4>)
 800106a:	785a      	ldrb	r2, [r3, #1]
 800106c:	4b40      	ldr	r3, [pc, #256]	@ (8001170 <RX_Task+0x1ec>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4013      	ands	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b3e      	ldr	r3, [pc, #248]	@ (8001170 <RX_Task+0x1ec>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d103      	bne.n	8001084 <RX_Task+0x100>
 800107c:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <RX_Task+0x1dc>)
 800107e:	2201      	movs	r2, #1
 8001080:	715a      	strb	r2, [r3, #5]
 8001082:	e002      	b.n	800108a <RX_Task+0x106>
				else {FEU_Status.FEU_RF_Power = OFF;}
 8001084:	4b36      	ldr	r3, [pc, #216]	@ (8001160 <RX_Task+0x1dc>)
 8001086:	2200      	movs	r2, #0
 8001088:	715a      	strb	r2, [r3, #5]

				//Parsed_MSG.New_MSG = 0;
			}

			if(Parsed_MSG.PCKT_ID == IJUtoMIU_0)
 800108a:	4b33      	ldr	r3, [pc, #204]	@ (8001158 <RX_Task+0x1d4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b06      	cmp	r3, #6
 8001090:	d155      	bne.n	800113e <RX_Task+0x1ba>
			{
				if( (Parsed_MSG.Data1 & INJ_ON_Bit1) == INJ_ON_Bit1) {IJU_Status.IJU_INJ = ON;}
 8001092:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <RX_Task+0x1d4>)
 8001094:	785a      	ldrb	r2, [r3, #1]
 8001096:	4b31      	ldr	r3, [pc, #196]	@ (800115c <RX_Task+0x1d8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4013      	ands	r3, r2
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <RX_Task+0x1d8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d103      	bne.n	80010ae <RX_Task+0x12a>
 80010a6:	4b33      	ldr	r3, [pc, #204]	@ (8001174 <RX_Task+0x1f0>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	705a      	strb	r2, [r3, #1]
 80010ac:	e002      	b.n	80010b4 <RX_Task+0x130>
				else {IJU_Status.IJU_INJ = OFF;}
 80010ae:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <RX_Task+0x1f0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	705a      	strb	r2, [r3, #1]

				if( (Parsed_MSG.Data1 & RF_42_63_Bit2_3) == RF_42_63_Bit2_3) {IJU_Status.IJU_RF_Filter = Filter_42_63;}
 80010b4:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <RX_Task+0x1d4>)
 80010b6:	785a      	ldrb	r2, [r3, #1]
 80010b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <RX_Task+0x1e0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4013      	ands	r3, r2
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <RX_Task+0x1e0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d103      	bne.n	80010d0 <RX_Task+0x14c>
 80010c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <RX_Task+0x1f0>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	709a      	strb	r2, [r3, #2]
 80010ce:	e01e      	b.n	800110e <RX_Task+0x18a>
				else if( (Parsed_MSG.Data1 & RF_30_46_Bit2_3) == RF_30_46_Bit2_3) {IJU_Status.IJU_RF_Filter = Filter_30_46;}
 80010d0:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <RX_Task+0x1d4>)
 80010d2:	785a      	ldrb	r2, [r3, #1]
 80010d4:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <RX_Task+0x1e4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4013      	ands	r3, r2
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <RX_Task+0x1e4>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d103      	bne.n	80010ec <RX_Task+0x168>
 80010e4:	4b23      	ldr	r3, [pc, #140]	@ (8001174 <RX_Task+0x1f0>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	709a      	strb	r2, [r3, #2]
 80010ea:	e010      	b.n	800110e <RX_Task+0x18a>
				else if( (Parsed_MSG.Data1 & RF_20_32_Bit2_3) == RF_20_32_Bit2_3) {IJU_Status.IJU_RF_Filter = Filter_20_32;}
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <RX_Task+0x1d4>)
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <RX_Task+0x1e8>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4013      	ands	r3, r2
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <RX_Task+0x1e8>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d103      	bne.n	8001108 <RX_Task+0x184>
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <RX_Task+0x1f0>)
 8001102:	2201      	movs	r2, #1
 8001104:	709a      	strb	r2, [r3, #2]
 8001106:	e002      	b.n	800110e <RX_Task+0x18a>
				else {IJU_Status.IJU_RF_Filter = Filter_16_22;}
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <RX_Task+0x1f0>)
 800110a:	2200      	movs	r2, #0
 800110c:	709a      	strb	r2, [r3, #2]

				if( (Parsed_MSG.Data1 & RF_ON_Bit5) == RF_ON_Bit5) {IJU_Status.IJU_RF_Power = ON;}
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <RX_Task+0x1d4>)
 8001110:	785a      	ldrb	r2, [r3, #1]
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <RX_Task+0x1ec>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4013      	ands	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <RX_Task+0x1ec>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d103      	bne.n	800112a <RX_Task+0x1a6>
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <RX_Task+0x1f0>)
 8001124:	2201      	movs	r2, #1
 8001126:	70da      	strb	r2, [r3, #3]
 8001128:	e002      	b.n	8001130 <RX_Task+0x1ac>
				else {IJU_Status.IJU_RF_Power = OFF;}
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <RX_Task+0x1f0>)
 800112c:	2200      	movs	r2, #0
 800112e:	70da      	strb	r2, [r3, #3]

				IJU_Status.IJU_Atten = Parsed_MSG.Data2 & 0b00111111;
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <RX_Task+0x1d4>)
 8001132:	789b      	ldrb	r3, [r3, #2]
 8001134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <RX_Task+0x1f0>)
 800113c:	711a      	strb	r2, [r3, #4]

				//Parsed_MSG.New_MSG = 0;
			}

			Parsed_MSG.New_MSG = 0;
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <RX_Task+0x1d4>)
 8001140:	2200      	movs	r2, #0
 8001142:	71da      	strb	r2, [r3, #7]

		//		Task_Done.MainCPU_Comm_RX_Task = 1;
		//		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
		//		Task_Done.MainCPU_Comm_RX_Task = 0;

		RX_Task_Done = 1;
 8001144:	4b01      	ldr	r3, [pc, #4]	@ (800114c <RX_Task+0x1c8>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
		RX_Task_Done = 0;
 800114a:	e721      	b.n	8000f90 <RX_Task+0xc>
 800114c:	20000314 	.word	0x20000314
 8001150:	20000000 	.word	0x20000000
 8001154:	20025bf8 	.word	0x20025bf8
 8001158:	20025e04 	.word	0x20025e04
 800115c:	08018db0 	.word	0x08018db0
 8001160:	20025df4 	.word	0x20025df4
 8001164:	08018db5 	.word	0x08018db5
 8001168:	08018db4 	.word	0x08018db4
 800116c:	08018db3 	.word	0x08018db3
 8001170:	08018dbb 	.word	0x08018dbb
 8001174:	20025dfc 	.word	0x20025dfc

08001178 <LCD_Touch_Task>:

}
//--------------------------------------------------------------------------

void LCD_Touch_Task(void *argument)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b09a      	sub	sp, #104	@ 0x68
 800117c:	af04      	add	r7, sp, #16
 800117e:	6078      	str	r0, [r7, #4]
	Coordinate Touch_XY;
	int Coor_X = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	657b      	str	r3, [r7, #84]	@ 0x54
	int Coor_Y = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	653b      	str	r3, [r7, #80]	@ 0x50
	//Coordinate Touch_XY_Old;
	char Str[50];
	char i = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint16_t X = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t Y = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint8_t Text_Line = 20;
 800119a:	2314      	movs	r3, #20
 800119c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

	uint8_t Sync_MSG = 255;
 80011a0:	23ff      	movs	r3, #255	@ 0xff
 80011a2:	72fb      	strb	r3, [r7, #11]
	memset(Str, 0, sizeof(Str));
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2232      	movs	r2, #50	@ 0x32
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f015 fb2a 	bl	8016806 <memset>

	LCD_Page = PRSX_Page;
 80011b2:	4bb7      	ldr	r3, [pc, #732]	@ (8001490 <LCD_Touch_Task+0x318>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]

	osDelay(100);
 80011b8:	2064      	movs	r0, #100	@ 0x64
 80011ba:	f00f fbf2 	bl	80109a2 <osDelay>

	matrix = Matrix_Default; //ts_calibrate( 240, 320 );
 80011be:	4ab5      	ldr	r2, [pc, #724]	@ (8001494 <LCD_Touch_Task+0x31c>)
 80011c0:	4bb5      	ldr	r3, [pc, #724]	@ (8001498 <LCD_Touch_Task+0x320>)
 80011c2:	4614      	mov	r4, r2
 80011c4:	461d      	mov	r5, r3
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	getDisplayPoint(&display, Read_Value(), &matrix ) ;
 80011d2:	f006 fcd1 	bl	8007b78 <Read_Value>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4aae      	ldr	r2, [pc, #696]	@ (8001494 <LCD_Touch_Task+0x31c>)
 80011da:	4619      	mov	r1, r3
 80011dc:	48af      	ldr	r0, [pc, #700]	@ (800149c <LCD_Touch_Task+0x324>)
 80011de:	f006 fbbd 	bl	800795c <getDisplayPoint>

	LCD_Clear(BLACK);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f006 f854 	bl	8007290 <LCD_Clear>
	Show_Str(83, 100, WHITE, BLACK, (u8 *)LCD_PRS10_Str,20,1);
 80011e8:	2301      	movs	r3, #1
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	2314      	movs	r3, #20
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	4bab      	ldr	r3, [pc, #684]	@ (80014a0 <LCD_Touch_Task+0x328>)
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011fa:	2164      	movs	r1, #100	@ 0x64
 80011fc:	2053      	movs	r0, #83	@ 0x53
 80011fe:	f004 fe69 	bl	8005ed4 <Show_Str>
	Show_Str(83, 140, WHITE, BLACK, (u8 *)LCD_PRS20_Str,20,1);
 8001202:	2301      	movs	r3, #1
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	2314      	movs	r3, #20
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	4ba6      	ldr	r3, [pc, #664]	@ (80014a4 <LCD_Touch_Task+0x32c>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001214:	218c      	movs	r1, #140	@ 0x8c
 8001216:	2053      	movs	r0, #83	@ 0x53
 8001218:	f004 fe5c 	bl	8005ed4 <Show_Str>
	Show_Str(83, 180, WHITE, BLACK, (u8 *)LCD_PRS30_Str,20,1);
 800121c:	2301      	movs	r3, #1
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2314      	movs	r3, #20
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	4ba0      	ldr	r3, [pc, #640]	@ (80014a8 <LCD_Touch_Task+0x330>)
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800122e:	21b4      	movs	r1, #180	@ 0xb4
 8001230:	2053      	movs	r0, #83	@ 0x53
 8001232:	f004 fe4f 	bl	8005ed4 <Show_Str>
//	osDelay(1000);
//	Power27V_Switch(0);

	for(;;)
	{
		LCD_Touch_Task_Done = 0;
 8001236:	4b9d      	ldr	r3, [pc, #628]	@ (80014ac <LCD_Touch_Task+0x334>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
		//USBPD_DPM_Run();
		//osDelay(1);
		//Ali_USB();
		if(TS_Touched() == 1)
 800123c:	f006 fde8 	bl	8007e10 <TS_Touched>
 8001240:	4603      	mov	r3, r0
 8001242:	2b01      	cmp	r3, #1
 8001244:	f041 861e 	bne.w	8002e84 <LCD_Touch_Task+0x1d0c>
		{
			getDisplayPoint(&display, Read_Value(), &matrix ) ;
 8001248:	f006 fc96 	bl	8007b78 <Read_Value>
 800124c:	4603      	mov	r3, r0
 800124e:	4a91      	ldr	r2, [pc, #580]	@ (8001494 <LCD_Touch_Task+0x31c>)
 8001250:	4619      	mov	r1, r3
 8001252:	4892      	ldr	r0, [pc, #584]	@ (800149c <LCD_Touch_Task+0x324>)
 8001254:	f006 fb82 	bl	800795c <getDisplayPoint>
			//---------------PRSX Select---------------
			X = 83;	Y = 140;
 8001258:	2353      	movs	r3, #83	@ 0x53
 800125a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800125e:	238c      	movs	r3, #140	@ 0x8c
 8001260:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == PRSX_Page) && (X<display.x && display.x<X+(strlen(LCD_PRS20_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8001264:	4b8a      	ldr	r3, [pc, #552]	@ (8001490 <LCD_Touch_Task+0x318>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d15d      	bne.n	8001328 <LCD_Touch_Task+0x1b0>
 800126c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001270:	4b8a      	ldr	r3, [pc, #552]	@ (800149c <LCD_Touch_Task+0x324>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	da57      	bge.n	8001328 <LCD_Touch_Task+0x1b0>
 8001278:	4b88      	ldr	r3, [pc, #544]	@ (800149c <LCD_Touch_Task+0x324>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	461d      	mov	r5, r3
 800127e:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001282:	4888      	ldr	r0, [pc, #544]	@ (80014a4 <LCD_Touch_Task+0x32c>)
 8001284:	f7ff f804 	bl	8000290 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4423      	add	r3, r4
 800128e:	429d      	cmp	r5, r3
 8001290:	d24a      	bcs.n	8001328 <LCD_Touch_Task+0x1b0>
 8001292:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001296:	4b81      	ldr	r3, [pc, #516]	@ (800149c <LCD_Touch_Task+0x324>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	da44      	bge.n	8001328 <LCD_Touch_Task+0x1b0>
 800129e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80012a2:	f103 020e 	add.w	r2, r3, #14
 80012a6:	4b7d      	ldr	r3, [pc, #500]	@ (800149c <LCD_Touch_Task+0x324>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	db3c      	blt.n	8001328 <LCD_Touch_Task+0x1b0>
			{
				LCD_Page = Modules_Page;
 80012ae:	4b78      	ldr	r3, [pc, #480]	@ (8001490 <LCD_Touch_Task+0x318>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
				LCD_Clear(BLACK);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f005 ffeb 	bl	8007290 <LCD_Clear>
				Show_Str(80, 100, WHITE, BLACK, (u8 *)LCD_FEU_Str,20,1);
 80012ba:	2301      	movs	r3, #1
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	2314      	movs	r3, #20
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	4b7b      	ldr	r3, [pc, #492]	@ (80014b0 <LCD_Touch_Task+0x338>)
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2300      	movs	r3, #0
 80012c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012cc:	2164      	movs	r1, #100	@ 0x64
 80012ce:	2050      	movs	r0, #80	@ 0x50
 80012d0:	f004 fe00 	bl	8005ed4 <Show_Str>
				Show_Str(80, 140, WHITE, BLACK, (u8 *)LCD_IJU_Str,20,1);
 80012d4:	2301      	movs	r3, #1
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	2314      	movs	r3, #20
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	4b75      	ldr	r3, [pc, #468]	@ (80014b4 <LCD_Touch_Task+0x33c>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e6:	218c      	movs	r1, #140	@ 0x8c
 80012e8:	2050      	movs	r0, #80	@ 0x50
 80012ea:	f004 fdf3 	bl	8005ed4 <Show_Str>
				Show_Str(5, 300, GBLUE, BLACK, (u8 *)LCD_Back_Str,20,1);
 80012ee:	2301      	movs	r3, #1
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2314      	movs	r3, #20
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	4b70      	ldr	r3, [pc, #448]	@ (80014b8 <LCD_Touch_Task+0x340>)
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2300      	movs	r3, #0
 80012fc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001300:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001304:	2005      	movs	r0, #5
 8001306:	f004 fde5 	bl	8005ed4 <Show_Str>

				display.x=0; display.y=0;
 800130a:	4b64      	ldr	r3, [pc, #400]	@ (800149c <LCD_Touch_Task+0x324>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	4b62      	ldr	r3, [pc, #392]	@ (800149c <LCD_Touch_Task+0x324>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001316:	e002      	b.n	800131e <LCD_Touch_Task+0x1a6>
 8001318:	200a      	movs	r0, #10
 800131a:	f00f fb42 	bl	80109a2 <osDelay>
 800131e:	f006 fd77 	bl	8007e10 <TS_Touched>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d0f7      	beq.n	8001318 <LCD_Touch_Task+0x1a0>
//					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
//					TX_Bytes_Count ++;
//				}
			}
			//---------------Modules Select---------------
			X = 80;	Y = 100;
 8001328:	2350      	movs	r3, #80	@ 0x50
 800132a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800132e:	2364      	movs	r3, #100	@ 0x64
 8001330:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == Modules_Page) && (X<display.x && display.x<X+(strlen(LCD_FEU_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8001334:	4b56      	ldr	r3, [pc, #344]	@ (8001490 <LCD_Touch_Task+0x318>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	f040 80d5 	bne.w	80014e8 <LCD_Touch_Task+0x370>
 800133e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001342:	4b56      	ldr	r3, [pc, #344]	@ (800149c <LCD_Touch_Task+0x324>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	f280 80ce 	bge.w	80014e8 <LCD_Touch_Task+0x370>
 800134c:	4b53      	ldr	r3, [pc, #332]	@ (800149c <LCD_Touch_Task+0x324>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	461d      	mov	r5, r3
 8001352:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001356:	4856      	ldr	r0, [pc, #344]	@ (80014b0 <LCD_Touch_Task+0x338>)
 8001358:	f7fe ff9a 	bl	8000290 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4423      	add	r3, r4
 8001362:	429d      	cmp	r5, r3
 8001364:	f080 80c0 	bcs.w	80014e8 <LCD_Touch_Task+0x370>
 8001368:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800136c:	4b4b      	ldr	r3, [pc, #300]	@ (800149c <LCD_Touch_Task+0x324>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	f280 80b9 	bge.w	80014e8 <LCD_Touch_Task+0x370>
 8001376:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800137a:	f103 020e 	add.w	r2, r3, #14
 800137e:	4b47      	ldr	r3, [pc, #284]	@ (800149c <LCD_Touch_Task+0x324>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	f2c0 80b0 	blt.w	80014e8 <LCD_Touch_Task+0x370>
			{
				LCD_Page = FEU_Page;
 8001388:	4b41      	ldr	r3, [pc, #260]	@ (8001490 <LCD_Touch_Task+0x318>)
 800138a:	2202      	movs	r2, #2
 800138c:	701a      	strb	r2, [r3, #0]
				//RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
				LCD_Clear(BLACK);
 800138e:	2000      	movs	r0, #0
 8001390:	f005 ff7e 	bl	8007290 <LCD_Clear>
				Show_Str(5, 10, YELLOW, BLACK, (u8 *)LCD_FEU_Str,20,1);
 8001394:	2301      	movs	r3, #1
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2314      	movs	r3, #20
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <LCD_Touch_Task+0x338>)
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2300      	movs	r3, #0
 80013a2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013a6:	210a      	movs	r1, #10
 80013a8:	2005      	movs	r0, #5
 80013aa:	f004 fd93 	bl	8005ed4 <Show_Str>
				Show_Str(5, 40, WHITE, BLACK, (u8 *)LCD_PowerSupply_OFF_Str,20,1);
 80013ae:	2301      	movs	r3, #1
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	2314      	movs	r3, #20
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <LCD_Touch_Task+0x344>)
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013c0:	2128      	movs	r1, #40	@ 0x28
 80013c2:	2005      	movs	r0, #5
 80013c4:	f004 fd86 	bl	8005ed4 <Show_Str>
				Show_Str(5, 70, WHITE, BLACK, (u8 *)LCD_RX1_Str,20,1);
 80013c8:	2301      	movs	r3, #1
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2314      	movs	r3, #20
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <LCD_Touch_Task+0x348>)
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013da:	2146      	movs	r1, #70	@ 0x46
 80013dc:	2005      	movs	r0, #5
 80013de:	f004 fd79 	bl	8005ed4 <Show_Str>
				Show_Str(60, 70, WHITE, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 80013e2:	2301      	movs	r3, #1
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2314      	movs	r3, #20
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <LCD_Touch_Task+0x34c>)
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2300      	movs	r3, #0
 80013f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f4:	2146      	movs	r1, #70	@ 0x46
 80013f6:	203c      	movs	r0, #60	@ 0x3c
 80013f8:	f004 fd6c 	bl	8005ed4 <Show_Str>
				Show_Str(150, 70, WHITE, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 80013fc:	2301      	movs	r3, #1
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	2314      	movs	r3, #20
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <LCD_Touch_Task+0x350>)
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2300      	movs	r3, #0
 800140a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140e:	2146      	movs	r1, #70	@ 0x46
 8001410:	2096      	movs	r0, #150	@ 0x96
 8001412:	f004 fd5f 	bl	8005ed4 <Show_Str>
				Show_Str(5, 100, WHITE, BLACK, (u8 *)LCD_Gain_Low_Str,20,1);
 8001416:	2301      	movs	r3, #1
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2314      	movs	r3, #20
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <LCD_Touch_Task+0x354>)
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001428:	2164      	movs	r1, #100	@ 0x64
 800142a:	2005      	movs	r0, #5
 800142c:	f004 fd52 	bl	8005ed4 <Show_Str>
				Show_Str(150, 100, WHITE, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8001430:	2301      	movs	r3, #1
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2314      	movs	r3, #20
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <LCD_Touch_Task+0x358>)
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2300      	movs	r3, #0
 800143e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001442:	2164      	movs	r1, #100	@ 0x64
 8001444:	2096      	movs	r0, #150	@ 0x96
 8001446:	f004 fd45 	bl	8005ed4 <Show_Str>
				Show_Str(5, 130, WHITE, BLACK, (u8 *)LCD_Atten_Str,20,1);
 800144a:	2301      	movs	r3, #1
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2314      	movs	r3, #20
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <LCD_Touch_Task+0x35c>)
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800145c:	2182      	movs	r1, #130	@ 0x82
 800145e:	2005      	movs	r0, #5
 8001460:	f004 fd38 	bl	8005ed4 <Show_Str>
				Show_Str(5, 300, GBLUE, BLACK, (u8 *)LCD_Back_Str,20,1);
 8001464:	2301      	movs	r3, #1
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	2314      	movs	r3, #20
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <LCD_Touch_Task+0x340>)
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001476:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800147a:	2005      	movs	r0, #5
 800147c:	f004 fd2a 	bl	8005ed4 <Show_Str>

				display.x=0; display.y=0;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <LCD_Touch_Task+0x324>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <LCD_Touch_Task+0x324>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 800148c:	e027      	b.n	80014de <LCD_Touch_Task+0x366>
 800148e:	bf00      	nop
 8001490:	20025df0 	.word	0x20025df0
 8001494:	20026104 	.word	0x20026104
 8001498:	20026128 	.word	0x20026128
 800149c:	20026120 	.word	0x20026120
 80014a0:	08018cbc 	.word	0x08018cbc
 80014a4:	08018cc8 	.word	0x08018cc8
 80014a8:	08018cd4 	.word	0x08018cd4
 80014ac:	20000315 	.word	0x20000315
 80014b0:	08018ce0 	.word	0x08018ce0
 80014b4:	08018cec 	.word	0x08018cec
 80014b8:	08018cb0 	.word	0x08018cb0
 80014bc:	08018cf8 	.word	0x08018cf8
 80014c0:	08018d1c 	.word	0x08018d1c
 80014c4:	08018d2c 	.word	0x08018d2c
 80014c8:	08018d3c 	.word	0x08018d3c
 80014cc:	08018d6c 	.word	0x08018d6c
 80014d0:	08018d8c 	.word	0x08018d8c
 80014d4:	08018d9c 	.word	0x08018d9c
 80014d8:	200a      	movs	r0, #10
 80014da:	f00f fa62 	bl	80109a2 <osDelay>
 80014de:	f006 fc97 	bl	8007e10 <TS_Touched>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d0f7      	beq.n	80014d8 <LCD_Touch_Task+0x360>
			}

			X = 80;	Y = 140;
 80014e8:	2350      	movs	r3, #80	@ 0x50
 80014ea:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80014ee:	238c      	movs	r3, #140	@ 0x8c
 80014f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == Modules_Page) && (X<display.x && display.x<X+(strlen(LCD_IJU_Str)*8)) && (Y<display.y && display.y<Y+15) )
 80014f4:	4ba9      	ldr	r3, [pc, #676]	@ (800179c <LCD_Touch_Task+0x624>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	f040 8093 	bne.w	8001624 <LCD_Touch_Task+0x4ac>
 80014fe:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001502:	4ba7      	ldr	r3, [pc, #668]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	f280 808c 	bge.w	8001624 <LCD_Touch_Task+0x4ac>
 800150c:	4ba4      	ldr	r3, [pc, #656]	@ (80017a0 <LCD_Touch_Task+0x628>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	461d      	mov	r5, r3
 8001512:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001516:	48a3      	ldr	r0, [pc, #652]	@ (80017a4 <LCD_Touch_Task+0x62c>)
 8001518:	f7fe feba 	bl	8000290 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4423      	add	r3, r4
 8001522:	429d      	cmp	r5, r3
 8001524:	d27e      	bcs.n	8001624 <LCD_Touch_Task+0x4ac>
 8001526:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800152a:	4b9d      	ldr	r3, [pc, #628]	@ (80017a0 <LCD_Touch_Task+0x628>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	da78      	bge.n	8001624 <LCD_Touch_Task+0x4ac>
 8001532:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001536:	f103 020e 	add.w	r2, r3, #14
 800153a:	4b99      	ldr	r3, [pc, #612]	@ (80017a0 <LCD_Touch_Task+0x628>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	db70      	blt.n	8001624 <LCD_Touch_Task+0x4ac>
			{
				LCD_Page = IJU_Page;
 8001542:	4b96      	ldr	r3, [pc, #600]	@ (800179c <LCD_Touch_Task+0x624>)
 8001544:	2203      	movs	r2, #3
 8001546:	701a      	strb	r2, [r3, #0]
				//RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
				LCD_Clear(BLACK);
 8001548:	2000      	movs	r0, #0
 800154a:	f005 fea1 	bl	8007290 <LCD_Clear>
				Show_Str(5, 10, YELLOW, BLACK, (u8 *)LCD_IJU_Str,20,1);
 800154e:	2301      	movs	r3, #1
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2314      	movs	r3, #20
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	4b93      	ldr	r3, [pc, #588]	@ (80017a4 <LCD_Touch_Task+0x62c>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001560:	210a      	movs	r1, #10
 8001562:	2005      	movs	r0, #5
 8001564:	f004 fcb6 	bl	8005ed4 <Show_Str>
				Show_Str(5, 40, WHITE, BLACK, (u8 *)LCD_PowerSupply_OFF_Str,20,1);
 8001568:	2301      	movs	r3, #1
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2314      	movs	r3, #20
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	4b8d      	ldr	r3, [pc, #564]	@ (80017a8 <LCD_Touch_Task+0x630>)
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2300      	movs	r3, #0
 8001576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800157a:	2128      	movs	r1, #40	@ 0x28
 800157c:	2005      	movs	r0, #5
 800157e:	f004 fca9 	bl	8005ed4 <Show_Str>
				Show_Str(5, 70, WHITE, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 8001582:	2301      	movs	r3, #1
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	2314      	movs	r3, #20
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	4b88      	ldr	r3, [pc, #544]	@ (80017ac <LCD_Touch_Task+0x634>)
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2300      	movs	r3, #0
 8001590:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001594:	2146      	movs	r1, #70	@ 0x46
 8001596:	2005      	movs	r0, #5
 8001598:	f004 fc9c 	bl	8005ed4 <Show_Str>
				Show_Str(95, 70, WHITE, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 800159c:	2301      	movs	r3, #1
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	2314      	movs	r3, #20
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	4b82      	ldr	r3, [pc, #520]	@ (80017b0 <LCD_Touch_Task+0x638>)
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2300      	movs	r3, #0
 80015aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ae:	2146      	movs	r1, #70	@ 0x46
 80015b0:	205f      	movs	r0, #95	@ 0x5f
 80015b2:	f004 fc8f 	bl	8005ed4 <Show_Str>
				Show_Str(5, 100, WHITE, BLACK, (u8 *)LCD_Atten_Str,20,1);
 80015b6:	2301      	movs	r3, #1
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2314      	movs	r3, #20
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	4b7d      	ldr	r3, [pc, #500]	@ (80017b4 <LCD_Touch_Task+0x63c>)
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c8:	2164      	movs	r1, #100	@ 0x64
 80015ca:	2005      	movs	r0, #5
 80015cc:	f004 fc82 	bl	8005ed4 <Show_Str>
				Show_Str(150, 100, WHITE, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 80015d0:	2301      	movs	r3, #1
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2314      	movs	r3, #20
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	4b77      	ldr	r3, [pc, #476]	@ (80017b8 <LCD_Touch_Task+0x640>)
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e2:	2164      	movs	r1, #100	@ 0x64
 80015e4:	2096      	movs	r0, #150	@ 0x96
 80015e6:	f004 fc75 	bl	8005ed4 <Show_Str>
				Show_Str(5, 300, GBLUE, BLACK, (u8 *)LCD_Back_Str,20,1);
 80015ea:	2301      	movs	r3, #1
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2314      	movs	r3, #20
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	4b72      	ldr	r3, [pc, #456]	@ (80017bc <LCD_Touch_Task+0x644>)
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80015fc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001600:	2005      	movs	r0, #5
 8001602:	f004 fc67 	bl	8005ed4 <Show_Str>

				display.x=0; display.y=0;
 8001606:	4b66      	ldr	r3, [pc, #408]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	4b64      	ldr	r3, [pc, #400]	@ (80017a0 <LCD_Touch_Task+0x628>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001612:	e002      	b.n	800161a <LCD_Touch_Task+0x4a2>
 8001614:	200a      	movs	r0, #10
 8001616:	f00f f9c4 	bl	80109a2 <osDelay>
 800161a:	f006 fbf9 	bl	8007e10 <TS_Touched>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d0f7      	beq.n	8001614 <LCD_Touch_Task+0x49c>
			}

			X = 5;	Y = 300;
 8001624:	2305      	movs	r3, #5
 8001626:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800162a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800162e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == Modules_Page) && (X<display.x && display.x<X+(strlen(LCD_Back_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8001632:	4b5a      	ldr	r3, [pc, #360]	@ (800179c <LCD_Touch_Task+0x624>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d15c      	bne.n	80016f4 <LCD_Touch_Task+0x57c>
 800163a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800163e:	4b58      	ldr	r3, [pc, #352]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	da56      	bge.n	80016f4 <LCD_Touch_Task+0x57c>
 8001646:	4b56      	ldr	r3, [pc, #344]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461d      	mov	r5, r3
 800164c:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001650:	485a      	ldr	r0, [pc, #360]	@ (80017bc <LCD_Touch_Task+0x644>)
 8001652:	f7fe fe1d 	bl	8000290 <strlen>
 8001656:	4603      	mov	r3, r0
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4423      	add	r3, r4
 800165c:	429d      	cmp	r5, r3
 800165e:	d249      	bcs.n	80016f4 <LCD_Touch_Task+0x57c>
 8001660:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001664:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	da43      	bge.n	80016f4 <LCD_Touch_Task+0x57c>
 800166c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001670:	f103 020e 	add.w	r2, r3, #14
 8001674:	4b4a      	ldr	r3, [pc, #296]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	db3b      	blt.n	80016f4 <LCD_Touch_Task+0x57c>
			{
				LCD_Page = PRSX_Page;
 800167c:	4b47      	ldr	r3, [pc, #284]	@ (800179c <LCD_Touch_Task+0x624>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
				LCD_Clear(BLACK);
 8001682:	2000      	movs	r0, #0
 8001684:	f005 fe04 	bl	8007290 <LCD_Clear>
				Show_Str(83, 100, WHITE, BLACK, (u8 *)LCD_PRS10_Str,20,1);
 8001688:	2301      	movs	r3, #1
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	2314      	movs	r3, #20
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	4b4b      	ldr	r3, [pc, #300]	@ (80017c0 <LCD_Touch_Task+0x648>)
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800169a:	2164      	movs	r1, #100	@ 0x64
 800169c:	2053      	movs	r0, #83	@ 0x53
 800169e:	f004 fc19 	bl	8005ed4 <Show_Str>
				Show_Str(83, 140, WHITE, BLACK, (u8 *)LCD_PRS20_Str,20,1);
 80016a2:	2301      	movs	r3, #1
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2314      	movs	r3, #20
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	4b46      	ldr	r3, [pc, #280]	@ (80017c4 <LCD_Touch_Task+0x64c>)
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2300      	movs	r3, #0
 80016b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016b4:	218c      	movs	r1, #140	@ 0x8c
 80016b6:	2053      	movs	r0, #83	@ 0x53
 80016b8:	f004 fc0c 	bl	8005ed4 <Show_Str>
				Show_Str(83, 180, WHITE, BLACK, (u8 *)LCD_PRS30_Str,20,1);
 80016bc:	2301      	movs	r3, #1
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	2314      	movs	r3, #20
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	4b40      	ldr	r3, [pc, #256]	@ (80017c8 <LCD_Touch_Task+0x650>)
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ce:	21b4      	movs	r1, #180	@ 0xb4
 80016d0:	2053      	movs	r0, #83	@ 0x53
 80016d2:	f004 fbff 	bl	8005ed4 <Show_Str>

				display.x=0; display.y=0;
 80016d6:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <LCD_Touch_Task+0x628>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <LCD_Touch_Task+0x628>)
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 80016e2:	e002      	b.n	80016ea <LCD_Touch_Task+0x572>
 80016e4:	200a      	movs	r0, #10
 80016e6:	f00f f95c 	bl	80109a2 <osDelay>
 80016ea:	f006 fb91 	bl	8007e10 <TS_Touched>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d0f7      	beq.n	80016e4 <LCD_Touch_Task+0x56c>
			}
			//---------------FEU Power Supply---------------
			X = 5;	Y = 40;
 80016f4:	2305      	movs	r3, #5
 80016f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80016fa:	2328      	movs	r3, #40	@ 0x28
 80016fc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen(LCD_PowerSupply_ON_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8001700:	4b26      	ldr	r3, [pc, #152]	@ (800179c <LCD_Touch_Task+0x624>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b02      	cmp	r3, #2
 8001706:	f040 8092 	bne.w	800182e <LCD_Touch_Task+0x6b6>
 800170a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800170e:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	f280 808b 	bge.w	800182e <LCD_Touch_Task+0x6b6>
 8001718:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <LCD_Touch_Task+0x628>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461d      	mov	r5, r3
 800171e:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001722:	482a      	ldr	r0, [pc, #168]	@ (80017cc <LCD_Touch_Task+0x654>)
 8001724:	f7fe fdb4 	bl	8000290 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4423      	add	r3, r4
 800172e:	429d      	cmp	r5, r3
 8001730:	d27d      	bcs.n	800182e <LCD_Touch_Task+0x6b6>
 8001732:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001736:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	429a      	cmp	r2, r3
 800173c:	da77      	bge.n	800182e <LCD_Touch_Task+0x6b6>
 800173e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001742:	f103 020e 	add.w	r2, r3, #14
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <LCD_Touch_Task+0x628>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	db6f      	blt.n	800182e <LCD_Touch_Task+0x6b6>
			{

				if( Power27V_Status() == 0)
 800174e:	f003 ffc7 	bl	80056e0 <Power27V_Status>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d13b      	bne.n	80017d0 <LCD_Touch_Task+0x658>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_PowerSupply_OFF_Str,20,1);
 8001758:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800175c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001760:	2301      	movs	r3, #1
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	2314      	movs	r3, #20
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <LCD_Touch_Task+0x630>)
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2300      	movs	r3, #0
 800176e:	2200      	movs	r2, #0
 8001770:	f004 fbb0 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_PowerSupply_ON_Str,20,1);
 8001774:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001778:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800177c:	2301      	movs	r3, #1
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2314      	movs	r3, #20
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <LCD_Touch_Task+0x654>)
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800178e:	f004 fba1 	bl	8005ed4 <Show_Str>
					Power27V_Switch(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f003 ff8a 	bl	80056ac <Power27V_Switch>
 8001798:	e03a      	b.n	8001810 <LCD_Touch_Task+0x698>
 800179a:	bf00      	nop
 800179c:	20025df0 	.word	0x20025df0
 80017a0:	20026120 	.word	0x20026120
 80017a4:	08018cec 	.word	0x08018cec
 80017a8:	08018cf8 	.word	0x08018cf8
 80017ac:	08018d2c 	.word	0x08018d2c
 80017b0:	08018d3c 	.word	0x08018d3c
 80017b4:	08018d9c 	.word	0x08018d9c
 80017b8:	08018d8c 	.word	0x08018d8c
 80017bc:	08018cb0 	.word	0x08018cb0
 80017c0:	08018cbc 	.word	0x08018cbc
 80017c4:	08018cc8 	.word	0x08018cc8
 80017c8:	08018cd4 	.word	0x08018cd4
 80017cc:	08018d0c 	.word	0x08018d0c
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_PowerSupply_ON_Str,20,1);
 80017d0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80017d4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80017d8:	2301      	movs	r3, #1
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	2314      	movs	r3, #20
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	4ba1      	ldr	r3, [pc, #644]	@ (8001a68 <LCD_Touch_Task+0x8f0>)
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	2200      	movs	r2, #0
 80017e8:	f004 fb74 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_PowerSupply_OFF_Str,20,1);
 80017ec:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80017f0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80017f4:	2301      	movs	r3, #1
 80017f6:	9302      	str	r3, [sp, #8]
 80017f8:	2314      	movs	r3, #20
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	4b9b      	ldr	r3, [pc, #620]	@ (8001a6c <LCD_Touch_Task+0x8f4>)
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001806:	f004 fb65 	bl	8005ed4 <Show_Str>
					Power27V_Switch(0);
 800180a:	2000      	movs	r0, #0
 800180c:	f003 ff4e 	bl	80056ac <Power27V_Switch>
				}

				display.x=0; display.y=0;
 8001810:	4b97      	ldr	r3, [pc, #604]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	4b96      	ldr	r3, [pc, #600]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 800181c:	e002      	b.n	8001824 <LCD_Touch_Task+0x6ac>
 800181e:	200a      	movs	r0, #10
 8001820:	f00f f8bf 	bl	80109a2 <osDelay>
 8001824:	f006 faf4 	bl	8007e10 <TS_Touched>
 8001828:	4603      	mov	r3, r0
 800182a:	2b01      	cmp	r3, #1
 800182c:	d0f7      	beq.n	800181e <LCD_Touch_Task+0x6a6>
			}
			//---------------FEU RX---------------
			X = 5;	Y = 70;
 800182e:	2305      	movs	r3, #5
 8001830:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001834:	2346      	movs	r3, #70	@ 0x46
 8001836:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen(LCD_RX1_Str)*8)) && (Y<display.y && display.y<Y+15) )
 800183a:	4b8e      	ldr	r3, [pc, #568]	@ (8001a74 <LCD_Touch_Task+0x8fc>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b02      	cmp	r3, #2
 8001840:	f040 80a4 	bne.w	800198c <LCD_Touch_Task+0x814>
 8001844:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001848:	4b89      	ldr	r3, [pc, #548]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	f280 809d 	bge.w	800198c <LCD_Touch_Task+0x814>
 8001852:	4b87      	ldr	r3, [pc, #540]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	461d      	mov	r5, r3
 8001858:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 800185c:	4886      	ldr	r0, [pc, #536]	@ (8001a78 <LCD_Touch_Task+0x900>)
 800185e:	f7fe fd17 	bl	8000290 <strlen>
 8001862:	4603      	mov	r3, r0
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4423      	add	r3, r4
 8001868:	429d      	cmp	r5, r3
 800186a:	f080 808f 	bcs.w	800198c <LCD_Touch_Task+0x814>
 800186e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001872:	4b7f      	ldr	r3, [pc, #508]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	f280 8088 	bge.w	800198c <LCD_Touch_Task+0x814>
 800187c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001880:	f103 020e 	add.w	r2, r3, #14
 8001884:	4b7a      	ldr	r3, [pc, #488]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	db7f      	blt.n	800198c <LCD_Touch_Task+0x814>
			{

				if( (MIU_FEU_MSG.PCKT_0 & RX2_Bit0) == RX2_Bit0)
 800188c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a7c <LCD_Touch_Task+0x904>)
 800188e:	789a      	ldrb	r2, [r3, #2]
 8001890:	4b7b      	ldr	r3, [pc, #492]	@ (8001a80 <LCD_Touch_Task+0x908>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4013      	ands	r3, r2
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b79      	ldr	r3, [pc, #484]	@ (8001a80 <LCD_Touch_Task+0x908>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d133      	bne.n	8001908 <LCD_Touch_Task+0x790>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RX2_Str,20,1);
 80018a0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80018a4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80018a8:	2301      	movs	r3, #1
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	2314      	movs	r3, #20
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	4b74      	ldr	r3, [pc, #464]	@ (8001a84 <LCD_Touch_Task+0x90c>)
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2200      	movs	r2, #0
 80018b8:	f004 fb0c 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RX1_Str,20,1);
 80018bc:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80018c0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80018c4:	2301      	movs	r3, #1
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	2314      	movs	r3, #20
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a78 <LCD_Touch_Task+0x900>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d6:	f004 fafd 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RX_Bit0_RST, RX1_Bit0);
 80018da:	4b6b      	ldr	r3, [pc, #428]	@ (8001a88 <LCD_Touch_Task+0x910>)
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	4b6b      	ldr	r3, [pc, #428]	@ (8001a8c <LCD_Touch_Task+0x914>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	496b      	ldr	r1, [pc, #428]	@ (8001a90 <LCD_Touch_Task+0x918>)
 80018e4:	4865      	ldr	r0, [pc, #404]	@ (8001a7c <LCD_Touch_Task+0x904>)
 80018e6:	f003 ff09 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 80018ea:	4b64      	ldr	r3, [pc, #400]	@ (8001a7c <LCD_Touch_Task+0x904>)
 80018ec:	7a9b      	ldrb	r3, [r3, #10]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4962      	ldr	r1, [pc, #392]	@ (8001a7c <LCD_Touch_Task+0x904>)
 80018f2:	2007      	movs	r0, #7
 80018f4:	f005 f832 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 80018f8:	f107 030b 	add.w	r3, r7, #11
 80018fc:	2201      	movs	r2, #1
 80018fe:	4619      	mov	r1, r3
 8001900:	2005      	movs	r0, #5
 8001902:	f005 f82b 	bl	800695c <RS485_Tx>
 8001906:	e032      	b.n	800196e <LCD_Touch_Task+0x7f6>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RX1_Str,20,1);
 8001908:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800190c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001910:	2301      	movs	r3, #1
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2314      	movs	r3, #20
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <LCD_Touch_Task+0x900>)
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	2200      	movs	r2, #0
 8001920:	f004 fad8 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RX2_Str,20,1);
 8001924:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001928:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800192c:	2301      	movs	r3, #1
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	2314      	movs	r3, #20
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	4b53      	ldr	r3, [pc, #332]	@ (8001a84 <LCD_Touch_Task+0x90c>)
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800193e:	f004 fac9 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RX_Bit0_RST, RX2_Bit0);
 8001942:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <LCD_Touch_Task+0x910>)
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	4b4e      	ldr	r3, [pc, #312]	@ (8001a80 <LCD_Touch_Task+0x908>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4951      	ldr	r1, [pc, #324]	@ (8001a90 <LCD_Touch_Task+0x918>)
 800194c:	484b      	ldr	r0, [pc, #300]	@ (8001a7c <LCD_Touch_Task+0x904>)
 800194e:	f003 fed5 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001952:	4b4a      	ldr	r3, [pc, #296]	@ (8001a7c <LCD_Touch_Task+0x904>)
 8001954:	7a9b      	ldrb	r3, [r3, #10]
 8001956:	461a      	mov	r2, r3
 8001958:	4948      	ldr	r1, [pc, #288]	@ (8001a7c <LCD_Touch_Task+0x904>)
 800195a:	2007      	movs	r0, #7
 800195c:	f004 fffe 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001960:	f107 030b 	add.w	r3, r7, #11
 8001964:	2201      	movs	r2, #1
 8001966:	4619      	mov	r1, r3
 8001968:	2005      	movs	r0, #5
 800196a:	f004 fff7 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 800196e:	4b40      	ldr	r3, [pc, #256]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4b3e      	ldr	r3, [pc, #248]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 800197a:	e002      	b.n	8001982 <LCD_Touch_Task+0x80a>
 800197c:	200a      	movs	r0, #10
 800197e:	f00f f810 	bl	80109a2 <osDelay>
 8001982:	f006 fa45 	bl	8007e10 <TS_Touched>
 8001986:	4603      	mov	r3, r0
 8001988:	2b01      	cmp	r3, #1
 800198a:	d0f7      	beq.n	800197c <LCD_Touch_Task+0x804>
			}
			//---------------FEU INJ---------------
			X = 60;	Y = 70;
 800198c:	233c      	movs	r3, #60	@ 0x3c
 800198e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001992:	2346      	movs	r3, #70	@ 0x46
 8001994:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen(LCD_INJ_ON_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8001998:	4b36      	ldr	r3, [pc, #216]	@ (8001a74 <LCD_Touch_Task+0x8fc>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	f040 80c5 	bne.w	8001b2c <LCD_Touch_Task+0x9b4>
 80019a2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80019a6:	4b32      	ldr	r3, [pc, #200]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f280 80be 	bge.w	8001b2c <LCD_Touch_Task+0x9b4>
 80019b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	461d      	mov	r5, r3
 80019b6:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 80019ba:	4836      	ldr	r0, [pc, #216]	@ (8001a94 <LCD_Touch_Task+0x91c>)
 80019bc:	f7fe fc68 	bl	8000290 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4423      	add	r3, r4
 80019c6:	429d      	cmp	r5, r3
 80019c8:	f080 80b0 	bcs.w	8001b2c <LCD_Touch_Task+0x9b4>
 80019cc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80019d0:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f280 80a9 	bge.w	8001b2c <LCD_Touch_Task+0x9b4>
 80019da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019de:	f103 020e 	add.w	r2, r3, #14
 80019e2:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <LCD_Touch_Task+0x8f8>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	f2c0 80a0 	blt.w	8001b2c <LCD_Touch_Task+0x9b4>
			{

				if( (MIU_FEU_MSG.PCKT_0 & INJ_ON_Bit1) == INJ_ON_Bit1)
 80019ec:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <LCD_Touch_Task+0x904>)
 80019ee:	789a      	ldrb	r2, [r3, #2]
 80019f0:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <LCD_Touch_Task+0x920>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4013      	ands	r3, r2
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <LCD_Touch_Task+0x920>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d153      	bne.n	8001aa8 <LCD_Touch_Task+0x930>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_INJ_ON_Str,20,1);
 8001a00:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001a04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2314      	movs	r3, #20
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <LCD_Touch_Task+0x91c>)
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2300      	movs	r3, #0
 8001a16:	2200      	movs	r2, #0
 8001a18:	f004 fa5c 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 8001a1c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001a20:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001a24:	2301      	movs	r3, #1
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2314      	movs	r3, #20
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <LCD_Touch_Task+0x924>)
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2300      	movs	r3, #0
 8001a32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a36:	f004 fa4d 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, INJ_Bit1_RST, INJ_OFF_Bit1);
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <LCD_Touch_Task+0x928>)
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <LCD_Touch_Task+0x92c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4913      	ldr	r1, [pc, #76]	@ (8001a90 <LCD_Touch_Task+0x918>)
 8001a44:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <LCD_Touch_Task+0x904>)
 8001a46:	f003 fe59 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <LCD_Touch_Task+0x904>)
 8001a4c:	7a9b      	ldrb	r3, [r3, #10]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	490a      	ldr	r1, [pc, #40]	@ (8001a7c <LCD_Touch_Task+0x904>)
 8001a52:	2007      	movs	r0, #7
 8001a54:	f004 ff82 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001a58:	f107 030b 	add.w	r3, r7, #11
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4619      	mov	r1, r3
 8001a60:	2005      	movs	r0, #5
 8001a62:	f004 ff7b 	bl	800695c <RS485_Tx>
 8001a66:	e052      	b.n	8001b0e <LCD_Touch_Task+0x996>
 8001a68:	08018d0c 	.word	0x08018d0c
 8001a6c:	08018cf8 	.word	0x08018cf8
 8001a70:	20026120 	.word	0x20026120
 8001a74:	20025df0 	.word	0x20025df0
 8001a78:	08018d1c 	.word	0x08018d1c
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	08018dad 	.word	0x08018dad
 8001a84:	08018d24 	.word	0x08018d24
 8001a88:	08018dab 	.word	0x08018dab
 8001a8c:	08018dac 	.word	0x08018dac
 8001a90:	20000006 	.word	0x20000006
 8001a94:	08018d34 	.word	0x08018d34
 8001a98:	08018db0 	.word	0x08018db0
 8001a9c:	08018d2c 	.word	0x08018d2c
 8001aa0:	08018dae 	.word	0x08018dae
 8001aa4:	08018daf 	.word	0x08018daf
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 8001aa8:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001aac:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	2314      	movs	r3, #20
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	4bae      	ldr	r3, [pc, #696]	@ (8001d74 <LCD_Touch_Task+0xbfc>)
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2300      	movs	r3, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f004 fa08 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_INJ_ON_Str,20,1);
 8001ac4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001ac8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001acc:	2301      	movs	r3, #1
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	2314      	movs	r3, #20
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	4ba8      	ldr	r3, [pc, #672]	@ (8001d78 <LCD_Touch_Task+0xc00>)
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ade:	f004 f9f9 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, INJ_Bit1_RST, INJ_ON_Bit1);
 8001ae2:	4ba6      	ldr	r3, [pc, #664]	@ (8001d7c <LCD_Touch_Task+0xc04>)
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	4ba6      	ldr	r3, [pc, #664]	@ (8001d80 <LCD_Touch_Task+0xc08>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	49a6      	ldr	r1, [pc, #664]	@ (8001d84 <LCD_Touch_Task+0xc0c>)
 8001aec:	48a6      	ldr	r0, [pc, #664]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001aee:	f003 fe05 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001af2:	4ba5      	ldr	r3, [pc, #660]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001af4:	7a9b      	ldrb	r3, [r3, #10]
 8001af6:	461a      	mov	r2, r3
 8001af8:	49a3      	ldr	r1, [pc, #652]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001afa:	2007      	movs	r0, #7
 8001afc:	f004 ff2e 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001b00:	f107 030b 	add.w	r3, r7, #11
 8001b04:	2201      	movs	r2, #1
 8001b06:	4619      	mov	r1, r3
 8001b08:	2005      	movs	r0, #5
 8001b0a:	f004 ff27 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8001b0e:	4b9f      	ldr	r3, [pc, #636]	@ (8001d8c <LCD_Touch_Task+0xc14>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	4b9d      	ldr	r3, [pc, #628]	@ (8001d8c <LCD_Touch_Task+0xc14>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001b1a:	e002      	b.n	8001b22 <LCD_Touch_Task+0x9aa>
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f00e ff40 	bl	80109a2 <osDelay>
 8001b22:	f006 f975 	bl	8007e10 <TS_Touched>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d0f7      	beq.n	8001b1c <LCD_Touch_Task+0x9a4>
			}
			//---------------FEU RF---------------
			X = 150;	Y = 70;
 8001b2c:	2396      	movs	r3, #150	@ 0x96
 8001b2e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001b32:	2346      	movs	r3, #70	@ 0x46
 8001b34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen(LCD_RF_16_22_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8001b38:	4b95      	ldr	r3, [pc, #596]	@ (8001d90 <LCD_Touch_Task+0xc18>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	f040 8143 	bne.w	8001dc8 <LCD_Touch_Task+0xc50>
 8001b42:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001b46:	4b91      	ldr	r3, [pc, #580]	@ (8001d8c <LCD_Touch_Task+0xc14>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	f280 813c 	bge.w	8001dc8 <LCD_Touch_Task+0xc50>
 8001b50:	4b8e      	ldr	r3, [pc, #568]	@ (8001d8c <LCD_Touch_Task+0xc14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461d      	mov	r5, r3
 8001b56:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001b5a:	488e      	ldr	r0, [pc, #568]	@ (8001d94 <LCD_Touch_Task+0xc1c>)
 8001b5c:	f7fe fb98 	bl	8000290 <strlen>
 8001b60:	4603      	mov	r3, r0
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4423      	add	r3, r4
 8001b66:	429d      	cmp	r5, r3
 8001b68:	f080 812e 	bcs.w	8001dc8 <LCD_Touch_Task+0xc50>
 8001b6c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001b70:	4b86      	ldr	r3, [pc, #536]	@ (8001d8c <LCD_Touch_Task+0xc14>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f280 8127 	bge.w	8001dc8 <LCD_Touch_Task+0xc50>
 8001b7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b7e:	f103 020e 	add.w	r2, r3, #14
 8001b82:	4b82      	ldr	r3, [pc, #520]	@ (8001d8c <LCD_Touch_Task+0xc14>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	f2c0 811e 	blt.w	8001dc8 <LCD_Touch_Task+0xc50>
			{
				if( (MIU_FEU_MSG.PCKT_0 & RF_42_63_Bit2_3) == RF_42_63_Bit2_3)
 8001b8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001b8e:	789a      	ldrb	r2, [r3, #2]
 8001b90:	4b81      	ldr	r3, [pc, #516]	@ (8001d98 <LCD_Touch_Task+0xc20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4013      	ands	r3, r2
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b7f      	ldr	r3, [pc, #508]	@ (8001d98 <LCD_Touch_Task+0xc20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d133      	bne.n	8001c08 <LCD_Touch_Task+0xa90>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_42_63_Str,20,1);
 8001ba0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001ba4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	2314      	movs	r3, #20
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	4b7a      	ldr	r3, [pc, #488]	@ (8001d9c <LCD_Touch_Task+0xc24>)
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f004 f98c 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 8001bbc:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001bc0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	2314      	movs	r3, #20
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	4b71      	ldr	r3, [pc, #452]	@ (8001d94 <LCD_Touch_Task+0xc1c>)
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd6:	f004 f97d 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit2_3_RST, RF_16_22_Bit2_3);
 8001bda:	4b71      	ldr	r3, [pc, #452]	@ (8001da0 <LCD_Touch_Task+0xc28>)
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	4b71      	ldr	r3, [pc, #452]	@ (8001da4 <LCD_Touch_Task+0xc2c>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	4968      	ldr	r1, [pc, #416]	@ (8001d84 <LCD_Touch_Task+0xc0c>)
 8001be4:	4868      	ldr	r0, [pc, #416]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001be6:	f003 fd89 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001bea:	4b67      	ldr	r3, [pc, #412]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001bec:	7a9b      	ldrb	r3, [r3, #10]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4965      	ldr	r1, [pc, #404]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001bf2:	2007      	movs	r0, #7
 8001bf4:	f004 feb2 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001bf8:	f107 030b 	add.w	r3, r7, #11
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4619      	mov	r1, r3
 8001c00:	2005      	movs	r0, #5
 8001c02:	f004 feab 	bl	800695c <RS485_Tx>
 8001c06:	e0ae      	b.n	8001d66 <LCD_Touch_Task+0xbee>
				}
				else if( (MIU_FEU_MSG.PCKT_0 & RF_30_46_Bit2_3) == RF_30_46_Bit2_3)
 8001c08:	4b5f      	ldr	r3, [pc, #380]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001c0a:	789a      	ldrb	r2, [r3, #2]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <LCD_Touch_Task+0xc30>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4013      	ands	r3, r2
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b64      	ldr	r3, [pc, #400]	@ (8001da8 <LCD_Touch_Task+0xc30>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d133      	bne.n	8001c84 <LCD_Touch_Task+0xb0c>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_30_46_Str,20,1);
 8001c1c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001c20:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001c24:	2301      	movs	r3, #1
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	2314      	movs	r3, #20
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001dac <LCD_Touch_Task+0xc34>)
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2300      	movs	r3, #0
 8001c32:	2200      	movs	r2, #0
 8001c34:	f004 f94e 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_42_63_Str,20,1);
 8001c38:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001c3c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001c40:	2301      	movs	r3, #1
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2314      	movs	r3, #20
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	4b54      	ldr	r3, [pc, #336]	@ (8001d9c <LCD_Touch_Task+0xc24>)
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c52:	f004 f93f 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit2_3_RST, RF_42_63_Bit2_3);
 8001c56:	4b52      	ldr	r3, [pc, #328]	@ (8001da0 <LCD_Touch_Task+0xc28>)
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d98 <LCD_Touch_Task+0xc20>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4949      	ldr	r1, [pc, #292]	@ (8001d84 <LCD_Touch_Task+0xc0c>)
 8001c60:	4849      	ldr	r0, [pc, #292]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001c62:	f003 fd4b 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001c66:	4b48      	ldr	r3, [pc, #288]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001c68:	7a9b      	ldrb	r3, [r3, #10]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4946      	ldr	r1, [pc, #280]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001c6e:	2007      	movs	r0, #7
 8001c70:	f004 fe74 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001c74:	f107 030b 	add.w	r3, r7, #11
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2005      	movs	r0, #5
 8001c7e:	f004 fe6d 	bl	800695c <RS485_Tx>
 8001c82:	e070      	b.n	8001d66 <LCD_Touch_Task+0xbee>
				}
				else if( (MIU_FEU_MSG.PCKT_0 & RF_20_32_Bit2_3) == RF_20_32_Bit2_3)
 8001c84:	4b40      	ldr	r3, [pc, #256]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001c86:	789a      	ldrb	r2, [r3, #2]
 8001c88:	4b49      	ldr	r3, [pc, #292]	@ (8001db0 <LCD_Touch_Task+0xc38>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <LCD_Touch_Task+0xc38>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d133      	bne.n	8001d00 <LCD_Touch_Task+0xb88>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_20_32_Str,20,1);
 8001c98:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001c9c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	2314      	movs	r3, #20
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <LCD_Touch_Task+0xc3c>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f004 f910 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_30_46_Str,20,1);
 8001cb4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001cb8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2314      	movs	r3, #20
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	4b39      	ldr	r3, [pc, #228]	@ (8001dac <LCD_Touch_Task+0xc34>)
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cce:	f004 f901 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit2_3_RST, RF_30_46_Bit2_3);
 8001cd2:	4b33      	ldr	r3, [pc, #204]	@ (8001da0 <LCD_Touch_Task+0xc28>)
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <LCD_Touch_Task+0xc30>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	492a      	ldr	r1, [pc, #168]	@ (8001d84 <LCD_Touch_Task+0xc0c>)
 8001cdc:	482a      	ldr	r0, [pc, #168]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001cde:	f003 fd0d 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001ce2:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001ce4:	7a9b      	ldrb	r3, [r3, #10]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4927      	ldr	r1, [pc, #156]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001cea:	2007      	movs	r0, #7
 8001cec:	f004 fe36 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001cf0:	f107 030b 	add.w	r3, r7, #11
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2005      	movs	r0, #5
 8001cfa:	f004 fe2f 	bl	800695c <RS485_Tx>
 8001cfe:	e032      	b.n	8001d66 <LCD_Touch_Task+0xbee>
				}
				else //RF_16_22_Bit2_3
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 8001d00:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001d04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	2314      	movs	r3, #20
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <LCD_Touch_Task+0xc1c>)
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2300      	movs	r3, #0
 8001d16:	2200      	movs	r2, #0
 8001d18:	f004 f8dc 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_20_32_Str,20,1);
 8001d1c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001d20:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001d24:	2301      	movs	r3, #1
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2314      	movs	r3, #20
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <LCD_Touch_Task+0xc3c>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2300      	movs	r3, #0
 8001d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d36:	f004 f8cd 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit2_3_RST, RF_20_32_Bit2_3);
 8001d3a:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <LCD_Touch_Task+0xc28>)
 8001d3c:	781a      	ldrb	r2, [r3, #0]
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <LCD_Touch_Task+0xc38>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4910      	ldr	r1, [pc, #64]	@ (8001d84 <LCD_Touch_Task+0xc0c>)
 8001d44:	4810      	ldr	r0, [pc, #64]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001d46:	f003 fcd9 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001d4c:	7a9b      	ldrb	r3, [r3, #10]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	490d      	ldr	r1, [pc, #52]	@ (8001d88 <LCD_Touch_Task+0xc10>)
 8001d52:	2007      	movs	r0, #7
 8001d54:	f004 fe02 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001d58:	f107 030b 	add.w	r3, r7, #11
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2005      	movs	r0, #5
 8001d62:	f004 fdfb 	bl	800695c <RS485_Tx>
				}


				display.x=0; display.y=0;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <LCD_Touch_Task+0xc14>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <LCD_Touch_Task+0xc14>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001d72:	e024      	b.n	8001dbe <LCD_Touch_Task+0xc46>
 8001d74:	08018d2c 	.word	0x08018d2c
 8001d78:	08018d34 	.word	0x08018d34
 8001d7c:	08018dae 	.word	0x08018dae
 8001d80:	08018db0 	.word	0x08018db0
 8001d84:	20000006 	.word	0x20000006
 8001d88:	20000004 	.word	0x20000004
 8001d8c:	20026120 	.word	0x20026120
 8001d90:	20025df0 	.word	0x20025df0
 8001d94:	08018d3c 	.word	0x08018d3c
 8001d98:	08018db5 	.word	0x08018db5
 8001d9c:	08018d60 	.word	0x08018d60
 8001da0:	08018db1 	.word	0x08018db1
 8001da4:	08018db2 	.word	0x08018db2
 8001da8:	08018db4 	.word	0x08018db4
 8001dac:	08018d54 	.word	0x08018d54
 8001db0:	08018db3 	.word	0x08018db3
 8001db4:	08018d48 	.word	0x08018d48
 8001db8:	200a      	movs	r0, #10
 8001dba:	f00e fdf2 	bl	80109a2 <osDelay>
 8001dbe:	f006 f827 	bl	8007e10 <TS_Touched>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d0f7      	beq.n	8001db8 <LCD_Touch_Task+0xc40>
			}
			//---------------FEU Gain path---------------
			X = 5;	Y = 100;
 8001dc8:	2305      	movs	r3, #5
 8001dca:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001dce:	2364      	movs	r3, #100	@ 0x64
 8001dd0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen(LCD_Gain_Low_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8001dd4:	4ba8      	ldr	r3, [pc, #672]	@ (8002078 <LCD_Touch_Task+0xf00>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	f040 80a4 	bne.w	8001f26 <LCD_Touch_Task+0xdae>
 8001dde:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001de2:	4ba6      	ldr	r3, [pc, #664]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	f280 809d 	bge.w	8001f26 <LCD_Touch_Task+0xdae>
 8001dec:	4ba3      	ldr	r3, [pc, #652]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461d      	mov	r5, r3
 8001df2:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001df6:	48a2      	ldr	r0, [pc, #648]	@ (8002080 <LCD_Touch_Task+0xf08>)
 8001df8:	f7fe fa4a 	bl	8000290 <strlen>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4423      	add	r3, r4
 8001e02:	429d      	cmp	r5, r3
 8001e04:	f080 808f 	bcs.w	8001f26 <LCD_Touch_Task+0xdae>
 8001e08:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001e0c:	4b9b      	ldr	r3, [pc, #620]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f280 8088 	bge.w	8001f26 <LCD_Touch_Task+0xdae>
 8001e16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e1a:	f103 020e 	add.w	r2, r3, #14
 8001e1e:	4b97      	ldr	r3, [pc, #604]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	db7f      	blt.n	8001f26 <LCD_Touch_Task+0xdae>
			{

				if( (MIU_FEU_MSG.PCKT_0 & Gain_High_Bit4) == Gain_High_Bit4)
 8001e26:	4b97      	ldr	r3, [pc, #604]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001e28:	789a      	ldrb	r2, [r3, #2]
 8001e2a:	4b97      	ldr	r3, [pc, #604]	@ (8002088 <LCD_Touch_Task+0xf10>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b95      	ldr	r3, [pc, #596]	@ (8002088 <LCD_Touch_Task+0xf10>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d133      	bne.n	8001ea2 <LCD_Touch_Task+0xd2a>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_Gain_High_Str,20,1);
 8001e3a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001e3e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001e42:	2301      	movs	r3, #1
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	2314      	movs	r3, #20
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	4b90      	ldr	r3, [pc, #576]	@ (800208c <LCD_Touch_Task+0xf14>)
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2200      	movs	r2, #0
 8001e52:	f004 f83f 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_Gain_Low_Str,20,1);
 8001e56:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001e5a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001e5e:	2301      	movs	r3, #1
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	2314      	movs	r3, #20
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	4b86      	ldr	r3, [pc, #536]	@ (8002080 <LCD_Touch_Task+0xf08>)
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e70:	f004 f830 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, Gain_Bit4_RST, Gain_Low_Bit4);
 8001e74:	4b86      	ldr	r3, [pc, #536]	@ (8002090 <LCD_Touch_Task+0xf18>)
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	4b86      	ldr	r3, [pc, #536]	@ (8002094 <LCD_Touch_Task+0xf1c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4986      	ldr	r1, [pc, #536]	@ (8002098 <LCD_Touch_Task+0xf20>)
 8001e7e:	4881      	ldr	r0, [pc, #516]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001e80:	f003 fc3c 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001e84:	4b7f      	ldr	r3, [pc, #508]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001e86:	7a9b      	ldrb	r3, [r3, #10]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	497e      	ldr	r1, [pc, #504]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001e8c:	2007      	movs	r0, #7
 8001e8e:	f004 fd65 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001e92:	f107 030b 	add.w	r3, r7, #11
 8001e96:	2201      	movs	r2, #1
 8001e98:	4619      	mov	r1, r3
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f004 fd5e 	bl	800695c <RS485_Tx>
 8001ea0:	e032      	b.n	8001f08 <LCD_Touch_Task+0xd90>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_Gain_Low_Str,20,1);
 8001ea2:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001ea6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001eaa:	2301      	movs	r3, #1
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	2314      	movs	r3, #20
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	4b73      	ldr	r3, [pc, #460]	@ (8002080 <LCD_Touch_Task+0xf08>)
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f004 f80b 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_Gain_High_Str,20,1);
 8001ebe:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001ec2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	2314      	movs	r3, #20
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	@ (800208c <LCD_Touch_Task+0xf14>)
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed8:	f003 fffc 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, Gain_Bit4_RST, Gain_High_Bit4);
 8001edc:	4b6c      	ldr	r3, [pc, #432]	@ (8002090 <LCD_Touch_Task+0xf18>)
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	4b69      	ldr	r3, [pc, #420]	@ (8002088 <LCD_Touch_Task+0xf10>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	496c      	ldr	r1, [pc, #432]	@ (8002098 <LCD_Touch_Task+0xf20>)
 8001ee6:	4867      	ldr	r0, [pc, #412]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001ee8:	f003 fc08 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001eec:	4b65      	ldr	r3, [pc, #404]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001eee:	7a9b      	ldrb	r3, [r3, #10]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4964      	ldr	r1, [pc, #400]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001ef4:	2007      	movs	r0, #7
 8001ef6:	f004 fd31 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001efa:	f107 030b 	add.w	r3, r7, #11
 8001efe:	2201      	movs	r2, #1
 8001f00:	4619      	mov	r1, r3
 8001f02:	2005      	movs	r0, #5
 8001f04:	f004 fd2a 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8001f08:	4b5c      	ldr	r3, [pc, #368]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001f14:	e002      	b.n	8001f1c <LCD_Touch_Task+0xda4>
 8001f16:	200a      	movs	r0, #10
 8001f18:	f00e fd43 	bl	80109a2 <osDelay>
 8001f1c:	f005 ff78 	bl	8007e10 <TS_Touched>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d0f7      	beq.n	8001f16 <LCD_Touch_Task+0xd9e>
			}
			//---------------FEU RF Power---------------
			X = 150;	Y = 100;
 8001f26:	2396      	movs	r3, #150	@ 0x96
 8001f28:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001f2c:	2364      	movs	r3, #100	@ 0x64
 8001f2e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen(LCD_RX1_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8001f32:	4b51      	ldr	r3, [pc, #324]	@ (8002078 <LCD_Touch_Task+0xf00>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	f040 80c4 	bne.w	80020c4 <LCD_Touch_Task+0xf4c>
 8001f3c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001f40:	4b4e      	ldr	r3, [pc, #312]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f280 80bd 	bge.w	80020c4 <LCD_Touch_Task+0xf4c>
 8001f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461d      	mov	r5, r3
 8001f50:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001f54:	4851      	ldr	r0, [pc, #324]	@ (800209c <LCD_Touch_Task+0xf24>)
 8001f56:	f7fe f99b 	bl	8000290 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4423      	add	r3, r4
 8001f60:	429d      	cmp	r5, r3
 8001f62:	f080 80af 	bcs.w	80020c4 <LCD_Touch_Task+0xf4c>
 8001f66:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	f280 80a8 	bge.w	80020c4 <LCD_Touch_Task+0xf4c>
 8001f74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f78:	f103 020e 	add.w	r2, r3, #14
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800207c <LCD_Touch_Task+0xf04>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f2c0 809f 	blt.w	80020c4 <LCD_Touch_Task+0xf4c>
			{

				if( (MIU_FEU_MSG.PCKT_0 & RF_ON_Bit5) == RF_ON_Bit5)
 8001f86:	4b3f      	ldr	r3, [pc, #252]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001f88:	789a      	ldrb	r2, [r3, #2]
 8001f8a:	4b45      	ldr	r3, [pc, #276]	@ (80020a0 <LCD_Touch_Task+0xf28>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <LCD_Touch_Task+0xf28>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d133      	bne.n	8002002 <LCD_Touch_Task+0xe8a>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_ON_Str,20,1);
 8001f9a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001f9e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2314      	movs	r3, #20
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <LCD_Touch_Task+0xf2c>)
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f003 ff8f 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8001fb6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001fba:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9302      	str	r3, [sp, #8]
 8001fc2:	2314      	movs	r3, #20
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <LCD_Touch_Task+0xf30>)
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fd0:	f003 ff80 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit5_RST, RF_OFF_Bit5);
 8001fd4:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <LCD_Touch_Task+0xf34>)
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	4b35      	ldr	r3, [pc, #212]	@ (80020b0 <LCD_Touch_Task+0xf38>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	492e      	ldr	r1, [pc, #184]	@ (8002098 <LCD_Touch_Task+0xf20>)
 8001fde:	4829      	ldr	r0, [pc, #164]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001fe0:	f003 fb8c 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001fe4:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001fe6:	7a9b      	ldrb	r3, [r3, #10]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4926      	ldr	r1, [pc, #152]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8001fec:	2007      	movs	r0, #7
 8001fee:	f004 fcb5 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8001ff2:	f107 030b 	add.w	r3, r7, #11
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	2005      	movs	r0, #5
 8001ffc:	f004 fcae 	bl	800695c <RS485_Tx>
 8002000:	e032      	b.n	8002068 <LCD_Touch_Task+0xef0>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8002002:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002006:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800200a:	2301      	movs	r3, #1
 800200c:	9302      	str	r3, [sp, #8]
 800200e:	2314      	movs	r3, #20
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <LCD_Touch_Task+0xf30>)
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	2200      	movs	r2, #0
 800201a:	f003 ff5b 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_ON_Str,20,1);
 800201e:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002022:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002026:	2301      	movs	r3, #1
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	2314      	movs	r3, #20
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <LCD_Touch_Task+0xf2c>)
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002038:	f003 ff4c 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit5_RST, RF_ON_Bit5);
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <LCD_Touch_Task+0xf34>)
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	4b17      	ldr	r3, [pc, #92]	@ (80020a0 <LCD_Touch_Task+0xf28>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4914      	ldr	r1, [pc, #80]	@ (8002098 <LCD_Touch_Task+0xf20>)
 8002046:	480f      	ldr	r0, [pc, #60]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8002048:	f003 fb58 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 800204c:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 800204e:	7a9b      	ldrb	r3, [r3, #10]
 8002050:	461a      	mov	r2, r3
 8002052:	490c      	ldr	r1, [pc, #48]	@ (8002084 <LCD_Touch_Task+0xf0c>)
 8002054:	2007      	movs	r0, #7
 8002056:	f004 fc81 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 800205a:	f107 030b 	add.w	r3, r7, #11
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	2005      	movs	r0, #5
 8002064:	f004 fc7a 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8002068:	4b04      	ldr	r3, [pc, #16]	@ (800207c <LCD_Touch_Task+0xf04>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	4b03      	ldr	r3, [pc, #12]	@ (800207c <LCD_Touch_Task+0xf04>)
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002074:	e021      	b.n	80020ba <LCD_Touch_Task+0xf42>
 8002076:	bf00      	nop
 8002078:	20025df0 	.word	0x20025df0
 800207c:	20026120 	.word	0x20026120
 8002080:	08018d6c 	.word	0x08018d6c
 8002084:	20000004 	.word	0x20000004
 8002088:	08018db8 	.word	0x08018db8
 800208c:	08018d7c 	.word	0x08018d7c
 8002090:	08018db6 	.word	0x08018db6
 8002094:	08018db7 	.word	0x08018db7
 8002098:	20000006 	.word	0x20000006
 800209c:	08018d1c 	.word	0x08018d1c
 80020a0:	08018dbb 	.word	0x08018dbb
 80020a4:	08018d94 	.word	0x08018d94
 80020a8:	08018d8c 	.word	0x08018d8c
 80020ac:	08018db9 	.word	0x08018db9
 80020b0:	08018dba 	.word	0x08018dba
 80020b4:	200a      	movs	r0, #10
 80020b6:	f00e fc74 	bl	80109a2 <osDelay>
 80020ba:	f005 fea9 	bl	8007e10 <TS_Touched>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d0f7      	beq.n	80020b4 <LCD_Touch_Task+0xf3c>
			}
			//---------------FEU Atten---------------
			X = 5+(strlen("Atten: ")*8);	Y = 130;
 80020c4:	233d      	movs	r3, #61	@ 0x3d
 80020c6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80020ca:	2382      	movs	r3, #130	@ 0x82
 80020cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen("-")*8)) && (Y<display.y && display.y<Y+15) )
 80020d0:	4ba2      	ldr	r3, [pc, #648]	@ (800235c <LCD_Touch_Task+0x11e4>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	f040 809e 	bne.w	8002216 <LCD_Touch_Task+0x109e>
 80020da:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80020de:	4ba0      	ldr	r3, [pc, #640]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	f280 8097 	bge.w	8002216 <LCD_Touch_Task+0x109e>
 80020e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80020f2:	3308      	adds	r3, #8
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f080 808e 	bcs.w	8002216 <LCD_Touch_Task+0x109e>
 80020fa:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80020fe:	4b98      	ldr	r3, [pc, #608]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	f280 8087 	bge.w	8002216 <LCD_Touch_Task+0x109e>
 8002108:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800210c:	f103 020e 	add.w	r2, r3, #14
 8002110:	4b93      	ldr	r3, [pc, #588]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	db7e      	blt.n	8002216 <LCD_Touch_Task+0x109e>
			{
				if(FEU_Atten_Bit0_5 > 0)
 8002118:	4b92      	ldr	r3, [pc, #584]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d06b      	beq.n	80021f8 <LCD_Touch_Task+0x1080>
				{
					X = 5+(strlen("Atten: -")*8);
 8002120:	2345      	movs	r3, #69	@ 0x45
 8002122:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					sprintf(Str, "%.1f", ((float)FEU_Atten_Bit0_5/2));
 8002126:	4b8f      	ldr	r3, [pc, #572]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002132:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002136:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800213a:	ee16 0a90 	vmov	r0, s13
 800213e:	f7fe fa13 	bl	8000568 <__aeabi_f2d>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	f107 000c 	add.w	r0, r7, #12
 800214a:	4987      	ldr	r1, [pc, #540]	@ (8002368 <LCD_Touch_Task+0x11f0>)
 800214c:	f014 faf8 	bl	8016740 <siprintf>
					Show_Str(X+2, Y, BLACK, BLACK, (u8 *)Str,20,1);
 8002150:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002154:	3302      	adds	r3, #2
 8002156:	b298      	uxth	r0, r3
 8002158:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800215c:	2301      	movs	r3, #1
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	2314      	movs	r3, #20
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	f003 feb1 	bl	8005ed4 <Show_Str>
					FEU_Atten_Bit0_5--;
 8002172:	4b7c      	ldr	r3, [pc, #496]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	3b01      	subs	r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b7a      	ldr	r3, [pc, #488]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 800217c:	701a      	strb	r2, [r3, #0]
					sprintf(Str, "%.1f", ((float)FEU_Atten_Bit0_5/2));
 800217e:	4b79      	ldr	r3, [pc, #484]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800218a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800218e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002192:	ee16 0a90 	vmov	r0, s13
 8002196:	f7fe f9e7 	bl	8000568 <__aeabi_f2d>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	f107 000c 	add.w	r0, r7, #12
 80021a2:	4971      	ldr	r1, [pc, #452]	@ (8002368 <LCD_Touch_Task+0x11f0>)
 80021a4:	f014 facc 	bl	8016740 <siprintf>
					Show_Str(X+2, Y, WHITE, BLACK, (u8 *)Str,20,1);
 80021a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021ac:	3302      	adds	r3, #2
 80021ae:	b298      	uxth	r0, r3
 80021b0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80021b4:	2301      	movs	r3, #1
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	2314      	movs	r3, #20
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c8:	f003 fe84 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_1, Atten_Bit0_5_RST, FEU_Atten_Bit0_5);
 80021cc:	4b67      	ldr	r3, [pc, #412]	@ (800236c <LCD_Touch_Task+0x11f4>)
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	4b64      	ldr	r3, [pc, #400]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4966      	ldr	r1, [pc, #408]	@ (8002370 <LCD_Touch_Task+0x11f8>)
 80021d6:	4867      	ldr	r0, [pc, #412]	@ (8002374 <LCD_Touch_Task+0x11fc>)
 80021d8:	f003 fa90 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 80021dc:	4b65      	ldr	r3, [pc, #404]	@ (8002374 <LCD_Touch_Task+0x11fc>)
 80021de:	7a9b      	ldrb	r3, [r3, #10]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4964      	ldr	r1, [pc, #400]	@ (8002374 <LCD_Touch_Task+0x11fc>)
 80021e4:	2007      	movs	r0, #7
 80021e6:	f004 fbb9 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 80021ea:	f107 030b 	add.w	r3, r7, #11
 80021ee:	2201      	movs	r2, #1
 80021f0:	4619      	mov	r1, r3
 80021f2:	2005      	movs	r0, #5
 80021f4:	f004 fbb2 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 80021f8:	4b59      	ldr	r3, [pc, #356]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	4b58      	ldr	r3, [pc, #352]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002204:	e002      	b.n	800220c <LCD_Touch_Task+0x1094>
 8002206:	200a      	movs	r0, #10
 8002208:	f00e fbcb 	bl	80109a2 <osDelay>
 800220c:	f005 fe00 	bl	8007e10 <TS_Touched>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d0f7      	beq.n	8002206 <LCD_Touch_Task+0x108e>
			}
			//----------
			X = 5+(strlen("Atten: -     ")*8);	Y = 130;
 8002216:	236d      	movs	r3, #109	@ 0x6d
 8002218:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800221c:	2382      	movs	r3, #130	@ 0x82
 800221e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen("+")*8)) && (Y<display.y && display.y<Y+15) )
 8002222:	4b4e      	ldr	r3, [pc, #312]	@ (800235c <LCD_Touch_Task+0x11e4>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	f040 80ae 	bne.w	8002388 <LCD_Touch_Task+0x1210>
 800222c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002230:	4b4b      	ldr	r3, [pc, #300]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	f280 80a7 	bge.w	8002388 <LCD_Touch_Task+0x1210>
 800223a:	4b49      	ldr	r3, [pc, #292]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002244:	3308      	adds	r3, #8
 8002246:	429a      	cmp	r2, r3
 8002248:	f080 809e 	bcs.w	8002388 <LCD_Touch_Task+0x1210>
 800224c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002250:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	f280 8097 	bge.w	8002388 <LCD_Touch_Task+0x1210>
 800225a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800225e:	f103 020e 	add.w	r2, r3, #14
 8002262:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	f2c0 808e 	blt.w	8002388 <LCD_Touch_Task+0x1210>
			{
				if(FEU_Atten_Bit0_5 < 63)
 800226c:	4b3d      	ldr	r3, [pc, #244]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b3e      	cmp	r3, #62	@ 0x3e
 8002272:	d86b      	bhi.n	800234c <LCD_Touch_Task+0x11d4>
				{
					X = 5+(strlen("Atten: -")*8);
 8002274:	2345      	movs	r3, #69	@ 0x45
 8002276:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					sprintf(Str, "%.1f", ((float)FEU_Atten_Bit0_5/2));
 800227a:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800228a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800228e:	ee16 0a90 	vmov	r0, s13
 8002292:	f7fe f969 	bl	8000568 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	f107 000c 	add.w	r0, r7, #12
 800229e:	4932      	ldr	r1, [pc, #200]	@ (8002368 <LCD_Touch_Task+0x11f0>)
 80022a0:	f014 fa4e 	bl	8016740 <siprintf>
					Show_Str(X+2, Y, BLACK, BLACK, (u8 *)Str,20,1);
 80022a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80022a8:	3302      	adds	r3, #2
 80022aa:	b298      	uxth	r0, r3
 80022ac:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80022b0:	2301      	movs	r3, #1
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	2314      	movs	r3, #20
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	2200      	movs	r2, #0
 80022c2:	f003 fe07 	bl	8005ed4 <Show_Str>
					FEU_Atten_Bit0_5++;
 80022c6:	4b27      	ldr	r3, [pc, #156]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 80022d0:	701a      	strb	r2, [r3, #0]
					sprintf(Str, "%.1f", ((float)FEU_Atten_Bit0_5/2));
 80022d2:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022de:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80022e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022e6:	ee16 0a90 	vmov	r0, s13
 80022ea:	f7fe f93d 	bl	8000568 <__aeabi_f2d>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	f107 000c 	add.w	r0, r7, #12
 80022f6:	491c      	ldr	r1, [pc, #112]	@ (8002368 <LCD_Touch_Task+0x11f0>)
 80022f8:	f014 fa22 	bl	8016740 <siprintf>
					Show_Str(X+2, Y, WHITE, BLACK, (u8 *)Str,20,1);
 80022fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002300:	3302      	adds	r3, #2
 8002302:	b298      	uxth	r0, r3
 8002304:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002308:	2301      	movs	r3, #1
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2314      	movs	r3, #20
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2300      	movs	r3, #0
 8002318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800231c:	f003 fdda 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_1, Atten_Bit0_5_RST, FEU_Atten_Bit0_5);
 8002320:	4b12      	ldr	r3, [pc, #72]	@ (800236c <LCD_Touch_Task+0x11f4>)
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <LCD_Touch_Task+0x11ec>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4911      	ldr	r1, [pc, #68]	@ (8002370 <LCD_Touch_Task+0x11f8>)
 800232a:	4812      	ldr	r0, [pc, #72]	@ (8002374 <LCD_Touch_Task+0x11fc>)
 800232c:	f003 f9e6 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8002330:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <LCD_Touch_Task+0x11fc>)
 8002332:	7a9b      	ldrb	r3, [r3, #10]
 8002334:	461a      	mov	r2, r3
 8002336:	490f      	ldr	r1, [pc, #60]	@ (8002374 <LCD_Touch_Task+0x11fc>)
 8002338:	2007      	movs	r0, #7
 800233a:	f004 fb0f 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 800233e:	f107 030b 	add.w	r3, r7, #11
 8002342:	2201      	movs	r2, #1
 8002344:	4619      	mov	r1, r3
 8002346:	2005      	movs	r0, #5
 8002348:	f004 fb08 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 800234c:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	4b03      	ldr	r3, [pc, #12]	@ (8002360 <LCD_Touch_Task+0x11e8>)
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002358:	e011      	b.n	800237e <LCD_Touch_Task+0x1206>
 800235a:	bf00      	nop
 800235c:	20025df0 	.word	0x20025df0
 8002360:	20026120 	.word	0x20026120
 8002364:	20025df1 	.word	0x20025df1
 8002368:	08018a90 	.word	0x08018a90
 800236c:	08018dbc 	.word	0x08018dbc
 8002370:	20000007 	.word	0x20000007
 8002374:	20000004 	.word	0x20000004
 8002378:	200a      	movs	r0, #10
 800237a:	f00e fb12 	bl	80109a2 <osDelay>
 800237e:	f005 fd47 	bl	8007e10 <TS_Touched>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d0f7      	beq.n	8002378 <LCD_Touch_Task+0x1200>
			}
			//---------------FEU Back to Modules select---------------
			X = 5;	Y = 300;
 8002388:	2305      	movs	r3, #5
 800238a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800238e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002392:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == FEU_Page) && (X<display.x && display.x<X+(strlen(LCD_Back_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8002396:	4ba8      	ldr	r3, [pc, #672]	@ (8002638 <LCD_Touch_Task+0x14c0>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d15d      	bne.n	800245a <LCD_Touch_Task+0x12e2>
 800239e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80023a2:	4ba6      	ldr	r3, [pc, #664]	@ (800263c <LCD_Touch_Task+0x14c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	da57      	bge.n	800245a <LCD_Touch_Task+0x12e2>
 80023aa:	4ba4      	ldr	r3, [pc, #656]	@ (800263c <LCD_Touch_Task+0x14c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461d      	mov	r5, r3
 80023b0:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 80023b4:	48a2      	ldr	r0, [pc, #648]	@ (8002640 <LCD_Touch_Task+0x14c8>)
 80023b6:	f7fd ff6b 	bl	8000290 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4423      	add	r3, r4
 80023c0:	429d      	cmp	r5, r3
 80023c2:	d24a      	bcs.n	800245a <LCD_Touch_Task+0x12e2>
 80023c4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80023c8:	4b9c      	ldr	r3, [pc, #624]	@ (800263c <LCD_Touch_Task+0x14c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	da44      	bge.n	800245a <LCD_Touch_Task+0x12e2>
 80023d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023d4:	f103 020e 	add.w	r2, r3, #14
 80023d8:	4b98      	ldr	r3, [pc, #608]	@ (800263c <LCD_Touch_Task+0x14c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	db3c      	blt.n	800245a <LCD_Touch_Task+0x12e2>
			{
				LCD_Page = Modules_Page;
 80023e0:	4b95      	ldr	r3, [pc, #596]	@ (8002638 <LCD_Touch_Task+0x14c0>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
				LCD_Clear(BLACK);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f004 ff52 	bl	8007290 <LCD_Clear>
				Show_Str(80, 100, WHITE, BLACK, (u8 *)LCD_FEU_Str,20,1);
 80023ec:	2301      	movs	r3, #1
 80023ee:	9302      	str	r3, [sp, #8]
 80023f0:	2314      	movs	r3, #20
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	4b93      	ldr	r3, [pc, #588]	@ (8002644 <LCD_Touch_Task+0x14cc>)
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023fe:	2164      	movs	r1, #100	@ 0x64
 8002400:	2050      	movs	r0, #80	@ 0x50
 8002402:	f003 fd67 	bl	8005ed4 <Show_Str>
				Show_Str(80, 140, WHITE, BLACK, (u8 *)LCD_IJU_Str,20,1);
 8002406:	2301      	movs	r3, #1
 8002408:	9302      	str	r3, [sp, #8]
 800240a:	2314      	movs	r3, #20
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	4b8e      	ldr	r3, [pc, #568]	@ (8002648 <LCD_Touch_Task+0x14d0>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2300      	movs	r3, #0
 8002414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002418:	218c      	movs	r1, #140	@ 0x8c
 800241a:	2050      	movs	r0, #80	@ 0x50
 800241c:	f003 fd5a 	bl	8005ed4 <Show_Str>
				Show_Str(5, 300, GBLUE, BLACK, (u8 *)LCD_Back_Str,20,1);
 8002420:	2301      	movs	r3, #1
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	2314      	movs	r3, #20
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	4b85      	ldr	r3, [pc, #532]	@ (8002640 <LCD_Touch_Task+0x14c8>)
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2300      	movs	r3, #0
 800242e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002432:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002436:	2005      	movs	r0, #5
 8002438:	f003 fd4c 	bl	8005ed4 <Show_Str>

				display.x=0; display.y=0;
 800243c:	4b7f      	ldr	r3, [pc, #508]	@ (800263c <LCD_Touch_Task+0x14c4>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	4b7e      	ldr	r3, [pc, #504]	@ (800263c <LCD_Touch_Task+0x14c4>)
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002448:	e002      	b.n	8002450 <LCD_Touch_Task+0x12d8>
 800244a:	200a      	movs	r0, #10
 800244c:	f00e faa9 	bl	80109a2 <osDelay>
 8002450:	f005 fcde 	bl	8007e10 <TS_Touched>
 8002454:	4603      	mov	r3, r0
 8002456:	2b01      	cmp	r3, #1
 8002458:	d0f7      	beq.n	800244a <LCD_Touch_Task+0x12d2>
			}
			//---------------IJU Power Supply---------------
			X = 5;	Y = 40;
 800245a:	2305      	movs	r3, #5
 800245c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002460:	2328      	movs	r3, #40	@ 0x28
 8002462:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == IJU_Page) && (X<display.x && display.x<X+(strlen(LCD_PowerSupply_ON_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8002466:	4b74      	ldr	r3, [pc, #464]	@ (8002638 <LCD_Touch_Task+0x14c0>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d175      	bne.n	800255a <LCD_Touch_Task+0x13e2>
 800246e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002472:	4b72      	ldr	r3, [pc, #456]	@ (800263c <LCD_Touch_Task+0x14c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	da6f      	bge.n	800255a <LCD_Touch_Task+0x13e2>
 800247a:	4b70      	ldr	r3, [pc, #448]	@ (800263c <LCD_Touch_Task+0x14c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461d      	mov	r5, r3
 8002480:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8002484:	4871      	ldr	r0, [pc, #452]	@ (800264c <LCD_Touch_Task+0x14d4>)
 8002486:	f7fd ff03 	bl	8000290 <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4423      	add	r3, r4
 8002490:	429d      	cmp	r5, r3
 8002492:	d262      	bcs.n	800255a <LCD_Touch_Task+0x13e2>
 8002494:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002498:	4b68      	ldr	r3, [pc, #416]	@ (800263c <LCD_Touch_Task+0x14c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	da5c      	bge.n	800255a <LCD_Touch_Task+0x13e2>
 80024a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024a4:	f103 020e 	add.w	r2, r3, #14
 80024a8:	4b64      	ldr	r3, [pc, #400]	@ (800263c <LCD_Touch_Task+0x14c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	db54      	blt.n	800255a <LCD_Touch_Task+0x13e2>
			{

				if( Power27V_Status() == 0)
 80024b0:	f003 f916 	bl	80056e0 <Power27V_Status>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d120      	bne.n	80024fc <LCD_Touch_Task+0x1384>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_PowerSupply_OFF_Str,20,1);
 80024ba:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80024be:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80024c2:	2301      	movs	r3, #1
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	2314      	movs	r3, #20
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	4b61      	ldr	r3, [pc, #388]	@ (8002650 <LCD_Touch_Task+0x14d8>)
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2300      	movs	r3, #0
 80024d0:	2200      	movs	r2, #0
 80024d2:	f003 fcff 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_PowerSupply_ON_Str,20,1);
 80024d6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80024da:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80024de:	2301      	movs	r3, #1
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	2314      	movs	r3, #20
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	4b59      	ldr	r3, [pc, #356]	@ (800264c <LCD_Touch_Task+0x14d4>)
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2300      	movs	r3, #0
 80024ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024f0:	f003 fcf0 	bl	8005ed4 <Show_Str>
					Power27V_Switch(1);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f003 f8d9 	bl	80056ac <Power27V_Switch>
 80024fa:	e01f      	b.n	800253c <LCD_Touch_Task+0x13c4>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_PowerSupply_ON_Str,20,1);
 80024fc:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002500:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002504:	2301      	movs	r3, #1
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	2314      	movs	r3, #20
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	4b4f      	ldr	r3, [pc, #316]	@ (800264c <LCD_Touch_Task+0x14d4>)
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2300      	movs	r3, #0
 8002512:	2200      	movs	r2, #0
 8002514:	f003 fcde 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_PowerSupply_OFF_Str,20,1);
 8002518:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800251c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002520:	2301      	movs	r3, #1
 8002522:	9302      	str	r3, [sp, #8]
 8002524:	2314      	movs	r3, #20
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	4b49      	ldr	r3, [pc, #292]	@ (8002650 <LCD_Touch_Task+0x14d8>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2300      	movs	r3, #0
 800252e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002532:	f003 fccf 	bl	8005ed4 <Show_Str>
					Power27V_Switch(0);
 8002536:	2000      	movs	r0, #0
 8002538:	f003 f8b8 	bl	80056ac <Power27V_Switch>
				}

				display.x=0; display.y=0;
 800253c:	4b3f      	ldr	r3, [pc, #252]	@ (800263c <LCD_Touch_Task+0x14c4>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <LCD_Touch_Task+0x14c4>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002548:	e002      	b.n	8002550 <LCD_Touch_Task+0x13d8>
 800254a:	200a      	movs	r0, #10
 800254c:	f00e fa29 	bl	80109a2 <osDelay>
 8002550:	f005 fc5e 	bl	8007e10 <TS_Touched>
 8002554:	4603      	mov	r3, r0
 8002556:	2b01      	cmp	r3, #1
 8002558:	d0f7      	beq.n	800254a <LCD_Touch_Task+0x13d2>
			}
			//---------------IJU INJ---------------
			X = 5;	Y = 70;
 800255a:	2305      	movs	r3, #5
 800255c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002560:	2346      	movs	r3, #70	@ 0x46
 8002562:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == IJU_Page) && (X<display.x && display.x<X+(strlen(LCD_INJ_ON_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8002566:	4b34      	ldr	r3, [pc, #208]	@ (8002638 <LCD_Touch_Task+0x14c0>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b03      	cmp	r3, #3
 800256c:	f040 80c2 	bne.w	80026f4 <LCD_Touch_Task+0x157c>
 8002570:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002574:	4b31      	ldr	r3, [pc, #196]	@ (800263c <LCD_Touch_Task+0x14c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	f280 80bb 	bge.w	80026f4 <LCD_Touch_Task+0x157c>
 800257e:	4b2f      	ldr	r3, [pc, #188]	@ (800263c <LCD_Touch_Task+0x14c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	461d      	mov	r5, r3
 8002584:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8002588:	4832      	ldr	r0, [pc, #200]	@ (8002654 <LCD_Touch_Task+0x14dc>)
 800258a:	f7fd fe81 	bl	8000290 <strlen>
 800258e:	4603      	mov	r3, r0
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4423      	add	r3, r4
 8002594:	429d      	cmp	r5, r3
 8002596:	f080 80ad 	bcs.w	80026f4 <LCD_Touch_Task+0x157c>
 800259a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800259e:	4b27      	ldr	r3, [pc, #156]	@ (800263c <LCD_Touch_Task+0x14c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	f280 80a6 	bge.w	80026f4 <LCD_Touch_Task+0x157c>
 80025a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025ac:	f103 020e 	add.w	r2, r3, #14
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <LCD_Touch_Task+0x14c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	f2c0 809d 	blt.w	80026f4 <LCD_Touch_Task+0x157c>
			{

				if( (MIU_IJU_MSG.PCKT_0 & INJ_ON_Bit1) == INJ_ON_Bit1)
 80025ba:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <LCD_Touch_Task+0x14e0>)
 80025bc:	789a      	ldrb	r2, [r3, #2]
 80025be:	4b27      	ldr	r3, [pc, #156]	@ (800265c <LCD_Touch_Task+0x14e4>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4013      	ands	r3, r2
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <LCD_Touch_Task+0x14e4>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d150      	bne.n	8002670 <LCD_Touch_Task+0x14f8>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_INJ_ON_Str,20,1);
 80025ce:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80025d2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80025d6:	2301      	movs	r3, #1
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2314      	movs	r3, #20
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	4b1d      	ldr	r3, [pc, #116]	@ (8002654 <LCD_Touch_Task+0x14dc>)
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2300      	movs	r3, #0
 80025e4:	2200      	movs	r2, #0
 80025e6:	f003 fc75 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 80025ea:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80025ee:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80025f2:	2301      	movs	r3, #1
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	2314      	movs	r3, #20
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <LCD_Touch_Task+0x14e8>)
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002604:	f003 fc66 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, INJ_Bit1_RST, INJ_OFF_Bit1);
 8002608:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <LCD_Touch_Task+0x14ec>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <LCD_Touch_Task+0x14f0>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4916      	ldr	r1, [pc, #88]	@ (800266c <LCD_Touch_Task+0x14f4>)
 8002612:	4811      	ldr	r0, [pc, #68]	@ (8002658 <LCD_Touch_Task+0x14e0>)
 8002614:	f003 f872 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002618:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <LCD_Touch_Task+0x14e0>)
 800261a:	7a9b      	ldrb	r3, [r3, #10]
 800261c:	461a      	mov	r2, r3
 800261e:	490e      	ldr	r1, [pc, #56]	@ (8002658 <LCD_Touch_Task+0x14e0>)
 8002620:	2007      	movs	r0, #7
 8002622:	f004 f99b 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8002626:	f107 030b 	add.w	r3, r7, #11
 800262a:	2201      	movs	r2, #1
 800262c:	4619      	mov	r1, r3
 800262e:	2005      	movs	r0, #5
 8002630:	f004 f994 	bl	800695c <RS485_Tx>
 8002634:	e04f      	b.n	80026d6 <LCD_Touch_Task+0x155e>
 8002636:	bf00      	nop
 8002638:	20025df0 	.word	0x20025df0
 800263c:	20026120 	.word	0x20026120
 8002640:	08018cb0 	.word	0x08018cb0
 8002644:	08018ce0 	.word	0x08018ce0
 8002648:	08018cec 	.word	0x08018cec
 800264c:	08018d0c 	.word	0x08018d0c
 8002650:	08018cf8 	.word	0x08018cf8
 8002654:	08018d34 	.word	0x08018d34
 8002658:	20000014 	.word	0x20000014
 800265c:	08018db0 	.word	0x08018db0
 8002660:	08018d2c 	.word	0x08018d2c
 8002664:	08018dae 	.word	0x08018dae
 8002668:	08018daf 	.word	0x08018daf
 800266c:	20000016 	.word	0x20000016
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 8002670:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002674:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002678:	2301      	movs	r3, #1
 800267a:	9302      	str	r3, [sp, #8]
 800267c:	2314      	movs	r3, #20
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	4bae      	ldr	r3, [pc, #696]	@ (800293c <LCD_Touch_Task+0x17c4>)
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2300      	movs	r3, #0
 8002686:	2200      	movs	r2, #0
 8002688:	f003 fc24 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_INJ_ON_Str,20,1);
 800268c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002690:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002694:	2301      	movs	r3, #1
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	2314      	movs	r3, #20
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	4ba8      	ldr	r3, [pc, #672]	@ (8002940 <LCD_Touch_Task+0x17c8>)
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2300      	movs	r3, #0
 80026a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a6:	f003 fc15 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, INJ_Bit1_RST, INJ_ON_Bit1);
 80026aa:	4ba6      	ldr	r3, [pc, #664]	@ (8002944 <LCD_Touch_Task+0x17cc>)
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	4ba6      	ldr	r3, [pc, #664]	@ (8002948 <LCD_Touch_Task+0x17d0>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	49a6      	ldr	r1, [pc, #664]	@ (800294c <LCD_Touch_Task+0x17d4>)
 80026b4:	48a6      	ldr	r0, [pc, #664]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80026b6:	f003 f821 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 80026ba:	4ba5      	ldr	r3, [pc, #660]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80026bc:	7a9b      	ldrb	r3, [r3, #10]
 80026be:	461a      	mov	r2, r3
 80026c0:	49a3      	ldr	r1, [pc, #652]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80026c2:	2007      	movs	r0, #7
 80026c4:	f004 f94a 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 80026c8:	f107 030b 	add.w	r3, r7, #11
 80026cc:	2201      	movs	r2, #1
 80026ce:	4619      	mov	r1, r3
 80026d0:	2005      	movs	r0, #5
 80026d2:	f004 f943 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 80026d6:	4b9f      	ldr	r3, [pc, #636]	@ (8002954 <LCD_Touch_Task+0x17dc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	4b9d      	ldr	r3, [pc, #628]	@ (8002954 <LCD_Touch_Task+0x17dc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 80026e2:	e002      	b.n	80026ea <LCD_Touch_Task+0x1572>
 80026e4:	200a      	movs	r0, #10
 80026e6:	f00e f95c 	bl	80109a2 <osDelay>
 80026ea:	f005 fb91 	bl	8007e10 <TS_Touched>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d0f7      	beq.n	80026e4 <LCD_Touch_Task+0x156c>
			}
			//---------------IJU RF---------------
			X = 95;	Y = 70;
 80026f4:	235f      	movs	r3, #95	@ 0x5f
 80026f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80026fa:	2346      	movs	r3, #70	@ 0x46
 80026fc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == IJU_Page) && (X<display.x && display.x<X+(strlen(LCD_RF_16_22_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8002700:	4b95      	ldr	r3, [pc, #596]	@ (8002958 <LCD_Touch_Task+0x17e0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b03      	cmp	r3, #3
 8002706:	f040 8143 	bne.w	8002990 <LCD_Touch_Task+0x1818>
 800270a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800270e:	4b91      	ldr	r3, [pc, #580]	@ (8002954 <LCD_Touch_Task+0x17dc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	f280 813c 	bge.w	8002990 <LCD_Touch_Task+0x1818>
 8002718:	4b8e      	ldr	r3, [pc, #568]	@ (8002954 <LCD_Touch_Task+0x17dc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461d      	mov	r5, r3
 800271e:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8002722:	488e      	ldr	r0, [pc, #568]	@ (800295c <LCD_Touch_Task+0x17e4>)
 8002724:	f7fd fdb4 	bl	8000290 <strlen>
 8002728:	4603      	mov	r3, r0
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4423      	add	r3, r4
 800272e:	429d      	cmp	r5, r3
 8002730:	f080 812e 	bcs.w	8002990 <LCD_Touch_Task+0x1818>
 8002734:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002738:	4b86      	ldr	r3, [pc, #536]	@ (8002954 <LCD_Touch_Task+0x17dc>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	f280 8127 	bge.w	8002990 <LCD_Touch_Task+0x1818>
 8002742:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002746:	f103 020e 	add.w	r2, r3, #14
 800274a:	4b82      	ldr	r3, [pc, #520]	@ (8002954 <LCD_Touch_Task+0x17dc>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	f2c0 811e 	blt.w	8002990 <LCD_Touch_Task+0x1818>
			{
				if( (MIU_IJU_MSG.PCKT_0 & RF_42_63_Bit2_3) == RF_42_63_Bit2_3)
 8002754:	4b7e      	ldr	r3, [pc, #504]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 8002756:	789a      	ldrb	r2, [r3, #2]
 8002758:	4b81      	ldr	r3, [pc, #516]	@ (8002960 <LCD_Touch_Task+0x17e8>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4013      	ands	r3, r2
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b7f      	ldr	r3, [pc, #508]	@ (8002960 <LCD_Touch_Task+0x17e8>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d133      	bne.n	80027d0 <LCD_Touch_Task+0x1658>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_42_63_Str,20,1);
 8002768:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800276c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002770:	2301      	movs	r3, #1
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	2314      	movs	r3, #20
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	4b7a      	ldr	r3, [pc, #488]	@ (8002964 <LCD_Touch_Task+0x17ec>)
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2300      	movs	r3, #0
 800277e:	2200      	movs	r2, #0
 8002780:	f003 fba8 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 8002784:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002788:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800278c:	2301      	movs	r3, #1
 800278e:	9302      	str	r3, [sp, #8]
 8002790:	2314      	movs	r3, #20
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	4b71      	ldr	r3, [pc, #452]	@ (800295c <LCD_Touch_Task+0x17e4>)
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2300      	movs	r3, #0
 800279a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800279e:	f003 fb99 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit2_3_RST, RF_16_22_Bit2_3);
 80027a2:	4b71      	ldr	r3, [pc, #452]	@ (8002968 <LCD_Touch_Task+0x17f0>)
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	4b71      	ldr	r3, [pc, #452]	@ (800296c <LCD_Touch_Task+0x17f4>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4968      	ldr	r1, [pc, #416]	@ (800294c <LCD_Touch_Task+0x17d4>)
 80027ac:	4868      	ldr	r0, [pc, #416]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80027ae:	f002 ffa5 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 80027b2:	4b67      	ldr	r3, [pc, #412]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80027b4:	7a9b      	ldrb	r3, [r3, #10]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4965      	ldr	r1, [pc, #404]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80027ba:	2007      	movs	r0, #7
 80027bc:	f004 f8ce 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 80027c0:	f107 030b 	add.w	r3, r7, #11
 80027c4:	2201      	movs	r2, #1
 80027c6:	4619      	mov	r1, r3
 80027c8:	2005      	movs	r0, #5
 80027ca:	f004 f8c7 	bl	800695c <RS485_Tx>
 80027ce:	e0ae      	b.n	800292e <LCD_Touch_Task+0x17b6>
				}
				else if( (MIU_IJU_MSG.PCKT_0 & RF_30_46_Bit2_3) == RF_30_46_Bit2_3)
 80027d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80027d2:	789a      	ldrb	r2, [r3, #2]
 80027d4:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <LCD_Touch_Task+0x17f8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4013      	ands	r3, r2
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b64      	ldr	r3, [pc, #400]	@ (8002970 <LCD_Touch_Task+0x17f8>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d133      	bne.n	800284c <LCD_Touch_Task+0x16d4>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_30_46_Str,20,1);
 80027e4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80027e8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80027ec:	2301      	movs	r3, #1
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	2314      	movs	r3, #20
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002974 <LCD_Touch_Task+0x17fc>)
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2300      	movs	r3, #0
 80027fa:	2200      	movs	r2, #0
 80027fc:	f003 fb6a 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_42_63_Str,20,1);
 8002800:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002804:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002808:	2301      	movs	r3, #1
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	2314      	movs	r3, #20
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	4b54      	ldr	r3, [pc, #336]	@ (8002964 <LCD_Touch_Task+0x17ec>)
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800281a:	f003 fb5b 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit2_3_RST, RF_42_63_Bit2_3);
 800281e:	4b52      	ldr	r3, [pc, #328]	@ (8002968 <LCD_Touch_Task+0x17f0>)
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	4b4f      	ldr	r3, [pc, #316]	@ (8002960 <LCD_Touch_Task+0x17e8>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	4949      	ldr	r1, [pc, #292]	@ (800294c <LCD_Touch_Task+0x17d4>)
 8002828:	4849      	ldr	r0, [pc, #292]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 800282a:	f002 ff67 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 800282e:	4b48      	ldr	r3, [pc, #288]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 8002830:	7a9b      	ldrb	r3, [r3, #10]
 8002832:	461a      	mov	r2, r3
 8002834:	4946      	ldr	r1, [pc, #280]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 8002836:	2007      	movs	r0, #7
 8002838:	f004 f890 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 800283c:	f107 030b 	add.w	r3, r7, #11
 8002840:	2201      	movs	r2, #1
 8002842:	4619      	mov	r1, r3
 8002844:	2005      	movs	r0, #5
 8002846:	f004 f889 	bl	800695c <RS485_Tx>
 800284a:	e070      	b.n	800292e <LCD_Touch_Task+0x17b6>
				}
				else if( (MIU_IJU_MSG.PCKT_0 & RF_20_32_Bit2_3) == RF_20_32_Bit2_3)
 800284c:	4b40      	ldr	r3, [pc, #256]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 800284e:	789a      	ldrb	r2, [r3, #2]
 8002850:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <LCD_Touch_Task+0x1800>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4013      	ands	r3, r2
 8002856:	b2da      	uxtb	r2, r3
 8002858:	4b47      	ldr	r3, [pc, #284]	@ (8002978 <LCD_Touch_Task+0x1800>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d133      	bne.n	80028c8 <LCD_Touch_Task+0x1750>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_20_32_Str,20,1);
 8002860:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002864:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002868:	2301      	movs	r3, #1
 800286a:	9302      	str	r3, [sp, #8]
 800286c:	2314      	movs	r3, #20
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	4b42      	ldr	r3, [pc, #264]	@ (800297c <LCD_Touch_Task+0x1804>)
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2300      	movs	r3, #0
 8002876:	2200      	movs	r2, #0
 8002878:	f003 fb2c 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_30_46_Str,20,1);
 800287c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002880:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002884:	2301      	movs	r3, #1
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	2314      	movs	r3, #20
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	4b39      	ldr	r3, [pc, #228]	@ (8002974 <LCD_Touch_Task+0x17fc>)
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2300      	movs	r3, #0
 8002892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002896:	f003 fb1d 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit2_3_RST, RF_30_46_Bit2_3);
 800289a:	4b33      	ldr	r3, [pc, #204]	@ (8002968 <LCD_Touch_Task+0x17f0>)
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <LCD_Touch_Task+0x17f8>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	492a      	ldr	r1, [pc, #168]	@ (800294c <LCD_Touch_Task+0x17d4>)
 80028a4:	482a      	ldr	r0, [pc, #168]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80028a6:	f002 ff29 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 80028aa:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80028ac:	7a9b      	ldrb	r3, [r3, #10]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4927      	ldr	r1, [pc, #156]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 80028b2:	2007      	movs	r0, #7
 80028b4:	f004 f852 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 80028b8:	f107 030b 	add.w	r3, r7, #11
 80028bc:	2201      	movs	r2, #1
 80028be:	4619      	mov	r1, r3
 80028c0:	2005      	movs	r0, #5
 80028c2:	f004 f84b 	bl	800695c <RS485_Tx>
 80028c6:	e032      	b.n	800292e <LCD_Touch_Task+0x17b6>
				}
				else //RF_16_22_Bit2_3
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 80028c8:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80028cc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80028d0:	2301      	movs	r3, #1
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	2314      	movs	r3, #20
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	4b20      	ldr	r3, [pc, #128]	@ (800295c <LCD_Touch_Task+0x17e4>)
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2300      	movs	r3, #0
 80028de:	2200      	movs	r2, #0
 80028e0:	f003 faf8 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_20_32_Str,20,1);
 80028e4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80028e8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80028ec:	2301      	movs	r3, #1
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2314      	movs	r3, #20
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	4b21      	ldr	r3, [pc, #132]	@ (800297c <LCD_Touch_Task+0x1804>)
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028fe:	f003 fae9 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit2_3_RST, RF_20_32_Bit2_3);
 8002902:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <LCD_Touch_Task+0x17f0>)
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <LCD_Touch_Task+0x1800>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4910      	ldr	r1, [pc, #64]	@ (800294c <LCD_Touch_Task+0x17d4>)
 800290c:	4810      	ldr	r0, [pc, #64]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 800290e:	f002 fef5 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002912:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 8002914:	7a9b      	ldrb	r3, [r3, #10]
 8002916:	461a      	mov	r2, r3
 8002918:	490d      	ldr	r1, [pc, #52]	@ (8002950 <LCD_Touch_Task+0x17d8>)
 800291a:	2007      	movs	r0, #7
 800291c:	f004 f81e 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8002920:	f107 030b 	add.w	r3, r7, #11
 8002924:	2201      	movs	r2, #1
 8002926:	4619      	mov	r1, r3
 8002928:	2005      	movs	r0, #5
 800292a:	f004 f817 	bl	800695c <RS485_Tx>
				}


				display.x=0; display.y=0;
 800292e:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <LCD_Touch_Task+0x17dc>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <LCD_Touch_Task+0x17dc>)
 8002936:	2200      	movs	r2, #0
 8002938:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 800293a:	e024      	b.n	8002986 <LCD_Touch_Task+0x180e>
 800293c:	08018d2c 	.word	0x08018d2c
 8002940:	08018d34 	.word	0x08018d34
 8002944:	08018dae 	.word	0x08018dae
 8002948:	08018db0 	.word	0x08018db0
 800294c:	20000016 	.word	0x20000016
 8002950:	20000014 	.word	0x20000014
 8002954:	20026120 	.word	0x20026120
 8002958:	20025df0 	.word	0x20025df0
 800295c:	08018d3c 	.word	0x08018d3c
 8002960:	08018db5 	.word	0x08018db5
 8002964:	08018d60 	.word	0x08018d60
 8002968:	08018db1 	.word	0x08018db1
 800296c:	08018db2 	.word	0x08018db2
 8002970:	08018db4 	.word	0x08018db4
 8002974:	08018d54 	.word	0x08018d54
 8002978:	08018db3 	.word	0x08018db3
 800297c:	08018d48 	.word	0x08018d48
 8002980:	200a      	movs	r0, #10
 8002982:	f00e f80e 	bl	80109a2 <osDelay>
 8002986:	f005 fa43 	bl	8007e10 <TS_Touched>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	d0f7      	beq.n	8002980 <LCD_Touch_Task+0x1808>
			}
			//---------------IJU Atten---------------
			X = 5+(strlen("Atten: ")*8);	Y = 100;
 8002990:	233d      	movs	r3, #61	@ 0x3d
 8002992:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002996:	2364      	movs	r3, #100	@ 0x64
 8002998:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == IJU_Page) && (X<display.x && display.x<X+(strlen("-")*8)) && (Y<display.y && display.y<Y+15) )
 800299c:	4ba2      	ldr	r3, [pc, #648]	@ (8002c28 <LCD_Touch_Task+0x1ab0>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	f040 809e 	bne.w	8002ae2 <LCD_Touch_Task+0x196a>
 80029a6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80029aa:	4ba0      	ldr	r3, [pc, #640]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	f280 8097 	bge.w	8002ae2 <LCD_Touch_Task+0x196a>
 80029b4:	4b9d      	ldr	r3, [pc, #628]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80029be:	3308      	adds	r3, #8
 80029c0:	429a      	cmp	r2, r3
 80029c2:	f080 808e 	bcs.w	8002ae2 <LCD_Touch_Task+0x196a>
 80029c6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80029ca:	4b98      	ldr	r3, [pc, #608]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	f280 8087 	bge.w	8002ae2 <LCD_Touch_Task+0x196a>
 80029d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029d8:	f103 020e 	add.w	r2, r3, #14
 80029dc:	4b93      	ldr	r3, [pc, #588]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	db7e      	blt.n	8002ae2 <LCD_Touch_Task+0x196a>
			{
				if(IJU_Atten_Bit0_5 > 0)
 80029e4:	4b92      	ldr	r3, [pc, #584]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d06b      	beq.n	8002ac4 <LCD_Touch_Task+0x194c>
				{
					X = 5+(strlen("Atten: -")*8);
 80029ec:	2345      	movs	r3, #69	@ 0x45
 80029ee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					sprintf(Str, "%.1f", ((float)IJU_Atten_Bit0_5/2));
 80029f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002a02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a06:	ee16 0a90 	vmov	r0, s13
 8002a0a:	f7fd fdad 	bl	8000568 <__aeabi_f2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	f107 000c 	add.w	r0, r7, #12
 8002a16:	4987      	ldr	r1, [pc, #540]	@ (8002c34 <LCD_Touch_Task+0x1abc>)
 8002a18:	f013 fe92 	bl	8016740 <siprintf>
					Show_Str(X+2, Y, BLACK, BLACK, (u8 *)Str,20,1);
 8002a1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002a20:	3302      	adds	r3, #2
 8002a22:	b298      	uxth	r0, r3
 8002a24:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002a28:	2301      	movs	r3, #1
 8002a2a:	9302      	str	r3, [sp, #8]
 8002a2c:	2314      	movs	r3, #20
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2300      	movs	r3, #0
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f003 fa4b 	bl	8005ed4 <Show_Str>
					IJU_Atten_Bit0_5--;
 8002a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b7a      	ldr	r3, [pc, #488]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002a48:	701a      	strb	r2, [r3, #0]
					sprintf(Str, "%.1f", ((float)IJU_Atten_Bit0_5/2));
 8002a4a:	4b79      	ldr	r3, [pc, #484]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a56:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002a5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a5e:	ee16 0a90 	vmov	r0, s13
 8002a62:	f7fd fd81 	bl	8000568 <__aeabi_f2d>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	f107 000c 	add.w	r0, r7, #12
 8002a6e:	4971      	ldr	r1, [pc, #452]	@ (8002c34 <LCD_Touch_Task+0x1abc>)
 8002a70:	f013 fe66 	bl	8016740 <siprintf>
					Show_Str(X+2, Y, WHITE, BLACK, (u8 *)Str,20,1);
 8002a74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002a78:	3302      	adds	r3, #2
 8002a7a:	b298      	uxth	r0, r3
 8002a7c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002a80:	2301      	movs	r3, #1
 8002a82:	9302      	str	r3, [sp, #8]
 8002a84:	2314      	movs	r3, #20
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a94:	f003 fa1e 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_1, Atten_Bit0_5_RST, IJU_Atten_Bit0_5);
 8002a98:	4b67      	ldr	r3, [pc, #412]	@ (8002c38 <LCD_Touch_Task+0x1ac0>)
 8002a9a:	781a      	ldrb	r2, [r3, #0]
 8002a9c:	4b64      	ldr	r3, [pc, #400]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4966      	ldr	r1, [pc, #408]	@ (8002c3c <LCD_Touch_Task+0x1ac4>)
 8002aa2:	4867      	ldr	r0, [pc, #412]	@ (8002c40 <LCD_Touch_Task+0x1ac8>)
 8002aa4:	f002 fe2a 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002aa8:	4b65      	ldr	r3, [pc, #404]	@ (8002c40 <LCD_Touch_Task+0x1ac8>)
 8002aaa:	7a9b      	ldrb	r3, [r3, #10]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4964      	ldr	r1, [pc, #400]	@ (8002c40 <LCD_Touch_Task+0x1ac8>)
 8002ab0:	2007      	movs	r0, #7
 8002ab2:	f003 ff53 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8002ab6:	f107 030b 	add.w	r3, r7, #11
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	2005      	movs	r0, #5
 8002ac0:	f003 ff4c 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8002ac4:	4b59      	ldr	r3, [pc, #356]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	4b58      	ldr	r3, [pc, #352]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002ad0:	e002      	b.n	8002ad8 <LCD_Touch_Task+0x1960>
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f00d ff65 	bl	80109a2 <osDelay>
 8002ad8:	f005 f99a 	bl	8007e10 <TS_Touched>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d0f7      	beq.n	8002ad2 <LCD_Touch_Task+0x195a>
			}
			//----------
			X = 5+(strlen("Atten: -     ")*8);	Y = 100;
 8002ae2:	236d      	movs	r3, #109	@ 0x6d
 8002ae4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002ae8:	2364      	movs	r3, #100	@ 0x64
 8002aea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == IJU_Page) && (X<display.x && display.x<X+(strlen("+")*8)) && (Y<display.y && display.y<Y+15) )
 8002aee:	4b4e      	ldr	r3, [pc, #312]	@ (8002c28 <LCD_Touch_Task+0x1ab0>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	f040 80ae 	bne.w	8002c54 <LCD_Touch_Task+0x1adc>
 8002af8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002afc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f280 80a7 	bge.w	8002c54 <LCD_Touch_Task+0x1adc>
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002b10:	3308      	adds	r3, #8
 8002b12:	429a      	cmp	r2, r3
 8002b14:	f080 809e 	bcs.w	8002c54 <LCD_Touch_Task+0x1adc>
 8002b18:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002b1c:	4b43      	ldr	r3, [pc, #268]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	f280 8097 	bge.w	8002c54 <LCD_Touch_Task+0x1adc>
 8002b26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b2a:	f103 020e 	add.w	r2, r3, #14
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	f2c0 808e 	blt.w	8002c54 <LCD_Touch_Task+0x1adc>
			{
				if(IJU_Atten_Bit0_5 < 63)
 8002b38:	4b3d      	ldr	r3, [pc, #244]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b3e:	d86b      	bhi.n	8002c18 <LCD_Touch_Task+0x1aa0>
				{
					X = 5+(strlen("Atten: -")*8);
 8002b40:	2345      	movs	r3, #69	@ 0x45
 8002b42:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					sprintf(Str, "%.1f", ((float)IJU_Atten_Bit0_5/2));
 8002b46:	4b3a      	ldr	r3, [pc, #232]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002b56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b5a:	ee16 0a90 	vmov	r0, s13
 8002b5e:	f7fd fd03 	bl	8000568 <__aeabi_f2d>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	f107 000c 	add.w	r0, r7, #12
 8002b6a:	4932      	ldr	r1, [pc, #200]	@ (8002c34 <LCD_Touch_Task+0x1abc>)
 8002b6c:	f013 fde8 	bl	8016740 <siprintf>
					Show_Str(X+2, Y, BLACK, BLACK, (u8 *)Str,20,1);
 8002b70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002b74:	3302      	adds	r3, #2
 8002b76:	b298      	uxth	r0, r3
 8002b78:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	9302      	str	r3, [sp, #8]
 8002b80:	2314      	movs	r3, #20
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f003 f9a1 	bl	8005ed4 <Show_Str>
					IJU_Atten_Bit0_5++;
 8002b92:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002b9c:	701a      	strb	r2, [r3, #0]
					sprintf(Str, "%.1f", ((float)IJU_Atten_Bit0_5/2));
 8002b9e:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002baa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002bae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bb2:	ee16 0a90 	vmov	r0, s13
 8002bb6:	f7fd fcd7 	bl	8000568 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	f107 000c 	add.w	r0, r7, #12
 8002bc2:	491c      	ldr	r1, [pc, #112]	@ (8002c34 <LCD_Touch_Task+0x1abc>)
 8002bc4:	f013 fdbc 	bl	8016740 <siprintf>
					Show_Str(X+2, Y, WHITE, BLACK, (u8 *)Str,20,1);
 8002bc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002bcc:	3302      	adds	r3, #2
 8002bce:	b298      	uxth	r0, r3
 8002bd0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	9302      	str	r3, [sp, #8]
 8002bd8:	2314      	movs	r3, #20
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2300      	movs	r3, #0
 8002be4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002be8:	f003 f974 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_1, Atten_Bit0_5_RST, IJU_Atten_Bit0_5);
 8002bec:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <LCD_Touch_Task+0x1ac0>)
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <LCD_Touch_Task+0x1ab8>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4911      	ldr	r1, [pc, #68]	@ (8002c3c <LCD_Touch_Task+0x1ac4>)
 8002bf6:	4812      	ldr	r0, [pc, #72]	@ (8002c40 <LCD_Touch_Task+0x1ac8>)
 8002bf8:	f002 fd80 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002bfc:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <LCD_Touch_Task+0x1ac8>)
 8002bfe:	7a9b      	ldrb	r3, [r3, #10]
 8002c00:	461a      	mov	r2, r3
 8002c02:	490f      	ldr	r1, [pc, #60]	@ (8002c40 <LCD_Touch_Task+0x1ac8>)
 8002c04:	2007      	movs	r0, #7
 8002c06:	f003 fea9 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8002c0a:	f107 030b 	add.w	r3, r7, #11
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4619      	mov	r1, r3
 8002c12:	2005      	movs	r0, #5
 8002c14:	f003 fea2 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <LCD_Touch_Task+0x1ab4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002c24:	e011      	b.n	8002c4a <LCD_Touch_Task+0x1ad2>
 8002c26:	bf00      	nop
 8002c28:	20025df0 	.word	0x20025df0
 8002c2c:	20026120 	.word	0x20026120
 8002c30:	20025df2 	.word	0x20025df2
 8002c34:	08018a90 	.word	0x08018a90
 8002c38:	08018dbc 	.word	0x08018dbc
 8002c3c:	20000017 	.word	0x20000017
 8002c40:	20000014 	.word	0x20000014
 8002c44:	200a      	movs	r0, #10
 8002c46:	f00d feac 	bl	80109a2 <osDelay>
 8002c4a:	f005 f8e1 	bl	8007e10 <TS_Touched>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d0f7      	beq.n	8002c44 <LCD_Touch_Task+0x1acc>
			}
			//---------------IJU RF Power---------------
			X = 150;	Y = 100;
 8002c54:	2396      	movs	r3, #150	@ 0x96
 8002c56:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002c5a:	2364      	movs	r3, #100	@ 0x64
 8002c5c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == IJU_Page) && (X<display.x && display.x<X+(strlen(LCD_RX1_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8002c60:	4b8b      	ldr	r3, [pc, #556]	@ (8002e90 <LCD_Touch_Task+0x1d18>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	f040 80a4 	bne.w	8002db2 <LCD_Touch_Task+0x1c3a>
 8002c6a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002c6e:	4b89      	ldr	r3, [pc, #548]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	f280 809d 	bge.w	8002db2 <LCD_Touch_Task+0x1c3a>
 8002c78:	4b86      	ldr	r3, [pc, #536]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461d      	mov	r5, r3
 8002c7e:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8002c82:	4885      	ldr	r0, [pc, #532]	@ (8002e98 <LCD_Touch_Task+0x1d20>)
 8002c84:	f7fd fb04 	bl	8000290 <strlen>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4423      	add	r3, r4
 8002c8e:	429d      	cmp	r5, r3
 8002c90:	f080 808f 	bcs.w	8002db2 <LCD_Touch_Task+0x1c3a>
 8002c94:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002c98:	4b7e      	ldr	r3, [pc, #504]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f280 8088 	bge.w	8002db2 <LCD_Touch_Task+0x1c3a>
 8002ca2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ca6:	f103 020e 	add.w	r2, r3, #14
 8002caa:	4b7a      	ldr	r3, [pc, #488]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	db7f      	blt.n	8002db2 <LCD_Touch_Task+0x1c3a>
			{

				if( (MIU_IJU_MSG.PCKT_0 & RF_ON_Bit5) == RF_ON_Bit5)
 8002cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8002e9c <LCD_Touch_Task+0x1d24>)
 8002cb4:	789a      	ldrb	r2, [r3, #2]
 8002cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea0 <LCD_Touch_Task+0x1d28>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b78      	ldr	r3, [pc, #480]	@ (8002ea0 <LCD_Touch_Task+0x1d28>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d133      	bne.n	8002d2e <LCD_Touch_Task+0x1bb6>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_ON_Str,20,1);
 8002cc6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002cca:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002cce:	2301      	movs	r3, #1
 8002cd0:	9302      	str	r3, [sp, #8]
 8002cd2:	2314      	movs	r3, #20
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	4b73      	ldr	r3, [pc, #460]	@ (8002ea4 <LCD_Touch_Task+0x1d2c>)
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f003 f8f9 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8002ce2:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002ce6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002cea:	2301      	movs	r3, #1
 8002cec:	9302      	str	r3, [sp, #8]
 8002cee:	2314      	movs	r3, #20
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ea8 <LCD_Touch_Task+0x1d30>)
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cfc:	f003 f8ea 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit5_RST, RF_OFF_Bit5);
 8002d00:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <LCD_Touch_Task+0x1d34>)
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb0 <LCD_Touch_Task+0x1d38>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	496a      	ldr	r1, [pc, #424]	@ (8002eb4 <LCD_Touch_Task+0x1d3c>)
 8002d0a:	4864      	ldr	r0, [pc, #400]	@ (8002e9c <LCD_Touch_Task+0x1d24>)
 8002d0c:	f002 fcf6 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002d10:	4b62      	ldr	r3, [pc, #392]	@ (8002e9c <LCD_Touch_Task+0x1d24>)
 8002d12:	7a9b      	ldrb	r3, [r3, #10]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4961      	ldr	r1, [pc, #388]	@ (8002e9c <LCD_Touch_Task+0x1d24>)
 8002d18:	2007      	movs	r0, #7
 8002d1a:	f003 fe1f 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8002d1e:	f107 030b 	add.w	r3, r7, #11
 8002d22:	2201      	movs	r2, #1
 8002d24:	4619      	mov	r1, r3
 8002d26:	2005      	movs	r0, #5
 8002d28:	f003 fe18 	bl	800695c <RS485_Tx>
 8002d2c:	e032      	b.n	8002d94 <LCD_Touch_Task+0x1c1c>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8002d2e:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002d32:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002d36:	2301      	movs	r3, #1
 8002d38:	9302      	str	r3, [sp, #8]
 8002d3a:	2314      	movs	r3, #20
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea8 <LCD_Touch_Task+0x1d30>)
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	2200      	movs	r2, #0
 8002d46:	f003 f8c5 	bl	8005ed4 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_ON_Str,20,1);
 8002d4a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002d4e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002d52:	2301      	movs	r3, #1
 8002d54:	9302      	str	r3, [sp, #8]
 8002d56:	2314      	movs	r3, #20
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	4b52      	ldr	r3, [pc, #328]	@ (8002ea4 <LCD_Touch_Task+0x1d2c>)
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d64:	f003 f8b6 	bl	8005ed4 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit5_RST, RF_ON_Bit5);
 8002d68:	4b50      	ldr	r3, [pc, #320]	@ (8002eac <LCD_Touch_Task+0x1d34>)
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea0 <LCD_Touch_Task+0x1d28>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4950      	ldr	r1, [pc, #320]	@ (8002eb4 <LCD_Touch_Task+0x1d3c>)
 8002d72:	484a      	ldr	r0, [pc, #296]	@ (8002e9c <LCD_Touch_Task+0x1d24>)
 8002d74:	f002 fcc2 	bl	80056fc <Message_Maker>
					RS485_Tx(7, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002d78:	4b48      	ldr	r3, [pc, #288]	@ (8002e9c <LCD_Touch_Task+0x1d24>)
 8002d7a:	7a9b      	ldrb	r3, [r3, #10]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4947      	ldr	r1, [pc, #284]	@ (8002e9c <LCD_Touch_Task+0x1d24>)
 8002d80:	2007      	movs	r0, #7
 8002d82:	f003 fdeb 	bl	800695c <RS485_Tx>
					RS485_Tx(5, &Sync_MSG, sizeof(Sync_MSG));
 8002d86:	f107 030b 	add.w	r3, r7, #11
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	2005      	movs	r0, #5
 8002d90:	f003 fde4 	bl	800695c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8002d94:	4b3f      	ldr	r3, [pc, #252]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002da0:	e002      	b.n	8002da8 <LCD_Touch_Task+0x1c30>
 8002da2:	200a      	movs	r0, #10
 8002da4:	f00d fdfd 	bl	80109a2 <osDelay>
 8002da8:	f005 f832 	bl	8007e10 <TS_Touched>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d0f7      	beq.n	8002da2 <LCD_Touch_Task+0x1c2a>
			}
			//---------------IJU Back to Modules select---------------
			X = 5;	Y = 300;
 8002db2:	2305      	movs	r3, #5
 8002db4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002db8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002dbc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (LCD_Page == IJU_Page) && (X<display.x && display.x<X+(strlen(LCD_Back_Str)*8)) && (Y<display.y && display.y<Y+15) )
 8002dc0:	4b33      	ldr	r3, [pc, #204]	@ (8002e90 <LCD_Touch_Task+0x1d18>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d15d      	bne.n	8002e84 <LCD_Touch_Task+0x1d0c>
 8002dc8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002dcc:	4b31      	ldr	r3, [pc, #196]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	da57      	bge.n	8002e84 <LCD_Touch_Task+0x1d0c>
 8002dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461d      	mov	r5, r3
 8002dda:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8002dde:	4836      	ldr	r0, [pc, #216]	@ (8002eb8 <LCD_Touch_Task+0x1d40>)
 8002de0:	f7fd fa56 	bl	8000290 <strlen>
 8002de4:	4603      	mov	r3, r0
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4423      	add	r3, r4
 8002dea:	429d      	cmp	r5, r3
 8002dec:	d24a      	bcs.n	8002e84 <LCD_Touch_Task+0x1d0c>
 8002dee:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002df2:	4b28      	ldr	r3, [pc, #160]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	da44      	bge.n	8002e84 <LCD_Touch_Task+0x1d0c>
 8002dfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dfe:	f103 020e 	add.w	r2, r3, #14
 8002e02:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	db3c      	blt.n	8002e84 <LCD_Touch_Task+0x1d0c>
			{
				LCD_Page = Modules_Page;
 8002e0a:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <LCD_Touch_Task+0x1d18>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
				LCD_Clear(BLACK);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f004 fa3d 	bl	8007290 <LCD_Clear>
				Show_Str(80, 100, WHITE, BLACK, (u8 *)LCD_FEU_Str,20,1);
 8002e16:	2301      	movs	r3, #1
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	2314      	movs	r3, #20
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	4b27      	ldr	r3, [pc, #156]	@ (8002ebc <LCD_Touch_Task+0x1d44>)
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2300      	movs	r3, #0
 8002e24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e28:	2164      	movs	r1, #100	@ 0x64
 8002e2a:	2050      	movs	r0, #80	@ 0x50
 8002e2c:	f003 f852 	bl	8005ed4 <Show_Str>
				Show_Str(80, 140, WHITE, BLACK, (u8 *)LCD_IJU_Str,20,1);
 8002e30:	2301      	movs	r3, #1
 8002e32:	9302      	str	r3, [sp, #8]
 8002e34:	2314      	movs	r3, #20
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <LCD_Touch_Task+0x1d48>)
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e42:	218c      	movs	r1, #140	@ 0x8c
 8002e44:	2050      	movs	r0, #80	@ 0x50
 8002e46:	f003 f845 	bl	8005ed4 <Show_Str>
				Show_Str(5, 300, GBLUE, BLACK, (u8 *)LCD_Back_Str,20,1);
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	9302      	str	r3, [sp, #8]
 8002e4e:	2314      	movs	r3, #20
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <LCD_Touch_Task+0x1d40>)
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2300      	movs	r3, #0
 8002e58:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002e5c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002e60:	2005      	movs	r0, #5
 8002e62:	f003 f837 	bl	8005ed4 <Show_Str>

				display.x=0; display.y=0;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <LCD_Touch_Task+0x1d1c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002e72:	e002      	b.n	8002e7a <LCD_Touch_Task+0x1d02>
 8002e74:	200a      	movs	r0, #10
 8002e76:	f00d fd94 	bl	80109a2 <osDelay>
 8002e7a:	f004 ffc9 	bl	8007e10 <TS_Touched>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d0f7      	beq.n	8002e74 <LCD_Touch_Task+0x1cfc>

			//--------------- ---------------

		}

		LCD_Touch_Task_Done = 1;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec4 <LCD_Touch_Task+0x1d4c>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
		LCD_Touch_Task_Done = 0;
 8002e8a:	f7fe b9d4 	b.w	8001236 <LCD_Touch_Task+0xbe>
 8002e8e:	bf00      	nop
 8002e90:	20025df0 	.word	0x20025df0
 8002e94:	20026120 	.word	0x20026120
 8002e98:	08018d1c 	.word	0x08018d1c
 8002e9c:	20000014 	.word	0x20000014
 8002ea0:	08018dbb 	.word	0x08018dbb
 8002ea4:	08018d94 	.word	0x08018d94
 8002ea8:	08018d8c 	.word	0x08018d8c
 8002eac:	08018db9 	.word	0x08018db9
 8002eb0:	08018dba 	.word	0x08018dba
 8002eb4:	20000016 	.word	0x20000016
 8002eb8:	08018cb0 	.word	0x08018cb0
 8002ebc:	08018ce0 	.word	0x08018ce0
 8002ec0:	08018cec 	.word	0x08018cec
 8002ec4:	20000315 	.word	0x20000315

08002ec8 <Callback01>:
}
//--------------------------------------------------------------------------

/* Callback01 function */
void Callback01(void *argument)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4907      	ldr	r1, [pc, #28]	@ (8002f78 <__NVIC_EnableIRQ+0x38>)
 8002f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	@ (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	@ (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	@ 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8003046:	4a0b      	ldr	r2, [pc, #44]	@ (8003074 <LL_DMA_EnableChannel+0x3c>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4907      	ldr	r1, [pc, #28]	@ (8003074 <LL_DMA_EnableChannel+0x3c>)
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	440a      	add	r2, r1
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6153      	str	r3, [r2, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	08018c70 	.word	0x08018c70

08003078 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8003086:	4a0b      	ldr	r2, [pc, #44]	@ (80030b4 <LL_DMA_EnableIT_TC+0x3c>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	4907      	ldr	r1, [pc, #28]	@ (80030b4 <LL_DMA_EnableIT_TC+0x3c>)
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	440a      	add	r2, r1
 80030a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a4:	6153      	str	r3, [r2, #20]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08018c70 	.word	0x08018c70

080030b8 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	601a      	str	r2, [r3, #0]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	@ 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3308      	adds	r3, #8
 8003106:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	e853 3f00 	ldrex	r3, [r3]
 800310e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	075b      	lsls	r3, r3, #29
 800311a:	4313      	orrs	r3, r2
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3308      	adds	r3, #8
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	61ba      	str	r2, [r7, #24]
 8003126:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6979      	ldr	r1, [r7, #20]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	613b      	str	r3, [r7, #16]
   return(result);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e4      	bne.n	8003102 <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3724      	adds	r7, #36	@ 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8003146:	b480      	push	{r7}
 8003148:	b089      	sub	sp, #36	@ 0x24
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3308      	adds	r3, #8
 8003154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	60bb      	str	r3, [r7, #8]
   return(result);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	065b      	lsls	r3, r3, #25
 8003168:	4313      	orrs	r3, r2
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3308      	adds	r3, #8
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	61ba      	str	r2, [r7, #24]
 8003174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6979      	ldr	r1, [r7, #20]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	613b      	str	r3, [r7, #16]
   return(result);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e4      	bne.n	8003150 <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	3724      	adds	r7, #36	@ 0x24
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_LPUART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_DisableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableOverrunDetect(USART_TypeDef *LPUARTx)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_LPUART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_LPUART_EnableDMAReq_RX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_RX(USART_TypeDef *LPUARTx)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	@ 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3308      	adds	r3, #8
 80031c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3308      	adds	r3, #8
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	61ba      	str	r2, [r7, #24]
 80031da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6979      	ldr	r1, [r7, #20]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	613b      	str	r3, [r7, #16]
   return(result);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e7      	bne.n	80031bc <LL_LPUART_EnableDMAReq_RX+0x8>
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	@ 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3328      	adds	r3, #40	@ 0x28
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e002      	b.n	8003218 <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3324      	adds	r3, #36	@ 0x24
 8003216:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8003218:	68fb      	ldr	r3, [r7, #12]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <LL_RCC_HSE_EnableBypass+0x1c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a04      	ldr	r2, [pc, #16]	@ (8003244 <LL_RCC_HSE_EnableBypass+0x1c>)
 8003232:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	44020c00 	.word	0x44020c00

08003248 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <LL_RCC_HSE_Enable+0x1c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a04      	ldr	r2, [pc, #16]	@ (8003264 <LL_RCC_HSE_Enable+0x1c>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	44020c00 	.word	0x44020c00

08003268 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 800326c:	4b07      	ldr	r3, [pc, #28]	@ (800328c <LL_RCC_HSE_IsReady+0x24>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003278:	d101      	bne.n	800327e <LL_RCC_HSE_IsReady+0x16>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <LL_RCC_HSE_IsReady+0x18>
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	44020c00 	.word	0x44020c00

08003290 <LL_RCC_HSE_SetExternalClockType>:
  *         @arg @ref LL_RCC_HSE_ANALOG_TYPE
  *         @arg @ref LL_RCC_HSE_DIGITAL_TYPE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetExternalClockType(uint32_t HSEClockMode)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSEEXT, HSEClockMode);
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <LL_RCC_HSE_SetExternalClockType+0x24>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <LL_RCC_HSE_SetExternalClockType+0x24>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	44020c00 	.word	0x44020c00

080032b8 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 80032bc:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <LL_RCC_HSI48_Enable+0x1c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a04      	ldr	r2, [pc, #16]	@ (80032d4 <LL_RCC_HSI48_Enable+0x1c>)
 80032c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	44020c00 	.word	0x44020c00

080032d8 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == RCC_CR_HSI48RDY) ? 1UL : 0UL);
 80032dc:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <LL_RCC_HSI48_IsReady+0x24>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e8:	d101      	bne.n	80032ee <LL_RCC_HSI48_IsReady+0x16>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <LL_RCC_HSI48_IsReady+0x18>
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	44020c00 	.word	0x44020c00

08003300 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <LL_RCC_SetSysClkSource+0x24>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f023 0203 	bic.w	r2, r3, #3
 8003310:	4904      	ldr	r1, [pc, #16]	@ (8003324 <LL_RCC_SetSysClkSource+0x24>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	61cb      	str	r3, [r1, #28]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	44020c00 	.word	0x44020c00

08003328 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 800332c:	4b04      	ldr	r3, [pc, #16]	@ (8003340 <LL_RCC_GetSysClkSource+0x18>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f003 0318 	and.w	r3, r3, #24
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	44020c00 	.word	0x44020c00

08003344 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, Prescaler);
 800334c:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <LL_RCC_SetAHBPrescaler+0x24>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 020f 	bic.w	r2, r3, #15
 8003354:	4904      	ldr	r1, [pc, #16]	@ (8003368 <LL_RCC_SetAHBPrescaler+0x24>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4313      	orrs	r3, r2
 800335a:	620b      	str	r3, [r1, #32]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	44020c00 	.word	0x44020c00

0800336c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, Prescaler);
 8003374:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800337c:	4904      	ldr	r1, [pc, #16]	@ (8003390 <LL_RCC_SetAPB1Prescaler+0x24>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4313      	orrs	r3, r2
 8003382:	620b      	str	r3, [r1, #32]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	44020c00 	.word	0x44020c00

08003394 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, Prescaler);
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033a4:	4904      	ldr	r1, [pc, #16]	@ (80033b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	620b      	str	r3, [r1, #32]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	44020c00 	.word	0x44020c00

080033bc <LL_RCC_SetAPB3Prescaler>:
  *         @arg @ref LL_RCC_APB3_DIV_8
  *         @arg @ref LL_RCC_APB3_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB3Prescaler(uint32_t Prescaler)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, Prescaler);
 80033c4:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <LL_RCC_SetAPB3Prescaler+0x24>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80033cc:	4904      	ldr	r1, [pc, #16]	@ (80033e0 <LL_RCC_SetAPB3Prescaler+0x24>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	620b      	str	r3, [r1, #32]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	44020c00 	.word	0x44020c00

080033e4 <LL_RCC_SetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClockSource(uint32_t ClkSource)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <LL_RCC_SetClockSource+0x50>)
 80033f2:	4413      	add	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0e19      	lsrs	r1, r3, #24
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	401a      	ands	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	b2d9      	uxtb	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	44020cd8 	.word	0x44020cd8

08003438 <LL_RCC_SetUSARTClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(USARTxSource);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ffcf 	bl	80033e4 <LL_RCC_SetClockSource>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <LL_RCC_SetUARTClockSource>:
  *         @arg @ref LL_RCC_UART12_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_UART12_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUARTClockSource(uint32_t UARTxSource)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(UARTxSource);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ffc4 	bl	80033e4 <LL_RCC_SetClockSource>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <LL_RCC_SetLPUARTClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_LPUART1SEL, LPUARTxSource);
 800346c:	4b07      	ldr	r3, [pc, #28]	@ (800348c <LL_RCC_SetLPUARTClockSource+0x28>)
 800346e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003472:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003476:	4905      	ldr	r1, [pc, #20]	@ (800348c <LL_RCC_SetLPUARTClockSource+0x28>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	44020c00 	.word	0x44020c00

08003490 <LL_RCC_SetSPIClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSPIClockSource(uint32_t SPIxSource)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(SPIxSource);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ffa3 	bl	80033e4 <LL_RCC_SetClockSource>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <LL_RCC_SetUSBClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_USBSEL, USBxSource);
 80034b0:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <LL_RCC_SetUSBClockSource+0x28>)
 80034b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034ba:	4905      	ldr	r1, [pc, #20]	@ (80034d0 <LL_RCC_SetUSBClockSource+0x28>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	44020c00 	.word	0x44020c00

080034d4 <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 80034d8:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <LL_RCC_PLL1_Enable+0x1c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a04      	ldr	r2, [pc, #16]	@ (80034f0 <LL_RCC_PLL1_Enable+0x1c>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	44020c00 	.word	0x44020c00

080034f4 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == RCC_CR_PLL1RDY) ? 1UL : 0UL);
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <LL_RCC_PLL1_IsReady+0x24>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003504:	d101      	bne.n	800350a <LL_RCC_PLL1_IsReady+0x16>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <LL_RCC_PLL1_IsReady+0x18>
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	44020c00 	.word	0x44020c00

0800351c <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1CFGR      PLL1PEN        LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1PEN);
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <LL_RCC_PLL1P_Enable+0x1c>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <LL_RCC_PLL1P_Enable+0x1c>)
 8003526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	44020c00 	.word	0x44020c00

0800353c <LL_RCC_PLL1_SetSource>:
  *         @arg @ref LL_RCC_PLL1SOURCE_CSI
  *         @arg @ref LL_RCC_PLL1SOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetSource(uint32_t PLL1Source)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC, PLL1Source);
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <LL_RCC_PLL1_SetSource+0x24>)
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	f023 0203 	bic.w	r2, r3, #3
 800354c:	4904      	ldr	r1, [pc, #16]	@ (8003560 <LL_RCC_PLL1_SetSource+0x24>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4313      	orrs	r3, r2
 8003552:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	44020c00 	.word	0x44020c00

08003564 <LL_RCC_PLL1_SetN>:
  * @brief  Set Main PLL1 multiplication factor for VCO
  * @rmtoll PLL1CFGR      PLL1N          LL_RCC_PLL1_SetN
  * @param PLL1N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t PLL1N)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N, (PLL1N - 1UL) << RCC_PLL1DIVR_PLL1N_Pos);
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <LL_RCC_PLL1_SetN+0x2c>)
 800356e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003570:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	3a01      	subs	r2, #1
 800357c:	4904      	ldr	r1, [pc, #16]	@ (8003590 <LL_RCC_PLL1_SetN+0x2c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	44020c00 	.word	0x44020c00

08003594 <LL_RCC_PLL1_SetP>:
  * @note Used for System clock
  * @rmtoll PLL1CFGR      PLL1P       LL_RCC_PLL1_SetP
  * @param PLL1P parameter can be a value between 2 and 128 (odd value not allowed)
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t PLL1P)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P, (PLL1P - 1UL) << RCC_PLL1DIVR_PLL1P_Pos);
 800359c:	4b07      	ldr	r3, [pc, #28]	@ (80035bc <LL_RCC_PLL1_SetP+0x28>)
 800359e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a0:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	4904      	ldr	r1, [pc, #16]	@ (80035bc <LL_RCC_PLL1_SetP+0x28>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	634b      	str	r3, [r1, #52]	@ 0x34
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	44020c00 	.word	0x44020c00

080035c0 <LL_RCC_PLL1_SetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLLCFGR      PLL1Q          LL_RCC_PLL1_SetQ
  * @param PLL1Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t PLL1Q)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1Q, (PLL1Q - 1UL) << RCC_PLL1DIVR_PLL1Q_Pos);
 80035c8:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <LL_RCC_PLL1_SetQ+0x28>)
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035cc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	4904      	ldr	r1, [pc, #16]	@ (80035e8 <LL_RCC_PLL1_SetQ+0x28>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	634b      	str	r3, [r1, #52]	@ 0x34
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	44020c00 	.word	0x44020c00

080035ec <LL_RCC_PLL1_SetR>:
  * @note Used for trace
  * @rmtoll PLL1DIVR      PLL1R          LL_RCC_PLL1_SetR
  * @param PLL1R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t PLL1R)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R, (PLL1R - 1UL) << RCC_PLL1DIVR_PLL1R_Pos);
 80035f4:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <LL_RCC_PLL1_SetR+0x28>)
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	4904      	ldr	r1, [pc, #16]	@ (8003614 <LL_RCC_PLL1_SetR+0x28>)
 8003604:	4313      	orrs	r3, r2
 8003606:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	44020c00 	.word	0x44020c00

08003618 <LL_RCC_PLL1_SetM>:
  * @brief  Set Division factor for the main PLL and other PLL
  * @rmtoll PLL1CFGR      PLL1M          LL_RCC_PLL1_SetM
  * @param PLL1M parameter can be a value between 1 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t PLL1M)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M, PLL1M  << RCC_PLL1CFGR_PLL1M_Pos);
 8003620:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <LL_RCC_PLL1_SetM+0x28>)
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	4904      	ldr	r1, [pc, #16]	@ (8003640 <LL_RCC_PLL1_SetM+0x28>)
 800362e:	4313      	orrs	r3, r2
 8003630:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	44020c00 	.word	0x44020c00

08003644 <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RGE, InputRange << RCC_PLL1CFGR_PLL1RGE_Pos);
 800364c:	4b07      	ldr	r3, [pc, #28]	@ (800366c <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	f023 020c 	bic.w	r2, r3, #12
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4904      	ldr	r1, [pc, #16]	@ (800366c <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800365a:	4313      	orrs	r3, r2
 800365c:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	44020c00 	.word	0x44020c00

08003670 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1VCOSEL, VCORange << RCC_PLL1CFGR_PLL1VCOSEL_Pos);
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	f023 0220 	bic.w	r2, r3, #32
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	015b      	lsls	r3, r3, #5
 8003684:	4904      	ldr	r1, [pc, #16]	@ (8003698 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8003686:	4313      	orrs	r3, r2
 8003688:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	44020c00 	.word	0x44020c00

0800369c <LL_RCC_PLL2_Enable>:
  * @brief  Enable PLL2
  * @rmtoll CR           PLL2ON     LL_RCC_PLL2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_Enable(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL2ON);
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <LL_RCC_PLL2_Enable+0x1c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a04      	ldr	r2, [pc, #16]	@ (80036b8 <LL_RCC_PLL2_Enable+0x1c>)
 80036a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	44020c00 	.word	0x44020c00

080036bc <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY    LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == RCC_CR_PLL2RDY) ? 1UL : 0UL);
 80036c0:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <LL_RCC_PLL2_IsReady+0x24>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036cc:	d101      	bne.n	80036d2 <LL_RCC_PLL2_IsReady+0x16>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <LL_RCC_PLL2_IsReady+0x18>
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	44020c00 	.word	0x44020c00

080036e4 <LL_RCC_PLL2_SetSource>:
  *         @arg @ref LL_RCC_PLL2SOURCE_HSI
  *         @arg @ref LL_RCC_PLL2SOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetSource(uint32_t PLL2Source)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2SRC, PLL2Source);
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <LL_RCC_PLL2_SetSource+0x24>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f0:	f023 0203 	bic.w	r2, r3, #3
 80036f4:	4904      	ldr	r1, [pc, #16]	@ (8003708 <LL_RCC_PLL2_SetSource+0x24>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	44020c00 	.word	0x44020c00

0800370c <LL_RCC_PLL2_SetM>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2CFGR      PLL2M          LL_RCC_PLL2_SetM
  * @param PLL2M parameter can be a value between 1 and 63
  */
__STATIC_INLINE void LL_RCC_PLL2_SetM(uint32_t PLL2M)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2M, PLL2M << RCC_PLL2CFGR_PLL2M_Pos);
 8003714:	4b07      	ldr	r3, [pc, #28]	@ (8003734 <LL_RCC_PLL2_SetM+0x28>)
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	4904      	ldr	r1, [pc, #16]	@ (8003734 <LL_RCC_PLL2_SetM+0x28>)
 8003722:	4313      	orrs	r3, r2
 8003724:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	44020c00 	.word	0x44020c00

08003738 <LL_RCC_PLL2_SetN>:
  * @brief  Set PLL2 multiplication factor N
  * @rmtoll PLL2CFGR      PLL2N          LL_RCC_PLL2_SetN
  * @param PLL2N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL2_SetN(uint32_t PLL2N)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2N, (PLL2N - 1UL) << RCC_PLL2DIVR_PLL2N_Pos);
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <LL_RCC_PLL2_SetN+0x2c>)
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	3a01      	subs	r2, #1
 8003750:	4904      	ldr	r1, [pc, #16]	@ (8003764 <LL_RCC_PLL2_SetN+0x2c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	44020c00 	.word	0x44020c00

08003768 <LL_RCC_PLL2_SetP>:
  * @note Used for peripherals clocks
  * @rmtoll PLL2CFGR      PLL2P       LL_RCC_PLL2_SetP
  * @param PLL2P parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetP(uint32_t PLL2P)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2P, (PLL2P - 1UL) << RCC_PLL2DIVR_PLL2P_Pos);
 8003770:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <LL_RCC_PLL2_SetP+0x28>)
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	025b      	lsls	r3, r3, #9
 800377e:	4904      	ldr	r1, [pc, #16]	@ (8003790 <LL_RCC_PLL2_SetP+0x28>)
 8003780:	4313      	orrs	r3, r2
 8003782:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	44020c00 	.word	0x44020c00

08003794 <LL_RCC_PLL2_SetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLLCFGR      PLL2Q          LL_RCC_PLL2_SetQ
  * @param PLL2Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetQ(uint32_t PLL2Q)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2Q, (PLL2Q - 1UL) << RCC_PLL2DIVR_PLL2Q_Pos);
 800379c:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <LL_RCC_PLL2_SetQ+0x28>)
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	041b      	lsls	r3, r3, #16
 80037aa:	4904      	ldr	r1, [pc, #16]	@ (80037bc <LL_RCC_PLL2_SetQ+0x28>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	44020c00 	.word	0x44020c00

080037c0 <LL_RCC_PLL2_SetR>:
  * @note Used for PLL2CLK selected for peripherals clocks
  * @rmtoll PLL2CFGR      PLL2Q          LL_RCC_PLL2_SetR
  * @param PLL2R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void  LL_RCC_PLL2_SetR(uint32_t PLL2R)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2R, (PLL2R - 1UL) << RCC_PLL2DIVR_PLL2R_Pos);
 80037c8:	4b07      	ldr	r3, [pc, #28]	@ (80037e8 <LL_RCC_PLL2_SetR+0x28>)
 80037ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	4904      	ldr	r1, [pc, #16]	@ (80037e8 <LL_RCC_PLL2_SetR+0x28>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	44020c00 	.word	0x44020c00

080037ec <LL_RCC_PLL2P_Enable>:
  * @brief  Enable PLL2 P output
  * @rmtoll PLL2CFGR  PLL2PEN    LL_RCC_PLL2P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2P_Enable(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2PEN);
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <LL_RCC_PLL2P_Enable+0x1c>)
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	4a04      	ldr	r2, [pc, #16]	@ (8003808 <LL_RCC_PLL2P_Enable+0x1c>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	44020c00 	.word	0x44020c00

0800380c <LL_RCC_PLL2_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOInputRange(uint32_t InputRange)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2RGE, InputRange << RCC_PLL2CFGR_PLL2RGE_Pos);
 8003814:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	f023 020c 	bic.w	r2, r3, #12
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4904      	ldr	r1, [pc, #16]	@ (8003834 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8003822:	4313      	orrs	r3, r2
 8003824:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	44020c00 	.word	0x44020c00

08003838 <LL_RCC_PLL2_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOOutputRange(uint32_t VCORange)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2VCOSEL, VCORange << RCC_PLL2CFGR_PLL2VCOSEL_Pos);
 8003840:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	f023 0220 	bic.w	r2, r3, #32
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	015b      	lsls	r3, r3, #5
 800384c:	4904      	ldr	r1, [pc, #16]	@ (8003860 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 800384e:	4313      	orrs	r3, r2
 8003850:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	44020c00 	.word	0x44020c00

08003864 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->VOSCR, PWR_VOSCR_VOS, VoltageScaling);
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003874:	4904      	ldr	r1, [pc, #16]	@ (8003888 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4313      	orrs	r3, r2
 800387a:	610b      	str	r3, [r1, #16]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	44020800 	.word	0x44020800

0800388c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll UCPDR          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	44020800 	.word	0x44020800

080038ac <LL_PWR_IsActiveFlag_VOS>:
  *         scaling range or not.
  * @rmtoll VOSSR          VOSRDY          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->VOSSR, PWR_VOSSR_VOSRDY) == (PWR_VOSSR_VOSRDY)) ? 1UL : 0UL);
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <LL_PWR_IsActiveFlag_VOS+0x20>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d101      	bne.n	80038c0 <LL_PWR_IsActiveFlag_VOS+0x14>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <LL_PWR_IsActiveFlag_VOS+0x16>
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	44020800 	.word	0x44020800

080038d0 <LL_AHB1_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <LL_AHB1_GRP1_EnableClock+0x34>)
 80038da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038de:	4909      	ldr	r1, [pc, #36]	@ (8003904 <LL_AHB1_GRP1_EnableClock+0x34>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <LL_AHB1_GRP1_EnableClock+0x34>)
 80038ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	44020c00 	.word	0x44020c00

08003908 <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <LL_AHB2_GRP1_EnableClock+0x34>)
 8003912:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003916:	4909      	ldr	r1, [pc, #36]	@ (800393c <LL_AHB2_GRP1_EnableClock+0x34>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <LL_AHB2_GRP1_EnableClock+0x34>)
 8003922:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	44020c00 	.word	0x44020c00

08003940 <LL_APB1_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8003948:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <LL_APB1_GRP1_EnableClock+0x34>)
 800394a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800394e:	4909      	ldr	r1, [pc, #36]	@ (8003974 <LL_APB1_GRP1_EnableClock+0x34>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <LL_APB1_GRP1_EnableClock+0x34>)
 800395a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003964:	68fb      	ldr	r3, [r7, #12]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	44020c00 	.word	0x44020c00

08003978 <LL_APB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003980:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <LL_APB2_GRP1_EnableClock+0x34>)
 8003982:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003986:	4909      	ldr	r1, [pc, #36]	@ (80039ac <LL_APB2_GRP1_EnableClock+0x34>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <LL_APB2_GRP1_EnableClock+0x34>)
 8003992:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800399c:	68fb      	ldr	r3, [r7, #12]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	44020c00 	.word	0x44020c00

080039b0 <LL_APB3_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80039b8:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <LL_APB3_GRP1_EnableClock+0x34>)
 80039ba:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80039be:	4909      	ldr	r1, [pc, #36]	@ (80039e4 <LL_APB3_GRP1_EnableClock+0x34>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 30a8 	str.w	r3, [r1, #168]	@ 0xa8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <LL_APB3_GRP1_EnableClock+0x34>)
 80039ca:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039d4:	68fb      	ldr	r3, [r7, #12]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	44020c00 	.word	0x44020c00

080039e8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80039f0:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <LL_FLASH_SetLatency+0x24>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 020f 	bic.w	r2, r3, #15
 80039f8:	4904      	ldr	r1, [pc, #16]	@ (8003a0c <LL_FLASH_SetLatency+0x24>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40022000 	.word	0x40022000

08003a10 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <LL_FLASH_GetLatency+0x18>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40022000 	.word	0x40022000

08003a2c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60da      	str	r2, [r3, #12]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_SPI_SetFIFOThreshold>:
  *         @arg @ref LL_SPI_FIFO_TH_15DATA
  *         @arg @ref LL_SPI_FIFO_TH_16DATA
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CFG2         SSOM          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	601a      	str	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	@ 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	075b      	lsls	r3, r3, #29
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3308      	adds	r3, #8
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	61ba      	str	r2, [r7, #24]
 8003b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6979      	ldr	r1, [r7, #20]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	613b      	str	r3, [r7, #16]
   return(result);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e4      	bne.n	8003ae2 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	@ 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b089      	sub	sp, #36	@ 0x24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3308      	adds	r3, #8
 8003b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	065b      	lsls	r3, r3, #25
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	61ba      	str	r2, [r7, #24]
 8003b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e4      	bne.n	8003b30 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	3724      	adds	r7, #36	@ 0x24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_USART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	@ 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3308      	adds	r3, #8
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	61ba      	str	r2, [r7, #24]
 8003be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e7      	bne.n	8003bc8 <LL_USART_EnableDMAReq_RX+0x8>
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3724      	adds	r7, #36	@ 0x24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b085      	sub	sp, #20
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3328      	adds	r3, #40	@ 0x28
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e002      	b.n	8003c24 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3324      	adds	r3, #36	@ 0x24
 8003c22:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8003c24:	68fb      	ldr	r3, [r7, #12]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 0218 	bic.w	r2, r3, #24
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	611a      	str	r2, [r3, #16]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	615a      	str	r2, [r3, #20]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cfc:	2003      	movs	r0, #3
 8003cfe:	f7ff f8ed 	bl	8002edc <__NVIC_SetPriorityGrouping>

  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8003d02:	f7ff f90f 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2200      	movs	r2, #0
 8003d0a:	210f      	movs	r1, #15
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff f95f 	bl	8002fd0 <NVIC_EncodePriority>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4619      	mov	r1, r3
 8003d16:	f06f 0001 	mvn.w	r0, #1
 8003d1a:	f7ff f92f 	bl	8002f7c <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8003d1e:	f7ff f901 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2200      	movs	r2, #0
 8003d26:	210f      	movs	r1, #15
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff f951 	bl	8002fd0 <NVIC_EncodePriority>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4619      	mov	r1, r3
 8003d32:	f04f 30ff 	mov.w	r0, #4294967295
 8003d36:	f7ff f921 	bl	8002f7c <__NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 8003d3a:	f7ff fda7 	bl	800388c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN Init */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d3e:	200f      	movs	r0, #15
 8003d40:	f004 f876 	bl	8007e30 <HAL_InitTick>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d44:	f000 f836 	bl	8003db4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003d48:	f000 f89e 	bl	8003e88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  LL_mDelay(200);
 8003d4c:	20c8      	movs	r0, #200	@ 0xc8
 8003d4e:	f00c fca5 	bl	801069c <LL_mDelay>
  MX_GPIO_Init();
 8003d52:	f000 ffcf 	bl	8004cf4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8003d56:	f000 f8be 	bl	8003ed6 <MX_GPDMA1_Init>
  MX_SPI3_Init();
 8003d5a:	f000 fef3 	bl	8004b44 <MX_SPI3_Init>
  MX_SPI6_Init();
 8003d5e:	f000 ff69 	bl	8004c34 <MX_SPI6_Init>
  MX_LPUART1_UART_Init();
 8003d62:	f000 f92f 	bl	8003fc4 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8003d66:	f000 f9f9 	bl	800415c <MX_UART4_Init>
  MX_UART5_Init();
 8003d6a:	f000 facb 	bl	8004304 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8003d6e:	f000 fc71 	bl	8004654 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003d72:	f000 fd43 	bl	80047fc <MX_USART6_UART_Init>
  MX_UART7_Init();
 8003d76:	f000 fb99 	bl	80044ac <MX_UART7_Init>
  MX_USART11_UART_Init();
 8003d7a:	f000 fe11 	bl	80049a0 <MX_USART11_UART_Init>
  MX_CRC_Init();
 8003d7e:	f001 f811 	bl	8004da4 <MX_CRC_Init>
  MX_USB_PCD_Init();
 8003d82:	f001 f82f 	bl	8004de4 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8003d86:	f003 fac7 	bl	8007318 <LCD_Init>
  xpt2046_init();
 8003d8a:	f003 fdc1 	bl	8007910 <xpt2046_init>

  //USBPD_HW_IF_GlobalHwInit();
  MX_USB_Device_Init();
 8003d8e:	f003 fc9d 	bl	80076cc <MX_USB_Device_Init>
  //MX_USBPD_Init();

  memset(General_Buffer, 0, sizeof(General_Buffer));
 8003d92:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8003d96:	2100      	movs	r1, #0
 8003d98:	4805      	ldr	r0, [pc, #20]	@ (8003db0 <main+0xb8>)
 8003d9a:	f012 fd34 	bl	8016806 <memset>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003d9e:	f00c fd1f 	bl	80107e0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003da2:	f7fd f89d 	bl	8000ee0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003da6:	f00c fd41 	bl	801082c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003daa:	bf00      	nop
 8003dac:	e7fd      	b.n	8003daa <main+0xb2>
 8003dae:	bf00      	nop
 8003db0:	20000330 	.word	0x20000330

08003db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8003db8:	2005      	movs	r0, #5
 8003dba:	f7ff fe15 	bl	80039e8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8003dbe:	bf00      	nop
 8003dc0:	f7ff fe26 	bl	8003a10 <LL_FLASH_GetLatency>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d1fa      	bne.n	8003dc0 <SystemClock_Config+0xc>
  {
  }

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE0);
 8003dca:	2030      	movs	r0, #48	@ 0x30
 8003dcc:	f7ff fd4a 	bl	8003864 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8003dd0:	bf00      	nop
 8003dd2:	f7ff fd6b 	bl	80038ac <LL_PWR_IsActiveFlag_VOS>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0fa      	beq.n	8003dd2 <SystemClock_Config+0x1e>
  {
  }
  LL_RCC_HSE_EnableBypass();
 8003ddc:	f7ff fa24 	bl	8003228 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_SetExternalClockType(LL_RCC_HSE_ANALOG_TYPE);
 8003de0:	2000      	movs	r0, #0
 8003de2:	f7ff fa55 	bl	8003290 <LL_RCC_HSE_SetExternalClockType>
  LL_RCC_HSE_Enable();
 8003de6:	f7ff fa2f 	bl	8003248 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003dea:	bf00      	nop
 8003dec:	f7ff fa3c 	bl	8003268 <LL_RCC_HSE_IsReady>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d1fa      	bne.n	8003dec <SystemClock_Config+0x38>
  {
  }

  LL_RCC_HSI48_Enable();
 8003df6:	f7ff fa5f 	bl	80032b8 <LL_RCC_HSI48_Enable>

  /* Wait till HSI48 is ready */
  while(LL_RCC_HSI48_IsReady() != 1)
 8003dfa:	bf00      	nop
 8003dfc:	f7ff fa6c 	bl	80032d8 <LL_RCC_HSI48_IsReady>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d1fa      	bne.n	8003dfc <SystemClock_Config+0x48>
  {
  }

  LL_RCC_PLL1_SetSource(LL_RCC_PLL1SOURCE_HSE);
 8003e06:	2003      	movs	r0, #3
 8003e08:	f7ff fb98 	bl	800353c <LL_RCC_PLL1_SetSource>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 8003e0c:	2003      	movs	r0, #3
 8003e0e:	f7ff fc19 	bl	8003644 <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8003e12:	2000      	movs	r0, #0
 8003e14:	f7ff fc2c 	bl	8003670 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(2);
 8003e18:	2002      	movs	r0, #2
 8003e1a:	f7ff fbfd 	bl	8003618 <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(50);
 8003e1e:	2032      	movs	r0, #50	@ 0x32
 8003e20:	f7ff fba0 	bl	8003564 <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 8003e24:	2002      	movs	r0, #2
 8003e26:	f7ff fbb5 	bl	8003594 <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(2);
 8003e2a:	2002      	movs	r0, #2
 8003e2c:	f7ff fbc8 	bl	80035c0 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(2);
 8003e30:	2002      	movs	r0, #2
 8003e32:	f7ff fbdb 	bl	80035ec <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1P_Enable();
 8003e36:	f7ff fb71 	bl	800351c <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1_Enable();
 8003e3a:	f7ff fb4b 	bl	80034d4 <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 8003e3e:	bf00      	nop
 8003e40:	f7ff fb58 	bl	80034f4 <LL_RCC_PLL1_IsReady>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d1fa      	bne.n	8003e40 <SystemClock_Config+0x8c>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 8003e4a:	2003      	movs	r0, #3
 8003e4c:	f7ff fa58 	bl	8003300 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 8003e50:	bf00      	nop
 8003e52:	f7ff fa69 	bl	8003328 <LL_RCC_GetSysClkSource>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b18      	cmp	r3, #24
 8003e5a:	d1fa      	bne.n	8003e52 <SystemClock_Config+0x9e>
  {
  }

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7ff fa71 	bl	8003344 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f7ff fa82 	bl	800336c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7ff fa93 	bl	8003394 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_1);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7ff faa4 	bl	80033bc <LL_RCC_SetAPB3Prescaler>

  LL_Init1msTick(250000000);
 8003e74:	4803      	ldr	r0, [pc, #12]	@ (8003e84 <SystemClock_Config+0xd0>)
 8003e76:	f00c fc03 	bl	8010680 <LL_Init1msTick>

  LL_SetSystemCoreClock(250000000);
 8003e7a:	4802      	ldr	r0, [pc, #8]	@ (8003e84 <SystemClock_Config+0xd0>)
 8003e7c:	f00c fc36 	bl	80106ec <LL_SetSystemCoreClock>
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	0ee6b280 	.word	0x0ee6b280

08003e88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  LL_RCC_PLL2_SetSource(LL_RCC_PLL2SOURCE_HSE);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f7ff fc29 	bl	80036e4 <LL_RCC_PLL2_SetSource>
  LL_RCC_PLL2_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 8003e92:	2003      	movs	r0, #3
 8003e94:	f7ff fcba 	bl	800380c <LL_RCC_PLL2_SetVCOInputRange>
  LL_RCC_PLL2_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7ff fccd 	bl	8003838 <LL_RCC_PLL2_SetVCOOutputRange>
  LL_RCC_PLL2_SetM(2);
 8003e9e:	2002      	movs	r0, #2
 8003ea0:	f7ff fc34 	bl	800370c <LL_RCC_PLL2_SetM>
  LL_RCC_PLL2_SetN(50);
 8003ea4:	2032      	movs	r0, #50	@ 0x32
 8003ea6:	f7ff fc47 	bl	8003738 <LL_RCC_PLL2_SetN>
  LL_RCC_PLL2_SetP(2);
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f7ff fc5c 	bl	8003768 <LL_RCC_PLL2_SetP>
  LL_RCC_PLL2_SetQ(2);
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f7ff fc6f 	bl	8003794 <LL_RCC_PLL2_SetQ>
  LL_RCC_PLL2_SetR(2);
 8003eb6:	2002      	movs	r0, #2
 8003eb8:	f7ff fc82 	bl	80037c0 <LL_RCC_PLL2_SetR>
  LL_RCC_PLL2P_Enable();
 8003ebc:	f7ff fc96 	bl	80037ec <LL_RCC_PLL2P_Enable>
  LL_RCC_PLL2_Enable();
 8003ec0:	f7ff fbec 	bl	800369c <LL_RCC_PLL2_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL2_IsReady() != 1)
 8003ec4:	bf00      	nop
 8003ec6:	f7ff fbf9 	bl	80036bc <LL_RCC_PLL2_IsReady>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d1fa      	bne.n	8003ec6 <PeriphCommonClock_Config+0x3e>
  {
  }

}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPDMA1);
 8003eda:	2001      	movs	r0, #1
 8003edc:	f7ff fcf8 	bl	80038d0 <LL_AHB1_GRP1_EnableClock>

  /* GPDMA1 interrupt Init */
  NVIC_SetPriority(GPDMA1_Channel0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003ee0:	f7ff f820 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2105      	movs	r1, #5
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff f870 	bl	8002fd0 <NVIC_EncodePriority>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	201b      	movs	r0, #27
 8003ef6:	f7ff f841 	bl	8002f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8003efa:	201b      	movs	r0, #27
 8003efc:	f7ff f820 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */
	NVIC_SetPriority(GPDMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003f00:	f7ff f810 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2200      	movs	r2, #0
 8003f08:	2105      	movs	r1, #5
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff f860 	bl	8002fd0 <NVIC_EncodePriority>
 8003f10:	4603      	mov	r3, r0
 8003f12:	4619      	mov	r1, r3
 8003f14:	201c      	movs	r0, #28
 8003f16:	f7ff f831 	bl	8002f7c <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8003f1a:	201c      	movs	r0, #28
 8003f1c:	f7ff f810 	bl	8002f40 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003f20:	f7ff f800 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2200      	movs	r2, #0
 8003f28:	2105      	movs	r1, #5
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f850 	bl	8002fd0 <NVIC_EncodePriority>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4619      	mov	r1, r3
 8003f34:	201d      	movs	r0, #29
 8003f36:	f7ff f821 	bl	8002f7c <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8003f3a:	201d      	movs	r0, #29
 8003f3c:	f7ff f800 	bl	8002f40 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003f40:	f7fe fff0 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2200      	movs	r2, #0
 8003f48:	2105      	movs	r1, #5
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f840 	bl	8002fd0 <NVIC_EncodePriority>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4619      	mov	r1, r3
 8003f54:	201e      	movs	r0, #30
 8003f56:	f7ff f811 	bl	8002f7c <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8003f5a:	201e      	movs	r0, #30
 8003f5c:	f7fe fff0 	bl	8002f40 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003f60:	f7fe ffe0 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2200      	movs	r2, #0
 8003f68:	2105      	movs	r1, #5
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff f830 	bl	8002fd0 <NVIC_EncodePriority>
 8003f70:	4603      	mov	r3, r0
 8003f72:	4619      	mov	r1, r3
 8003f74:	201f      	movs	r0, #31
 8003f76:	f7ff f801 	bl	8002f7c <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8003f7a:	201f      	movs	r0, #31
 8003f7c:	f7fe ffe0 	bl	8002f40 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003f80:	f7fe ffd0 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2200      	movs	r2, #0
 8003f88:	2105      	movs	r1, #5
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f820 	bl	8002fd0 <NVIC_EncodePriority>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4619      	mov	r1, r3
 8003f94:	2020      	movs	r0, #32
 8003f96:	f7fe fff1 	bl	8002f7c <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 8003f9a:	2020      	movs	r0, #32
 8003f9c:	f7fe ffd0 	bl	8002f40 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003fa0:	f7fe ffc0 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2105      	movs	r1, #5
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff f810 	bl	8002fd0 <NVIC_EncodePriority>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	2021      	movs	r0, #33	@ 0x21
 8003fb6:	f7fe ffe1 	bl	8002f7c <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 8003fba:	2021      	movs	r0, #33	@ 0x21
 8003fbc:	f7fe ffc0 	bl	8002f40 <__NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b0b2      	sub	sp, #200	@ 0xc8
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8003fca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fce:	2294      	movs	r2, #148	@ 0x94
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f012 fc17 	bl	8016806 <memset>

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8003fd8:	f107 0318 	add.w	r3, r7, #24
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	611a      	str	r2, [r3, #16]
 8003fe8:	615a      	str	r2, [r3, #20]
 8003fea:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fec:	463b      	mov	r3, r7
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	60da      	str	r2, [r3, #12]
 8003ff8:	611a      	str	r2, [r3, #16]
 8003ffa:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK3);
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f7ff fa31 	bl	8003464 <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB3_GRP1_EnableClock(LL_APB3_GRP1_PERIPH_LPUART1);
 8004002:	2040      	movs	r0, #64	@ 0x40
 8004004:	f7ff fcd4 	bl	80039b0 <LL_APB3_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004008:	2001      	movs	r0, #1
 800400a:	f7ff fc7d 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA9   ------> LPUART1_TX
  PA10   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LPUART1_TX_RS485_5_Pin|LPUART1_RX_RS485_5_Pin;
 800400e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004012:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004014:	2302      	movs	r3, #2
 8004016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004018:	2300      	movs	r3, #0
 800401a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8004024:	2303      	movs	r3, #3
 8004026:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004028:	463b      	mov	r3, r7
 800402a:	4619      	mov	r1, r3
 800402c:	4847      	ldr	r0, [pc, #284]	@ (800414c <MX_LPUART1_UART_Init+0x188>)
 800402e:	f008 fadc 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */
	DMA_InitStruct.SrcAddress = LL_LPUART_DMA_GetRegAddr(LPUART1, LL_LPUART_DMA_REG_DATA_RECEIVE);
 8004032:	2101      	movs	r1, #1
 8004034:	4846      	ldr	r0, [pc, #280]	@ (8004150 <MX_LPUART1_UART_Init+0x18c>)
 8004036:	f7ff f8e0 	bl	80031fa <LL_LPUART_DMA_GetRegAddr>
 800403a:	4603      	mov	r3, r0
 800403c:	637b      	str	r3, [r7, #52]	@ 0x34
	DMA_InitStruct.DestAddress = (uint32_t)&Line5_RX_Buffer; //(uint32_t)&LineX_RX_Buffer[Line5_BUF_Index];
 800403e:	4b45      	ldr	r3, [pc, #276]	@ (8004154 <MX_LPUART1_UART_Init+0x190>)
 8004040:	63bb      	str	r3, [r7, #56]	@ 0x38
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8004042:	2300      	movs	r3, #0
 8004044:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8004046:	2300      	movs	r3, #0
 8004048:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 800404a:	2300      	movs	r3, #0
 800404c:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.SrcBurstLength = 1;
 800404e:	2301      	movs	r3, #1
 8004050:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DestBurstLength = 1;
 8004052:	2301      	movs	r3, #1
 8004054:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8004056:	2300      	movs	r3, #0
 8004058:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 800405a:	2300      	movs	r3, #0
 800405c:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 800405e:	2300      	movs	r3, #0
 8004060:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8004062:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004066:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8004068:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800406c:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 800406e:	2364      	movs	r3, #100	@ 0x64
 8004070:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8004072:	2300      	movs	r3, #0
 8004074:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8004078:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800407c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 800407e:	2300      	movs	r3, #0
 8004080:	673b      	str	r3, [r7, #112]	@ 0x70
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8004082:	2300      	movs	r3, #0
 8004084:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_LPUART1_RX;
 8004086:	232d      	movs	r3, #45	@ 0x2d
 8004088:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 800408a:	2300      	movs	r3, #0
 800408c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 800409a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800409e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_4, &DMA_InitStruct);
 80040b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80040b8:	461a      	mov	r2, r3
 80040ba:	2104      	movs	r1, #4
 80040bc:	4826      	ldr	r0, [pc, #152]	@ (8004158 <MX_LPUART1_UART_Init+0x194>)
 80040be:	f007 ffcb 	bl	800c058 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_4);
 80040c2:	2104      	movs	r1, #4
 80040c4:	4824      	ldr	r0, [pc, #144]	@ (8004158 <MX_LPUART1_UART_Init+0x194>)
 80040c6:	f7fe ffd7 	bl	8003078 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_4);
 80040ca:	2104      	movs	r1, #4
 80040cc:	4822      	ldr	r0, [pc, #136]	@ (8004158 <MX_LPUART1_UART_Init+0x194>)
 80040ce:	f7fe ffb3 	bl	8003038 <LL_DMA_EnableChannel>

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV8;
 80040d2:	2304      	movs	r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
  LPUART_InitStruct.BaudRate = 115200;
 80040d6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80040da:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 80040dc:	2300      	movs	r3, #0
 80040de:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80040e8:	230c      	movs	r3, #12
 80040ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80040f0:	f107 0318 	add.w	r3, r7, #24
 80040f4:	4619      	mov	r1, r3
 80040f6:	4816      	ldr	r0, [pc, #88]	@ (8004150 <MX_LPUART1_UART_Init+0x18c>)
 80040f8:	f008 fb8e 	bl	800c818 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80040fc:	2100      	movs	r1, #0
 80040fe:	4814      	ldr	r0, [pc, #80]	@ (8004150 <MX_LPUART1_UART_Init+0x18c>)
 8004100:	f7fe fffa 	bl	80030f8 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8004104:	2100      	movs	r1, #0
 8004106:	4812      	ldr	r0, [pc, #72]	@ (8004150 <MX_LPUART1_UART_Init+0x18c>)
 8004108:	f7ff f81d 	bl	8003146 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 800410c:	4810      	ldr	r0, [pc, #64]	@ (8004150 <MX_LPUART1_UART_Init+0x18c>)
 800410e:	f7fe ffe3 	bl	80030d8 <LL_LPUART_DisableFIFO>
  LL_LPUART_DisableOverrunDetect(LPUART1);
 8004112:	480f      	ldr	r0, [pc, #60]	@ (8004150 <MX_LPUART1_UART_Init+0x18c>)
 8004114:	f7ff f83e 	bl	8003194 <LL_LPUART_DisableOverrunDetect>
  LL_LPUART_EnableDMAReq_RX(LPUART1);
 8004118:	480d      	ldr	r0, [pc, #52]	@ (8004150 <MX_LPUART1_UART_Init+0x18c>)
 800411a:	f7ff f84b 	bl	80031b4 <LL_LPUART_EnableDMAReq_RX>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 800411e:	480c      	ldr	r0, [pc, #48]	@ (8004150 <MX_LPUART1_UART_Init+0x18c>)
 8004120:	f7fe ffca 	bl	80030b8 <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8004124:	f7fe fefe 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8004128:	4603      	mov	r3, r0
 800412a:	2200      	movs	r2, #0
 800412c:	2106      	movs	r1, #6
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe ff4e 	bl	8002fd0 <NVIC_EncodePriority>
 8004134:	4603      	mov	r3, r0
 8004136:	4619      	mov	r1, r3
 8004138:	203f      	movs	r0, #63	@ 0x3f
 800413a:	f7fe ff1f 	bl	8002f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 800413e:	203f      	movs	r0, #63	@ 0x3f
 8004140:	f7fe fefe 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE END LPUART1_Init 2 */

}
 8004144:	bf00      	nop
 8004146:	37c8      	adds	r7, #200	@ 0xc8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	42020000 	.word	0x42020000
 8004150:	44002400 	.word	0x44002400
 8004154:	20025cc0 	.word	0x20025cc0
 8004158:	40020000 	.word	0x40020000

0800415c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b0b4      	sub	sp, #208	@ 0xd0
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8004162:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004166:	2294      	movs	r2, #148	@ 0x94
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f012 fb4b 	bl	8016806 <memset>

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8004170:	f107 031c 	add.w	r3, r7, #28
 8004174:	2220      	movs	r2, #32
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f012 fb44 	bl	8016806 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417e:	1d3b      	adds	r3, r7, #4
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]
 800418c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART4_CLKSOURCE_PCLK1);
 800418e:	4858      	ldr	r0, [pc, #352]	@ (80042f0 <MX_UART4_Init+0x194>)
 8004190:	f7ff f95d 	bl	800344e <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8004194:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004198:	f7ff fbd2 	bl	8003940 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 800419c:	2008      	movs	r0, #8
 800419e:	f7ff fbb3 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PD11   ------> UART4_RX
  PD12   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = UART4_RX_RS485_3_Pin|UART4_TX_RS485_3_Pin;
 80041a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80041a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80041a8:	2302      	movs	r3, #2
 80041aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80041b8:	2308      	movs	r3, #8
 80041ba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	484c      	ldr	r0, [pc, #304]	@ (80042f4 <MX_UART4_Init+0x198>)
 80041c2:	f008 fa12 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART4, LL_USART_DMA_REG_DATA_RECEIVE);
 80041c6:	2101      	movs	r1, #1
 80041c8:	484b      	ldr	r0, [pc, #300]	@ (80042f8 <MX_UART4_Init+0x19c>)
 80041ca:	f7ff fd1c 	bl	8003c06 <LL_USART_DMA_GetRegAddr>
 80041ce:	4603      	mov	r3, r0
 80041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&Line3_RX_Buffer; //(uint32_t)&LineX_RX_Buffer[Line3_BUF_Index];
 80041d2:	4b4a      	ldr	r3, [pc, #296]	@ (80042fc <MX_UART4_Init+0x1a0>)
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80041d6:	2300      	movs	r3, #0
 80041d8:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;;//LL_DMA_HWREQUEST_BLK
 80041da:	2300      	movs	r3, #0
 80041dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 80041de:	2300      	movs	r3, #0
 80041e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 80041e6:	2301      	movs	r3, #1
 80041e8:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 80041f2:	2300      	movs	r3, #0
 80041f4:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 80041f6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80041fa:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80041fc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004200:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8004202:	2364      	movs	r3, #100	@ 0x64
 8004204:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 800420c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004210:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8004212:	2300      	movs	r3, #0
 8004214:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8004216:	2300      	movs	r3, #0
 8004218:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART4_RX;
 800421a:	231b      	movs	r3, #27
 800421c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8004232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 800423a:	2300      	movs	r3, #0
 800423c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_2, &DMA_InitStruct);
 800424c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004250:	461a      	mov	r2, r3
 8004252:	2102      	movs	r1, #2
 8004254:	482a      	ldr	r0, [pc, #168]	@ (8004300 <MX_UART4_Init+0x1a4>)
 8004256:	f007 feff 	bl	800c058 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_2);
 800425a:	2102      	movs	r1, #2
 800425c:	4828      	ldr	r0, [pc, #160]	@ (8004300 <MX_UART4_Init+0x1a4>)
 800425e:	f7fe ff0b 	bl	8003078 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_2);
 8004262:	2102      	movs	r1, #2
 8004264:	4826      	ldr	r0, [pc, #152]	@ (8004300 <MX_UART4_Init+0x1a4>)
 8004266:	f7fe fee7 	bl	8003038 <LL_DMA_EnableChannel>

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 115200;
 800426e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004272:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004278:	2300      	movs	r3, #0
 800427a:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800427c:	2300      	movs	r3, #0
 800427e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004280:	230c      	movs	r3, #12
 8004282:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004284:	2300      	movs	r3, #0
 8004286:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004288:	2300      	movs	r3, #0
 800428a:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART4, &UART_InitStruct);
 800428c:	f107 031c 	add.w	r3, r7, #28
 8004290:	4619      	mov	r1, r3
 8004292:	4819      	ldr	r0, [pc, #100]	@ (80042f8 <MX_UART4_Init+0x19c>)
 8004294:	f00a f986 	bl	800e5a4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8004298:	2100      	movs	r1, #0
 800429a:	4817      	ldr	r0, [pc, #92]	@ (80042f8 <MX_UART4_Init+0x19c>)
 800429c:	f7ff fc1c 	bl	8003ad8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 80042a0:	2100      	movs	r1, #0
 80042a2:	4815      	ldr	r0, [pc, #84]	@ (80042f8 <MX_UART4_Init+0x19c>)
 80042a4:	f7ff fc3f 	bl	8003b26 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART4);
 80042a8:	4813      	ldr	r0, [pc, #76]	@ (80042f8 <MX_UART4_Init+0x19c>)
 80042aa:	f7ff fc05 	bl	8003ab8 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART4);
 80042ae:	4812      	ldr	r0, [pc, #72]	@ (80042f8 <MX_UART4_Init+0x19c>)
 80042b0:	f7ff fc60 	bl	8003b74 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART4);
 80042b4:	4810      	ldr	r0, [pc, #64]	@ (80042f8 <MX_UART4_Init+0x19c>)
 80042b6:	f7ff fc6d 	bl	8003b94 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART4);
 80042ba:	480f      	ldr	r0, [pc, #60]	@ (80042f8 <MX_UART4_Init+0x19c>)
 80042bc:	f7ff fc80 	bl	8003bc0 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART4);
 80042c0:	480d      	ldr	r0, [pc, #52]	@ (80042f8 <MX_UART4_Init+0x19c>)
 80042c2:	f7ff fbe9 	bl	8003a98 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 80042c6:	f7fe fe2d 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2200      	movs	r2, #0
 80042ce:	2106      	movs	r1, #6
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fe7d 	bl	8002fd0 <NVIC_EncodePriority>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4619      	mov	r1, r3
 80042da:	203d      	movs	r0, #61	@ 0x3d
 80042dc:	f7fe fe4e 	bl	8002f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80042e0:	203d      	movs	r0, #61	@ 0x3d
 80042e2:	f7fe fe2d 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE END UART4_Init 2 */

}
 80042e6:	bf00      	nop
 80042e8:	37d0      	adds	r7, #208	@ 0xd0
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	07000900 	.word	0x07000900
 80042f4:	42020c00 	.word	0x42020c00
 80042f8:	40004c00 	.word	0x40004c00
 80042fc:	20025bf8 	.word	0x20025bf8
 8004300:	40020000 	.word	0x40020000

08004304 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b0b4      	sub	sp, #208	@ 0xd0
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 800430a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800430e:	2294      	movs	r2, #148	@ 0x94
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f012 fa77 	bl	8016806 <memset>

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8004318:	f107 031c 	add.w	r3, r7, #28
 800431c:	2220      	movs	r2, #32
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f012 fa70 	bl	8016806 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	611a      	str	r2, [r3, #16]
 8004334:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART5_CLKSOURCE_PCLK1);
 8004336:	4858      	ldr	r0, [pc, #352]	@ (8004498 <MX_UART5_Init+0x194>)
 8004338:	f7ff f889 	bl	800344e <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800433c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004340:	f7ff fafe 	bl	8003940 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004344:	2002      	movs	r0, #2
 8004346:	f7ff fadf 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PB12   ------> UART5_RX
  PB13   ------> UART5_TX
  */
  GPIO_InitStruct.Pin = UART5_RX_RS485_2_Pin|UART5_TX_RS485_2_Pin;
 800434a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800434e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004350:	2302      	movs	r3, #2
 8004352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8004360:	230e      	movs	r3, #14
 8004362:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	4619      	mov	r1, r3
 8004368:	484c      	ldr	r0, [pc, #304]	@ (800449c <MX_UART5_Init+0x198>)
 800436a:	f008 f93e 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN UART5_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART5, LL_USART_DMA_REG_DATA_RECEIVE);
 800436e:	2101      	movs	r1, #1
 8004370:	484b      	ldr	r0, [pc, #300]	@ (80044a0 <MX_UART5_Init+0x19c>)
 8004372:	f7ff fc48 	bl	8003c06 <LL_USART_DMA_GetRegAddr>
 8004376:	4603      	mov	r3, r0
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&Line2_RX_Buffer; //(uint32_t)&LineX_RX_Buffer[Line2_BUF_Index];
 800437a:	4b4a      	ldr	r3, [pc, #296]	@ (80044a4 <MX_UART5_Init+0x1a0>)
 800437c:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800437e:	2300      	movs	r3, #0
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8004382:	2300      	movs	r3, #0
 8004384:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8004386:	2300      	movs	r3, #0
 8004388:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 800438a:	2301      	movs	r3, #1
 800438c:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8004392:	2300      	movs	r3, #0
 8004394:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8004396:	2300      	movs	r3, #0
 8004398:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 800439a:	2300      	movs	r3, #0
 800439c:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 800439e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80043a2:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80043a4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80043a8:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 80043aa:	2364      	movs	r3, #100	@ 0x64
 80043ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 80043b4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80043b8:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 80043ba:	2300      	movs	r3, #0
 80043bc:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 80043be:	2300      	movs	r3, #0
 80043c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART5_RX;
 80043c2:	231d      	movs	r3, #29
 80043c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 80043da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_1, &DMA_InitStruct);
 80043f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80043f8:	461a      	mov	r2, r3
 80043fa:	2101      	movs	r1, #1
 80043fc:	482a      	ldr	r0, [pc, #168]	@ (80044a8 <MX_UART5_Init+0x1a4>)
 80043fe:	f007 fe2b 	bl	800c058 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_1);
 8004402:	2101      	movs	r1, #1
 8004404:	4828      	ldr	r0, [pc, #160]	@ (80044a8 <MX_UART5_Init+0x1a4>)
 8004406:	f7fe fe37 	bl	8003078 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_1);
 800440a:	2101      	movs	r1, #1
 800440c:	4826      	ldr	r0, [pc, #152]	@ (80044a8 <MX_UART5_Init+0x1a4>)
 800440e:	f7fe fe13 	bl	8003038 <LL_DMA_EnableChannel>

  /* USER CODE END UART5_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 115200;
 8004416:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800441a:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004420:	2300      	movs	r3, #0
 8004422:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004424:	2300      	movs	r3, #0
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004428:	230c      	movs	r3, #12
 800442a:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800442c:	2300      	movs	r3, #0
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004430:	2300      	movs	r3, #0
 8004432:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART5, &UART_InitStruct);
 8004434:	f107 031c 	add.w	r3, r7, #28
 8004438:	4619      	mov	r1, r3
 800443a:	4819      	ldr	r0, [pc, #100]	@ (80044a0 <MX_UART5_Init+0x19c>)
 800443c:	f00a f8b2 	bl	800e5a4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART5, LL_USART_FIFOTHRESHOLD_1_8);
 8004440:	2100      	movs	r1, #0
 8004442:	4817      	ldr	r0, [pc, #92]	@ (80044a0 <MX_UART5_Init+0x19c>)
 8004444:	f7ff fb48 	bl	8003ad8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART5, LL_USART_FIFOTHRESHOLD_1_8);
 8004448:	2100      	movs	r1, #0
 800444a:	4815      	ldr	r0, [pc, #84]	@ (80044a0 <MX_UART5_Init+0x19c>)
 800444c:	f7ff fb6b 	bl	8003b26 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART5);
 8004450:	4813      	ldr	r0, [pc, #76]	@ (80044a0 <MX_UART5_Init+0x19c>)
 8004452:	f7ff fb31 	bl	8003ab8 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART5);
 8004456:	4812      	ldr	r0, [pc, #72]	@ (80044a0 <MX_UART5_Init+0x19c>)
 8004458:	f7ff fb8c 	bl	8003b74 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART5);
 800445c:	4810      	ldr	r0, [pc, #64]	@ (80044a0 <MX_UART5_Init+0x19c>)
 800445e:	f7ff fb99 	bl	8003b94 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART5);
 8004462:	480f      	ldr	r0, [pc, #60]	@ (80044a0 <MX_UART5_Init+0x19c>)
 8004464:	f7ff fbac 	bl	8003bc0 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART5);
 8004468:	480d      	ldr	r0, [pc, #52]	@ (80044a0 <MX_UART5_Init+0x19c>)
 800446a:	f7ff fb15 	bl	8003a98 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 800446e:	f7fe fd59 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8004472:	4603      	mov	r3, r0
 8004474:	2200      	movs	r2, #0
 8004476:	2106      	movs	r1, #6
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fda9 	bl	8002fd0 <NVIC_EncodePriority>
 800447e:	4603      	mov	r3, r0
 8004480:	4619      	mov	r1, r3
 8004482:	203e      	movs	r0, #62	@ 0x3e
 8004484:	f7fe fd7a 	bl	8002f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8004488:	203e      	movs	r0, #62	@ 0x3e
 800448a:	f7fe fd59 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE END UART5_Init 2 */

}
 800448e:	bf00      	nop
 8004490:	37d0      	adds	r7, #208	@ 0xd0
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	07000c00 	.word	0x07000c00
 800449c:	42020400 	.word	0x42020400
 80044a0:	40005000 	.word	0x40005000
 80044a4:	20025b94 	.word	0x20025b94
 80044a8:	40020000 	.word	0x40020000

080044ac <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b0b4      	sub	sp, #208	@ 0xd0
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 80044b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80044b6:	2294      	movs	r2, #148	@ 0x94
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f012 f9a3 	bl	8016806 <memset>

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 80044c0:	f107 031c 	add.w	r3, r7, #28
 80044c4:	2220      	movs	r2, #32
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f012 f99c 	bl	8016806 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
 80044dc:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART7_CLKSOURCE_PCLK1);
 80044de:	4858      	ldr	r0, [pc, #352]	@ (8004640 <MX_UART7_Init+0x194>)
 80044e0:	f7fe ffb5 	bl	800344e <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 80044e4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80044e8:	f7ff fa2a 	bl	8003940 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80044ec:	2001      	movs	r0, #1
 80044ee:	f7ff fa0b 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PA8   ------> UART7_RX
  PA15(JTDI)   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = UART7_RX_RS485_7_Pin|UART7_TX_RS485_7_Pin;
 80044f2:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80044f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80044f8:	2302      	movs	r3, #2
 80044fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8004508:	230b      	movs	r3, #11
 800450a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	4619      	mov	r1, r3
 8004510:	484c      	ldr	r0, [pc, #304]	@ (8004644 <MX_UART7_Init+0x198>)
 8004512:	f008 f86a 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN UART7_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART7, LL_USART_DMA_REG_DATA_RECEIVE);
 8004516:	2101      	movs	r1, #1
 8004518:	484b      	ldr	r0, [pc, #300]	@ (8004648 <MX_UART7_Init+0x19c>)
 800451a:	f7ff fb74 	bl	8003c06 <LL_USART_DMA_GetRegAddr>
 800451e:	4603      	mov	r3, r0
 8004520:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&Line7_RX_Buffer; //(uint32_t)&LineX_RX_Buffer[Line7_BUF_Index];
 8004522:	4b4a      	ldr	r3, [pc, #296]	@ (800464c <MX_UART7_Init+0x1a0>)
 8004524:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8004526:	2300      	movs	r3, #0
 8004528:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 800452a:	2300      	movs	r3, #0
 800452c:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 800452e:	2300      	movs	r3, #0
 8004530:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8004532:	2301      	movs	r3, #1
 8004534:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 800453a:	2300      	movs	r3, #0
 800453c:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 800453e:	2300      	movs	r3, #0
 8004540:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8004542:	2300      	movs	r3, #0
 8004544:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8004546:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800454a:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800454c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004550:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8004552:	2364      	movs	r3, #100	@ 0x64
 8004554:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 800455c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004560:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8004562:	2300      	movs	r3, #0
 8004564:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8004566:	2300      	movs	r3, #0
 8004568:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART7_RX;
 800456a:	2321      	movs	r3, #33	@ 0x21
 800456c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8004576:	2300      	movs	r3, #0
 8004578:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 800457c:	2300      	movs	r3, #0
 800457e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8004582:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8004596:	2300      	movs	r3, #0
 8004598:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_6, &DMA_InitStruct);
 800459c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80045a0:	461a      	mov	r2, r3
 80045a2:	2106      	movs	r1, #6
 80045a4:	482a      	ldr	r0, [pc, #168]	@ (8004650 <MX_UART7_Init+0x1a4>)
 80045a6:	f007 fd57 	bl	800c058 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_6);
 80045aa:	2106      	movs	r1, #6
 80045ac:	4828      	ldr	r0, [pc, #160]	@ (8004650 <MX_UART7_Init+0x1a4>)
 80045ae:	f7fe fd63 	bl	8003078 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_6);
 80045b2:	2106      	movs	r1, #6
 80045b4:	4826      	ldr	r0, [pc, #152]	@ (8004650 <MX_UART7_Init+0x1a4>)
 80045b6:	f7fe fd3f 	bl	8003038 <LL_DMA_EnableChannel>

  /* USER CODE END UART7_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 115200;
 80045be:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80045c2:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80045c4:	2300      	movs	r3, #0
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80045c8:	2300      	movs	r3, #0
 80045ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80045d0:	230c      	movs	r3, #12
 80045d2:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80045d8:	2300      	movs	r3, #0
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART7, &UART_InitStruct);
 80045dc:	f107 031c 	add.w	r3, r7, #28
 80045e0:	4619      	mov	r1, r3
 80045e2:	4819      	ldr	r0, [pc, #100]	@ (8004648 <MX_UART7_Init+0x19c>)
 80045e4:	f009 ffde 	bl	800e5a4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 80045e8:	2100      	movs	r1, #0
 80045ea:	4817      	ldr	r0, [pc, #92]	@ (8004648 <MX_UART7_Init+0x19c>)
 80045ec:	f7ff fa74 	bl	8003ad8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 80045f0:	2100      	movs	r1, #0
 80045f2:	4815      	ldr	r0, [pc, #84]	@ (8004648 <MX_UART7_Init+0x19c>)
 80045f4:	f7ff fa97 	bl	8003b26 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART7);
 80045f8:	4813      	ldr	r0, [pc, #76]	@ (8004648 <MX_UART7_Init+0x19c>)
 80045fa:	f7ff fa5d 	bl	8003ab8 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART7);
 80045fe:	4812      	ldr	r0, [pc, #72]	@ (8004648 <MX_UART7_Init+0x19c>)
 8004600:	f7ff fab8 	bl	8003b74 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART7);
 8004604:	4810      	ldr	r0, [pc, #64]	@ (8004648 <MX_UART7_Init+0x19c>)
 8004606:	f7ff fac5 	bl	8003b94 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART7);
 800460a:	480f      	ldr	r0, [pc, #60]	@ (8004648 <MX_UART7_Init+0x19c>)
 800460c:	f7ff fad8 	bl	8003bc0 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART7);
 8004610:	480d      	ldr	r0, [pc, #52]	@ (8004648 <MX_UART7_Init+0x19c>)
 8004612:	f7ff fa41 	bl	8003a98 <LL_USART_Enable>
  /* USER CODE BEGIN UART7_Init 2 */
  NVIC_SetPriority(UART7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8004616:	f7fe fc85 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 800461a:	4603      	mov	r3, r0
 800461c:	2200      	movs	r2, #0
 800461e:	2106      	movs	r1, #6
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe fcd5 	bl	8002fd0 <NVIC_EncodePriority>
 8004626:	4603      	mov	r3, r0
 8004628:	4619      	mov	r1, r3
 800462a:	2062      	movs	r0, #98	@ 0x62
 800462c:	f7fe fca6 	bl	8002f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART7_IRQn);
 8004630:	2062      	movs	r0, #98	@ 0x62
 8004632:	f7fe fc85 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE END UART7_Init 2 */

}
 8004636:	bf00      	nop
 8004638:	37d0      	adds	r7, #208	@ 0xd0
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	07001200 	.word	0x07001200
 8004644:	42020000 	.word	0x42020000
 8004648:	40007800 	.word	0x40007800
 800464c:	20025d88 	.word	0x20025d88
 8004650:	40020000 	.word	0x40020000

08004654 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b0b4      	sub	sp, #208	@ 0xd0
 8004658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 800465a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800465e:	2294      	movs	r2, #148	@ 0x94
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f012 f8cf 	bl	8016806 <memset>

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004668:	f107 031c 	add.w	r3, r7, #28
 800466c:	2220      	movs	r2, #32
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f012 f8c8 	bl	8016806 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
 8004684:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 8004686:	4858      	ldr	r0, [pc, #352]	@ (80047e8 <MX_USART3_UART_Init+0x194>)
 8004688:	f7fe fed6 	bl	8003438 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800468c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004690:	f7ff f956 	bl	8003940 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004694:	2002      	movs	r0, #2
 8004696:	f7ff f937 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = UART3_TX_RS485_1_Pin|UART3_RX_RS485_1_Pin;
 800469a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800469e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80046a0:	2302      	movs	r3, #2
 80046a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80046b0:	2307      	movs	r3, #7
 80046b2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	484c      	ldr	r0, [pc, #304]	@ (80047ec <MX_USART3_UART_Init+0x198>)
 80046ba:	f007 ff96 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */
  DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART3, LL_USART_DMA_REG_DATA_RECEIVE);
 80046be:	2101      	movs	r1, #1
 80046c0:	484b      	ldr	r0, [pc, #300]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 80046c2:	f7ff faa0 	bl	8003c06 <LL_USART_DMA_GetRegAddr>
 80046c6:	4603      	mov	r3, r0
 80046c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  DMA_InitStruct.DestAddress = (uint32_t)&Line1_RX_Buffer; //(uint32_t)&LineX_RX_Buffer[Line1_BUF_Index];
 80046ca:	4b4a      	ldr	r3, [pc, #296]	@ (80047f4 <MX_USART3_UART_Init+0x1a0>)
 80046cc:	643b      	str	r3, [r7, #64]	@ 0x40
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80046ce:	2300      	movs	r3, #0
 80046d0:	647b      	str	r3, [r7, #68]	@ 0x44
  DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 80046d2:	2300      	movs	r3, #0
 80046d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 80046d6:	2300      	movs	r3, #0
 80046d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  DMA_InitStruct.SrcBurstLength = 1;
 80046da:	2301      	movs	r3, #1
 80046dc:	653b      	str	r3, [r7, #80]	@ 0x50
  DMA_InitStruct.DestBurstLength = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	657b      	str	r3, [r7, #84]	@ 0x54
  DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 80046ea:	2300      	movs	r3, #0
 80046ec:	663b      	str	r3, [r7, #96]	@ 0x60
  DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 80046ee:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80046f2:	667b      	str	r3, [r7, #100]	@ 0x64
  DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80046f4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80046f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 80046fa:	2364      	movs	r3, #100	@ 0x64
 80046fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  DMA_InitStruct.Mode = LL_DMA_NORMAL;
 80046fe:	2300      	movs	r3, #0
 8004700:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8004704:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004708:	677b      	str	r3, [r7, #116]	@ 0x74
  DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 800470a:	2300      	movs	r3, #0
 800470c:	67bb      	str	r3, [r7, #120]	@ 0x78
  DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 800470e:	2300      	movs	r3, #0
 8004710:	67fb      	str	r3, [r7, #124]	@ 0x7c
  DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART3_RX;
 8004712:	2319      	movs	r3, #25
 8004714:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8004718:	2300      	movs	r3, #0
 800471a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
  DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 800472a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800472e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8004732:	2300      	movs	r3, #0
 8004734:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_0, &DMA_InitStruct);
 8004744:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004748:	461a      	mov	r2, r3
 800474a:	2100      	movs	r1, #0
 800474c:	482a      	ldr	r0, [pc, #168]	@ (80047f8 <MX_USART3_UART_Init+0x1a4>)
 800474e:	f007 fc83 	bl	800c058 <LL_DMA_Init>

  LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_0);
 8004752:	2100      	movs	r1, #0
 8004754:	4828      	ldr	r0, [pc, #160]	@ (80047f8 <MX_USART3_UART_Init+0x1a4>)
 8004756:	f7fe fc8f 	bl	8003078 <LL_DMA_EnableIT_TC>

  LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_0);
 800475a:	2100      	movs	r1, #0
 800475c:	4826      	ldr	r0, [pc, #152]	@ (80047f8 <MX_USART3_UART_Init+0x1a4>)
 800475e:	f7fe fc6b 	bl	8003038 <LL_DMA_EnableChannel>

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 115200;
 8004766:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800476a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800476c:	2300      	movs	r3, #0
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004770:	2300      	movs	r3, #0
 8004772:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004774:	2300      	movs	r3, #0
 8004776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004778:	230c      	movs	r3, #12
 800477a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800477c:	2300      	movs	r3, #0
 800477e:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004780:	2300      	movs	r3, #0
 8004782:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART3, &USART_InitStruct);
 8004784:	f107 031c 	add.w	r3, r7, #28
 8004788:	4619      	mov	r1, r3
 800478a:	4819      	ldr	r0, [pc, #100]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 800478c:	f009 ff0a 	bl	800e5a4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8004790:	2100      	movs	r1, #0
 8004792:	4817      	ldr	r0, [pc, #92]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 8004794:	f7ff f9a0 	bl	8003ad8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8004798:	2100      	movs	r1, #0
 800479a:	4815      	ldr	r0, [pc, #84]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 800479c:	f7ff f9c3 	bl	8003b26 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 80047a0:	4813      	ldr	r0, [pc, #76]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 80047a2:	f7ff f989 	bl	8003ab8 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART3);
 80047a6:	4812      	ldr	r0, [pc, #72]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 80047a8:	f7ff f9e4 	bl	8003b74 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART3);
 80047ac:	4810      	ldr	r0, [pc, #64]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 80047ae:	f7ff f9f1 	bl	8003b94 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART3);
 80047b2:	480f      	ldr	r0, [pc, #60]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 80047b4:	f7ff fa04 	bl	8003bc0 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART3);
 80047b8:	480d      	ldr	r0, [pc, #52]	@ (80047f0 <MX_USART3_UART_Init+0x19c>)
 80047ba:	f7ff f96d 	bl	8003a98 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 80047be:	f7fe fbb1 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2200      	movs	r2, #0
 80047c6:	2106      	movs	r1, #6
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fe fc01 	bl	8002fd0 <NVIC_EncodePriority>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4619      	mov	r1, r3
 80047d2:	203c      	movs	r0, #60	@ 0x3c
 80047d4:	f7fe fbd2 	bl	8002f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80047d8:	203c      	movs	r0, #60	@ 0x3c
 80047da:	f7fe fbb1 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE END USART3_Init 2 */

}
 80047de:	bf00      	nop
 80047e0:	37d0      	adds	r7, #208	@ 0xd0
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	07000600 	.word	0x07000600
 80047ec:	42020400 	.word	0x42020400
 80047f0:	40004800 	.word	0x40004800
 80047f4:	20025b30 	.word	0x20025b30
 80047f8:	40020000 	.word	0x40020000

080047fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b0b4      	sub	sp, #208	@ 0xd0
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8004802:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004806:	2294      	movs	r2, #148	@ 0x94
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f011 fffb 	bl	8016806 <memset>

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004810:	f107 031c 	add.w	r3, r7, #28
 8004814:	2220      	movs	r2, #32
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f011 fff4 	bl	8016806 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
 800482c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART6_CLKSOURCE_PCLK1);
 800482e:	4857      	ldr	r0, [pc, #348]	@ (800498c <MX_USART6_UART_Init+0x190>)
 8004830:	f7fe fe02 	bl	8003438 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART6);
 8004834:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8004838:	f7ff f882 	bl	8003940 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800483c:	2004      	movs	r0, #4
 800483e:	f7ff f863 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = UART6_TX_RS485_4_Pin|UART6_RX_RS485_4_Pin;
 8004842:	23c0      	movs	r3, #192	@ 0xc0
 8004844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004846:	2302      	movs	r3, #2
 8004848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004856:	2307      	movs	r3, #7
 8004858:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	4619      	mov	r1, r3
 800485e:	484c      	ldr	r0, [pc, #304]	@ (8004990 <MX_USART6_UART_Init+0x194>)
 8004860:	f007 fec3 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN USART6_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART6, LL_USART_DMA_REG_DATA_RECEIVE);
 8004864:	2101      	movs	r1, #1
 8004866:	484b      	ldr	r0, [pc, #300]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 8004868:	f7ff f9cd 	bl	8003c06 <LL_USART_DMA_GetRegAddr>
 800486c:	4603      	mov	r3, r0
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&Line4_RX_Buffer; //(uint32_t)&LineX_RX_Buffer[Line4_BUF_Index];
 8004870:	4b49      	ldr	r3, [pc, #292]	@ (8004998 <MX_USART6_UART_Init+0x19c>)
 8004872:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8004874:	2300      	movs	r3, #0
 8004876:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8004878:	2300      	movs	r3, #0
 800487a:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 800487c:	2300      	movs	r3, #0
 800487e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8004880:	2301      	movs	r3, #1
 8004882:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8004884:	2301      	movs	r3, #1
 8004886:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8004888:	2300      	movs	r3, #0
 800488a:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 800488c:	2300      	movs	r3, #0
 800488e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8004890:	2300      	movs	r3, #0
 8004892:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8004894:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004898:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800489a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800489e:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 80048a0:	2364      	movs	r3, #100	@ 0x64
 80048a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 80048aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80048ae:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 80048b0:	2300      	movs	r3, #0
 80048b2:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 80048b4:	2300      	movs	r3, #0
 80048b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART6_RX;
 80048b8:	231f      	movs	r3, #31
 80048ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 80048be:	2300      	movs	r3, #0
 80048c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 80048d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 80048d8:	2300      	movs	r3, #0
 80048da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 80048de:	2300      	movs	r3, #0
 80048e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_3, &DMA_InitStruct);
 80048ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80048ee:	461a      	mov	r2, r3
 80048f0:	2103      	movs	r1, #3
 80048f2:	482a      	ldr	r0, [pc, #168]	@ (800499c <MX_USART6_UART_Init+0x1a0>)
 80048f4:	f007 fbb0 	bl	800c058 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_3);
 80048f8:	2103      	movs	r1, #3
 80048fa:	4828      	ldr	r0, [pc, #160]	@ (800499c <MX_USART6_UART_Init+0x1a0>)
 80048fc:	f7fe fbbc 	bl	8003078 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_3);
 8004900:	2103      	movs	r1, #3
 8004902:	4826      	ldr	r0, [pc, #152]	@ (800499c <MX_USART6_UART_Init+0x1a0>)
 8004904:	f7fe fb98 	bl	8003038 <LL_DMA_EnableChannel>

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 115200;
 800490c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004910:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800491a:	2300      	movs	r3, #0
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800491e:	230c      	movs	r3, #12
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004922:	2300      	movs	r3, #0
 8004924:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004926:	2300      	movs	r3, #0
 8004928:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART6, &USART_InitStruct);
 800492a:	f107 031c 	add.w	r3, r7, #28
 800492e:	4619      	mov	r1, r3
 8004930:	4818      	ldr	r0, [pc, #96]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 8004932:	f009 fe37 	bl	800e5a4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8004936:	2100      	movs	r1, #0
 8004938:	4816      	ldr	r0, [pc, #88]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 800493a:	f7ff f8cd 	bl	8003ad8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 800493e:	2100      	movs	r1, #0
 8004940:	4814      	ldr	r0, [pc, #80]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 8004942:	f7ff f8f0 	bl	8003b26 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8004946:	4813      	ldr	r0, [pc, #76]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 8004948:	f7ff f8b6 	bl	8003ab8 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART6);
 800494c:	4811      	ldr	r0, [pc, #68]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 800494e:	f7ff f911 	bl	8003b74 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART6);
 8004952:	4810      	ldr	r0, [pc, #64]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 8004954:	f7ff f91e 	bl	8003b94 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART6);
 8004958:	480e      	ldr	r0, [pc, #56]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 800495a:	f7ff f931 	bl	8003bc0 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART6);
 800495e:	480d      	ldr	r0, [pc, #52]	@ (8004994 <MX_USART6_UART_Init+0x198>)
 8004960:	f7ff f89a 	bl	8003a98 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8004964:	f7fe fade 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8004968:	4603      	mov	r3, r0
 800496a:	2200      	movs	r2, #0
 800496c:	2106      	movs	r1, #6
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fb2e 	bl	8002fd0 <NVIC_EncodePriority>
 8004974:	4603      	mov	r3, r0
 8004976:	4619      	mov	r1, r3
 8004978:	2055      	movs	r0, #85	@ 0x55
 800497a:	f7fe faff 	bl	8002f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800497e:	2055      	movs	r0, #85	@ 0x55
 8004980:	f7fe fade 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE END USART6_Init 2 */

}
 8004984:	bf00      	nop
 8004986:	37d0      	adds	r7, #208	@ 0xd0
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	07000f00 	.word	0x07000f00
 8004990:	42020800 	.word	0x42020800
 8004994:	40006400 	.word	0x40006400
 8004998:	20025c5c 	.word	0x20025c5c
 800499c:	40020000 	.word	0x40020000

080049a0 <MX_USART11_UART_Init>:
  * @brief USART11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART11_UART_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b0b4      	sub	sp, #208	@ 0xd0
 80049a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART11_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 80049a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80049aa:	2294      	movs	r2, #148	@ 0x94
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f011 ff29 	bl	8016806 <memset>

  /* USER CODE END USART11_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80049b4:	f107 031c 	add.w	r3, r7, #28
 80049b8:	2220      	movs	r2, #32
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f011 ff22 	bl	8016806 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c2:	1d3b      	adds	r3, r7, #4
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	611a      	str	r2, [r3, #16]
 80049d0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART11_CLKSOURCE_PCLK1);
 80049d2:	4857      	ldr	r0, [pc, #348]	@ (8004b30 <MX_USART11_UART_Init+0x190>)
 80049d4:	f7fe fd30 	bl	8003438 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART11);
 80049d8:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80049dc:	f7fe ffb0 	bl	8003940 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80049e0:	2001      	movs	r0, #1
 80049e2:	f7fe ff91 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**USART11 GPIO Configuration
  PA6   ------> USART11_TX
  PA7   ------> USART11_RX
  */
  GPIO_InitStruct.Pin = UART11_TX_RS485_6_Pin|UART11_RX_RS485_6_Pin;
 80049e6:	23c0      	movs	r3, #192	@ 0xc0
 80049e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049ea:	2302      	movs	r3, #2
 80049ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80049fa:	2307      	movs	r3, #7
 80049fc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	484c      	ldr	r0, [pc, #304]	@ (8004b34 <MX_USART11_UART_Init+0x194>)
 8004a04:	f007 fdf1 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN USART11_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART11, LL_USART_DMA_REG_DATA_RECEIVE);
 8004a08:	2101      	movs	r1, #1
 8004a0a:	484b      	ldr	r0, [pc, #300]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004a0c:	f7ff f8fb 	bl	8003c06 <LL_USART_DMA_GetRegAddr>
 8004a10:	4603      	mov	r3, r0
 8004a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&Line6_RX_Buffer; //(uint32_t)&LineX_RX_Buffer[Line6_BUF_Index];
 8004a14:	4b49      	ldr	r3, [pc, #292]	@ (8004b3c <MX_USART11_UART_Init+0x19c>)
 8004a16:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8004a20:	2300      	movs	r3, #0
 8004a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8004a34:	2300      	movs	r3, #0
 8004a36:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8004a38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004a3c:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8004a3e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004a42:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8004a44:	2364      	movs	r3, #100	@ 0x64
 8004a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8004a4e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004a52:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8004a54:	2300      	movs	r3, #0
 8004a56:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART11_RX;
 8004a5c:	2329      	movs	r3, #41	@ 0x29
 8004a5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8004a74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_5, &DMA_InitStruct);
 8004a8e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004a92:	461a      	mov	r2, r3
 8004a94:	2105      	movs	r1, #5
 8004a96:	482a      	ldr	r0, [pc, #168]	@ (8004b40 <MX_USART11_UART_Init+0x1a0>)
 8004a98:	f007 fade 	bl	800c058 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_5);
 8004a9c:	2105      	movs	r1, #5
 8004a9e:	4828      	ldr	r0, [pc, #160]	@ (8004b40 <MX_USART11_UART_Init+0x1a0>)
 8004aa0:	f7fe faea 	bl	8003078 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_5);
 8004aa4:	2105      	movs	r1, #5
 8004aa6:	4826      	ldr	r0, [pc, #152]	@ (8004b40 <MX_USART11_UART_Init+0x1a0>)
 8004aa8:	f7fe fac6 	bl	8003038 <LL_DMA_EnableChannel>

  /* USER CODE END USART11_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 115200;
 8004ab0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004ab4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004aba:	2300      	movs	r3, #0
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004aca:	2300      	movs	r3, #0
 8004acc:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART11, &USART_InitStruct);
 8004ace:	f107 031c 	add.w	r3, r7, #28
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4818      	ldr	r0, [pc, #96]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004ad6:	f009 fd65 	bl	800e5a4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART11, LL_USART_FIFOTHRESHOLD_1_8);
 8004ada:	2100      	movs	r1, #0
 8004adc:	4816      	ldr	r0, [pc, #88]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004ade:	f7fe fffb 	bl	8003ad8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART11, LL_USART_FIFOTHRESHOLD_1_8);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4814      	ldr	r0, [pc, #80]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004ae6:	f7ff f81e 	bl	8003b26 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART11);
 8004aea:	4813      	ldr	r0, [pc, #76]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004aec:	f7fe ffe4 	bl	8003ab8 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART11);
 8004af0:	4811      	ldr	r0, [pc, #68]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004af2:	f7ff f83f 	bl	8003b74 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART11);
 8004af6:	4810      	ldr	r0, [pc, #64]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004af8:	f7ff f84c 	bl	8003b94 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART11);
 8004afc:	480e      	ldr	r0, [pc, #56]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004afe:	f7ff f85f 	bl	8003bc0 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART11);
 8004b02:	480d      	ldr	r0, [pc, #52]	@ (8004b38 <MX_USART11_UART_Init+0x198>)
 8004b04:	f7fe ffc8 	bl	8003a98 <LL_USART_Enable>
  /* USER CODE BEGIN USART11_Init 2 */
  NVIC_SetPriority(USART11_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8004b08:	f7fe fa0c 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2106      	movs	r1, #6
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe fa5c 	bl	8002fd0 <NVIC_EncodePriority>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	2057      	movs	r0, #87	@ 0x57
 8004b1e:	f7fe fa2d 	bl	8002f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART11_IRQn);
 8004b22:	2057      	movs	r0, #87	@ 0x57
 8004b24:	f7fe fa0c 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE END USART11_Init 2 */

}
 8004b28:	bf00      	nop
 8004b2a:	37d0      	adds	r7, #208	@ 0xd0
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	07000004 	.word	0x07000004
 8004b34:	42020000 	.word	0x42020000
 8004b38:	40006c00 	.word	0x40006c00
 8004b3c:	20025d24 	.word	0x20025d24
 8004b40:	40020000 	.word	0x40020000

08004b44 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b0b6      	sub	sp, #216	@ 0xd8
 8004b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004b4a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8004b4e:	2228      	movs	r2, #40	@ 0x28
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f011 fe57 	bl	8016806 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b58:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	611a      	str	r2, [r3, #16]
 8004b68:	615a      	str	r2, [r3, #20]
  LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	2294      	movs	r2, #148	@ 0x94
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f011 fe48 	bl	8016806 <memset>

  LL_RCC_SetSPIClockSource(LL_RCC_SPI3_CLKSOURCE_PLL2P);
 8004b76:	482c      	ldr	r0, [pc, #176]	@ (8004c28 <MX_SPI3_Init+0xe4>)
 8004b78:	f7fe fc8a 	bl	8003490 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004b7c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004b80:	f7fe fede 	bl	8003940 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004b84:	2004      	movs	r0, #4
 8004b86:	f7fe febf 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8004b8a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004b8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004b92:	2302      	movs	r3, #2
 8004b94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8004baa:	2306      	movs	r3, #6
 8004bac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bb0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	481d      	ldr	r0, [pc, #116]	@ (8004c2c <MX_SPI3_Init+0xe8>)
 8004bb8:	f007 fd17 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
    SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004bc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT; //LL_SPI_DATAWIDTH_16BIT;
 8004bca:	2307      	movs	r3, #7
 8004bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004bdc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004be0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8004be4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004be8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	SPI_InitStruct.CRCPoly = 0x7;
 8004bf8:	2307      	movs	r3, #7
 8004bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004bfe:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8004c02:	4619      	mov	r1, r3
 8004c04:	480a      	ldr	r0, [pc, #40]	@ (8004c30 <MX_SPI3_Init+0xec>)
 8004c06:	f009 fbb1 	bl	800e36c <LL_SPI_Init>
	LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4808      	ldr	r0, [pc, #32]	@ (8004c30 <MX_SPI3_Init+0xec>)
 8004c0e:	f7fe ff0d 	bl	8003a2c <LL_SPI_SetStandard>
	LL_SPI_EnableNSSPulseMgt(SPI3);
 8004c12:	4807      	ldr	r0, [pc, #28]	@ (8004c30 <MX_SPI3_Init+0xec>)
 8004c14:	f7fe ff30 	bl	8003a78 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4805      	ldr	r0, [pc, #20]	@ (8004c30 <MX_SPI3_Init+0xec>)
 8004c1c:	f7fe ff19 	bl	8003a52 <LL_SPI_SetFIFOThreshold>
  //LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
  //LL_SPI_DMA_GetTxRegAddr(const SPI_TypeDef *SPIx)
  //LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
  /* USER CODE END SPI3_Init 2 */

}
 8004c20:	bf00      	nop
 8004c22:	37d8      	adds	r7, #216	@ 0xd8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	07010608 	.word	0x07010608
 8004c2c:	42020800 	.word	0x42020800
 8004c30:	40003c00 	.word	0x40003c00

08004c34 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b090      	sub	sp, #64	@ 0x40
 8004c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004c3a:	f107 0318 	add.w	r3, r7, #24
 8004c3e:	2228      	movs	r2, #40	@ 0x28
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f011 fddf 	bl	8016806 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c48:	463b      	mov	r3, r7
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	611a      	str	r2, [r3, #16]
 8004c56:	615a      	str	r2, [r3, #20]

  LL_RCC_SetSPIClockSource(LL_RCC_SPI6_CLKSOURCE_PCLK2);
 8004c58:	4823      	ldr	r0, [pc, #140]	@ (8004ce8 <MX_SPI6_Init+0xb4>)
 8004c5a:	f7fe fc19 	bl	8003490 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI6);
 8004c5e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004c62:	f7fe fe89 	bl	8003978 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004c66:	2002      	movs	r0, #2
 8004c68:	f7fe fe4e 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PB3(JTDO/TRACESWO)   ------> SPI6_SCK
  PB4(NJTRST)   ------> SPI6_MISO
  PB5   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8004c6c:	2338      	movs	r3, #56	@ 0x38
 8004c6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c70:	2302      	movs	r3, #2
 8004c72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004c80:	2308      	movs	r3, #8
 8004c82:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c84:	463b      	mov	r3, r7
 8004c86:	4619      	mov	r1, r3
 8004c88:	4818      	ldr	r0, [pc, #96]	@ (8004cec <MX_SPI6_Init+0xb8>)
 8004c8a:	f007 fcae 	bl	800c5ea <LL_GPIO_Init>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004c92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c96:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004c98:	2307      	movs	r3, #7
 8004c9a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004ca4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 8004caa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004cae:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 0x7;
 8004cb8:	2307      	movs	r3, #7
 8004cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 8004cbc:	f107 0318 	add.w	r3, r7, #24
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	480b      	ldr	r0, [pc, #44]	@ (8004cf0 <MX_SPI6_Init+0xbc>)
 8004cc4:	f009 fb52 	bl	800e36c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4809      	ldr	r0, [pc, #36]	@ (8004cf0 <MX_SPI6_Init+0xbc>)
 8004ccc:	f7fe feae 	bl	8003a2c <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 8004cd0:	4807      	ldr	r0, [pc, #28]	@ (8004cf0 <MX_SPI6_Init+0xbc>)
 8004cd2:	f7fe fed1 	bl	8003a78 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_SetFIFOThreshold(SPI6, LL_SPI_FIFO_TH_01DATA);
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4805      	ldr	r0, [pc, #20]	@ (8004cf0 <MX_SPI6_Init+0xbc>)
 8004cda:	f7fe feba 	bl	8003a52 <LL_SPI_SetFIFOThreshold>
  /* USER CODE END SPI6_Init 2 */

}
 8004cde:	bf00      	nop
 8004ce0:	3740      	adds	r7, #64	@ 0x40
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	07000f08 	.word	0x07000f08
 8004cec:	42020400 	.word	0x42020400
 8004cf0:	40015000 	.word	0x40015000

08004cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	60da      	str	r2, [r3, #12]
 8004d06:	611a      	str	r2, [r3, #16]
 8004d08:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004d0a:	2004      	movs	r0, #4
 8004d0c:	f7fe fdfc 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8004d10:	2080      	movs	r0, #128	@ 0x80
 8004d12:	f7fe fdf9 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004d16:	2001      	movs	r0, #1
 8004d18:	f7fe fdf6 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004d1c:	2002      	movs	r0, #2
 8004d1e:	f7fe fdf3 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8004d22:	2008      	movs	r0, #8
 8004d24:	f7fe fdf0 	bl	8003908 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, SPI_TFT_CS_Pin|TFT_RS_Pin|Touch_CS_Pin|RS485_2_DE_Pin
 8004d28:	f246 3103 	movw	r1, #25347	@ 0x6303
 8004d2c:	481b      	ldr	r0, [pc, #108]	@ (8004d9c <MX_GPIO_Init+0xa8>)
 8004d2e:	f7fe ff80 	bl	8003c32 <LL_GPIO_ResetOutputPin>
                          |RS485_5_DE_Pin|Power27V_Ctrl_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, RS485_1_DE_Pin|RS485_6_DE_Pin|RS485_7_DE_Pin|RS485_3_DE_Pin
 8004d32:	f24c 0107 	movw	r1, #49159	@ 0xc007
 8004d36:	481a      	ldr	r0, [pc, #104]	@ (8004da0 <MX_GPIO_Init+0xac>)
 8004d38:	f7fe ff7b 	bl	8003c32 <LL_GPIO_ResetOutputPin>
                          |RS485_4_DE_Pin);

  /**/
  GPIO_InitStruct.Pin = SPI_TFT_CS_Pin|TFT_RS_Pin|Touch_CS_Pin|RS485_2_DE_Pin
 8004d3c:	f246 3303 	movw	r3, #25347	@ 0x6303
 8004d40:	603b      	str	r3, [r7, #0]
                          |RS485_5_DE_Pin|Power27V_Ctrl_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004d42:	2301      	movs	r3, #1
 8004d44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004d46:	2302      	movs	r3, #2
 8004d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d52:	463b      	mov	r3, r7
 8004d54:	4619      	mov	r1, r3
 8004d56:	4811      	ldr	r0, [pc, #68]	@ (8004d9c <MX_GPIO_Init+0xa8>)
 8004d58:	f007 fc47 	bl	800c5ea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Touch_IRQ_Pin;
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004d60:	2300      	movs	r3, #0
 8004d62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004d64:	2301      	movs	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Touch_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004d68:	463b      	mov	r3, r7
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	480b      	ldr	r0, [pc, #44]	@ (8004d9c <MX_GPIO_Init+0xa8>)
 8004d6e:	f007 fc3c 	bl	800c5ea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RS485_1_DE_Pin|RS485_6_DE_Pin|RS485_7_DE_Pin|RS485_3_DE_Pin
 8004d72:	f24c 0307 	movw	r3, #49159	@ 0xc007
 8004d76:	603b      	str	r3, [r7, #0]
                          |RS485_4_DE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d88:	463b      	mov	r3, r7
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4804      	ldr	r0, [pc, #16]	@ (8004da0 <MX_GPIO_Init+0xac>)
 8004d8e:	f007 fc2c 	bl	800c5ea <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004d92:	bf00      	nop
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	42020800 	.word	0x42020800
 8004da0:	42020400 	.word	0x42020400

08004da4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8004da8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004dac:	f7fe fd90 	bl	80038d0 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 8004db0:	2100      	movs	r1, #0
 8004db2:	480b      	ldr	r0, [pc, #44]	@ (8004de0 <MX_CRC_Init+0x3c>)
 8004db4:	f7fe ff5e 	bl	8003c74 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 8004db8:	2100      	movs	r1, #0
 8004dba:	4809      	ldr	r0, [pc, #36]	@ (8004de0 <MX_CRC_Init+0x3c>)
 8004dbc:	f7fe ff6d 	bl	8003c9a <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 8004dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc4:	4806      	ldr	r0, [pc, #24]	@ (8004de0 <MX_CRC_Init+0x3c>)
 8004dc6:	f7fe ff7b 	bl	8003cc0 <LL_CRC_SetInitialData>
  LL_CRC_SetPolynomialCoef(CRC, 0x1021);
 8004dca:	f241 0121 	movw	r1, #4129	@ 0x1021
 8004dce:	4804      	ldr	r0, [pc, #16]	@ (8004de0 <MX_CRC_Init+0x3c>)
 8004dd0:	f7fe ff84 	bl	8003cdc <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_16B);
 8004dd4:	2108      	movs	r1, #8
 8004dd6:	4802      	ldr	r0, [pc, #8]	@ (8004de0 <MX_CRC_Init+0x3c>)
 8004dd8:	f7fe ff39 	bl	8003c4e <LL_CRC_SetPolynomialSize>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004ddc:	bf00      	nop
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023000 	.word	0x40023000

08004de4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
//  {
//    Error_Handler();
//  }

  /* USER CODE BEGIN USB_Init 2 */
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	609a      	str	r2, [r3, #8]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	611a      	str	r2, [r3, #16]
 8004dfa:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8004dfc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004e00:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004e02:	2302      	movs	r3, #2
 8004e04:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004e06:	2303      	movs	r3, #3
 8004e08:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8004e12:	230a      	movs	r3, #10
 8004e14:	61fb      	str	r3, [r7, #28]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4815      	ldr	r0, [pc, #84]	@ (8004e74 <MX_USB_PCD_Init+0x90>)
 8004e1e:	f007 fbe4 	bl	800c5ea <LL_GPIO_Init>

	 LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_HSI48);
 8004e22:	2030      	movs	r0, #48	@ 0x30
 8004e24:	f7fe fb40 	bl	80034a8 <LL_RCC_SetUSBClockSource>

	  /* Enable VDDUSB */
	  HAL_PWREx_EnableVddUSB();
 8004e28:	f004 fe1c 	bl	8009a64 <HAL_PWREx_EnableVddUSB>
	    /* Peripheral clock enable */
	    __HAL_RCC_USB_CLK_ENABLE();
 8004e2c:	4b12      	ldr	r3, [pc, #72]	@ (8004e78 <MX_USB_PCD_Init+0x94>)
 8004e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e32:	4a11      	ldr	r2, [pc, #68]	@ (8004e78 <MX_USB_PCD_Init+0x94>)
 8004e34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e38:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e78 <MX_USB_PCD_Init+0x94>)
 8004e3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e46:	607b      	str	r3, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
	    /* USB_DRD_FS interrupt Init */
//	    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
//	    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);

	    NVIC_SetPriority(USB_DRD_FS_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004e4a:	f7fe f86b 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2200      	movs	r2, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe f8bb 	bl	8002fd0 <NVIC_EncodePriority>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	204a      	movs	r0, #74	@ 0x4a
 8004e60:	f7fe f88c 	bl	8002f7c <__NVIC_SetPriority>
	    NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8004e64:	204a      	movs	r0, #74	@ 0x4a
 8004e66:	f7fe f86b 	bl	8002f40 <__NVIC_EnableIRQ>

  /* USER CODE END USB_Init 2 */

}
 8004e6a:	bf00      	nop
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	42020000 	.word	0x42020000
 8004e78:	44020c00 	.word	0x44020c00

08004e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e80:	b672      	cpsid	i
}
 8004e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <Error_Handler+0x8>

08004e88 <LL_DMA_EnableChannel>:
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004e96:	4a0b      	ldr	r2, [pc, #44]	@ (8004ec4 <LL_DMA_EnableChannel+0x3c>)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	4907      	ldr	r1, [pc, #28]	@ (8004ec4 <LL_DMA_EnableChannel+0x3c>)
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	6153      	str	r3, [r2, #20]
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	08018c90 	.word	0x08018c90

08004ec8 <LL_DMA_DisableChannel>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR,
 8004ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8004f04 <LL_DMA_DisableChannel+0x3c>)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	4907      	ldr	r1, [pc, #28]	@ (8004f04 <LL_DMA_DisableChannel+0x3c>)
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f043 0306 	orr.w	r3, r3, #6
 8004ef4:	6153      	str	r3, [r2, #20]
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	08018c90 	.word	0x08018c90

08004f08 <LL_DMA_SuspendChannel>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_SUSP);
 8004f16:	4a0b      	ldr	r2, [pc, #44]	@ (8004f44 <LL_DMA_SuspendChannel+0x3c>)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	4907      	ldr	r1, [pc, #28]	@ (8004f44 <LL_DMA_SuspendChannel+0x3c>)
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	6153      	str	r3, [r2, #20]
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	08018c90 	.word	0x08018c90

08004f48 <LL_DMA_SetBlkDataLength>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BNDT,
 8004f58:	4a0c      	ldr	r2, [pc, #48]	@ (8004f8c <LL_DMA_SetBlkDataLength+0x44>)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f66:	0c1b      	lsrs	r3, r3, #16
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	4908      	ldr	r1, [pc, #32]	@ (8004f8c <LL_DMA_SetBlkDataLength+0x44>)
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	440a      	add	r2, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	648b      	str	r3, [r1, #72]	@ 0x48
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	08018c90 	.word	0x08018c90

08004f90 <LL_DMA_SetDestAddress>:
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 8004fa0:	4a07      	ldr	r2, [pc, #28]	@ (8004fc0 <LL_DMA_SetDestAddress+0x30>)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	08018c90 	.word	0x08018c90

08004fc4 <LL_DMA_ClearFlag_SUSP>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_SUSPF);
 8004fd2:	4a08      	ldr	r2, [pc, #32]	@ (8004ff4 <LL_DMA_ClearFlag_SUSP+0x30>)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fe4:	60d3      	str	r3, [r2, #12]
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	08018c90 	.word	0x08018c90

08004ff8 <LL_DMA_ClearFlag_HT>:
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_HTF);
 8005006:	4a08      	ldr	r2, [pc, #32]	@ (8005028 <LL_DMA_ClearFlag_HT+0x30>)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	461a      	mov	r2, r3
 8005014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005018:	60d3      	str	r3, [r2, #12]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	08018c90 	.word	0x08018c90

0800502c <LL_DMA_ClearFlag_TC>:
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_TCF);
 800503a:	4a08      	ldr	r2, [pc, #32]	@ (800505c <LL_DMA_ClearFlag_TC+0x30>)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	461a      	mov	r2, r3
 8005048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800504c:	60d3      	str	r3, [r2, #12]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	08018c90 	.word	0x08018c90

08005060 <LL_DMA_EnableIT_TC>:
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800506e:	4a0b      	ldr	r2, [pc, #44]	@ (800509c <LL_DMA_EnableIT_TC+0x3c>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	4907      	ldr	r1, [pc, #28]	@ (800509c <LL_DMA_EnableIT_TC+0x3c>)
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	440a      	add	r2, r1
 8005088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508c:	6153      	str	r3, [r2, #20]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	08018c90 	.word	0x08018c90

080050a0 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80050ae:	4a0b      	ldr	r2, [pc, #44]	@ (80050dc <LL_DMA_DisableIT_TC+0x3c>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4907      	ldr	r1, [pc, #28]	@ (80050dc <LL_DMA_DisableIT_TC+0x3c>)
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	440a      	add	r2, r1
 80050c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050cc:	6153      	str	r3, [r2, #20]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	08018c90 	.word	0x08018c90

080050e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <NMI_Handler+0x4>

080050e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <HardFault_Handler+0x4>

080050f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <MemManage_Handler+0x4>

080050f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050fc:	bf00      	nop
 80050fe:	e7fd      	b.n	80050fc <BusFault_Handler+0x4>

08005100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <UsageFault_Handler+0x4>

08005108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */
	//LL_DMA_IsActiveFlag_TC(GPDMA1, LL_DMA_CHANNEL_0)

	LL_DMA_DisableIT_TC(Line1_DMA, Line1_DMA_CH);
 800511c:	2100      	movs	r1, #0
 800511e:	4816      	ldr	r0, [pc, #88]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 8005120:	f7ff ffbe 	bl	80050a0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line1_DMA, Line1_DMA_CH);
 8005124:	2100      	movs	r1, #0
 8005126:	4814      	ldr	r0, [pc, #80]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 8005128:	f7ff feee 	bl	8004f08 <LL_DMA_SuspendChannel>
		//LL_DMA_IsActiveFlag_SUSP(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_DisableChannel(Line1_DMA, Line1_DMA_CH);
 800512c:	2100      	movs	r1, #0
 800512e:	4812      	ldr	r0, [pc, #72]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 8005130:	f7ff feca 	bl	8004ec8 <LL_DMA_DisableChannel>
		//LL_DMA_IsEnabledChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_ClearFlag_HT(Line1_DMA, Line1_DMA_CH);
 8005134:	2100      	movs	r1, #0
 8005136:	4810      	ldr	r0, [pc, #64]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 8005138:	f7ff ff5e 	bl	8004ff8 <LL_DMA_ClearFlag_HT>
		LL_DMA_ClearFlag_TC(Line1_DMA, Line1_DMA_CH);
 800513c:	2100      	movs	r1, #0
 800513e:	480e      	ldr	r0, [pc, #56]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 8005140:	f7ff ff74 	bl	800502c <LL_DMA_ClearFlag_TC>
		LL_DMA_ClearFlag_SUSP(Line1_DMA, Line1_DMA_CH);
 8005144:	2100      	movs	r1, #0
 8005146:	480c      	ldr	r0, [pc, #48]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 8005148:	f7ff ff3c 	bl	8004fc4 <LL_DMA_ClearFlag_SUSP>
		//LL_DMA_ResetChannel(GPDMA1, LL_DMA_CHANNEL_0);
		//LL_DMA_SuspendChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_IsSuspendedChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_ResumeChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_SetDestAddress(Line1_DMA, Line1_DMA_CH, (uint32_t)&Line1_RX_Buffer);
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <GPDMA1_Channel0_IRQHandler+0x64>)
 800514e:	461a      	mov	r2, r3
 8005150:	2100      	movs	r1, #0
 8005152:	4809      	ldr	r0, [pc, #36]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 8005154:	f7ff ff1c 	bl	8004f90 <LL_DMA_SetDestAddress>
		LL_DMA_SetBlkDataLength(Line1_DMA, Line1_DMA_CH, Line_BUF_Size);
 8005158:	2264      	movs	r2, #100	@ 0x64
 800515a:	2100      	movs	r1, #0
 800515c:	4806      	ldr	r0, [pc, #24]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 800515e:	f7ff fef3 	bl	8004f48 <LL_DMA_SetBlkDataLength>
		//LL_DMA_GetBlkDataLength(const DMA_TypeDef *DMAx, uint32_t Channel)

		LL_DMA_EnableIT_TC(Line1_DMA, Line1_DMA_CH);
 8005162:	2100      	movs	r1, #0
 8005164:	4804      	ldr	r0, [pc, #16]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 8005166:	f7ff ff7b 	bl	8005060 <LL_DMA_EnableIT_TC>
		LL_DMA_EnableChannel(Line1_DMA, Line1_DMA_CH);
 800516a:	2100      	movs	r1, #0
 800516c:	4802      	ldr	r0, [pc, #8]	@ (8005178 <GPDMA1_Channel0_IRQHandler+0x60>)
 800516e:	f7ff fe8b 	bl	8004e88 <LL_DMA_EnableChannel>
  /* USER CODE END GPDMA1_Channel0_IRQn 0 */

  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40020000 	.word	0x40020000
 800517c:	20025b30 	.word	0x20025b30

08005180 <GPDMA1_Channel1_IRQHandler>:

void GPDMA1_Channel1_IRQHandler(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line2_DMA, Line2_DMA_CH);
 8005184:	2101      	movs	r1, #1
 8005186:	4816      	ldr	r0, [pc, #88]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 8005188:	f7ff ff8a 	bl	80050a0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line2_DMA, Line2_DMA_CH);
 800518c:	2101      	movs	r1, #1
 800518e:	4814      	ldr	r0, [pc, #80]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 8005190:	f7ff feba 	bl	8004f08 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line2_DMA, Line2_DMA_CH);
 8005194:	2101      	movs	r1, #1
 8005196:	4812      	ldr	r0, [pc, #72]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 8005198:	f7ff fe96 	bl	8004ec8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line2_DMA, Line2_DMA_CH);
 800519c:	2101      	movs	r1, #1
 800519e:	4810      	ldr	r0, [pc, #64]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 80051a0:	f7ff ff2a 	bl	8004ff8 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line2_DMA, Line2_DMA_CH);
 80051a4:	2101      	movs	r1, #1
 80051a6:	480e      	ldr	r0, [pc, #56]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 80051a8:	f7ff ff40 	bl	800502c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line2_DMA, Line2_DMA_CH);
 80051ac:	2101      	movs	r1, #1
 80051ae:	480c      	ldr	r0, [pc, #48]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 80051b0:	f7ff ff08 	bl	8004fc4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line2_DMA, Line2_DMA_CH, (uint32_t)&Line2_RX_Buffer);
 80051b4:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <GPDMA1_Channel1_IRQHandler+0x64>)
 80051b6:	461a      	mov	r2, r3
 80051b8:	2101      	movs	r1, #1
 80051ba:	4809      	ldr	r0, [pc, #36]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 80051bc:	f7ff fee8 	bl	8004f90 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line2_DMA, Line2_DMA_CH, Line_BUF_Size);
 80051c0:	2264      	movs	r2, #100	@ 0x64
 80051c2:	2101      	movs	r1, #1
 80051c4:	4806      	ldr	r0, [pc, #24]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 80051c6:	f7ff febf 	bl	8004f48 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line2_DMA, Line2_DMA_CH);
 80051ca:	2101      	movs	r1, #1
 80051cc:	4804      	ldr	r0, [pc, #16]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 80051ce:	f7ff ff47 	bl	8005060 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line2_DMA, Line2_DMA_CH);
 80051d2:	2101      	movs	r1, #1
 80051d4:	4802      	ldr	r0, [pc, #8]	@ (80051e0 <GPDMA1_Channel1_IRQHandler+0x60>)
 80051d6:	f7ff fe57 	bl	8004e88 <LL_DMA_EnableChannel>
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40020000 	.word	0x40020000
 80051e4:	20025b94 	.word	0x20025b94

080051e8 <GPDMA1_Channel2_IRQHandler>:

void GPDMA1_Channel2_IRQHandler(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line3_DMA, Line3_DMA_CH);
 80051ec:	2102      	movs	r1, #2
 80051ee:	4816      	ldr	r0, [pc, #88]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 80051f0:	f7ff ff56 	bl	80050a0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line3_DMA, Line3_DMA_CH);
 80051f4:	2102      	movs	r1, #2
 80051f6:	4814      	ldr	r0, [pc, #80]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 80051f8:	f7ff fe86 	bl	8004f08 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line3_DMA, Line3_DMA_CH);
 80051fc:	2102      	movs	r1, #2
 80051fe:	4812      	ldr	r0, [pc, #72]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 8005200:	f7ff fe62 	bl	8004ec8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line3_DMA, Line3_DMA_CH);
 8005204:	2102      	movs	r1, #2
 8005206:	4810      	ldr	r0, [pc, #64]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 8005208:	f7ff fef6 	bl	8004ff8 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line3_DMA, Line3_DMA_CH);
 800520c:	2102      	movs	r1, #2
 800520e:	480e      	ldr	r0, [pc, #56]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 8005210:	f7ff ff0c 	bl	800502c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line3_DMA, Line3_DMA_CH);
 8005214:	2102      	movs	r1, #2
 8005216:	480c      	ldr	r0, [pc, #48]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 8005218:	f7ff fed4 	bl	8004fc4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line3_DMA, Line3_DMA_CH, (uint32_t)&Line3_RX_Buffer);
 800521c:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <GPDMA1_Channel2_IRQHandler+0x64>)
 800521e:	461a      	mov	r2, r3
 8005220:	2102      	movs	r1, #2
 8005222:	4809      	ldr	r0, [pc, #36]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 8005224:	f7ff feb4 	bl	8004f90 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line3_DMA, Line3_DMA_CH, Line_BUF_Size);
 8005228:	2264      	movs	r2, #100	@ 0x64
 800522a:	2102      	movs	r1, #2
 800522c:	4806      	ldr	r0, [pc, #24]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 800522e:	f7ff fe8b 	bl	8004f48 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line3_DMA, Line3_DMA_CH);
 8005232:	2102      	movs	r1, #2
 8005234:	4804      	ldr	r0, [pc, #16]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 8005236:	f7ff ff13 	bl	8005060 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line3_DMA, Line3_DMA_CH);
 800523a:	2102      	movs	r1, #2
 800523c:	4802      	ldr	r0, [pc, #8]	@ (8005248 <GPDMA1_Channel2_IRQHandler+0x60>)
 800523e:	f7ff fe23 	bl	8004e88 <LL_DMA_EnableChannel>
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40020000 	.word	0x40020000
 800524c:	20025bf8 	.word	0x20025bf8

08005250 <GPDMA1_Channel3_IRQHandler>:

void GPDMA1_Channel3_IRQHandler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line4_DMA, Line4_DMA_CH);
 8005254:	2103      	movs	r1, #3
 8005256:	4816      	ldr	r0, [pc, #88]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8005258:	f7ff ff22 	bl	80050a0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line4_DMA, Line4_DMA_CH);
 800525c:	2103      	movs	r1, #3
 800525e:	4814      	ldr	r0, [pc, #80]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8005260:	f7ff fe52 	bl	8004f08 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line4_DMA, Line4_DMA_CH);
 8005264:	2103      	movs	r1, #3
 8005266:	4812      	ldr	r0, [pc, #72]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8005268:	f7ff fe2e 	bl	8004ec8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line4_DMA, Line4_DMA_CH);
 800526c:	2103      	movs	r1, #3
 800526e:	4810      	ldr	r0, [pc, #64]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8005270:	f7ff fec2 	bl	8004ff8 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line4_DMA, Line4_DMA_CH);
 8005274:	2103      	movs	r1, #3
 8005276:	480e      	ldr	r0, [pc, #56]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8005278:	f7ff fed8 	bl	800502c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line4_DMA, Line4_DMA_CH);
 800527c:	2103      	movs	r1, #3
 800527e:	480c      	ldr	r0, [pc, #48]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8005280:	f7ff fea0 	bl	8004fc4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line4_DMA, Line4_DMA_CH, (uint32_t)&Line4_RX_Buffer);
 8005284:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <GPDMA1_Channel3_IRQHandler+0x64>)
 8005286:	461a      	mov	r2, r3
 8005288:	2103      	movs	r1, #3
 800528a:	4809      	ldr	r0, [pc, #36]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 800528c:	f7ff fe80 	bl	8004f90 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line4_DMA, Line4_DMA_CH, Line_BUF_Size);
 8005290:	2264      	movs	r2, #100	@ 0x64
 8005292:	2103      	movs	r1, #3
 8005294:	4806      	ldr	r0, [pc, #24]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8005296:	f7ff fe57 	bl	8004f48 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line4_DMA, Line4_DMA_CH);
 800529a:	2103      	movs	r1, #3
 800529c:	4804      	ldr	r0, [pc, #16]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 800529e:	f7ff fedf 	bl	8005060 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line4_DMA, Line4_DMA_CH);
 80052a2:	2103      	movs	r1, #3
 80052a4:	4802      	ldr	r0, [pc, #8]	@ (80052b0 <GPDMA1_Channel3_IRQHandler+0x60>)
 80052a6:	f7ff fdef 	bl	8004e88 <LL_DMA_EnableChannel>
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40020000 	.word	0x40020000
 80052b4:	20025c5c 	.word	0x20025c5c

080052b8 <GPDMA1_Channel4_IRQHandler>:

void GPDMA1_Channel4_IRQHandler(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line5_DMA, Line5_DMA_CH);
 80052bc:	2104      	movs	r1, #4
 80052be:	4816      	ldr	r0, [pc, #88]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 80052c0:	f7ff feee 	bl	80050a0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line5_DMA, Line5_DMA_CH);
 80052c4:	2104      	movs	r1, #4
 80052c6:	4814      	ldr	r0, [pc, #80]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 80052c8:	f7ff fe1e 	bl	8004f08 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line5_DMA, Line5_DMA_CH);
 80052cc:	2104      	movs	r1, #4
 80052ce:	4812      	ldr	r0, [pc, #72]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 80052d0:	f7ff fdfa 	bl	8004ec8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line5_DMA, Line5_DMA_CH);
 80052d4:	2104      	movs	r1, #4
 80052d6:	4810      	ldr	r0, [pc, #64]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 80052d8:	f7ff fe8e 	bl	8004ff8 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line5_DMA, Line5_DMA_CH);
 80052dc:	2104      	movs	r1, #4
 80052de:	480e      	ldr	r0, [pc, #56]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 80052e0:	f7ff fea4 	bl	800502c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line5_DMA, Line5_DMA_CH);
 80052e4:	2104      	movs	r1, #4
 80052e6:	480c      	ldr	r0, [pc, #48]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 80052e8:	f7ff fe6c 	bl	8004fc4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line5_DMA, Line5_DMA_CH, (uint32_t)&Line5_RX_Buffer);
 80052ec:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <GPDMA1_Channel4_IRQHandler+0x64>)
 80052ee:	461a      	mov	r2, r3
 80052f0:	2104      	movs	r1, #4
 80052f2:	4809      	ldr	r0, [pc, #36]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 80052f4:	f7ff fe4c 	bl	8004f90 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line5_DMA, Line5_DMA_CH, Line_BUF_Size);
 80052f8:	2264      	movs	r2, #100	@ 0x64
 80052fa:	2104      	movs	r1, #4
 80052fc:	4806      	ldr	r0, [pc, #24]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 80052fe:	f7ff fe23 	bl	8004f48 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line5_DMA, Line5_DMA_CH);
 8005302:	2104      	movs	r1, #4
 8005304:	4804      	ldr	r0, [pc, #16]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 8005306:	f7ff feab 	bl	8005060 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line5_DMA, Line5_DMA_CH);
 800530a:	2104      	movs	r1, #4
 800530c:	4802      	ldr	r0, [pc, #8]	@ (8005318 <GPDMA1_Channel4_IRQHandler+0x60>)
 800530e:	f7ff fdbb 	bl	8004e88 <LL_DMA_EnableChannel>
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40020000 	.word	0x40020000
 800531c:	20025cc0 	.word	0x20025cc0

08005320 <GPDMA1_Channel5_IRQHandler>:

void GPDMA1_Channel5_IRQHandler(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line6_DMA, Line6_DMA_CH);
 8005324:	2105      	movs	r1, #5
 8005326:	4816      	ldr	r0, [pc, #88]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 8005328:	f7ff feba 	bl	80050a0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line6_DMA, Line6_DMA_CH);
 800532c:	2105      	movs	r1, #5
 800532e:	4814      	ldr	r0, [pc, #80]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 8005330:	f7ff fdea 	bl	8004f08 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line6_DMA, Line6_DMA_CH);
 8005334:	2105      	movs	r1, #5
 8005336:	4812      	ldr	r0, [pc, #72]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 8005338:	f7ff fdc6 	bl	8004ec8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line6_DMA, Line6_DMA_CH);
 800533c:	2105      	movs	r1, #5
 800533e:	4810      	ldr	r0, [pc, #64]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 8005340:	f7ff fe5a 	bl	8004ff8 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line6_DMA, Line6_DMA_CH);
 8005344:	2105      	movs	r1, #5
 8005346:	480e      	ldr	r0, [pc, #56]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 8005348:	f7ff fe70 	bl	800502c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line6_DMA, Line6_DMA_CH);
 800534c:	2105      	movs	r1, #5
 800534e:	480c      	ldr	r0, [pc, #48]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 8005350:	f7ff fe38 	bl	8004fc4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line6_DMA, Line6_DMA_CH, (uint32_t)&Line6_RX_Buffer);
 8005354:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <GPDMA1_Channel5_IRQHandler+0x64>)
 8005356:	461a      	mov	r2, r3
 8005358:	2105      	movs	r1, #5
 800535a:	4809      	ldr	r0, [pc, #36]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 800535c:	f7ff fe18 	bl	8004f90 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line6_DMA, Line6_DMA_CH, Line_BUF_Size);
 8005360:	2264      	movs	r2, #100	@ 0x64
 8005362:	2105      	movs	r1, #5
 8005364:	4806      	ldr	r0, [pc, #24]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 8005366:	f7ff fdef 	bl	8004f48 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line6_DMA, Line6_DMA_CH);
 800536a:	2105      	movs	r1, #5
 800536c:	4804      	ldr	r0, [pc, #16]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 800536e:	f7ff fe77 	bl	8005060 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line6_DMA, Line6_DMA_CH);
 8005372:	2105      	movs	r1, #5
 8005374:	4802      	ldr	r0, [pc, #8]	@ (8005380 <GPDMA1_Channel5_IRQHandler+0x60>)
 8005376:	f7ff fd87 	bl	8004e88 <LL_DMA_EnableChannel>
}
 800537a:	bf00      	nop
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40020000 	.word	0x40020000
 8005384:	20025d24 	.word	0x20025d24

08005388 <GPDMA1_Channel6_IRQHandler>:

void GPDMA1_Channel6_IRQHandler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line7_DMA, Line7_DMA_CH);
 800538c:	2106      	movs	r1, #6
 800538e:	4816      	ldr	r0, [pc, #88]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 8005390:	f7ff fe86 	bl	80050a0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line7_DMA, Line7_DMA_CH);
 8005394:	2106      	movs	r1, #6
 8005396:	4814      	ldr	r0, [pc, #80]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 8005398:	f7ff fdb6 	bl	8004f08 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line7_DMA, Line7_DMA_CH);
 800539c:	2106      	movs	r1, #6
 800539e:	4812      	ldr	r0, [pc, #72]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 80053a0:	f7ff fd92 	bl	8004ec8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line7_DMA, Line7_DMA_CH);
 80053a4:	2106      	movs	r1, #6
 80053a6:	4810      	ldr	r0, [pc, #64]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 80053a8:	f7ff fe26 	bl	8004ff8 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line7_DMA, Line7_DMA_CH);
 80053ac:	2106      	movs	r1, #6
 80053ae:	480e      	ldr	r0, [pc, #56]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 80053b0:	f7ff fe3c 	bl	800502c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line7_DMA, Line7_DMA_CH);
 80053b4:	2106      	movs	r1, #6
 80053b6:	480c      	ldr	r0, [pc, #48]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 80053b8:	f7ff fe04 	bl	8004fc4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line7_DMA, Line7_DMA_CH, (uint32_t)&Line7_RX_Buffer);
 80053bc:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <GPDMA1_Channel6_IRQHandler+0x64>)
 80053be:	461a      	mov	r2, r3
 80053c0:	2106      	movs	r1, #6
 80053c2:	4809      	ldr	r0, [pc, #36]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 80053c4:	f7ff fde4 	bl	8004f90 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line7_DMA, Line7_DMA_CH, Line_BUF_Size);
 80053c8:	2264      	movs	r2, #100	@ 0x64
 80053ca:	2106      	movs	r1, #6
 80053cc:	4806      	ldr	r0, [pc, #24]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 80053ce:	f7ff fdbb 	bl	8004f48 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line7_DMA, Line7_DMA_CH);
 80053d2:	2106      	movs	r1, #6
 80053d4:	4804      	ldr	r0, [pc, #16]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 80053d6:	f7ff fe43 	bl	8005060 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line7_DMA, Line7_DMA_CH);
 80053da:	2106      	movs	r1, #6
 80053dc:	4802      	ldr	r0, [pc, #8]	@ (80053e8 <GPDMA1_Channel6_IRQHandler+0x60>)
 80053de:	f7ff fd53 	bl	8004e88 <LL_DMA_EnableChannel>
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40020000 	.word	0x40020000
 80053ec:	20025d88 	.word	0x20025d88

080053f0 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80053f4:	4802      	ldr	r0, [pc, #8]	@ (8005400 <USB_DRD_FS_IRQHandler+0x10>)
 80053f6:	f002 ffdb 	bl	80083b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20029c94 	.word	0x20029c94

08005404 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 global interrupt.
  */
void UCPD1_IRQHandler(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  //USBPD_PORT0_IRQHandler();

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8005408:	bf00      	nop
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005412:	b480      	push	{r7}
 8005414:	af00      	add	r7, sp, #0
  return 1;
 8005416:	2301      	movs	r3, #1
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <_kill>:

int _kill(int pid, int sig)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800542c:	f011 fa3e 	bl	80168ac <__errno>
 8005430:	4603      	mov	r3, r0
 8005432:	2216      	movs	r2, #22
 8005434:	601a      	str	r2, [r3, #0]
  return -1;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <_exit>:

void _exit (int status)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800544a:	f04f 31ff 	mov.w	r1, #4294967295
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ffe7 	bl	8005422 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005454:	bf00      	nop
 8005456:	e7fd      	b.n	8005454 <_exit+0x12>

08005458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e00a      	b.n	8005480 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800546a:	f3af 8000 	nop.w
 800546e:	4601      	mov	r1, r0
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	60ba      	str	r2, [r7, #8]
 8005476:	b2ca      	uxtb	r2, r1
 8005478:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	3301      	adds	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	dbf0      	blt.n	800546a <_read+0x12>
  }

  return len;
 8005488:	687b      	ldr	r3, [r7, #4]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b086      	sub	sp, #24
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	e009      	b.n	80054b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	60ba      	str	r2, [r7, #8]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	3301      	adds	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	dbf1      	blt.n	80054a4 <_write+0x12>
  }
  return len;
 80054c0:	687b      	ldr	r3, [r7, #4]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <_close>:

int _close(int file)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054f2:	605a      	str	r2, [r3, #4]
  return 0;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <_isatty>:

int _isatty(int file)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800550a:	2301      	movs	r3, #1
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800553c:	4a14      	ldr	r2, [pc, #80]	@ (8005590 <_sbrk+0x5c>)
 800553e:	4b15      	ldr	r3, [pc, #84]	@ (8005594 <_sbrk+0x60>)
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005548:	4b13      	ldr	r3, [pc, #76]	@ (8005598 <_sbrk+0x64>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005550:	4b11      	ldr	r3, [pc, #68]	@ (8005598 <_sbrk+0x64>)
 8005552:	4a12      	ldr	r2, [pc, #72]	@ (800559c <_sbrk+0x68>)
 8005554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005556:	4b10      	ldr	r3, [pc, #64]	@ (8005598 <_sbrk+0x64>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	429a      	cmp	r2, r3
 8005562:	d207      	bcs.n	8005574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005564:	f011 f9a2 	bl	80168ac <__errno>
 8005568:	4603      	mov	r3, r0
 800556a:	220c      	movs	r2, #12
 800556c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800556e:	f04f 33ff 	mov.w	r3, #4294967295
 8005572:	e009      	b.n	8005588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005574:	4b08      	ldr	r3, [pc, #32]	@ (8005598 <_sbrk+0x64>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800557a:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <_sbrk+0x64>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	4a05      	ldr	r2, [pc, #20]	@ (8005598 <_sbrk+0x64>)
 8005584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	200a0000 	.word	0x200a0000
 8005594:	00000400 	.word	0x00000400
 8005598:	20025dec 	.word	0x20025dec
 800559c:	2002a3b0 	.word	0x2002a3b0

080055a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055a0:	480d      	ldr	r0, [pc, #52]	@ (80055d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80055a4:	f000 f91e 	bl	80057e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055a8:	480c      	ldr	r0, [pc, #48]	@ (80055dc <LoopForever+0x6>)
  ldr r1, =_edata
 80055aa:	490d      	ldr	r1, [pc, #52]	@ (80055e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055ac:	4a0d      	ldr	r2, [pc, #52]	@ (80055e4 <LoopForever+0xe>)
  movs r3, #0
 80055ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055b0:	e002      	b.n	80055b8 <LoopCopyDataInit>

080055b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055b6:	3304      	adds	r3, #4

080055b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055bc:	d3f9      	bcc.n	80055b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055be:	4a0a      	ldr	r2, [pc, #40]	@ (80055e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055c0:	4c0a      	ldr	r4, [pc, #40]	@ (80055ec <LoopForever+0x16>)
  movs r3, #0
 80055c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055c4:	e001      	b.n	80055ca <LoopFillZerobss>

080055c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055c8:	3204      	adds	r2, #4

080055ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055cc:	d3fb      	bcc.n	80055c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80055ce:	f011 f973 	bl	80168b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055d2:	f7fe fb91 	bl	8003cf8 <main>

080055d6 <LoopForever>:

LoopForever:
    b LoopForever
 80055d6:	e7fe      	b.n	80055d6 <LoopForever>
  ldr   r0, =_estack
 80055d8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80055dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e0:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 80055e4:	0801a870 	.word	0x0801a870
  ldr r2, =_sbss
 80055e8:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 80055ec:	2002a3ac 	.word	0x2002a3ac

080055f0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055f0:	e7fe      	b.n	80055f0 <ADC1_IRQHandler>

080055f2 <LL_GPIO_IsOutputPinSet>:
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4013      	ands	r3, r2
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d101      	bne.n	800560e <LL_GPIO_IsOutputPinSet+0x1c>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <LL_GPIO_IsOutputPinSet+0x1e>
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <LL_GPIO_SetOutputPin>:
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	619a      	str	r2, [r3, #24]
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <LL_GPIO_ResetOutputPin>:
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_CRC_ResetCRCCalculationUnit>:
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f043 0201 	orr.w	r2, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	609a      	str	r2, [r3, #8]
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <LL_CRC_FeedData8>:
  * @param  CRCx CRC Instance
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	701a      	strb	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(const CRC_TypeDef *CRCx)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <Power27V_Switch>:

FEU_Status_t FEU_Status;
IJU_Status_t IJU_Status;

void Power27V_Switch(uint8_t State)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	71fb      	strb	r3, [r7, #7]
	if(State == 0) {LL_GPIO_ResetOutputPin(Power27V_Ctrl_Port, Power27V_Ctrl_Pin);}
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d105      	bne.n	80056c8 <Power27V_Switch+0x1c>
 80056bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056c0:	4806      	ldr	r0, [pc, #24]	@ (80056dc <Power27V_Switch+0x30>)
 80056c2:	f7ff ffb9 	bl	8005638 <LL_GPIO_ResetOutputPin>
	else {LL_GPIO_SetOutputPin(Power27V_Ctrl_Port, Power27V_Ctrl_Pin);}
}
 80056c6:	e004      	b.n	80056d2 <Power27V_Switch+0x26>
	else {LL_GPIO_SetOutputPin(Power27V_Ctrl_Port, Power27V_Ctrl_Pin);}
 80056c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056cc:	4803      	ldr	r0, [pc, #12]	@ (80056dc <Power27V_Switch+0x30>)
 80056ce:	f7ff ffa5 	bl	800561c <LL_GPIO_SetOutputPin>
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	42020800 	.word	0x42020800

080056e0 <Power27V_Status>:

char Power27V_Status(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
	return LL_GPIO_IsOutputPinSet(Power27V_Ctrl_Port, Power27V_Ctrl_Pin);
 80056e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056e8:	4803      	ldr	r0, [pc, #12]	@ (80056f8 <Power27V_Status+0x18>)
 80056ea:	f7ff ff82 	bl	80055f2 <LL_GPIO_IsOutputPinSet>
 80056ee:	4603      	mov	r3, r0
 80056f0:	b2db      	uxtb	r3, r3
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	42020800 	.word	0x42020800

080056fc <Message_Maker>:

void Message_Maker(MSG_Frame_t *MSG, uint8_t *PCKT_X, uint8_t Bit_Reset_CMD, uint8_t Bit_CMD)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4611      	mov	r1, r2
 8005708:	461a      	mov	r2, r3
 800570a:	460b      	mov	r3, r1
 800570c:	71fb      	strb	r3, [r7, #7]
 800570e:	4613      	mov	r3, r2
 8005710:	71bb      	strb	r3, [r7, #6]
	uint16_t L = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	83fb      	strh	r3, [r7, #30]
	uint16_t CRC_Result = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	83bb      	strh	r3, [r7, #28]
	uint8_t *P = (uint8_t *)&MSG;
 800571a:	f107 030c 	add.w	r3, r7, #12
 800571e:	61bb      	str	r3, [r7, #24]
	uint16_t X = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	82fb      	strh	r3, [r7, #22]

	MSG->Length = 0;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	729a      	strb	r2, [r3, #10]

	*PCKT_X = *PCKT_X & Bit_Reset_CMD;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	781a      	ldrb	r2, [r3, #0]
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	4013      	ands	r3, r2
 8005732:	b2da      	uxtb	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	701a      	strb	r2, [r3, #0]
	*PCKT_X = *PCKT_X | Bit_CMD;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	79bb      	ldrb	r3, [r7, #6]
 800573e:	4313      	orrs	r3, r2
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	701a      	strb	r2, [r3, #0]

	LL_CRC_ResetCRCCalculationUnit(CRC);
 8005746:	4826      	ldr	r0, [pc, #152]	@ (80057e0 <Message_Maker+0xe4>)
 8005748:	f7ff ff84 	bl	8005654 <LL_CRC_ResetCRCCalculationUnit>
//	X = MSG->PCKT_3; X=X<<8; X = X | MSG->PCKT_2;
//	LL_CRC_FeedData16(CRC, X);
//	X = MSG->PCKT_5; X=X<<8; X = X | MSG->PCKT_4;
//	LL_CRC_FeedData16(CRC, X);

	LL_CRC_FeedData8(CRC, MSG->Start); LL_CRC_FeedData8(CRC, MSG->ID);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4619      	mov	r1, r3
 8005752:	4823      	ldr	r0, [pc, #140]	@ (80057e0 <Message_Maker+0xe4>)
 8005754:	f7ff ff8e 	bl	8005674 <LL_CRC_FeedData8>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	4619      	mov	r1, r3
 800575e:	4820      	ldr	r0, [pc, #128]	@ (80057e0 <Message_Maker+0xe4>)
 8005760:	f7ff ff88 	bl	8005674 <LL_CRC_FeedData8>
	LL_CRC_FeedData8(CRC, MSG->PCKT_0); LL_CRC_FeedData8(CRC, MSG->PCKT_1); LL_CRC_FeedData8(CRC, MSG->PCKT_2);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	789b      	ldrb	r3, [r3, #2]
 8005768:	4619      	mov	r1, r3
 800576a:	481d      	ldr	r0, [pc, #116]	@ (80057e0 <Message_Maker+0xe4>)
 800576c:	f7ff ff82 	bl	8005674 <LL_CRC_FeedData8>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	78db      	ldrb	r3, [r3, #3]
 8005774:	4619      	mov	r1, r3
 8005776:	481a      	ldr	r0, [pc, #104]	@ (80057e0 <Message_Maker+0xe4>)
 8005778:	f7ff ff7c 	bl	8005674 <LL_CRC_FeedData8>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	791b      	ldrb	r3, [r3, #4]
 8005780:	4619      	mov	r1, r3
 8005782:	4817      	ldr	r0, [pc, #92]	@ (80057e0 <Message_Maker+0xe4>)
 8005784:	f7ff ff76 	bl	8005674 <LL_CRC_FeedData8>
	LL_CRC_FeedData8(CRC, MSG->PCKT_3); LL_CRC_FeedData8(CRC, MSG->PCKT_4); LL_CRC_FeedData8(CRC, MSG->PCKT_5);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	795b      	ldrb	r3, [r3, #5]
 800578c:	4619      	mov	r1, r3
 800578e:	4814      	ldr	r0, [pc, #80]	@ (80057e0 <Message_Maker+0xe4>)
 8005790:	f7ff ff70 	bl	8005674 <LL_CRC_FeedData8>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	799b      	ldrb	r3, [r3, #6]
 8005798:	4619      	mov	r1, r3
 800579a:	4811      	ldr	r0, [pc, #68]	@ (80057e0 <Message_Maker+0xe4>)
 800579c:	f7ff ff6a 	bl	8005674 <LL_CRC_FeedData8>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	79db      	ldrb	r3, [r3, #7]
 80057a4:	4619      	mov	r1, r3
 80057a6:	480e      	ldr	r0, [pc, #56]	@ (80057e0 <Message_Maker+0xe4>)
 80057a8:	f7ff ff64 	bl	8005674 <LL_CRC_FeedData8>

	CRC_Result = LL_CRC_ReadData16(CRC);
 80057ac:	480c      	ldr	r0, [pc, #48]	@ (80057e0 <Message_Maker+0xe4>)
 80057ae:	f7ff ff70 	bl	8005692 <LL_CRC_ReadData16>
 80057b2:	4603      	mov	r3, r0
 80057b4:	83bb      	strh	r3, [r7, #28]

	MSG->CRC_2 = (uint8_t)CRC_Result;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8bba      	ldrh	r2, [r7, #28]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	725a      	strb	r2, [r3, #9]
	MSG->CRC_1 = (uint8_t)(CRC_Result>>8);
 80057be:	8bbb      	ldrh	r3, [r7, #28]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	721a      	strb	r2, [r3, #8]

	MSG->Length = sizeof(MSG->Start) + sizeof(MSG->ID) +
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	220a      	movs	r2, #10
 80057ce:	729a      	strb	r2, [r3, #10]
	sizeof(MSG->PCKT_0) + sizeof(MSG->PCKT_1) + sizeof(MSG->PCKT_2) +
	sizeof(MSG->PCKT_3) + sizeof(MSG->PCKT_4) + sizeof(MSG->PCKT_5) +
	sizeof(MSG->CRC_1) + sizeof(MSG->CRC_2);

	MSG->New = 1;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	72da      	strb	r2, [r3, #11]

}
 80057d6:	bf00      	nop
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40023000 	.word	0x40023000

080057e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80057ea:	4b35      	ldr	r3, [pc, #212]	@ (80058c0 <SystemInit+0xdc>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f0:	4a33      	ldr	r2, [pc, #204]	@ (80058c0 <SystemInit+0xdc>)
 80057f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80057fa:	4b32      	ldr	r3, [pc, #200]	@ (80058c4 <SystemInit+0xe0>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005800:	4b30      	ldr	r3, [pc, #192]	@ (80058c4 <SystemInit+0xe0>)
 8005802:	2200      	movs	r2, #0
 8005804:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8005806:	4b2f      	ldr	r3, [pc, #188]	@ (80058c4 <SystemInit+0xe0>)
 8005808:	2200      	movs	r2, #0
 800580a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800580c:	4b2d      	ldr	r3, [pc, #180]	@ (80058c4 <SystemInit+0xe0>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	492c      	ldr	r1, [pc, #176]	@ (80058c4 <SystemInit+0xe0>)
 8005812:	4b2d      	ldr	r3, [pc, #180]	@ (80058c8 <SystemInit+0xe4>)
 8005814:	4013      	ands	r3, r2
 8005816:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8005818:	4b2a      	ldr	r3, [pc, #168]	@ (80058c4 <SystemInit+0xe0>)
 800581a:	2200      	movs	r2, #0
 800581c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800581e:	4b29      	ldr	r3, [pc, #164]	@ (80058c4 <SystemInit+0xe0>)
 8005820:	2200      	movs	r2, #0
 8005822:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8005824:	4b27      	ldr	r3, [pc, #156]	@ (80058c4 <SystemInit+0xe0>)
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800582a:	4b26      	ldr	r3, [pc, #152]	@ (80058c4 <SystemInit+0xe0>)
 800582c:	4a27      	ldr	r2, [pc, #156]	@ (80058cc <SystemInit+0xe8>)
 800582e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8005830:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <SystemInit+0xe0>)
 8005832:	2200      	movs	r2, #0
 8005834:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8005836:	4b23      	ldr	r3, [pc, #140]	@ (80058c4 <SystemInit+0xe0>)
 8005838:	4a24      	ldr	r2, [pc, #144]	@ (80058cc <SystemInit+0xe8>)
 800583a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800583c:	4b21      	ldr	r3, [pc, #132]	@ (80058c4 <SystemInit+0xe0>)
 800583e:	2200      	movs	r2, #0
 8005840:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8005842:	4b20      	ldr	r3, [pc, #128]	@ (80058c4 <SystemInit+0xe0>)
 8005844:	4a21      	ldr	r2, [pc, #132]	@ (80058cc <SystemInit+0xe8>)
 8005846:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8005848:	4b1e      	ldr	r3, [pc, #120]	@ (80058c4 <SystemInit+0xe0>)
 800584a:	2200      	movs	r2, #0
 800584c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800584e:	4b1d      	ldr	r3, [pc, #116]	@ (80058c4 <SystemInit+0xe0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1c      	ldr	r2, [pc, #112]	@ (80058c4 <SystemInit+0xe0>)
 8005854:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005858:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800585a:	4b1a      	ldr	r3, [pc, #104]	@ (80058c4 <SystemInit+0xe0>)
 800585c:	2200      	movs	r2, #0
 800585e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005860:	4b17      	ldr	r3, [pc, #92]	@ (80058c0 <SystemInit+0xdc>)
 8005862:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005866:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8005868:	4b19      	ldr	r3, [pc, #100]	@ (80058d0 <SystemInit+0xec>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8005870:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8005878:	d003      	beq.n	8005882 <SystemInit+0x9e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005880:	d117      	bne.n	80058b2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8005882:	4b13      	ldr	r3, [pc, #76]	@ (80058d0 <SystemInit+0xec>)
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800588e:	4b10      	ldr	r3, [pc, #64]	@ (80058d0 <SystemInit+0xec>)
 8005890:	4a10      	ldr	r2, [pc, #64]	@ (80058d4 <SystemInit+0xf0>)
 8005892:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8005894:	4b0e      	ldr	r3, [pc, #56]	@ (80058d0 <SystemInit+0xec>)
 8005896:	4a10      	ldr	r2, [pc, #64]	@ (80058d8 <SystemInit+0xf4>)
 8005898:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800589a:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <SystemInit+0xec>)
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	4a0c      	ldr	r2, [pc, #48]	@ (80058d0 <SystemInit+0xec>)
 80058a0:	f043 0302 	orr.w	r3, r3, #2
 80058a4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80058a6:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <SystemInit+0xec>)
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	4a09      	ldr	r2, [pc, #36]	@ (80058d0 <SystemInit+0xec>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	61d3      	str	r3, [r2, #28]
  }
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000ed00 	.word	0xe000ed00
 80058c4:	44020c00 	.word	0x44020c00
 80058c8:	eae2eae3 	.word	0xeae2eae3
 80058cc:	01010280 	.word	0x01010280
 80058d0:	40022000 	.word	0x40022000
 80058d4:	08192a3b 	.word	0x08192a3b
 80058d8:	4c5d6e7f 	.word	0x4c5d6e7f

080058dc <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{  
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4604      	mov	r4, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	461a      	mov	r2, r3
 80058ea:	4623      	mov	r3, r4
 80058ec:	80fb      	strh	r3, [r7, #6]
 80058ee:	4603      	mov	r3, r0
 80058f0:	80bb      	strh	r3, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	807b      	strh	r3, [r7, #2]
 80058f6:	4613      	mov	r3, r2
 80058f8:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;      
 80058fa:	4b62      	ldr	r3, [pc, #392]	@ (8005a84 <LCD_ShowChar+0x1a8>)
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	817b      	strh	r3, [r7, #10]
		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8005900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005904:	3b20      	subs	r3, #32
 8005906:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 800590a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	4413      	add	r3, r2
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29c      	uxth	r4, r3
 800591e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005922:	b29a      	uxth	r2, r3
 8005924:	88bb      	ldrh	r3, [r7, #4]
 8005926:	4413      	add	r3, r2
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	88b9      	ldrh	r1, [r7, #4]
 8005930:	88f8      	ldrh	r0, [r7, #6]
 8005932:	4622      	mov	r2, r4
 8005934:	f001 fe10 	bl	8007558 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8005938:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800593c:	2b00      	cmp	r3, #0
 800593e:	d143      	bne.n	80059c8 <LCD_ShowChar+0xec>
	{		
		for(pos=0;pos<size;pos++)
 8005940:	2300      	movs	r3, #0
 8005942:	73bb      	strb	r3, [r7, #14]
 8005944:	e03a      	b.n	80059bc <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8005946:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d10c      	bne.n	8005968 <LCD_ShowChar+0x8c>
 800594e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005952:	7bb9      	ldrb	r1, [r7, #14]
 8005954:	484c      	ldr	r0, [pc, #304]	@ (8005a88 <LCD_ShowChar+0x1ac>)
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4403      	add	r3, r0
 8005960:	440b      	add	r3, r1
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	73fb      	strb	r3, [r7, #15]
 8005966:	e008      	b.n	800597a <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8005968:	f897 2020 	ldrb.w	r2, [r7, #32]
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	4947      	ldr	r1, [pc, #284]	@ (8005a8c <LCD_ShowChar+0x1b0>)
 8005970:	0112      	lsls	r2, r2, #4
 8005972:	440a      	add	r2, r1
 8005974:	4413      	add	r3, r2
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 800597a:	2300      	movs	r3, #0
 800597c:	737b      	strb	r3, [r7, #13]
 800597e:	e013      	b.n	80059a8 <LCD_ShowChar+0xcc>
		    {                 
		        if(temp&0x01)Lcd_WriteData_16Bit(fc); 
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <LCD_ShowChar+0xb8>
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fc47 	bl	8007220 <Lcd_WriteData_16Bit>
 8005992:	e003      	b.n	800599c <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc); 
 8005994:	883b      	ldrh	r3, [r7, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f001 fc42 	bl	8007220 <Lcd_WriteData_16Bit>
				temp>>=1; 
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80059a2:	7b7b      	ldrb	r3, [r7, #13]
 80059a4:	3301      	adds	r3, #1
 80059a6:	737b      	strb	r3, [r7, #13]
 80059a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059ac:	085b      	lsrs	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	7b7a      	ldrb	r2, [r7, #13]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3e4      	bcc.n	8005980 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	3301      	adds	r3, #1
 80059ba:	73bb      	strb	r3, [r7, #14]
 80059bc:	7bba      	ldrb	r2, [r7, #14]
 80059be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d3bf      	bcc.n	8005946 <LCD_ShowChar+0x6a>
 80059c6:	e049      	b.n	8005a5c <LCD_ShowChar+0x180>
		    }
			
		}	
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 80059c8:	2300      	movs	r3, #0
 80059ca:	73bb      	strb	r3, [r7, #14]
 80059cc:	e041      	b.n	8005a52 <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 80059ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059d2:	2b0c      	cmp	r3, #12
 80059d4:	d10c      	bne.n	80059f0 <LCD_ShowChar+0x114>
 80059d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059da:	7bb9      	ldrb	r1, [r7, #14]
 80059dc:	482a      	ldr	r0, [pc, #168]	@ (8005a88 <LCD_ShowChar+0x1ac>)
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4403      	add	r3, r0
 80059e8:	440b      	add	r3, r1
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	73fb      	strb	r3, [r7, #15]
 80059ee:	e008      	b.n	8005a02 <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 80059f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	4925      	ldr	r1, [pc, #148]	@ (8005a8c <LCD_ShowChar+0x1b0>)
 80059f8:	0112      	lsls	r2, r2, #4
 80059fa:	440a      	add	r2, r1
 80059fc:	4413      	add	r3, r2
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	737b      	strb	r3, [r7, #13]
 8005a06:	e01a      	b.n	8005a3e <LCD_ShowChar+0x162>
		    {   
				POINT_COLOR=fc;              
 8005a08:	4a1e      	ldr	r2, [pc, #120]	@ (8005a84 <LCD_ShowChar+0x1a8>)
 8005a0a:	887b      	ldrh	r3, [r7, #2]
 8005a0c:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����    
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <LCD_ShowChar+0x156>
 8005a18:	7b7b      	ldrb	r3, [r7, #13]
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	4413      	add	r3, r2
 8005a20:	b298      	uxth	r0, r3
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	88bb      	ldrh	r3, [r7, #4]
 8005a28:	4413      	add	r3, r2
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f001 fc15 	bl	800725c <LCD_DrawPoint>
		        temp>>=1; 
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8005a38:	7b7b      	ldrb	r3, [r7, #13]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	737b      	strb	r3, [r7, #13]
 8005a3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	7b7a      	ldrb	r2, [r7, #13]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3dd      	bcc.n	8005a08 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	73bb      	strb	r3, [r7, #14]
 8005a52:	7bba      	ldrb	r2, [r7, #14]
 8005a54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d3b8      	bcc.n	80059ce <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 8005a5c:	4a09      	ldr	r2, [pc, #36]	@ (8005a84 <LCD_ShowChar+0x1a8>)
 8005a5e:	897b      	ldrh	r3, [r7, #10]
 8005a60:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��    	   	 	  
 8005a62:	4b0b      	ldr	r3, [pc, #44]	@ (8005a90 <LCD_ShowChar+0x1b4>)
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <LCD_ShowChar+0x1b4>)
 8005a6c:	885b      	ldrh	r3, [r3, #2]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2100      	movs	r1, #0
 8005a74:	2000      	movs	r0, #0
 8005a76:	f001 fd6f 	bl	8007558 <LCD_SetWindows>
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd90      	pop	{r4, r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20025e26 	.word	0x20025e26
 8005a88:	08018dd8 	.word	0x08018dd8
 8005a8c:	0801924c 	.word	0x0801924c
 8005a90:	20025e18 	.word	0x20025e18

08005a94 <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8005a94:	b590      	push	{r4, r7, lr}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	80fb      	strh	r3, [r7, #6]
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	80bb      	strh	r3, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	807b      	strh	r3, [r7, #2]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//�Զ�ͳ�ƺ�����Ŀ
 8005ab6:	233e      	movs	r3, #62	@ 0x3e
 8005ab8:	813b      	strh	r3, [r7, #8]
	
			
	for (k=0;k<HZnum;k++) 
 8005aba:	2300      	movs	r3, #0
 8005abc:	81bb      	strh	r3, [r7, #12]
 8005abe:	e084      	b.n	8005bca <GUI_DrawFont16+0x136>
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8005ac0:	89ba      	ldrh	r2, [r7, #12]
 8005ac2:	494c      	ldr	r1, [pc, #304]	@ (8005bf4 <GUI_DrawFont16+0x160>)
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	4413      	add	r3, r2
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	440b      	add	r3, r1
 8005ace:	781a      	ldrb	r2, [r3, #0]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d174      	bne.n	8005bc2 <GUI_DrawFont16+0x12e>
 8005ad8:	89ba      	ldrh	r2, [r7, #12]
 8005ada:	4946      	ldr	r1, [pc, #280]	@ (8005bf4 <GUI_DrawFont16+0x160>)
 8005adc:	4613      	mov	r3, r2
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4413      	add	r3, r2
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	3301      	adds	r3, #1
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d166      	bne.n	8005bc2 <GUI_DrawFont16+0x12e>
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	330f      	adds	r3, #15
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	330f      	adds	r3, #15
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	88b9      	ldrh	r1, [r7, #4]
 8005b02:	88f8      	ldrh	r0, [r7, #6]
 8005b04:	f001 fd28 	bl	8007558 <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	e056      	b.n	8005bbc <GUI_DrawFont16+0x128>
		    {
				for(j=0;j<8;j++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73bb      	strb	r3, [r7, #14]
 8005b12:	e04d      	b.n	8005bb0 <GUI_DrawFont16+0x11c>
		    	{	
					if(!mode) //�ǵ��ӷ�ʽ
 8005b14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d11c      	bne.n	8005b56 <GUI_DrawFont16+0xc2>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8005b1c:	89ba      	ldrh	r2, [r7, #12]
 8005b1e:	7bf9      	ldrb	r1, [r7, #15]
 8005b20:	4834      	ldr	r0, [pc, #208]	@ (8005bf4 <GUI_DrawFont16+0x160>)
 8005b22:	4613      	mov	r3, r2
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	4413      	add	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4403      	add	r3, r0
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3302      	adds	r3, #2
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	4619      	mov	r1, r3
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	2280      	movs	r2, #128	@ 0x80
 8005b38:	fa42 f303 	asr.w	r3, r2, r3
 8005b3c:	400b      	ands	r3, r1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <GUI_DrawFont16+0xb8>
 8005b42:	887b      	ldrh	r3, [r7, #2]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fb6b 	bl	8007220 <Lcd_WriteData_16Bit>
 8005b4a:	e02e      	b.n	8005baa <GUI_DrawFont16+0x116>
						else Lcd_WriteData_16Bit(bc);
 8005b4c:	883b      	ldrh	r3, [r7, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fb66 	bl	8007220 <Lcd_WriteData_16Bit>
 8005b54:	e029      	b.n	8005baa <GUI_DrawFont16+0x116>
					}
					else
					{
						POINT_COLOR=fc;
 8005b56:	4a28      	ldr	r2, [pc, #160]	@ (8005bf8 <GUI_DrawFont16+0x164>)
 8005b58:	887b      	ldrh	r3, [r7, #2]
 8005b5a:	8013      	strh	r3, [r2, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8005b5c:	89ba      	ldrh	r2, [r7, #12]
 8005b5e:	7bf9      	ldrb	r1, [r7, #15]
 8005b60:	4824      	ldr	r0, [pc, #144]	@ (8005bf4 <GUI_DrawFont16+0x160>)
 8005b62:	4613      	mov	r3, r2
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	4413      	add	r3, r2
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	4403      	add	r3, r0
 8005b6c:	440b      	add	r3, r1
 8005b6e:	3302      	adds	r3, #2
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	7bbb      	ldrb	r3, [r7, #14]
 8005b76:	2280      	movs	r2, #128	@ 0x80
 8005b78:	fa42 f303 	asr.w	r3, r2, r3
 8005b7c:	400b      	ands	r3, r1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <GUI_DrawFont16+0xfa>
 8005b82:	88ba      	ldrh	r2, [r7, #4]
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	4611      	mov	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fb67 	bl	800725c <LCD_DrawPoint>
						x++;
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	3301      	adds	r3, #1
 8005b92:	80fb      	strh	r3, [r7, #6]
						if((x-x0)==16)
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	897b      	ldrh	r3, [r7, #10]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d105      	bne.n	8005baa <GUI_DrawFont16+0x116>
						{
							x=x0;
 8005b9e:	897b      	ldrh	r3, [r7, #10]
 8005ba0:	80fb      	strh	r3, [r7, #6]
							y++;
 8005ba2:	88bb      	ldrh	r3, [r7, #4]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	80bb      	strh	r3, [r7, #4]
							break;
 8005ba8:	e005      	b.n	8005bb6 <GUI_DrawFont16+0x122>
				for(j=0;j<8;j++)
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	3301      	adds	r3, #1
 8005bae:	73bb      	strb	r3, [r7, #14]
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	2b07      	cmp	r3, #7
 8005bb4:	d9ae      	bls.n	8005b14 <GUI_DrawFont16+0x80>
		    for(i=0;i<16*2;i++)
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	73fb      	strb	r3, [r7, #15]
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	2b1f      	cmp	r3, #31
 8005bc0:	d9a5      	bls.n	8005b0e <GUI_DrawFont16+0x7a>
				
			}
			
			
		}				  	
		continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 8005bc2:	bf00      	nop
	for (k=0;k<HZnum;k++) 
 8005bc4:	89bb      	ldrh	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	81bb      	strh	r3, [r7, #12]
 8005bca:	89ba      	ldrh	r2, [r7, #12]
 8005bcc:	893b      	ldrh	r3, [r7, #8]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	f4ff af76 	bcc.w	8005ac0 <GUI_DrawFont16+0x2c>
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8005bd4:	4b09      	ldr	r3, [pc, #36]	@ (8005bfc <GUI_DrawFont16+0x168>)
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	4b07      	ldr	r3, [pc, #28]	@ (8005bfc <GUI_DrawFont16+0x168>)
 8005bde:	885b      	ldrh	r3, [r3, #2]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2100      	movs	r1, #0
 8005be6:	2000      	movs	r0, #0
 8005be8:	f001 fcb6 	bl	8007558 <LCD_SetWindows>
} 
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd90      	pop	{r4, r7, pc}
 8005bf4:	0801983c 	.word	0x0801983c
 8005bf8:	20025e26 	.word	0x20025e26
 8005bfc:	20025e18 	.word	0x20025e18

08005c00 <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	80fb      	strh	r3, [r7, #6]
 8005c12:	4603      	mov	r3, r0
 8005c14:	80bb      	strh	r3, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	807b      	strh	r3, [r7, #2]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 8005c22:	2307      	movs	r3, #7
 8005c24:	813b      	strh	r3, [r7, #8]
		
			for (k=0;k<HZnum;k++) 
 8005c26:	2300      	movs	r3, #0
 8005c28:	81bb      	strh	r3, [r7, #12]
 8005c2a:	e080      	b.n	8005d2e <GUI_DrawFont24+0x12e>
			{
			  if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8005c2c:	89bb      	ldrh	r3, [r7, #12]
 8005c2e:	4a4a      	ldr	r2, [pc, #296]	@ (8005d58 <GUI_DrawFont24+0x158>)
 8005c30:	214a      	movs	r1, #74	@ 0x4a
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	4413      	add	r3, r2
 8005c38:	781a      	ldrb	r2, [r3, #0]
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d171      	bne.n	8005d26 <GUI_DrawFont24+0x126>
 8005c42:	89bb      	ldrh	r3, [r7, #12]
 8005c44:	4a44      	ldr	r2, [pc, #272]	@ (8005d58 <GUI_DrawFont24+0x158>)
 8005c46:	214a      	movs	r1, #74	@ 0x4a
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3301      	adds	r3, #1
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	3301      	adds	r3, #1
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d164      	bne.n	8005d26 <GUI_DrawFont24+0x126>
			  { 	LCD_SetWindows(x,y,x+24-1,y+24-1);
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	3317      	adds	r3, #23
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	88bb      	ldrh	r3, [r7, #4]
 8005c64:	3317      	adds	r3, #23
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	88b9      	ldrh	r1, [r7, #4]
 8005c6a:	88f8      	ldrh	r0, [r7, #6]
 8005c6c:	f001 fc74 	bl	8007558 <LCD_SetWindows>
				    for(i=0;i<24*3;i++)
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]
 8005c74:	e054      	b.n	8005d20 <GUI_DrawFont24+0x120>
				    {
							for(j=0;j<8;j++)
 8005c76:	2300      	movs	r3, #0
 8005c78:	73bb      	strb	r3, [r7, #14]
 8005c7a:	e04b      	b.n	8005d14 <GUI_DrawFont24+0x114>
							{
								if(!mode) //�ǵ��ӷ�ʽ
 8005c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d11b      	bne.n	8005cbc <GUI_DrawFont24+0xbc>
								{
									if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8005c84:	89ba      	ldrh	r2, [r7, #12]
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	4933      	ldr	r1, [pc, #204]	@ (8005d58 <GUI_DrawFont24+0x158>)
 8005c8a:	204a      	movs	r0, #74	@ 0x4a
 8005c8c:	fb00 f202 	mul.w	r2, r0, r2
 8005c90:	440a      	add	r2, r1
 8005c92:	4413      	add	r3, r2
 8005c94:	3302      	adds	r3, #2
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	2280      	movs	r2, #128	@ 0x80
 8005c9e:	fa42 f303 	asr.w	r3, r2, r3
 8005ca2:	400b      	ands	r3, r1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <GUI_DrawFont24+0xb2>
 8005ca8:	887b      	ldrh	r3, [r7, #2]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 fab8 	bl	8007220 <Lcd_WriteData_16Bit>
 8005cb0:	e02d      	b.n	8005d0e <GUI_DrawFont24+0x10e>
									else Lcd_WriteData_16Bit(bc);
 8005cb2:	883b      	ldrh	r3, [r7, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 fab3 	bl	8007220 <Lcd_WriteData_16Bit>
 8005cba:	e028      	b.n	8005d0e <GUI_DrawFont24+0x10e>
								}
							else
							{
								POINT_COLOR=fc;
 8005cbc:	4a27      	ldr	r2, [pc, #156]	@ (8005d5c <GUI_DrawFont24+0x15c>)
 8005cbe:	887b      	ldrh	r3, [r7, #2]
 8005cc0:	8013      	strh	r3, [r2, #0]
								if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8005cc2:	89ba      	ldrh	r2, [r7, #12]
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	4924      	ldr	r1, [pc, #144]	@ (8005d58 <GUI_DrawFont24+0x158>)
 8005cc8:	204a      	movs	r0, #74	@ 0x4a
 8005cca:	fb00 f202 	mul.w	r2, r0, r2
 8005cce:	440a      	add	r2, r1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	2280      	movs	r2, #128	@ 0x80
 8005cdc:	fa42 f303 	asr.w	r3, r2, r3
 8005ce0:	400b      	ands	r3, r1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <GUI_DrawFont24+0xf2>
 8005ce6:	88ba      	ldrh	r2, [r7, #4]
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 fab5 	bl	800725c <LCD_DrawPoint>
								x++;
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==24)
 8005cf8:	88fa      	ldrh	r2, [r7, #6]
 8005cfa:	897b      	ldrh	r3, [r7, #10]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b18      	cmp	r3, #24
 8005d00:	d105      	bne.n	8005d0e <GUI_DrawFont24+0x10e>
								{
									x=x0;
 8005d02:	897b      	ldrh	r3, [r7, #10]
 8005d04:	80fb      	strh	r3, [r7, #6]
									y++;
 8005d06:	88bb      	ldrh	r3, [r7, #4]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	80bb      	strh	r3, [r7, #4]
									break;
 8005d0c:	e005      	b.n	8005d1a <GUI_DrawFont24+0x11a>
							for(j=0;j<8;j++)
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	3301      	adds	r3, #1
 8005d12:	73bb      	strb	r3, [r7, #14]
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	2b07      	cmp	r3, #7
 8005d18:	d9b0      	bls.n	8005c7c <GUI_DrawFont24+0x7c>
				    for(i=0;i<24*3;i++)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b47      	cmp	r3, #71	@ 0x47
 8005d24:	d9a7      	bls.n	8005c76 <GUI_DrawFont24+0x76>
						}
					}
					
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 8005d26:	bf00      	nop
			for (k=0;k<HZnum;k++) 
 8005d28:	89bb      	ldrh	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	81bb      	strh	r3, [r7, #12]
 8005d2e:	89ba      	ldrh	r2, [r7, #12]
 8005d30:	893b      	ldrh	r3, [r7, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	f4ff af7a 	bcc.w	8005c2c <GUI_DrawFont24+0x2c>
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8005d38:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <GUI_DrawFont24+0x160>)
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <GUI_DrawFont24+0x160>)
 8005d42:	885b      	ldrh	r3, [r3, #2]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2100      	movs	r1, #0
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f001 fc04 	bl	8007558 <LCD_SetWindows>
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd90      	pop	{r4, r7, pc}
 8005d58:	0801a078 	.word	0x0801a078
 8005d5c:	20025e26 	.word	0x20025e26
 8005d60:	20025e18 	.word	0x20025e18

08005d64 <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	4623      	mov	r3, r4
 8005d74:	80fb      	strh	r3, [r7, #6]
 8005d76:	4603      	mov	r3, r0
 8005d78:	80bb      	strh	r3, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	807b      	strh	r3, [r7, #2]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//�Զ�ͳ�ƺ�����Ŀ
 8005d86:	2304      	movs	r3, #4
 8005d88:	813b      	strh	r3, [r7, #8]
	for (k=0;k<HZnum;k++) 
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	81bb      	strh	r3, [r7, #12]
 8005d8e:	e085      	b.n	8005e9c <GUI_DrawFont32+0x138>
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8005d90:	89ba      	ldrh	r2, [r7, #12]
 8005d92:	494d      	ldr	r1, [pc, #308]	@ (8005ec8 <GUI_DrawFont32+0x164>)
 8005d94:	4613      	mov	r3, r2
 8005d96:	019b      	lsls	r3, r3, #6
 8005d98:	4413      	add	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	440b      	add	r3, r1
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d175      	bne.n	8005e94 <GUI_DrawFont32+0x130>
 8005da8:	89ba      	ldrh	r2, [r7, #12]
 8005daa:	4947      	ldr	r1, [pc, #284]	@ (8005ec8 <GUI_DrawFont32+0x164>)
 8005dac:	4613      	mov	r3, r2
 8005dae:	019b      	lsls	r3, r3, #6
 8005db0:	4413      	add	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	440b      	add	r3, r1
 8005db6:	3301      	adds	r3, #1
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d167      	bne.n	8005e94 <GUI_DrawFont32+0x130>
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 8005dc4:	88fb      	ldrh	r3, [r7, #6]
 8005dc6:	331f      	adds	r3, #31
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	88bb      	ldrh	r3, [r7, #4]
 8005dcc:	331f      	adds	r3, #31
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	88b9      	ldrh	r1, [r7, #4]
 8005dd2:	88f8      	ldrh	r0, [r7, #6]
 8005dd4:	f001 fbc0 	bl	8007558 <LCD_SetWindows>
				    for(i=0;i<32*4;i++)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	e056      	b.n	8005e8c <GUI_DrawFont32+0x128>
				    {
						for(j=0;j<8;j++)
 8005dde:	2300      	movs	r3, #0
 8005de0:	73bb      	strb	r3, [r7, #14]
 8005de2:	e04d      	b.n	8005e80 <GUI_DrawFont32+0x11c>
				    	{
							if(!mode) //�ǵ��ӷ�ʽ
 8005de4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d11c      	bne.n	8005e26 <GUI_DrawFont32+0xc2>
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8005dec:	89ba      	ldrh	r2, [r7, #12]
 8005dee:	7bf9      	ldrb	r1, [r7, #15]
 8005df0:	4835      	ldr	r0, [pc, #212]	@ (8005ec8 <GUI_DrawFont32+0x164>)
 8005df2:	4613      	mov	r3, r2
 8005df4:	019b      	lsls	r3, r3, #6
 8005df6:	4413      	add	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4403      	add	r3, r0
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3302      	adds	r3, #2
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	4619      	mov	r1, r3
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2280      	movs	r2, #128	@ 0x80
 8005e08:	fa42 f303 	asr.w	r3, r2, r3
 8005e0c:	400b      	ands	r3, r1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <GUI_DrawFont32+0xb8>
 8005e12:	887b      	ldrh	r3, [r7, #2]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 fa03 	bl	8007220 <Lcd_WriteData_16Bit>
 8005e1a:	e02e      	b.n	8005e7a <GUI_DrawFont32+0x116>
								else Lcd_WriteData_16Bit(bc);
 8005e1c:	883b      	ldrh	r3, [r7, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 f9fe 	bl	8007220 <Lcd_WriteData_16Bit>
 8005e24:	e029      	b.n	8005e7a <GUI_DrawFont32+0x116>
							}
							else
							{
								POINT_COLOR=fc;
 8005e26:	4a29      	ldr	r2, [pc, #164]	@ (8005ecc <GUI_DrawFont32+0x168>)
 8005e28:	887b      	ldrh	r3, [r7, #2]
 8005e2a:	8013      	strh	r3, [r2, #0]
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8005e2c:	89ba      	ldrh	r2, [r7, #12]
 8005e2e:	7bf9      	ldrb	r1, [r7, #15]
 8005e30:	4825      	ldr	r0, [pc, #148]	@ (8005ec8 <GUI_DrawFont32+0x164>)
 8005e32:	4613      	mov	r3, r2
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	4413      	add	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	4403      	add	r3, r0
 8005e3c:	440b      	add	r3, r1
 8005e3e:	3302      	adds	r3, #2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	4619      	mov	r1, r3
 8005e44:	7bbb      	ldrb	r3, [r7, #14]
 8005e46:	2280      	movs	r2, #128	@ 0x80
 8005e48:	fa42 f303 	asr.w	r3, r2, r3
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <GUI_DrawFont32+0xfa>
 8005e52:	88ba      	ldrh	r2, [r7, #4]
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 f9ff 	bl	800725c <LCD_DrawPoint>
								x++;
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	3301      	adds	r3, #1
 8005e62:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==32)
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	897b      	ldrh	r3, [r7, #10]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d105      	bne.n	8005e7a <GUI_DrawFont32+0x116>
								{
									x=x0;
 8005e6e:	897b      	ldrh	r3, [r7, #10]
 8005e70:	80fb      	strh	r3, [r7, #6]
									y++;
 8005e72:	88bb      	ldrh	r3, [r7, #4]
 8005e74:	3301      	adds	r3, #1
 8005e76:	80bb      	strh	r3, [r7, #4]
									break;
 8005e78:	e005      	b.n	8005e86 <GUI_DrawFont32+0x122>
						for(j=0;j<8;j++)
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	73bb      	strb	r3, [r7, #14]
 8005e80:	7bbb      	ldrb	r3, [r7, #14]
 8005e82:	2b07      	cmp	r3, #7
 8005e84:	d9ae      	bls.n	8005de4 <GUI_DrawFont32+0x80>
				    for(i=0;i<32*4;i++)
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
 8005e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	daa4      	bge.n	8005dde <GUI_DrawFont32+0x7a>
						}
					}
					
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 8005e94:	bf00      	nop
	for (k=0;k<HZnum;k++) 
 8005e96:	89bb      	ldrh	r3, [r7, #12]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	81bb      	strh	r3, [r7, #12]
 8005e9c:	89ba      	ldrh	r2, [r7, #12]
 8005e9e:	893b      	ldrh	r3, [r7, #8]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	f4ff af75 	bcc.w	8005d90 <GUI_DrawFont32+0x2c>
			}
	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <GUI_DrawFont32+0x16c>)
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	4b08      	ldr	r3, [pc, #32]	@ (8005ed0 <GUI_DrawFont32+0x16c>)
 8005eb0:	885b      	ldrh	r3, [r3, #2]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	2000      	movs	r0, #0
 8005eba:	f001 fb4d 	bl	8007558 <LCD_SetWindows>
} 
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd90      	pop	{r4, r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	0801a280 	.word	0x0801a280
 8005ecc:	20025e26 	.word	0x20025e26
 8005ed0:	20025e18 	.word	0x20025e18

08005ed4 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/	   		   
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{					
 8005ed4:	b5b0      	push	{r4, r5, r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af04      	add	r7, sp, #16
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	80fb      	strh	r3, [r7, #6]
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	80bb      	strh	r3, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	807b      	strh	r3, [r7, #2]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	803b      	strh	r3, [r7, #0]
	u16 x0=x;							  	  
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ��������� 
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 8005efa:	e0af      	b.n	800605c <Show_Str+0x188>
    { 
        if(!bHz)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d161      	bne.n	8005fc6 <Show_Str+0xf2>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size)) 
 8005f02:	88fa      	ldrh	r2, [r7, #6]
 8005f04:	4b5b      	ldr	r3, [pc, #364]	@ (8006074 <Show_Str+0x1a0>)
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	1acb      	subs	r3, r1, r3
 8005f14:	429a      	cmp	r2, r3
 8005f16:	f300 80a7 	bgt.w	8006068 <Show_Str+0x194>
 8005f1a:	88ba      	ldrh	r2, [r7, #4]
 8005f1c:	4b55      	ldr	r3, [pc, #340]	@ (8006074 <Show_Str+0x1a0>)
 8005f1e:	885b      	ldrh	r3, [r3, #2]
 8005f20:	4619      	mov	r1, r3
 8005f22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f26:	1acb      	subs	r3, r1, r3
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	f300 809d 	bgt.w	8006068 <Show_Str+0x194>
			return; 
	        if(*str>0x80)bHz=1;//���� 
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b80      	cmp	r3, #128	@ 0x80
 8005f34:	d902      	bls.n	8005f3c <Show_Str+0x68>
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
 8005f3a:	e08f      	b.n	800605c <Show_Str+0x188>
	        else              //�ַ�
	        {          
		        if(*str==0x0D)//���з���
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b0d      	cmp	r3, #13
 8005f42:	d10b      	bne.n	8005f5c <Show_Str+0x88>
		        {         
		            y+=size;
 8005f44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	88bb      	ldrh	r3, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8005f50:	89bb      	ldrh	r3, [r7, #12]
 8005f52:	80fb      	strh	r3, [r7, #6]
		            str++; 
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	3301      	adds	r3, #1
 8005f58:	623b      	str	r3, [r7, #32]
 8005f5a:	e030      	b.n	8005fbe <Show_Str+0xea>
		        }  
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8005f5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d913      	bls.n	8005f8c <Show_Str+0xb8>
					{  
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	883d      	ldrh	r5, [r7, #0]
 8005f6a:	887c      	ldrh	r4, [r7, #2]
 8005f6c:	88b9      	ldrh	r1, [r7, #4]
 8005f6e:	88f8      	ldrh	r0, [r7, #6]
 8005f70:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005f74:	9202      	str	r2, [sp, #8]
 8005f76:	2210      	movs	r2, #16
 8005f78:	9201      	str	r2, [sp, #4]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	4622      	mov	r2, r4
 8005f80:	f7ff fcac 	bl	80058dc <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ�� 
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	3308      	adds	r3, #8
 8005f88:	80fb      	strh	r3, [r7, #6]
 8005f8a:	e018      	b.n	8005fbe <Show_Str+0xea>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	883d      	ldrh	r5, [r7, #0]
 8005f92:	887c      	ldrh	r4, [r7, #2]
 8005f94:	88b9      	ldrh	r1, [r7, #4]
 8005f96:	88f8      	ldrh	r0, [r7, #6]
 8005f98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005f9c:	9202      	str	r2, [sp, #8]
 8005f9e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005fa2:	9201      	str	r2, [sp, #4]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	4622      	mov	r2, r4
 8005faa:	f7ff fc97 	bl	80058dc <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ�� 
 8005fae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	4413      	add	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
					}
				} 
				str++; 
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	e04a      	b.n	800605c <Show_Str+0x188>
		        
	        }
        }else//���� 
        {   
			if(x>(lcddev.width-size)||y>(lcddev.height-size)) 
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8006074 <Show_Str+0x1a0>)
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fd2:	1acb      	subs	r3, r1, r3
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	dc49      	bgt.n	800606c <Show_Str+0x198>
 8005fd8:	88ba      	ldrh	r2, [r7, #4]
 8005fda:	4b26      	ldr	r3, [pc, #152]	@ (8006074 <Show_Str+0x1a0>)
 8005fdc:	885b      	ldrh	r3, [r3, #2]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fe4:	1acb      	subs	r3, r1, r3
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	dc40      	bgt.n	800606c <Show_Str+0x198>
			return;  
            bHz=0;//�к��ֿ�    
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
			if(size==32)
 8005fee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d10c      	bne.n	8006010 <Show_Str+0x13c>
			GUI_DrawFont32(x,y,fc,bc,str,mode);	 	
 8005ff6:	883c      	ldrh	r4, [r7, #0]
 8005ff8:	887a      	ldrh	r2, [r7, #2]
 8005ffa:	88b9      	ldrh	r1, [r7, #4]
 8005ffc:	88f8      	ldrh	r0, [r7, #6]
 8005ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	4623      	mov	r3, r4
 800600a:	f7ff feab 	bl	8005d64 <GUI_DrawFont32>
 800600e:	e01c      	b.n	800604a <Show_Str+0x176>
			else if(size==24)
 8006010:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006014:	2b18      	cmp	r3, #24
 8006016:	d10c      	bne.n	8006032 <Show_Str+0x15e>
			GUI_DrawFont24(x,y,fc,bc,str,mode);	
 8006018:	883c      	ldrh	r4, [r7, #0]
 800601a:	887a      	ldrh	r2, [r7, #2]
 800601c:	88b9      	ldrh	r1, [r7, #4]
 800601e:	88f8      	ldrh	r0, [r7, #6]
 8006020:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4623      	mov	r3, r4
 800602c:	f7ff fde8 	bl	8005c00 <GUI_DrawFont24>
 8006030:	e00b      	b.n	800604a <Show_Str+0x176>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 8006032:	883c      	ldrh	r4, [r7, #0]
 8006034:	887a      	ldrh	r2, [r7, #2]
 8006036:	88b9      	ldrh	r1, [r7, #4]
 8006038:	88f8      	ldrh	r0, [r7, #6]
 800603a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4623      	mov	r3, r4
 8006046:	f7ff fd25 	bl	8005a94 <GUI_DrawFont16>
				
	        str+=2; 
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	3302      	adds	r3, #2
 800604e:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��	    
 8006050:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006054:	b29a      	uxth	r2, r3
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	4413      	add	r3, r2
 800605a:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f af4b 	bne.w	8005efc <Show_Str+0x28>
 8006066:	e002      	b.n	800606e <Show_Str+0x19a>
			return; 
 8006068:	bf00      	nop
 800606a:	e000      	b.n	800606e <Show_Str+0x19a>
			return;  
 800606c:	bf00      	nop
        }						 
    }   
}
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bdb0      	pop	{r4, r5, r7, pc}
 8006074:	20025e18 	.word	0x20025e18

08006078 <LL_CRC_ResetCRCCalculationUnit>:
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f043 0201 	orr.w	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	609a      	str	r2, [r3, #8]
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <LL_CRC_FeedData8>:
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	701a      	strb	r2, [r3, #0]
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <LL_CRC_ReadData16>:
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <Message_Buffering>:
}
*/
//-------------------------------------------------------------------------------------

MSG_RCIV_Result Message_Buffering(uint8_t *RX_Buffer, uint8_t *SOP)			//Version 3.1 (Revision 1 for this project.)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b090      	sub	sp, #64	@ 0x40
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
	uint8_t *MSG_Start = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t *MSG_End = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint8_t *MSG_Read = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
	char Main_MSG[MSG_FRAME_BUFF_SIZE];
	uint8_t Main_MSG_Len = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t MSG_Data_Len = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint8_t MSG_Packet_Len = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint16_t MSG_CRC = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	853b      	strh	r3, [r7, #40]	@ 0x28
//	static uint8_t *Next_Packet_SOP = (uint8_t *)RX_Buffer;
	uint8_t *Next_Packet_SOP = SOP;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t Bytes_ToEND = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
	MSG_RCIV_Result Result = None;
 8006104:	2300      	movs	r3, #0
 8006106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	//static uint8_t *Extra_Buffer = 0;
	Packet_MSG_Struct Message;
	static uint8_t Wait = 0;
	uint8_t Copy_Loop = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint16_t Last_Index = Line_BUF_Size - 1; //sizeof(RX_Buffer)-1;
 8006110:	2363      	movs	r3, #99	@ 0x63
 8006112:	847b      	strh	r3, [r7, #34]	@ 0x22
	
	//Next_Packet_SOP = RX_Buffer;

	memset(Main_MSG, 0, sizeof(Main_MSG));
 8006114:	f107 0318 	add.w	r3, r7, #24
 8006118:	220a      	movs	r2, #10
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f010 fb72 	bl	8016806 <memset>
	memset(&Message, 0, sizeof(Message));
 8006122:	f107 0310 	add.w	r3, r7, #16
 8006126:	2208      	movs	r2, #8
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f010 fb6b 	bl	8016806 <memset>
	
	if((uint32_t)Next_Packet_SOP > (uint32_t)&RX_Buffer[Last_Index])
 8006130:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	461a      	mov	r2, r3
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	429a      	cmp	r2, r3
 800613c:	d201      	bcs.n	8006142 <Message_Buffering+0x72>
	{
		Next_Packet_SOP = (uint8_t *)RX_Buffer;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	
	Bytes_ToEND = ( (uint32_t)&RX_Buffer[Last_Index] - (uint32_t)Next_Packet_SOP ) + 1;
 8006142:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	461a      	mov	r2, r3
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	3301      	adds	r3, #1
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
	
	//MSG_Start = (uint8_t *)strstr(RX_Buffer, "U\1");
	//MSG_Start = (uint8_t *)strstr(memchr(RX_Buffer, 'U', sizeof(RX_Buffer)), "U\1");
	MSG_Start = (uint8_t *)memchr(Next_Packet_SOP, Header, Bytes_ToEND); 	//sizeof(RX_Buffer)		//MSG_Start = (uint8_t *)memchr(RX_Buffer, 'U', sizeof(RX_Buffer));
 8006152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006154:	21ca      	movs	r1, #202	@ 0xca
 8006156:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006158:	f010 fbd5 	bl	8016906 <memchr>
 800615c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if(MSG_Start == 0) {MSG_Start = (uint8_t *)memchr(RX_Buffer, Header, (Next_Packet_SOP-(uint8_t *)&RX_Buffer[0]) );}
 800615e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d108      	bne.n	8006176 <Message_Buffering+0xa6>
 8006164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	461a      	mov	r2, r3
 800616c:	21ca      	movs	r1, #202	@ 0xca
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f010 fbc9 	bl	8016906 <memchr>
 8006174:	63f8      	str	r0, [r7, #60]	@ 0x3c
//		//LL_mDelay(1);
//		Delay_ms_OS(1);
//
//	}

	if(MSG_Start != 0)
 8006176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80d5 	beq.w	8006328 <Message_Buffering+0x258>
	{
//		LL_mDelay(20);
		if(Wait == 0) {Wait = 1; return Waiting;}
 800617e:	4b6e      	ldr	r3, [pc, #440]	@ (8006338 <Message_Buffering+0x268>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <Message_Buffering+0xc0>
 8006186:	4b6c      	ldr	r3, [pc, #432]	@ (8006338 <Message_Buffering+0x268>)
 8006188:	2201      	movs	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	2305      	movs	r3, #5
 800618e:	e0cf      	b.n	8006330 <Message_Buffering+0x260>
		else if(Wait == 1) {Wait = 0;}
 8006190:	4b69      	ldr	r3, [pc, #420]	@ (8006338 <Message_Buffering+0x268>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d102      	bne.n	800619e <Message_Buffering+0xce>
 8006198:	4b67      	ldr	r3, [pc, #412]	@ (8006338 <Message_Buffering+0x268>)
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
		
		MSG_Read = MSG_Start;
 800619e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
		
		for(Copy_Loop=0; Copy_Loop<MSG_FRAME_BUFF_SIZE; Copy_Loop++)
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80061a8:	e019      	b.n	80061de <Message_Buffering+0x10e>
		{
			Main_MSG[Copy_Loop] = (char)*MSG_Read;
 80061aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061b0:	7812      	ldrb	r2, [r2, #0]
 80061b2:	3340      	adds	r3, #64	@ 0x40
 80061b4:	443b      	add	r3, r7
 80061b6:	f803 2c28 	strb.w	r2, [r3, #-40]
			MSG_Read++;
 80061ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061bc:	3301      	adds	r3, #1
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34

			if(MSG_Read > (uint8_t *)&RX_Buffer[Last_Index]) {MSG_Read = (uint8_t *)RX_Buffer;}
 80061c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d901      	bls.n	80061d0 <Message_Buffering+0x100>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	637b      	str	r3, [r7, #52]	@ 0x34

			MSG_End = MSG_Read;
 80061d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(Copy_Loop=0; Copy_Loop<MSG_FRAME_BUFF_SIZE; Copy_Loop++)
 80061d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061d8:	3301      	adds	r3, #1
 80061da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80061de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	d9e1      	bls.n	80061aa <Message_Buffering+0xda>
		}
		
		if(MSG_End != 0)
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8094 	beq.w	8006316 <Message_Buffering+0x246>
		{	// CRC must be calculated here then make a decision about MSG_End, Next_SOP and cleaning.
//			MSG_CRC = Main_MSG[9];
//			MSG_CRC = MSG_CRC << 8;
//			MSG_CRC |= Main_MSG[8];
			MSG_CRC = Main_MSG[8];
 80061ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061f2:	853b      	strh	r3, [r7, #40]	@ 0x28
			MSG_CRC = MSG_CRC << 8;
 80061f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	853b      	strh	r3, [r7, #40]	@ 0x28
			MSG_CRC |= Main_MSG[9];
 80061fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80061fe:	461a      	mov	r2, r3
 8006200:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006202:	4313      	orrs	r3, r2
 8006204:	853b      	strh	r3, [r7, #40]	@ 0x28

			LL_CRC_ResetCRCCalculationUnit(CRC);
 8006206:	484d      	ldr	r0, [pc, #308]	@ (800633c <Message_Buffering+0x26c>)
 8006208:	f7ff ff36 	bl	8006078 <LL_CRC_ResetCRCCalculationUnit>
			for(Copy_Loop=0; Copy_Loop<MSG_FRAME_BUFF_SIZE-2; Copy_Loop++)
 800620c:	2300      	movs	r3, #0
 800620e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006212:	e00e      	b.n	8006232 <Message_Buffering+0x162>
			{
				LL_CRC_FeedData8(CRC, Main_MSG[Copy_Loop]);
 8006214:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006218:	3340      	adds	r3, #64	@ 0x40
 800621a:	443b      	add	r3, r7
 800621c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006220:	4619      	mov	r1, r3
 8006222:	4846      	ldr	r0, [pc, #280]	@ (800633c <Message_Buffering+0x26c>)
 8006224:	f7ff ff38 	bl	8006098 <LL_CRC_FeedData8>
			for(Copy_Loop=0; Copy_Loop<MSG_FRAME_BUFF_SIZE-2; Copy_Loop++)
 8006228:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800622c:	3301      	adds	r3, #1
 800622e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006232:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006236:	2b07      	cmp	r3, #7
 8006238:	d9ec      	bls.n	8006214 <Message_Buffering+0x144>
			}
			
			if(MSG_CRC == LL_CRC_ReadData16(CRC))
 800623a:	4840      	ldr	r0, [pc, #256]	@ (800633c <Message_Buffering+0x26c>)
 800623c:	f7ff ff3b 	bl	80060b6 <LL_CRC_ReadData16>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006246:	4293      	cmp	r3, r2
 8006248:	d15e      	bne.n	8006308 <Message_Buffering+0x238>
			{
				if(MSG_Start < MSG_End)
 800624a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	429a      	cmp	r2, r3
 8006250:	d209      	bcs.n	8006266 <Message_Buffering+0x196>
				{
					memset(MSG_Start, 0, (MSG_End-MSG_Start)+2);
 8006252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	3302      	adds	r3, #2
 800625a:	461a      	mov	r2, r3
 800625c:	2100      	movs	r1, #0
 800625e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006260:	f010 fad1 	bl	8016806 <memset>
 8006264:	e017      	b.n	8006296 <Message_Buffering+0x1c6>
				}
				else if(MSG_Start > MSG_End)
 8006266:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626a:	429a      	cmp	r2, r3
 800626c:	d913      	bls.n	8006296 <Message_Buffering+0x1c6>
				{
					memset(MSG_Start, 0, ((uint8_t *)&RX_Buffer[Last_Index]-MSG_Start)+1);
 800626e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	441a      	add	r2, r3
 8006274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	3301      	adds	r3, #1
 800627a:	461a      	mov	r2, r3
 800627c:	2100      	movs	r1, #0
 800627e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006280:	f010 fac1 	bl	8016806 <memset>
					memset(&RX_Buffer[0], 0, (MSG_End-(uint8_t *)&RX_Buffer[0])+2 );
 8006284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	3302      	adds	r3, #2
 800628c:	461a      	mov	r2, r3
 800628e:	2100      	movs	r1, #0
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f010 fab8 	bl	8016806 <memset>
				}

				Next_Packet_SOP = MSG_End+1;
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	3301      	adds	r3, #1
 800629a:	633b      	str	r3, [r7, #48]	@ 0x30
				MSG_Packet_Len = MSG_FRAME_BUFF_SIZE; //Copy_Loop;
 800629c:	230a      	movs	r3, #10
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				MSG_Start = (uint8_t *)Main_MSG;
 80062a2:	f107 0318 	add.w	r3, r7, #24
 80062a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
				//MSG_End = (uint8_t *)strstr(memchr(Main_MSG, '\r', MSG_FRAME_BUFF_SIZE), "\r\n");
				MSG_End = (uint8_t *)&Main_MSG[MSG_FRAME_BUFF_SIZE-1];
 80062a8:	f107 0318 	add.w	r3, r7, #24
 80062ac:	3309      	adds	r3, #9
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38

				if(MSG_End > MSG_Start)
 80062b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d905      	bls.n	80062c4 <Message_Buffering+0x1f4>
				{
					//memcpy(Main_MSG, MSG_Start, ((MSG_End - 2) - MSG_Start));
					Main_MSG_Len = MSG_FRAME_Length-2; //CRC excluded. //(MSG_End - 2) - MSG_Start;
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
					MSG_Data_Len = MSG_FRAME_Length-3; //Header & CRC excluded. //*(MSG_Start + 4);
 80062be:	2307      	movs	r3, #7
 80062c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
//					MSG_CRC = *(MSG_End-2);
//					MSG_CRC = MSG_CRC << 8;
//					MSG_CRC |= *(MSG_End-1);
				}

				Message.Packet_Token = Main_MSG[0];
 80062c4:	7e3b      	ldrb	r3, [r7, #24]
 80062c6:	743b      	strb	r3, [r7, #16]
				Message.PCKT_ID = Main_MSG[1];
 80062c8:	7e7b      	ldrb	r3, [r7, #25]
 80062ca:	747b      	strb	r3, [r7, #17]
				Message.Data1 = Main_MSG[2];
 80062cc:	7ebb      	ldrb	r3, [r7, #26]
 80062ce:	74bb      	strb	r3, [r7, #18]
				Message.Data2 = Main_MSG[3];
 80062d0:	7efb      	ldrb	r3, [r7, #27]
 80062d2:	74fb      	strb	r3, [r7, #19]
				Message.Data3 = Main_MSG[4];
 80062d4:	7f3b      	ldrb	r3, [r7, #28]
 80062d6:	753b      	strb	r3, [r7, #20]
				Message.Data4 = Main_MSG[5];
 80062d8:	7f7b      	ldrb	r3, [r7, #29]
 80062da:	757b      	strb	r3, [r7, #21]
				Message.Data5 = Main_MSG[6];
 80062dc:	7fbb      	ldrb	r3, [r7, #30]
 80062de:	75bb      	strb	r3, [r7, #22]
				Message.Data6 = Main_MSG[7];
 80062e0:	7ffb      	ldrb	r3, [r7, #31]
 80062e2:	75fb      	strb	r3, [r7, #23]
//				Message.Operation = Main_MSG[3];
//				Message.data_lenght = Main_MSG[4];
//				memcpy(Message.data, &Main_MSG[5], Main_MSG[4]);
				//Message.Result = ;
				//MainCPU_Message_Parsing(Message);
				Message_Parsing(Message);
 80062e4:	4638      	mov	r0, r7
 80062e6:	f107 0310 	add.w	r3, r7, #16
 80062ea:	e893 0006 	ldmia.w	r3, {r1, r2}
 80062ee:	f000 f827 	bl	8006340 <Message_Parsing>
				memset(MSG_Start, 0, MSG_Packet_Len);
 80062f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062f6:	461a      	mov	r2, r3
 80062f8:	2100      	movs	r1, #0
 80062fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80062fc:	f010 fa83 	bl	8016806 <memset>
				Result = OK_Send_ACK; //strcpy(MainCPU_TX_Buffer, "OK.\r\n");
 8006300:	2301      	movs	r3, #1
 8006302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006306:	e00f      	b.n	8006328 <Message_Buffering+0x258>
			}
			else
			{
				Result = CRC_NOK;
 8006308:	2302      	movs	r3, #2
 800630a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Next_Packet_SOP++;
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	3301      	adds	r3, #1
 8006312:	633b      	str	r3, [r7, #48]	@ 0x30
 8006314:	e008      	b.n	8006328 <Message_Buffering+0x258>
			}

		}
		
		else if(MSG_End == 0)
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d105      	bne.n	8006328 <Message_Buffering+0x258>
		{
			Next_Packet_SOP = MSG_Start + 1;
 800631c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631e:	3301      	adds	r3, #1
 8006320:	633b      	str	r3, [r7, #48]	@ 0x30
			Result = No_Ending;
 8006322:	2304      	movs	r3, #4
 8006324:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
//	if((uint32_t)Next_Packet_SOP > (uint32_t)&RX_Buffer[Last_Index])		// && ((Next_Packet_SOP - (uint8_t *)RX_Buffer) > 250)
//	{
//		Next_Packet_SOP = (uint8_t *)RX_Buffer;
//	}
	
	SOP = Next_Packet_SOP;
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	60bb      	str	r3, [r7, #8]
	return Result;			
 800632c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		
}
 8006330:	4618      	mov	r0, r3
 8006332:	3740      	adds	r7, #64	@ 0x40
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20025e0c 	.word	0x20025e0c
 800633c:	40023000 	.word	0x40023000

08006340 <Message_Parsing>:
//}

//-------------------------------------------------------------------------------------

Parsed_MSG_Struct Message_Parsing(Packet_MSG_Struct Message)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	1d3b      	adds	r3, r7, #4
 800634a:	e883 0006 	stmia.w	r3, {r1, r2}
	Parsed_MSG_Struct MSG;
	
	memset(&MSG, 0, sizeof(MSG));
 800634e:	f107 0310 	add.w	r3, r7, #16
 8006352:	2208      	movs	r2, #8
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f010 fa55 	bl	8016806 <memset>
	memset(&Parsed_MSG, 0, sizeof(Parsed_MSG));
 800635c:	2208      	movs	r2, #8
 800635e:	2100      	movs	r1, #0
 8006360:	482d      	ldr	r0, [pc, #180]	@ (8006418 <Message_Parsing+0xd8>)
 8006362:	f010 fa50 	bl	8016806 <memset>
	
	if(Message.PCKT_ID == FEUtoMIU_0)
 8006366:	797b      	ldrb	r3, [r7, #5]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d10d      	bne.n	8006388 <Message_Parsing+0x48>
	{
		MSG.PCKT_ID = FEUtoMIU_0;
 800636c:	2302      	movs	r3, #2
 800636e:	743b      	strb	r3, [r7, #16]
		MSG.Data1 = Message.Data1;
 8006370:	79bb      	ldrb	r3, [r7, #6]
 8006372:	747b      	strb	r3, [r7, #17]
		MSG.Data2 = Message.Data2;
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	74bb      	strb	r3, [r7, #18]
		MSG.Data3 = Message.Data3;
 8006378:	7a3b      	ldrb	r3, [r7, #8]
 800637a:	74fb      	strb	r3, [r7, #19]
		MSG.Data4 = Message.Data4;
 800637c:	7a7b      	ldrb	r3, [r7, #9]
 800637e:	753b      	strb	r3, [r7, #20]
		MSG.Data5 = Message.Data5;
 8006380:	7abb      	ldrb	r3, [r7, #10]
 8006382:	757b      	strb	r3, [r7, #21]
		MSG.Data6 = Message.Data6;
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	75bb      	strb	r3, [r7, #22]
	}

	if(Message.PCKT_ID == FEUtoMIU_1)
 8006388:	797b      	ldrb	r3, [r7, #5]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d10d      	bne.n	80063aa <Message_Parsing+0x6a>
	{
		MSG.PCKT_ID = FEUtoMIU_1;
 800638e:	2303      	movs	r3, #3
 8006390:	743b      	strb	r3, [r7, #16]
		MSG.Data1 = Message.Data1;
 8006392:	79bb      	ldrb	r3, [r7, #6]
 8006394:	747b      	strb	r3, [r7, #17]
		MSG.Data2 = Message.Data2;
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	74bb      	strb	r3, [r7, #18]
		MSG.Data3 = Message.Data3;
 800639a:	7a3b      	ldrb	r3, [r7, #8]
 800639c:	74fb      	strb	r3, [r7, #19]
		MSG.Data4 = Message.Data4;
 800639e:	7a7b      	ldrb	r3, [r7, #9]
 80063a0:	753b      	strb	r3, [r7, #20]
		MSG.Data5 = Message.Data5;
 80063a2:	7abb      	ldrb	r3, [r7, #10]
 80063a4:	757b      	strb	r3, [r7, #21]
		MSG.Data6 = Message.Data6;
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	75bb      	strb	r3, [r7, #22]
	}
	
	if(Message.PCKT_ID == IJUtoMIU_0)
 80063aa:	797b      	ldrb	r3, [r7, #5]
 80063ac:	2b06      	cmp	r3, #6
 80063ae:	d10d      	bne.n	80063cc <Message_Parsing+0x8c>
	{
		MSG.PCKT_ID = IJUtoMIU_0;
 80063b0:	2306      	movs	r3, #6
 80063b2:	743b      	strb	r3, [r7, #16]
		MSG.Data1 = Message.Data1;
 80063b4:	79bb      	ldrb	r3, [r7, #6]
 80063b6:	747b      	strb	r3, [r7, #17]
		MSG.Data2 = Message.Data2;
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	74bb      	strb	r3, [r7, #18]
		MSG.Data3 = Message.Data3;
 80063bc:	7a3b      	ldrb	r3, [r7, #8]
 80063be:	74fb      	strb	r3, [r7, #19]
		MSG.Data4 = Message.Data4;
 80063c0:	7a7b      	ldrb	r3, [r7, #9]
 80063c2:	753b      	strb	r3, [r7, #20]
		MSG.Data5 = Message.Data5;
 80063c4:	7abb      	ldrb	r3, [r7, #10]
 80063c6:	757b      	strb	r3, [r7, #21]
		MSG.Data6 = Message.Data6;
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	75bb      	strb	r3, [r7, #22]
	}

	if(Message.PCKT_ID == IJUtoMIU_1)
 80063cc:	797b      	ldrb	r3, [r7, #5]
 80063ce:	2b07      	cmp	r3, #7
 80063d0:	d10d      	bne.n	80063ee <Message_Parsing+0xae>
	{
		MSG.PCKT_ID = IJUtoMIU_1;
 80063d2:	2307      	movs	r3, #7
 80063d4:	743b      	strb	r3, [r7, #16]
		MSG.Data1 = Message.Data1;
 80063d6:	79bb      	ldrb	r3, [r7, #6]
 80063d8:	747b      	strb	r3, [r7, #17]
		MSG.Data2 = Message.Data2;
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	74bb      	strb	r3, [r7, #18]
		MSG.Data3 = Message.Data3;
 80063de:	7a3b      	ldrb	r3, [r7, #8]
 80063e0:	74fb      	strb	r3, [r7, #19]
		MSG.Data4 = Message.Data4;
 80063e2:	7a7b      	ldrb	r3, [r7, #9]
 80063e4:	753b      	strb	r3, [r7, #20]
		MSG.Data5 = Message.Data5;
 80063e6:	7abb      	ldrb	r3, [r7, #10]
 80063e8:	757b      	strb	r3, [r7, #21]
		MSG.Data6 = Message.Data6;
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	75bb      	strb	r3, [r7, #22]
//	}
//
//	MSG.data_lenght = Message.data_lenght;
//	memcpy(MSG.data, Message.data, sizeof(MSG.data));
	
	MSG.New_MSG = 1;
 80063ee:	2301      	movs	r3, #1
 80063f0:	75fb      	strb	r3, [r7, #23]
	Parsed_MSG = MSG;
 80063f2:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <Message_Parsing+0xd8>)
 80063f4:	461a      	mov	r2, r3
 80063f6:	f107 0310 	add.w	r3, r7, #16
 80063fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80063fe:	e882 0003 	stmia.w	r2, {r0, r1}
	return MSG;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	461a      	mov	r2, r3
 8006406:	f107 0310 	add.w	r3, r7, #16
 800640a:	cb03      	ldmia	r3!, {r0, r1}
 800640c:	6010      	str	r0, [r2, #0]
 800640e:	6051      	str	r1, [r2, #4]
}
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20025e04 	.word	0x20025e04

0800641c <LL_GPIO_SetOutputPin>:
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	619a      	str	r2, [r3, #24]
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_GPIO_ResetOutputPin>:
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <LL_USART_IsActiveFlag_TC>:
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006464:	2b40      	cmp	r3, #64	@ 0x40
 8006466:	d101      	bne.n	800646c <LL_USART_IsActiveFlag_TC+0x18>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <LL_USART_IsActiveFlag_TC+0x1a>
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648a:	2b80      	cmp	r3, #128	@ 0x80
 800648c:	d101      	bne.n	8006492 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <LL_USART_ClearFlag_TC>:
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2240      	movs	r2, #64	@ 0x40
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <LL_LPUART_IsActiveFlag_TC>:
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e8:	2b40      	cmp	r3, #64	@ 0x40
 80064ea:	d101      	bne.n	80064f0 <LL_LPUART_IsActiveFlag_TC+0x18>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <LL_LPUART_IsActiveFlag_TC+0x1a>
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650e:	2b80      	cmp	r3, #128	@ 0x80
 8006510:	d101      	bne.n	8006516 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <LL_LPUART_ClearFlag_TC>:
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2240      	movs	r2, #64	@ 0x40
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <RS485_Set_Line_Driver_Receiver>:
//	USART_Cmd(USART3, ENABLE);
}

//------------------------------------------------------------------------------
void RS485_Set_Line_Driver_Receiver(u8 Line, u8 D_R)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	460a      	mov	r2, r1
 8006566:	71fb      	strb	r3, [r7, #7]
 8006568:	4613      	mov	r3, r2
 800656a:	71bb      	strb	r3, [r7, #6]
	delay_m(100);
 800656c:	2064      	movs	r0, #100	@ 0x64
 800656e:	f000 fdb2 	bl	80070d6 <delay_m>
	
	if(RS485_SingleEnded_Network == Single_Ended)
 8006572:	4ba7      	ldr	r3, [pc, #668]	@ (8006810 <RS485_Set_Line_Driver_Receiver+0x2b4>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f040 808c 	bne.w	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
	{
		if(Line == 1)
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d10f      	bne.n	80065a2 <RS485_Set_Line_Driver_Receiver+0x46>
		{
			if(D_R == Driver)
 8006582:	79bb      	ldrb	r3, [r7, #6]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d104      	bne.n	8006592 <RS485_Set_Line_Driver_Receiver+0x36>
			{
				LL_GPIO_SetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 8006588:	2101      	movs	r1, #1
 800658a:	48a2      	ldr	r0, [pc, #648]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800658c:	f7ff ff46 	bl	800641c <LL_GPIO_SetOutputPin>
 8006590:	e080      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
			
			else if(D_R == Receiver)
 8006592:	79bb      	ldrb	r3, [r7, #6]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d17d      	bne.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 8006598:	2101      	movs	r1, #1
 800659a:	489e      	ldr	r0, [pc, #632]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800659c:	f7ff ff4c 	bl	8006438 <LL_GPIO_ResetOutputPin>
 80065a0:	e078      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}
		
		else if(Line == 2)
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d111      	bne.n	80065cc <RS485_Set_Line_Driver_Receiver+0x70>
		{
			if(D_R == Driver)
 80065a8:	79bb      	ldrb	r3, [r7, #6]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d105      	bne.n	80065ba <RS485_Set_Line_Driver_Receiver+0x5e>
			{
				LL_GPIO_SetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 80065ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80065b2:	4899      	ldr	r0, [pc, #612]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80065b4:	f7ff ff32 	bl	800641c <LL_GPIO_SetOutputPin>
 80065b8:	e06c      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
			
			else if(D_R == Receiver)
 80065ba:	79bb      	ldrb	r3, [r7, #6]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d169      	bne.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 80065c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80065c4:	4894      	ldr	r0, [pc, #592]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80065c6:	f7ff ff37 	bl	8006438 <LL_GPIO_ResetOutputPin>
 80065ca:	e063      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}
		
		else if(Line == 3)
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d111      	bne.n	80065f6 <RS485_Set_Line_Driver_Receiver+0x9a>
		{
			if(D_R == Driver)
 80065d2:	79bb      	ldrb	r3, [r7, #6]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d105      	bne.n	80065e4 <RS485_Set_Line_Driver_Receiver+0x88>
			{
				LL_GPIO_SetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80065d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80065dc:	488d      	ldr	r0, [pc, #564]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80065de:	f7ff ff1d 	bl	800641c <LL_GPIO_SetOutputPin>
 80065e2:	e057      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}

			else if(D_R == Receiver)
 80065e4:	79bb      	ldrb	r3, [r7, #6]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d154      	bne.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80065ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80065ee:	4889      	ldr	r0, [pc, #548]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80065f0:	f7ff ff22 	bl	8006438 <LL_GPIO_ResetOutputPin>
 80065f4:	e04e      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}

		else if(Line == 4)
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d111      	bne.n	8006620 <RS485_Set_Line_Driver_Receiver+0xc4>
		{
			if(D_R == Driver)
 80065fc:	79bb      	ldrb	r3, [r7, #6]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <RS485_Set_Line_Driver_Receiver+0xb2>
			{
				LL_GPIO_SetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8006602:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006606:	4883      	ldr	r0, [pc, #524]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006608:	f7ff ff08 	bl	800641c <LL_GPIO_SetOutputPin>
 800660c:	e042      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}

			else if(D_R == Receiver)
 800660e:	79bb      	ldrb	r3, [r7, #6]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d13f      	bne.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8006614:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006618:	487e      	ldr	r0, [pc, #504]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800661a:	f7ff ff0d 	bl	8006438 <LL_GPIO_ResetOutputPin>
 800661e:	e039      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}

		else if(Line == 5)
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	2b05      	cmp	r3, #5
 8006624:	d111      	bne.n	800664a <RS485_Set_Line_Driver_Receiver+0xee>
		{
			if(D_R == Driver)
 8006626:	79bb      	ldrb	r3, [r7, #6]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d105      	bne.n	8006638 <RS485_Set_Line_Driver_Receiver+0xdc>
			{
				LL_GPIO_SetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 800662c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006630:	4879      	ldr	r0, [pc, #484]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 8006632:	f7ff fef3 	bl	800641c <LL_GPIO_SetOutputPin>
 8006636:	e02d      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
			
			else if(D_R == Receiver)
 8006638:	79bb      	ldrb	r3, [r7, #6]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d12a      	bne.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 800663e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006642:	4875      	ldr	r0, [pc, #468]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 8006644:	f7ff fef8 	bl	8006438 <LL_GPIO_ResetOutputPin>
 8006648:	e024      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}

		else if(Line == 6)
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d10f      	bne.n	8006670 <RS485_Set_Line_Driver_Receiver+0x114>
		{
			if(D_R == Driver)
 8006650:	79bb      	ldrb	r3, [r7, #6]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d104      	bne.n	8006660 <RS485_Set_Line_Driver_Receiver+0x104>
			{
				LL_GPIO_SetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8006656:	2102      	movs	r1, #2
 8006658:	486e      	ldr	r0, [pc, #440]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800665a:	f7ff fedf 	bl	800641c <LL_GPIO_SetOutputPin>
 800665e:	e019      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}

			else if(D_R == Receiver)
 8006660:	79bb      	ldrb	r3, [r7, #6]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d116      	bne.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8006666:	2102      	movs	r1, #2
 8006668:	486a      	ldr	r0, [pc, #424]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800666a:	f7ff fee5 	bl	8006438 <LL_GPIO_ResetOutputPin>
 800666e:	e011      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}

		else if(Line == 7)
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	2b07      	cmp	r3, #7
 8006674:	d10e      	bne.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
		{
			if(D_R == Driver)
 8006676:	79bb      	ldrb	r3, [r7, #6]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d104      	bne.n	8006686 <RS485_Set_Line_Driver_Receiver+0x12a>
			{
				LL_GPIO_SetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 800667c:	2104      	movs	r1, #4
 800667e:	4865      	ldr	r0, [pc, #404]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006680:	f7ff fecc 	bl	800641c <LL_GPIO_SetOutputPin>
 8006684:	e006      	b.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			}

			else if(D_R == Receiver)
 8006686:	79bb      	ldrb	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 800668c:	2104      	movs	r1, #4
 800668e:	4861      	ldr	r0, [pc, #388]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006690:	f7ff fed2 	bl	8006438 <LL_GPIO_ResetOutputPin>
			}
		}
	}
	//------------
	if(RS485_SingleEnded_Network == Network)
 8006694:	4b5e      	ldr	r3, [pc, #376]	@ (8006810 <RS485_Set_Line_Driver_Receiver+0x2b4>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	f040 8156 	bne.w	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
	{
		if(Line == 1)
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d12c      	bne.n	80066fe <RS485_Set_Line_Driver_Receiver+0x1a2>
		{
			if(D_R == Driver)
 80066a4:	79bb      	ldrb	r3, [r7, #6]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d120      	bne.n	80066ec <RS485_Set_Line_Driver_Receiver+0x190>
			{
				//LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 80066aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80066ae:	485a      	ldr	r0, [pc, #360]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80066b0:	f7ff fec2 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80066b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80066b8:	4856      	ldr	r0, [pc, #344]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80066ba:	f7ff febd 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 80066be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066c2:	4854      	ldr	r0, [pc, #336]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80066c4:	f7ff feb8 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 80066c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80066cc:	4852      	ldr	r0, [pc, #328]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80066ce:	f7ff feb3 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 80066d2:	2102      	movs	r1, #2
 80066d4:	484f      	ldr	r0, [pc, #316]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80066d6:	f7ff feaf 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 80066da:	2104      	movs	r1, #4
 80066dc:	484d      	ldr	r0, [pc, #308]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80066de:	f7ff feab 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 80066e2:	2101      	movs	r1, #1
 80066e4:	484b      	ldr	r0, [pc, #300]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80066e6:	f7ff fe99 	bl	800641c <LL_GPIO_SetOutputPin>
			{
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
			}
		}
	}
}
 80066ea:	e12e      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 80066ec:	79bb      	ldrb	r3, [r7, #6]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 812b 	bne.w	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 80066f4:	2101      	movs	r1, #1
 80066f6:	4847      	ldr	r0, [pc, #284]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80066f8:	f7ff fe9e 	bl	8006438 <LL_GPIO_ResetOutputPin>
}
 80066fc:	e125      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 2)
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d12d      	bne.n	8006760 <RS485_Set_Line_Driver_Receiver+0x204>
			if(D_R == Driver)
 8006704:	79bb      	ldrb	r3, [r7, #6]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d120      	bne.n	800674c <RS485_Set_Line_Driver_Receiver+0x1f0>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 800670a:	2101      	movs	r1, #1
 800670c:	4841      	ldr	r0, [pc, #260]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800670e:	f7ff fe93 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 8006712:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006716:	483f      	ldr	r0, [pc, #252]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006718:	f7ff fe8e 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 800671c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006720:	483c      	ldr	r0, [pc, #240]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006722:	f7ff fe89 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8006726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800672a:	483b      	ldr	r0, [pc, #236]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 800672c:	f7ff fe84 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8006730:	2102      	movs	r1, #2
 8006732:	4838      	ldr	r0, [pc, #224]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006734:	f7ff fe80 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 8006738:	2104      	movs	r1, #4
 800673a:	4836      	ldr	r0, [pc, #216]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800673c:	f7ff fe7c 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8006740:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006744:	4834      	ldr	r0, [pc, #208]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 8006746:	f7ff fe69 	bl	800641c <LL_GPIO_SetOutputPin>
}
 800674a:	e0fe      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 800674c:	79bb      	ldrb	r3, [r7, #6]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 80fb 	bne.w	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8006754:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006758:	482f      	ldr	r0, [pc, #188]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 800675a:	f7ff fe6d 	bl	8006438 <LL_GPIO_ResetOutputPin>
}
 800675e:	e0f4      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 3)
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	2b03      	cmp	r3, #3
 8006764:	d12d      	bne.n	80067c2 <RS485_Set_Line_Driver_Receiver+0x266>
			if(D_R == Driver)
 8006766:	79bb      	ldrb	r3, [r7, #6]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d120      	bne.n	80067ae <RS485_Set_Line_Driver_Receiver+0x252>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 800676c:	2101      	movs	r1, #1
 800676e:	4829      	ldr	r0, [pc, #164]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006770:	f7ff fe62 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8006774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006778:	4827      	ldr	r0, [pc, #156]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 800677a:	f7ff fe5d 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 800677e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006782:	4824      	ldr	r0, [pc, #144]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006784:	f7ff fe58 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8006788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800678c:	4822      	ldr	r0, [pc, #136]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 800678e:	f7ff fe53 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8006792:	2102      	movs	r1, #2
 8006794:	481f      	ldr	r0, [pc, #124]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006796:	f7ff fe4f 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 800679a:	2104      	movs	r1, #4
 800679c:	481d      	ldr	r0, [pc, #116]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800679e:	f7ff fe4b 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80067a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067a6:	481b      	ldr	r0, [pc, #108]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80067a8:	f7ff fe38 	bl	800641c <LL_GPIO_SetOutputPin>
}
 80067ac:	e0cd      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 80067ae:	79bb      	ldrb	r3, [r7, #6]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f040 80ca 	bne.w	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80067b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067ba:	4816      	ldr	r0, [pc, #88]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80067bc:	f7ff fe3c 	bl	8006438 <LL_GPIO_ResetOutputPin>
}
 80067c0:	e0c3      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 4)
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d133      	bne.n	8006830 <RS485_Set_Line_Driver_Receiver+0x2d4>
			if(D_R == Driver)
 80067c8:	79bb      	ldrb	r3, [r7, #6]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d126      	bne.n	800681c <RS485_Set_Line_Driver_Receiver+0x2c0>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 80067ce:	2101      	movs	r1, #1
 80067d0:	4810      	ldr	r0, [pc, #64]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80067d2:	f7ff fe31 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 80067d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80067da:	480f      	ldr	r0, [pc, #60]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80067dc:	f7ff fe2c 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80067e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067e4:	480b      	ldr	r0, [pc, #44]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80067e6:	f7ff fe27 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 80067ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80067ee:	480a      	ldr	r0, [pc, #40]	@ (8006818 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80067f0:	f7ff fe22 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 80067f4:	2102      	movs	r1, #2
 80067f6:	4807      	ldr	r0, [pc, #28]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80067f8:	f7ff fe1e 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 80067fc:	2104      	movs	r1, #4
 80067fe:	4805      	ldr	r0, [pc, #20]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8006800:	f7ff fe1a 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8006804:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006808:	4802      	ldr	r0, [pc, #8]	@ (8006814 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800680a:	f7ff fe07 	bl	800641c <LL_GPIO_SetOutputPin>
}
 800680e:	e09c      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
 8006810:	20025e0d 	.word	0x20025e0d
 8006814:	42020400 	.word	0x42020400
 8006818:	42020800 	.word	0x42020800
			else if(D_R == Receiver)
 800681c:	79bb      	ldrb	r3, [r7, #6]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 8093 	bne.w	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8006824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006828:	484a      	ldr	r0, [pc, #296]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 800682a:	f7ff fe05 	bl	8006438 <LL_GPIO_ResetOutputPin>
}
 800682e:	e08c      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 5)
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	2b05      	cmp	r3, #5
 8006834:	d12c      	bne.n	8006890 <RS485_Set_Line_Driver_Receiver+0x334>
			if(D_R == Driver)
 8006836:	79bb      	ldrb	r3, [r7, #6]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d120      	bne.n	800687e <RS485_Set_Line_Driver_Receiver+0x322>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 800683c:	2101      	movs	r1, #1
 800683e:	4845      	ldr	r0, [pc, #276]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8006840:	f7ff fdfa 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8006844:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006848:	4843      	ldr	r0, [pc, #268]	@ (8006958 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 800684a:	f7ff fdf5 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 800684e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006852:	4840      	ldr	r0, [pc, #256]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8006854:	f7ff fdf0 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8006858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800685c:	483d      	ldr	r0, [pc, #244]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 800685e:	f7ff fdeb 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8006862:	2102      	movs	r1, #2
 8006864:	483b      	ldr	r0, [pc, #236]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8006866:	f7ff fde7 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 800686a:	2104      	movs	r1, #4
 800686c:	4839      	ldr	r0, [pc, #228]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 800686e:	f7ff fde3 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8006872:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006876:	4838      	ldr	r0, [pc, #224]	@ (8006958 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8006878:	f7ff fdd0 	bl	800641c <LL_GPIO_SetOutputPin>
}
 800687c:	e065      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 800687e:	79bb      	ldrb	r3, [r7, #6]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d162      	bne.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8006884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006888:	4833      	ldr	r0, [pc, #204]	@ (8006958 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 800688a:	f7ff fdd5 	bl	8006438 <LL_GPIO_ResetOutputPin>
}
 800688e:	e05c      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 6)
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	2b06      	cmp	r3, #6
 8006894:	d12b      	bne.n	80068ee <RS485_Set_Line_Driver_Receiver+0x392>
			if(D_R == Driver)
 8006896:	79bb      	ldrb	r3, [r7, #6]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d120      	bne.n	80068de <RS485_Set_Line_Driver_Receiver+0x382>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 800689c:	2101      	movs	r1, #1
 800689e:	482d      	ldr	r0, [pc, #180]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 80068a0:	f7ff fdca 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 80068a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068a8:	482b      	ldr	r0, [pc, #172]	@ (8006958 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 80068aa:	f7ff fdc5 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80068ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80068b2:	4828      	ldr	r0, [pc, #160]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 80068b4:	f7ff fdc0 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 80068b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068bc:	4825      	ldr	r0, [pc, #148]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 80068be:	f7ff fdbb 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 80068c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068c6:	4824      	ldr	r0, [pc, #144]	@ (8006958 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 80068c8:	f7ff fdb6 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 80068cc:	2104      	movs	r1, #4
 80068ce:	4821      	ldr	r0, [pc, #132]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 80068d0:	f7ff fdb2 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 80068d4:	2102      	movs	r1, #2
 80068d6:	481f      	ldr	r0, [pc, #124]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 80068d8:	f7ff fda0 	bl	800641c <LL_GPIO_SetOutputPin>
}
 80068dc:	e035      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 80068de:	79bb      	ldrb	r3, [r7, #6]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d132      	bne.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 80068e4:	2102      	movs	r1, #2
 80068e6:	481b      	ldr	r0, [pc, #108]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 80068e8:	f7ff fda6 	bl	8006438 <LL_GPIO_ResetOutputPin>
}
 80068ec:	e02d      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 7)
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	2b07      	cmp	r3, #7
 80068f2:	d12a      	bne.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
			if(D_R == Driver)
 80068f4:	79bb      	ldrb	r3, [r7, #6]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d120      	bne.n	800693c <RS485_Set_Line_Driver_Receiver+0x3e0>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 80068fa:	2101      	movs	r1, #1
 80068fc:	4815      	ldr	r0, [pc, #84]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 80068fe:	f7ff fd9b 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8006902:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006906:	4814      	ldr	r0, [pc, #80]	@ (8006958 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8006908:	f7ff fd96 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 800690c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006910:	4810      	ldr	r0, [pc, #64]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8006912:	f7ff fd91 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8006916:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800691a:	480e      	ldr	r0, [pc, #56]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 800691c:	f7ff fd8c 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8006920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006924:	480c      	ldr	r0, [pc, #48]	@ (8006958 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8006926:	f7ff fd87 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 800692a:	2102      	movs	r1, #2
 800692c:	4809      	ldr	r0, [pc, #36]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 800692e:	f7ff fd83 	bl	8006438 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 8006932:	2104      	movs	r1, #4
 8006934:	4807      	ldr	r0, [pc, #28]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8006936:	f7ff fd71 	bl	800641c <LL_GPIO_SetOutputPin>
}
 800693a:	e006      	b.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 800693c:	79bb      	ldrb	r3, [r7, #6]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d103      	bne.n	800694a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 8006942:	2104      	movs	r1, #4
 8006944:	4803      	ldr	r0, [pc, #12]	@ (8006954 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8006946:	f7ff fd77 	bl	8006438 <LL_GPIO_ResetOutputPin>
}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	42020400 	.word	0x42020400
 8006958:	42020800 	.word	0x42020800

0800695c <RS485_Tx>:

//------------------------------------------------------------------------------
void RS485_Tx(u8 Line, char *MSG, u16 MSG_Length)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b0d4      	sub	sp, #336	@ 0x150
 8006960:	af00      	add	r7, sp, #0
 8006962:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006966:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800696a:	6019      	str	r1, [r3, #0]
 800696c:	4611      	mov	r1, r2
 800696e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006972:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8006976:	4602      	mov	r2, r0
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800697e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006982:	460a      	mov	r2, r1
 8006984:	801a      	strh	r2, [r3, #0]
	//char Str[100] = "...";
	const char Header_MSG[110] = "\r\n-----\r\nMessage from MPM controller on %s.\r\nMessage length: %u bytes\r\nCRC-32: %u\r\n\r\n\0\0";
 8006986:	4ab6      	ldr	r2, [pc, #728]	@ (8006c60 <RS485_Tx+0x304>)
 8006988:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800698c:	4611      	mov	r1, r2
 800698e:	2258      	movs	r2, #88	@ 0x58
 8006990:	4618      	mov	r0, r3
 8006992:	f00f ffc6 	bl	8016922 <memcpy>
 8006996:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	609a      	str	r2, [r3, #8]
 80069a2:	60da      	str	r2, [r3, #12]
 80069a4:	611a      	str	r2, [r3, #16]
 80069a6:	829a      	strh	r2, [r3, #20]
	char Header[200] = ".";
 80069a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80069ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80069b0:	222e      	movs	r2, #46	@ 0x2e
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	3304      	adds	r3, #4
 80069b6:	22c4      	movs	r2, #196	@ 0xc4
 80069b8:	2100      	movs	r1, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f00f ff23 	bl	8016806 <memset>
	char *Pointer = Header;
 80069c0:	f107 030c 	add.w	r3, r7, #12
 80069c4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	//unsigned int CRC_MSG = CRC_Message_Calculator(MSG, MSG_Length);
	unsigned int CRC_MSG = 65535; //crc32_check (MSG, MSG_Length);
 80069c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069cc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
	unsigned int Checksum = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
//			Checksum
//			MSG++;
//			MSG_Length--;
//		}

		if(Line == 1)
 80069d6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80069da:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d14b      	bne.n	8006a7c <RS485_Tx+0x120>
		{
			if(Line1_Working == 1) {return;}
 80069e4:	4b9f      	ldr	r3, [pc, #636]	@ (8006c64 <RS485_Tx+0x308>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	f000 824b 	beq.w	8006e84 <RS485_Tx+0x528>
			RS485_Set_Line_Driver_Receiver(1, Driver);
 80069ee:	2101      	movs	r1, #1
 80069f0:	2001      	movs	r0, #1
 80069f2:	f7ff fdb3 	bl	800655c <RS485_Set_Line_Driver_Receiver>
//				while(LL_USART_IsActiveFlag_TC(Line1_UART) == RESET) {__NOP();}
//				LL_USART_ClearFlag_TC(Line1_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 80069f6:	e031      	b.n	8006a5c <RS485_Tx+0x100>
			{
				while(LL_USART_IsActiveFlag_TXE(Line1_UART) == RESET) {__NOP();}
 80069f8:	bf00      	nop
 80069fa:	489b      	ldr	r0, [pc, #620]	@ (8006c68 <RS485_Tx+0x30c>)
 80069fc:	f7ff fd3d 	bl	800647a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f8      	beq.n	80069f8 <RS485_Tx+0x9c>
				LL_USART_TransmitData8(Line1_UART, *MSG);//'A'
 8006a06:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006a0a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	4894      	ldr	r0, [pc, #592]	@ (8006c68 <RS485_Tx+0x30c>)
 8006a16:	f7ff fd50 	bl	80064ba <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TC(Line1_UART) == RESET) {__NOP();}
 8006a1a:	e000      	b.n	8006a1e <RS485_Tx+0xc2>
 8006a1c:	bf00      	nop
 8006a1e:	4892      	ldr	r0, [pc, #584]	@ (8006c68 <RS485_Tx+0x30c>)
 8006a20:	f7ff fd18 	bl	8006454 <LL_USART_IsActiveFlag_TC>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f8      	beq.n	8006a1c <RS485_Tx+0xc0>
				LL_USART_ClearFlag_TC(Line1_UART);
 8006a2a:	488f      	ldr	r0, [pc, #572]	@ (8006c68 <RS485_Tx+0x30c>)
 8006a2c:	f7ff fd38 	bl	80064a0 <LL_USART_ClearFlag_TC>
				MSG++;
 8006a30:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006a34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006a38:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8006a3c:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8006a40:	6812      	ldr	r2, [r2, #0]
 8006a42:	3201      	adds	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8006a46:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006a4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006a4e:	881a      	ldrh	r2, [r3, #0]
 8006a50:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006a54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006a58:	3a01      	subs	r2, #1
 8006a5a:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006a5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006a60:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1c7      	bne.n	80069fa <RS485_Tx+0x9e>
			}

			while(LL_USART_IsActiveFlag_TXE(Line1_UART) == RESET) {__NOP();}
 8006a6a:	e000      	b.n	8006a6e <RS485_Tx+0x112>
 8006a6c:	bf00      	nop
 8006a6e:	487e      	ldr	r0, [pc, #504]	@ (8006c68 <RS485_Tx+0x30c>)
 8006a70:	f7ff fd03 	bl	800647a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f8      	beq.n	8006a6c <RS485_Tx+0x110>
 8006a7a:	e210      	b.n	8006e9e <RS485_Tx+0x542>
			//delay_m(10);
		}
		//------------
		else if(Line == 2)
 8006a7c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006a80:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d14b      	bne.n	8006b22 <RS485_Tx+0x1c6>
		{
			if(Line2_Working == 1) {return;}
 8006a8a:	4b78      	ldr	r3, [pc, #480]	@ (8006c6c <RS485_Tx+0x310>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	f000 81fa 	beq.w	8006e88 <RS485_Tx+0x52c>
			RS485_Set_Line_Driver_Receiver(2, Driver);
 8006a94:	2101      	movs	r1, #1
 8006a96:	2002      	movs	r0, #2
 8006a98:	f7ff fd60 	bl	800655c <RS485_Set_Line_Driver_Receiver>
//				while(LL_USART_IsActiveFlag_TC(Line2_UART) == RESET) {__NOP();}
//				LL_USART_ClearFlag_TC(Line2_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8006a9c:	e031      	b.n	8006b02 <RS485_Tx+0x1a6>
			{
				while(LL_USART_IsActiveFlag_TXE(Line2_UART) == RESET) {__NOP();}
 8006a9e:	bf00      	nop
 8006aa0:	4873      	ldr	r0, [pc, #460]	@ (8006c70 <RS485_Tx+0x314>)
 8006aa2:	f7ff fcea 	bl	800647a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f8      	beq.n	8006a9e <RS485_Tx+0x142>
				LL_USART_TransmitData8(Line2_UART, *MSG);//'B'
 8006aac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006ab0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	486d      	ldr	r0, [pc, #436]	@ (8006c70 <RS485_Tx+0x314>)
 8006abc:	f7ff fcfd 	bl	80064ba <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TC(Line2_UART) == RESET) {__NOP();}
 8006ac0:	e000      	b.n	8006ac4 <RS485_Tx+0x168>
 8006ac2:	bf00      	nop
 8006ac4:	486a      	ldr	r0, [pc, #424]	@ (8006c70 <RS485_Tx+0x314>)
 8006ac6:	f7ff fcc5 	bl	8006454 <LL_USART_IsActiveFlag_TC>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f8      	beq.n	8006ac2 <RS485_Tx+0x166>
				LL_USART_ClearFlag_TC(Line2_UART);
 8006ad0:	4867      	ldr	r0, [pc, #412]	@ (8006c70 <RS485_Tx+0x314>)
 8006ad2:	f7ff fce5 	bl	80064a0 <LL_USART_ClearFlag_TC>
				MSG++;
 8006ad6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006ada:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006ade:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8006ae2:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	3201      	adds	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8006aec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006af0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006af4:	881a      	ldrh	r2, [r3, #0]
 8006af6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006afa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006afe:	3a01      	subs	r2, #1
 8006b00:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006b02:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006b06:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1c7      	bne.n	8006aa0 <RS485_Tx+0x144>
			}

			while(LL_USART_IsActiveFlag_TXE(Line2_UART) == RESET) {__NOP();}
 8006b10:	e000      	b.n	8006b14 <RS485_Tx+0x1b8>
 8006b12:	bf00      	nop
 8006b14:	4856      	ldr	r0, [pc, #344]	@ (8006c70 <RS485_Tx+0x314>)
 8006b16:	f7ff fcb0 	bl	800647a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f8      	beq.n	8006b12 <RS485_Tx+0x1b6>
 8006b20:	e1bd      	b.n	8006e9e <RS485_Tx+0x542>
			//delay_m(10);
		}
		//------------
		else if(Line == 3)
 8006b22:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006b26:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d14b      	bne.n	8006bc8 <RS485_Tx+0x26c>
		{
			if(Line3_Working == 1) {return;}
 8006b30:	4b50      	ldr	r3, [pc, #320]	@ (8006c74 <RS485_Tx+0x318>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	f000 81a9 	beq.w	8006e8c <RS485_Tx+0x530>
			RS485_Set_Line_Driver_Receiver(3, Driver);
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	2003      	movs	r0, #3
 8006b3e:	f7ff fd0d 	bl	800655c <RS485_Set_Line_Driver_Receiver>
//				while(LL_USART_IsActiveFlag_TC(Line3_UART) == RESET) {__NOP();}
//				LL_USART_ClearFlag_TC(Line3_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8006b42:	e031      	b.n	8006ba8 <RS485_Tx+0x24c>
			{
				while(LL_USART_IsActiveFlag_TXE(Line3_UART) == RESET) {__NOP();}
 8006b44:	bf00      	nop
 8006b46:	484c      	ldr	r0, [pc, #304]	@ (8006c78 <RS485_Tx+0x31c>)
 8006b48:	f7ff fc97 	bl	800647a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f8      	beq.n	8006b44 <RS485_Tx+0x1e8>
				LL_USART_TransmitData8(Line3_UART, *MSG);//'C'
 8006b52:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006b56:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4845      	ldr	r0, [pc, #276]	@ (8006c78 <RS485_Tx+0x31c>)
 8006b62:	f7ff fcaa 	bl	80064ba <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TC(Line3_UART) == RESET) {__NOP();}
 8006b66:	e000      	b.n	8006b6a <RS485_Tx+0x20e>
 8006b68:	bf00      	nop
 8006b6a:	4843      	ldr	r0, [pc, #268]	@ (8006c78 <RS485_Tx+0x31c>)
 8006b6c:	f7ff fc72 	bl	8006454 <LL_USART_IsActiveFlag_TC>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f8      	beq.n	8006b68 <RS485_Tx+0x20c>
				LL_USART_ClearFlag_TC(Line3_UART);
 8006b76:	4840      	ldr	r0, [pc, #256]	@ (8006c78 <RS485_Tx+0x31c>)
 8006b78:	f7ff fc92 	bl	80064a0 <LL_USART_ClearFlag_TC>
				MSG++;
 8006b7c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006b80:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006b84:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8006b88:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	3201      	adds	r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8006b92:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006b96:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006ba0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006ba4:	3a01      	subs	r2, #1
 8006ba6:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006ba8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006bac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1c7      	bne.n	8006b46 <RS485_Tx+0x1ea>
			}

			while(LL_USART_IsActiveFlag_TXE(Line3_UART) == RESET) {__NOP();}
 8006bb6:	e000      	b.n	8006bba <RS485_Tx+0x25e>
 8006bb8:	bf00      	nop
 8006bba:	482f      	ldr	r0, [pc, #188]	@ (8006c78 <RS485_Tx+0x31c>)
 8006bbc:	f7ff fc5d 	bl	800647a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f8      	beq.n	8006bb8 <RS485_Tx+0x25c>
 8006bc6:	e16a      	b.n	8006e9e <RS485_Tx+0x542>
			//delay_m(10);
		}
		//------------
		else if(Line == 4)
 8006bc8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006bcc:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d15e      	bne.n	8006c94 <RS485_Tx+0x338>
		{
			if(Line4_Working == 1) {return;}
 8006bd6:	4b29      	ldr	r3, [pc, #164]	@ (8006c7c <RS485_Tx+0x320>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	f000 8158 	beq.w	8006e90 <RS485_Tx+0x534>
			RS485_Set_Line_Driver_Receiver(4, Driver);
 8006be0:	2101      	movs	r1, #1
 8006be2:	2004      	movs	r0, #4
 8006be4:	f7ff fcba 	bl	800655c <RS485_Set_Line_Driver_Receiver>
//				while(LL_USART_IsActiveFlag_TC(Line4_UART) == RESET) {__NOP();}
//				LL_USART_ClearFlag_TC(Line4_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8006be8:	e031      	b.n	8006c4e <RS485_Tx+0x2f2>
			{
				while(LL_USART_IsActiveFlag_TXE(Line4_UART) == RESET) {__NOP();}
 8006bea:	bf00      	nop
 8006bec:	4824      	ldr	r0, [pc, #144]	@ (8006c80 <RS485_Tx+0x324>)
 8006bee:	f7ff fc44 	bl	800647a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0f8      	beq.n	8006bea <RS485_Tx+0x28e>
				LL_USART_TransmitData8(Line4_UART, *MSG);//'D'
 8006bf8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006bfc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	481e      	ldr	r0, [pc, #120]	@ (8006c80 <RS485_Tx+0x324>)
 8006c08:	f7ff fc57 	bl	80064ba <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TC(Line4_UART) == RESET) {__NOP();}
 8006c0c:	e000      	b.n	8006c10 <RS485_Tx+0x2b4>
 8006c0e:	bf00      	nop
 8006c10:	481b      	ldr	r0, [pc, #108]	@ (8006c80 <RS485_Tx+0x324>)
 8006c12:	f7ff fc1f 	bl	8006454 <LL_USART_IsActiveFlag_TC>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f8      	beq.n	8006c0e <RS485_Tx+0x2b2>
				LL_USART_ClearFlag_TC(Line4_UART);
 8006c1c:	4818      	ldr	r0, [pc, #96]	@ (8006c80 <RS485_Tx+0x324>)
 8006c1e:	f7ff fc3f 	bl	80064a0 <LL_USART_ClearFlag_TC>
				MSG++;
 8006c22:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006c26:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006c2a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8006c2e:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8006c32:	6812      	ldr	r2, [r2, #0]
 8006c34:	3201      	adds	r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8006c38:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006c3c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006c40:	881a      	ldrh	r2, [r3, #0]
 8006c42:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006c46:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006c4a:	3a01      	subs	r2, #1
 8006c4c:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006c4e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006c52:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1c7      	bne.n	8006bec <RS485_Tx+0x290>
			}

			while(LL_USART_IsActiveFlag_TXE(Line4_UART) == RESET) {__NOP();}
 8006c5c:	e013      	b.n	8006c86 <RS485_Tx+0x32a>
 8006c5e:	bf00      	nop
 8006c60:	08018a98 	.word	0x08018a98
 8006c64:	20025e0e 	.word	0x20025e0e
 8006c68:	40004800 	.word	0x40004800
 8006c6c:	20025e0f 	.word	0x20025e0f
 8006c70:	40005000 	.word	0x40005000
 8006c74:	20025e10 	.word	0x20025e10
 8006c78:	40004c00 	.word	0x40004c00
 8006c7c:	20025e11 	.word	0x20025e11
 8006c80:	40006400 	.word	0x40006400
 8006c84:	bf00      	nop
 8006c86:	4888      	ldr	r0, [pc, #544]	@ (8006ea8 <RS485_Tx+0x54c>)
 8006c88:	f7ff fbf7 	bl	800647a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0f8      	beq.n	8006c84 <RS485_Tx+0x328>
 8006c92:	e104      	b.n	8006e9e <RS485_Tx+0x542>
			//delay_m(10);
		}
		//------------
		else if(Line == 5)
 8006c94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006c98:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d14b      	bne.n	8006d3a <RS485_Tx+0x3de>
		{
			if(Line5_Working == 1) {return;}
 8006ca2:	4b82      	ldr	r3, [pc, #520]	@ (8006eac <RS485_Tx+0x550>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	f000 80f4 	beq.w	8006e94 <RS485_Tx+0x538>
			RS485_Set_Line_Driver_Receiver(5, Driver);
 8006cac:	2101      	movs	r1, #1
 8006cae:	2005      	movs	r0, #5
 8006cb0:	f7ff fc54 	bl	800655c <RS485_Set_Line_Driver_Receiver>
//				while(LL_LPUART_IsActiveFlag_TC(Line5_UART) == RESET) {__NOP();}
//				LL_LPUART_ClearFlag_TC(Line5_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8006cb4:	e031      	b.n	8006d1a <RS485_Tx+0x3be>
			{
				while(LL_LPUART_IsActiveFlag_TXE(Line5_UART) == RESET) {__NOP();}
 8006cb6:	bf00      	nop
 8006cb8:	487d      	ldr	r0, [pc, #500]	@ (8006eb0 <RS485_Tx+0x554>)
 8006cba:	f7ff fc20 	bl	80064fe <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f8      	beq.n	8006cb6 <RS485_Tx+0x35a>
				LL_LPUART_TransmitData8(Line5_UART, *MSG);//'E'
 8006cc4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006cc8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4877      	ldr	r0, [pc, #476]	@ (8006eb0 <RS485_Tx+0x554>)
 8006cd4:	f7ff fc33 	bl	800653e <LL_LPUART_TransmitData8>
				while(LL_LPUART_IsActiveFlag_TC(Line5_UART) == RESET) {__NOP();}
 8006cd8:	e000      	b.n	8006cdc <RS485_Tx+0x380>
 8006cda:	bf00      	nop
 8006cdc:	4874      	ldr	r0, [pc, #464]	@ (8006eb0 <RS485_Tx+0x554>)
 8006cde:	f7ff fbfb 	bl	80064d8 <LL_LPUART_IsActiveFlag_TC>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f8      	beq.n	8006cda <RS485_Tx+0x37e>
				LL_LPUART_ClearFlag_TC(Line5_UART);
 8006ce8:	4871      	ldr	r0, [pc, #452]	@ (8006eb0 <RS485_Tx+0x554>)
 8006cea:	f7ff fc1b 	bl	8006524 <LL_LPUART_ClearFlag_TC>
				MSG++;
 8006cee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006cf2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006cf6:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8006cfa:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	3201      	adds	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8006d04:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006d08:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006d0c:	881a      	ldrh	r2, [r3, #0]
 8006d0e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006d12:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006d16:	3a01      	subs	r2, #1
 8006d18:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006d1a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006d1e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1c7      	bne.n	8006cb8 <RS485_Tx+0x35c>
//				//MSG++;
//				//MSG_Length--;
//				TX_Bytes_Count_3 ++;
//			}

			while(LL_LPUART_IsActiveFlag_TXE(Line5_UART) == RESET) {__NOP();}
 8006d28:	e000      	b.n	8006d2c <RS485_Tx+0x3d0>
 8006d2a:	bf00      	nop
 8006d2c:	4860      	ldr	r0, [pc, #384]	@ (8006eb0 <RS485_Tx+0x554>)
 8006d2e:	f7ff fbe6 	bl	80064fe <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f8      	beq.n	8006d2a <RS485_Tx+0x3ce>
 8006d38:	e0b1      	b.n	8006e9e <RS485_Tx+0x542>
			//delay_m(10);
		}
		//------------
		else if(Line == 6)
 8006d3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006d3e:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b06      	cmp	r3, #6
 8006d46:	d14b      	bne.n	8006de0 <RS485_Tx+0x484>
		{
			if(Line6_Working == 1) {return;}
 8006d48:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb4 <RS485_Tx+0x558>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f000 80a3 	beq.w	8006e98 <RS485_Tx+0x53c>
			RS485_Set_Line_Driver_Receiver(6, Driver);
 8006d52:	2101      	movs	r1, #1
 8006d54:	2006      	movs	r0, #6
 8006d56:	f7ff fc01 	bl	800655c <RS485_Set_Line_Driver_Receiver>
//				while(LL_LPUART_IsActiveFlag_TC(Line6_UART) == RESET) {__NOP();}
//				LL_LPUART_ClearFlag_TC(Line6_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8006d5a:	e031      	b.n	8006dc0 <RS485_Tx+0x464>
			{
				while(LL_LPUART_IsActiveFlag_TXE(Line6_UART) == RESET) {__NOP();}
 8006d5c:	bf00      	nop
 8006d5e:	4856      	ldr	r0, [pc, #344]	@ (8006eb8 <RS485_Tx+0x55c>)
 8006d60:	f7ff fbcd 	bl	80064fe <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f8      	beq.n	8006d5c <RS485_Tx+0x400>
				LL_USART_TransmitData8(Line6_UART, *MSG);//'F'
 8006d6a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006d6e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4619      	mov	r1, r3
 8006d78:	484f      	ldr	r0, [pc, #316]	@ (8006eb8 <RS485_Tx+0x55c>)
 8006d7a:	f7ff fb9e 	bl	80064ba <LL_USART_TransmitData8>
				while(LL_LPUART_IsActiveFlag_TC(Line6_UART) == RESET) {__NOP();}
 8006d7e:	e000      	b.n	8006d82 <RS485_Tx+0x426>
 8006d80:	bf00      	nop
 8006d82:	484d      	ldr	r0, [pc, #308]	@ (8006eb8 <RS485_Tx+0x55c>)
 8006d84:	f7ff fba8 	bl	80064d8 <LL_LPUART_IsActiveFlag_TC>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f8      	beq.n	8006d80 <RS485_Tx+0x424>
				LL_LPUART_ClearFlag_TC(Line6_UART);
 8006d8e:	484a      	ldr	r0, [pc, #296]	@ (8006eb8 <RS485_Tx+0x55c>)
 8006d90:	f7ff fbc8 	bl	8006524 <LL_LPUART_ClearFlag_TC>
				MSG++;
 8006d94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006d98:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006d9c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8006da0:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	3201      	adds	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8006daa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006dae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006db2:	881a      	ldrh	r2, [r3, #0]
 8006db4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006db8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006dbc:	3a01      	subs	r2, #1
 8006dbe:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006dc0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006dc4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1c7      	bne.n	8006d5e <RS485_Tx+0x402>
			}

			while(LL_LPUART_IsActiveFlag_TXE(Line6_UART) == RESET) {__NOP();}
 8006dce:	e000      	b.n	8006dd2 <RS485_Tx+0x476>
 8006dd0:	bf00      	nop
 8006dd2:	4839      	ldr	r0, [pc, #228]	@ (8006eb8 <RS485_Tx+0x55c>)
 8006dd4:	f7ff fb93 	bl	80064fe <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f8      	beq.n	8006dd0 <RS485_Tx+0x474>
 8006dde:	e05e      	b.n	8006e9e <RS485_Tx+0x542>
			//delay_m(10);
		}
		//------------
		else if(Line == 7)
 8006de0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006de4:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b07      	cmp	r3, #7
 8006dec:	d157      	bne.n	8006e9e <RS485_Tx+0x542>
		{
			if(Line7_Working == 1) {return;}
 8006dee:	4b33      	ldr	r3, [pc, #204]	@ (8006ebc <RS485_Tx+0x560>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d052      	beq.n	8006e9c <RS485_Tx+0x540>
			RS485_Set_Line_Driver_Receiver(7, Driver);
 8006df6:	2101      	movs	r1, #1
 8006df8:	2007      	movs	r0, #7
 8006dfa:	f7ff fbaf 	bl	800655c <RS485_Set_Line_Driver_Receiver>
//				while(LL_LPUART_IsActiveFlag_TC(Line7_UART) == RESET) {__NOP();}
//				LL_LPUART_ClearFlag_TC(Line7_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8006dfe:	e031      	b.n	8006e64 <RS485_Tx+0x508>
			{
				while(LL_LPUART_IsActiveFlag_TXE(Line7_UART) == RESET) {__NOP();}
 8006e00:	bf00      	nop
 8006e02:	482f      	ldr	r0, [pc, #188]	@ (8006ec0 <RS485_Tx+0x564>)
 8006e04:	f7ff fb7b 	bl	80064fe <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f8      	beq.n	8006e00 <RS485_Tx+0x4a4>
				LL_USART_TransmitData8(Line7_UART, *MSG);//'G'
 8006e0e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006e12:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4828      	ldr	r0, [pc, #160]	@ (8006ec0 <RS485_Tx+0x564>)
 8006e1e:	f7ff fb4c 	bl	80064ba <LL_USART_TransmitData8>
				while(LL_LPUART_IsActiveFlag_TC(Line7_UART) == RESET) {__NOP();}
 8006e22:	e000      	b.n	8006e26 <RS485_Tx+0x4ca>
 8006e24:	bf00      	nop
 8006e26:	4826      	ldr	r0, [pc, #152]	@ (8006ec0 <RS485_Tx+0x564>)
 8006e28:	f7ff fb56 	bl	80064d8 <LL_LPUART_IsActiveFlag_TC>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f8      	beq.n	8006e24 <RS485_Tx+0x4c8>
				LL_LPUART_ClearFlag_TC(Line7_UART);
 8006e32:	4823      	ldr	r0, [pc, #140]	@ (8006ec0 <RS485_Tx+0x564>)
 8006e34:	f7ff fb76 	bl	8006524 <LL_LPUART_ClearFlag_TC>
				MSG++;
 8006e38:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006e3c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006e40:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8006e44:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8006e4e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006e52:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006e56:	881a      	ldrh	r2, [r3, #0]
 8006e58:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006e5c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006e60:	3a01      	subs	r2, #1
 8006e62:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006e64:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006e68:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1c7      	bne.n	8006e02 <RS485_Tx+0x4a6>
			}

			while(LL_LPUART_IsActiveFlag_TXE(Line7_UART) == RESET) {__NOP();}
 8006e72:	e000      	b.n	8006e76 <RS485_Tx+0x51a>
 8006e74:	bf00      	nop
 8006e76:	4812      	ldr	r0, [pc, #72]	@ (8006ec0 <RS485_Tx+0x564>)
 8006e78:	f7ff fb41 	bl	80064fe <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f8      	beq.n	8006e74 <RS485_Tx+0x518>
 8006e82:	e00c      	b.n	8006e9e <RS485_Tx+0x542>
			if(Line1_Working == 1) {return;}
 8006e84:	bf00      	nop
 8006e86:	e00a      	b.n	8006e9e <RS485_Tx+0x542>
			if(Line2_Working == 1) {return;}
 8006e88:	bf00      	nop
 8006e8a:	e008      	b.n	8006e9e <RS485_Tx+0x542>
			if(Line3_Working == 1) {return;}
 8006e8c:	bf00      	nop
 8006e8e:	e006      	b.n	8006e9e <RS485_Tx+0x542>
			if(Line4_Working == 1) {return;}
 8006e90:	bf00      	nop
 8006e92:	e004      	b.n	8006e9e <RS485_Tx+0x542>
			if(Line5_Working == 1) {return;}
 8006e94:	bf00      	nop
 8006e96:	e002      	b.n	8006e9e <RS485_Tx+0x542>
			if(Line6_Working == 1) {return;}
 8006e98:	bf00      	nop
 8006e9a:	e000      	b.n	8006e9e <RS485_Tx+0x542>
			if(Line7_Working == 1) {return;}
 8006e9c:	bf00      	nop
			//delay_m(10);
		}
		
}
 8006e9e:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40006400 	.word	0x40006400
 8006eac:	20025e12 	.word	0x20025e12
 8006eb0:	44002400 	.word	0x44002400
 8006eb4:	20025e13 	.word	0x20025e13
 8006eb8:	40006c00 	.word	0x40006c00
 8006ebc:	20025e14 	.word	0x20025e14
 8006ec0:	40007800 	.word	0x40007800

08006ec4 <LL_SPI_Enable>:
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f043 0201 	orr.w	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <LL_SPI_Disable>:
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f023 0201 	bic.w	r2, r3, #1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <LL_SPI_StartMasterTransfer>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	601a      	str	r2, [r3, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_SPI_SetDataWidth>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f023 021f 	bic.w	r2, r3, #31
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	609a      	str	r2, [r3, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d101      	bne.n	8006f62 <LL_SPI_IsActiveFlag_TXP+0x18>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <LL_SPI_IsActiveFlag_TXP+0x1a>
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <LL_SPI_IsActiveFlag_TXC>:
  * @rmtoll SR           TXC           LL_SPI_IsActiveFlag_TXC
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXC(const SPI_TypeDef *SPIx)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f84:	d101      	bne.n	8006f8a <LL_SPI_IsActiveFlag_TXC+0x1a>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <LL_SPI_IsActiveFlag_TXC+0x1c>
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_SPI_ClearFlag_EOT>:
  * @rmtoll IFCR         EOTC          LL_SPI_ClearFlag_EOT
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_EOT(SPI_TypeDef *SPIx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->IFCR, SPI_IFCR_EOTC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f043 0208 	orr.w	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	619a      	str	r2, [r3, #24]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3320      	adds	r3, #32
 8006fc8:	78fa      	ldrb	r2, [r7, #3]
 8006fca:	701a      	strb	r2, [r3, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spitxdr = ((__IO uint16_t *)&SPIx->TXDR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3320      	adds	r3, #32
 8006fe8:	60fb      	str	r3, [r7, #12]
  *spitxdr = TxData;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	887a      	ldrh	r2, [r7, #2]
 8006fee:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&SPIx->TXDR) = TxData;
#endif /* __GNUC__ */
}
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <SPI_WriteByte>:
 * @function   :Write a byte of data using STM32's hardware SPI
 * @parameters :TxData:Data to be written
 * @retvalue   :Data received by the bus
******************************************************************************/
u8 SPI_WriteByte(u8 TxData)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    //HAL_SPI_TransmitReceive(&SPI5_Handler,&TxData,&Rxdata,1, 1000);
    //LL_SPI_TransmitData8(SPI3, TxData);
    //LL_SPI_StartMasterTransfer(SPI3);
    LL_SPI_SetDataWidth(SPI3, LL_SPI_DATAWIDTH_8BIT);
 8007006:	2107      	movs	r1, #7
 8007008:	4813      	ldr	r0, [pc, #76]	@ (8007058 <SPI_WriteByte+0x5c>)
 800700a:	f7ff ff8b 	bl	8006f24 <LL_SPI_SetDataWidth>
    //LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
    LL_SPI_Enable(SPI3);
 800700e:	4812      	ldr	r0, [pc, #72]	@ (8007058 <SPI_WriteByte+0x5c>)
 8007010:	f7ff ff58 	bl	8006ec4 <LL_SPI_Enable>
    //LL_SPI_SetTransferSize(SPI3, 0);
    if(LL_SPI_IsActiveFlag_TXP(SPI3) == 1)
 8007014:	4810      	ldr	r0, [pc, #64]	@ (8007058 <SPI_WriteByte+0x5c>)
 8007016:	f7ff ff98 	bl	8006f4a <LL_SPI_IsActiveFlag_TXP>
 800701a:	4603      	mov	r3, r0
 800701c:	2b01      	cmp	r3, #1
 800701e:	d104      	bne.n	800702a <SPI_WriteByte+0x2e>
    {
    	LL_SPI_TransmitData8(SPI3, TxData);
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	4619      	mov	r1, r3
 8007024:	480c      	ldr	r0, [pc, #48]	@ (8007058 <SPI_WriteByte+0x5c>)
 8007026:	f7ff ffc7 	bl	8006fb8 <LL_SPI_TransmitData8>
    }
//    while(LL_SPI_IsActiveFlag_TXTF(SPI3) == 0)
//    {
//    	__NOP();
//    }
    LL_SPI_StartMasterTransfer(SPI3);
 800702a:	480b      	ldr	r0, [pc, #44]	@ (8007058 <SPI_WriteByte+0x5c>)
 800702c:	f7ff ff6a 	bl	8006f04 <LL_SPI_StartMasterTransfer>
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 8007030:	e000      	b.n	8007034 <SPI_WriteByte+0x38>
    {
    	__NOP();
 8007032:	bf00      	nop
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 8007034:	4808      	ldr	r0, [pc, #32]	@ (8007058 <SPI_WriteByte+0x5c>)
 8007036:	f7ff ff9b 	bl	8006f70 <LL_SPI_IsActiveFlag_TXC>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f8      	beq.n	8007032 <SPI_WriteByte+0x36>
    }
    LL_SPI_ClearFlag_EOT(SPI3);
 8007040:	4805      	ldr	r0, [pc, #20]	@ (8007058 <SPI_WriteByte+0x5c>)
 8007042:	f7ff ffa9 	bl	8006f98 <LL_SPI_ClearFlag_EOT>
    LL_SPI_Disable(SPI3);
 8007046:	4804      	ldr	r0, [pc, #16]	@ (8007058 <SPI_WriteByte+0x5c>)
 8007048:	f7ff ff4c 	bl	8006ee4 <LL_SPI_Disable>
 	return Rxdata;           	     //�����յ�������			
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40003c00 	.word	0x40003c00

0800705c <SPI_WriteByte_16>:
////    GPIO_Initure.Alternate=GPIO_AF5_SPI5;           //����ΪSPI5
////    HAL_GPIO_Init(GPIOF,&GPIO_Initure);
//}
//******************************************************************************/
u8 SPI_WriteByte_16(u16 TxData)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	80fb      	strh	r3, [r7, #6]
    u8 Rxdata;
    //HAL_SPI_TransmitReceive(&SPI5_Handler,&TxData,&Rxdata,1, 1000);
    //LL_SPI_TransmitData8(SPI3, TxData);
    //LL_SPI_StartMasterTransfer(SPI3);
    LL_SPI_SetDataWidth(SPI3, LL_SPI_DATAWIDTH_16BIT);
 8007066:	210f      	movs	r1, #15
 8007068:	4813      	ldr	r0, [pc, #76]	@ (80070b8 <SPI_WriteByte_16+0x5c>)
 800706a:	f7ff ff5b 	bl	8006f24 <LL_SPI_SetDataWidth>
    //LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_02DATA);
    LL_SPI_Enable(SPI3);
 800706e:	4812      	ldr	r0, [pc, #72]	@ (80070b8 <SPI_WriteByte_16+0x5c>)
 8007070:	f7ff ff28 	bl	8006ec4 <LL_SPI_Enable>
    //LL_SPI_SetTransferSize(SPI3, 2);
    if(LL_SPI_IsActiveFlag_TXP(SPI3) == 1)
 8007074:	4810      	ldr	r0, [pc, #64]	@ (80070b8 <SPI_WriteByte_16+0x5c>)
 8007076:	f7ff ff68 	bl	8006f4a <LL_SPI_IsActiveFlag_TXP>
 800707a:	4603      	mov	r3, r0
 800707c:	2b01      	cmp	r3, #1
 800707e:	d104      	bne.n	800708a <SPI_WriteByte_16+0x2e>
    {
    	LL_SPI_TransmitData16(SPI3, TxData);
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	4619      	mov	r1, r3
 8007084:	480c      	ldr	r0, [pc, #48]	@ (80070b8 <SPI_WriteByte_16+0x5c>)
 8007086:	f7ff ffa7 	bl	8006fd8 <LL_SPI_TransmitData16>
    }
//    while(LL_SPI_IsActiveFlag_TXTF(SPI3) == 0)
//    {
//    	__NOP();
//    }
    LL_SPI_StartMasterTransfer(SPI3);
 800708a:	480b      	ldr	r0, [pc, #44]	@ (80070b8 <SPI_WriteByte_16+0x5c>)
 800708c:	f7ff ff3a 	bl	8006f04 <LL_SPI_StartMasterTransfer>
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 8007090:	e000      	b.n	8007094 <SPI_WriteByte_16+0x38>
    {
    	__NOP();
 8007092:	bf00      	nop
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 8007094:	4808      	ldr	r0, [pc, #32]	@ (80070b8 <SPI_WriteByte_16+0x5c>)
 8007096:	f7ff ff6b 	bl	8006f70 <LL_SPI_IsActiveFlag_TXC>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f8      	beq.n	8007092 <SPI_WriteByte_16+0x36>
    }
    LL_SPI_ClearFlag_EOT(SPI3);
 80070a0:	4805      	ldr	r0, [pc, #20]	@ (80070b8 <SPI_WriteByte_16+0x5c>)
 80070a2:	f7ff ff79 	bl	8006f98 <LL_SPI_ClearFlag_EOT>
    LL_SPI_Disable(SPI3);
 80070a6:	4804      	ldr	r0, [pc, #16]	@ (80070b8 <SPI_WriteByte_16+0x5c>)
 80070a8:	f7ff ff1c 	bl	8006ee4 <LL_SPI_Disable>
 	return Rxdata;           	     //�����յ�������
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40003c00 	.word	0x40003c00

080070bc <delay_ms>:
}

//��ʱnms
//nms:Ҫ��ʱ��ms��
void delay_ms(u16 nms)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	80fb      	strh	r3, [r7, #6]
//	u32 i;
//	for(i=0;i<nms;i++) delay_us(1000);
	LL_mDelay(nms);
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f009 fae7 	bl	801069c <LL_mDelay>
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <delay_m>:

void delay_m(int cnt)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
	int i,us;
	for(i = 0;i<cnt;i++)
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e00c      	b.n	80070fe <delay_m+0x28>
	{
		us = 4000;
 80070e4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80070e8:	60bb      	str	r3, [r7, #8]
		while (us)     /* delay	*/
 80070ea:	e002      	b.n	80070f2 <delay_m+0x1c>
		{
			us--;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	60bb      	str	r3, [r7, #8]
		while (us)     /* delay	*/
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f9      	bne.n	80070ec <delay_m+0x16>
	for(i = 0;i<cnt;i++)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	dbee      	blt.n	80070e4 <delay_m+0xe>
		}
	}
}
 8007106:	bf00      	nop
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <Delay_ms_OS>:

void Delay_ms_OS(int D)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	//osDelay(D/portTICK_PERIOD_MS);
	osDelay(D);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4618      	mov	r0, r3
 8007120:	f009 fc3f 	bl	80109a2 <osDelay>
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <LL_GPIO_SetOutputPin>:
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	619a      	str	r2, [r3, #24]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <LL_GPIO_ResetOutputPin>:
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{ 
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;     
 800716e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007172:	480a      	ldr	r0, [pc, #40]	@ (800719c <LCD_WR_REG+0x38>)
 8007174:	f7ff ffe8 	bl	8007148 <LL_GPIO_ResetOutputPin>
	 LCD_RS_CLR;	  
 8007178:	2101      	movs	r1, #1
 800717a:	4808      	ldr	r0, [pc, #32]	@ (800719c <LCD_WR_REG+0x38>)
 800717c:	f7ff ffe4 	bl	8007148 <LL_GPIO_ResetOutputPin>
   SPI_WriteByte(data);
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff ff3a 	bl	8006ffc <SPI_WriteByte>
   LCD_CS_SET;	
 8007188:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800718c:	4803      	ldr	r0, [pc, #12]	@ (800719c <LCD_WR_REG+0x38>)
 800718e:	f7ff ffcd 	bl	800712c <LL_GPIO_SetOutputPin>
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	42020800 	.word	0x42020800

080071a0 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 80071aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80071ae:	480a      	ldr	r0, [pc, #40]	@ (80071d8 <LCD_WR_DATA+0x38>)
 80071b0:	f7ff ffca 	bl	8007148 <LL_GPIO_ResetOutputPin>
	 LCD_RS_SET;
 80071b4:	2101      	movs	r1, #1
 80071b6:	4808      	ldr	r0, [pc, #32]	@ (80071d8 <LCD_WR_DATA+0x38>)
 80071b8:	f7ff ffb8 	bl	800712c <LL_GPIO_SetOutputPin>
   SPI_WriteByte(data);
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ff1c 	bl	8006ffc <SPI_WriteByte>
   LCD_CS_SET;
 80071c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80071c8:	4803      	ldr	r0, [pc, #12]	@ (80071d8 <LCD_WR_DATA+0x38>)
 80071ca:	f7ff ffaf 	bl	800712c <LL_GPIO_SetOutputPin>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	42020800 	.word	0x42020800

080071dc <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{	
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	460a      	mov	r2, r1
 80071e6:	71fb      	strb	r3, [r7, #7]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff ffb8 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 80071f4:	88bb      	ldrh	r3, [r7, #4]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff ffd1 	bl	80071a0 <LCD_WR_DATA>
}	   
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 800720c:	4b03      	ldr	r3, [pc, #12]	@ (800721c <LCD_WriteRAM_Prepare+0x14>)
 800720e:	891b      	ldrh	r3, [r3, #8]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff ffa6 	bl	8007164 <LCD_WR_REG>
}	 
 8007218:	bf00      	nop
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20025e18 	.word	0x20025e18

08007220 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 800722a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800722e:	480a      	ldr	r0, [pc, #40]	@ (8007258 <Lcd_WriteData_16Bit+0x38>)
 8007230:	f7ff ff8a 	bl	8007148 <LL_GPIO_ResetOutputPin>
   LCD_RS_SET;  
 8007234:	2101      	movs	r1, #1
 8007236:	4808      	ldr	r0, [pc, #32]	@ (8007258 <Lcd_WriteData_16Bit+0x38>)
 8007238:	f7ff ff78 	bl	800712c <LL_GPIO_SetOutputPin>
//   SPI_WriteByte(Data>>8);
//	 SPI_WriteByte(Data);
	 SPI_WriteByte_16(Data);
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff ff0c 	bl	800705c <SPI_WriteByte_16>
   LCD_CS_SET;
 8007244:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007248:	4803      	ldr	r0, [pc, #12]	@ (8007258 <Lcd_WriteData_16Bit+0x38>)
 800724a:	f7ff ff6f 	bl	800712c <LL_GPIO_SetOutputPin>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	42020800 	.word	0x42020800

0800725c <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	460a      	mov	r2, r1
 8007266:	80fb      	strh	r3, [r7, #6]
 8007268:	4613      	mov	r3, r2
 800726a:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 800726c:	88ba      	ldrh	r2, [r7, #4]
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f9c4 	bl	8007600 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8007278:	4b04      	ldr	r3, [pc, #16]	@ (800728c <LCD_DrawPoint+0x30>)
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff ffcf 	bl	8007220 <Lcd_WriteData_16Bit>
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20025e26 	.word	0x20025e26

08007290 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 800729a:	4b1d      	ldr	r3, [pc, #116]	@ (8007310 <LCD_Clear+0x80>)
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007310 <LCD_Clear+0x80>)
 80072a4:	885b      	ldrh	r3, [r3, #2]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2100      	movs	r1, #0
 80072ac:	2000      	movs	r0, #0
 80072ae:	f000 f953 	bl	8007558 <LCD_SetWindows>
	LCD_CS_CLR;
 80072b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80072b6:	4817      	ldr	r0, [pc, #92]	@ (8007314 <LCD_Clear+0x84>)
 80072b8:	f7ff ff46 	bl	8007148 <LL_GPIO_ResetOutputPin>
	LCD_RS_SET;
 80072bc:	2101      	movs	r1, #1
 80072be:	4815      	ldr	r0, [pc, #84]	@ (8007314 <LCD_Clear+0x84>)
 80072c0:	f7ff ff34 	bl	800712c <LL_GPIO_SetOutputPin>
	for(i=0;i<lcddev.height;i++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e012      	b.n	80072f0 <LCD_Clear+0x60>
	{
    for(m=0;m<lcddev.width;m++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	e006      	b.n	80072de <LCD_Clear+0x4e>
    {	
			Lcd_WriteData_16Bit(Color);
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7ff ffa4 	bl	8007220 <Lcd_WriteData_16Bit>
    for(m=0;m<lcddev.width;m++)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	3301      	adds	r3, #1
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	4b0c      	ldr	r3, [pc, #48]	@ (8007310 <LCD_Clear+0x80>)
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d3f2      	bcc.n	80072d0 <LCD_Clear+0x40>
	for(i=0;i<lcddev.height;i++)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3301      	adds	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <LCD_Clear+0x80>)
 80072f2:	885b      	ldrh	r3, [r3, #2]
 80072f4:	461a      	mov	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d3e6      	bcc.n	80072ca <LCD_Clear+0x3a>
		}
	}
	 LCD_CS_SET;
 80072fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007300:	4804      	ldr	r0, [pc, #16]	@ (8007314 <LCD_Clear+0x84>)
 8007302:	f7ff ff13 	bl	800712c <LL_GPIO_SetOutputPin>
} 
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20025e18 	.word	0x20025e18
 8007314:	42020800 	.word	0x42020800

08007318 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
	//SPI5_Init();		   			        //��ʼ��SPI
//	SPI_SetSpeed(SPI_BAUDRATEPRESCALER_2); //����Ϊ45Mʱ��,����ģʽ
	//LCD_GPIOInit();//LCD GPIO��ʼ��
 	//LCD_RESET(); //LCD ��λ
//*************2.8inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 800731c:	20cf      	movs	r0, #207	@ 0xcf
 800731e:	f7ff ff21 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8007322:	2000      	movs	r0, #0
 8007324:	f7ff ff3c 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC9); //C1 
 8007328:	20c9      	movs	r0, #201	@ 0xc9
 800732a:	f7ff ff39 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 800732e:	2030      	movs	r0, #48	@ 0x30
 8007330:	f7ff ff36 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 8007334:	20ed      	movs	r0, #237	@ 0xed
 8007336:	f7ff ff15 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 800733a:	2064      	movs	r0, #100	@ 0x64
 800733c:	f7ff ff30 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 8007340:	2003      	movs	r0, #3
 8007342:	f7ff ff2d 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 8007346:	2012      	movs	r0, #18
 8007348:	f7ff ff2a 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 800734c:	2081      	movs	r0, #129	@ 0x81
 800734e:	f7ff ff27 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 8007352:	20e8      	movs	r0, #232	@ 0xe8
 8007354:	f7ff ff06 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8007358:	2085      	movs	r0, #133	@ 0x85
 800735a:	f7ff ff21 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 800735e:	2010      	movs	r0, #16
 8007360:	f7ff ff1e 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 8007364:	207a      	movs	r0, #122	@ 0x7a
 8007366:	f7ff ff1b 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 800736a:	20cb      	movs	r0, #203	@ 0xcb
 800736c:	f7ff fefa 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8007370:	2039      	movs	r0, #57	@ 0x39
 8007372:	f7ff ff15 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 8007376:	202c      	movs	r0, #44	@ 0x2c
 8007378:	f7ff ff12 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800737c:	2000      	movs	r0, #0
 800737e:	f7ff ff0f 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 8007382:	2034      	movs	r0, #52	@ 0x34
 8007384:	f7ff ff0c 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8007388:	2002      	movs	r0, #2
 800738a:	f7ff ff09 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 800738e:	20f7      	movs	r0, #247	@ 0xf7
 8007390:	f7ff fee8 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8007394:	2020      	movs	r0, #32
 8007396:	f7ff ff03 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 800739a:	20ea      	movs	r0, #234	@ 0xea
 800739c:	f7ff fee2 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80073a0:	2000      	movs	r0, #0
 80073a2:	f7ff fefd 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 80073a6:	2000      	movs	r0, #0
 80073a8:	f7ff fefa 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 80073ac:	20c0      	movs	r0, #192	@ 0xc0
 80073ae:	f7ff fed9 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 80073b2:	201b      	movs	r0, #27
 80073b4:	f7ff fef4 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 80073b8:	20c1      	movs	r0, #193	@ 0xc1
 80073ba:	f7ff fed3 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   //SAP[2:0];BT[3:0] 01 
 80073be:	2000      	movs	r0, #0
 80073c0:	f7ff feee 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 80073c4:	20c5      	movs	r0, #197	@ 0xc5
 80073c6:	f7ff fecd 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80073ca:	2030      	movs	r0, #48	@ 0x30
 80073cc:	f7ff fee8 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80073d0:	2030      	movs	r0, #48	@ 0x30
 80073d2:	f7ff fee5 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 80073d6:	20c7      	movs	r0, #199	@ 0xc7
 80073d8:	f7ff fec4 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 80073dc:	20b7      	movs	r0, #183	@ 0xb7
 80073de:	f7ff fedf 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 80073e2:	2036      	movs	r0, #54	@ 0x36
 80073e4:	f7ff febe 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 80073e8:	2008      	movs	r0, #8
 80073ea:	f7ff fed9 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 80073ee:	203a      	movs	r0, #58	@ 0x3a
 80073f0:	f7ff feb8 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 80073f4:	2055      	movs	r0, #85	@ 0x55
 80073f6:	f7ff fed3 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 80073fa:	20b1      	movs	r0, #177	@ 0xb1
 80073fc:	f7ff feb2 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8007400:	2000      	movs	r0, #0
 8007402:	f7ff fecd 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 8007406:	201a      	movs	r0, #26
 8007408:	f7ff feca 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 800740c:	20b6      	movs	r0, #182	@ 0xb6
 800740e:	f7ff fea9 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 8007412:	200a      	movs	r0, #10
 8007414:	f7ff fec4 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 8007418:	20a2      	movs	r0, #162	@ 0xa2
 800741a:	f7ff fec1 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800741e:	20f2      	movs	r0, #242	@ 0xf2
 8007420:	f7ff fea0 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8007424:	2000      	movs	r0, #0
 8007426:	f7ff febb 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 800742a:	2026      	movs	r0, #38	@ 0x26
 800742c:	f7ff fe9a 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 8007430:	2001      	movs	r0, #1
 8007432:	f7ff feb5 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma 
 8007436:	20e0      	movs	r0, #224	@ 0xe0
 8007438:	f7ff fe94 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 800743c:	200f      	movs	r0, #15
 800743e:	f7ff feaf 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A); 
 8007442:	202a      	movs	r0, #42	@ 0x2a
 8007444:	f7ff feac 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28); 
 8007448:	2028      	movs	r0, #40	@ 0x28
 800744a:	f7ff fea9 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 800744e:	2008      	movs	r0, #8
 8007450:	f7ff fea6 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E); 
 8007454:	200e      	movs	r0, #14
 8007456:	f7ff fea3 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 800745a:	2008      	movs	r0, #8
 800745c:	f7ff fea0 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54); 
 8007460:	2054      	movs	r0, #84	@ 0x54
 8007462:	f7ff fe9d 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9); 
 8007466:	20a9      	movs	r0, #169	@ 0xa9
 8007468:	f7ff fe9a 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43); 
 800746c:	2043      	movs	r0, #67	@ 0x43
 800746e:	f7ff fe97 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A); 
 8007472:	200a      	movs	r0, #10
 8007474:	f7ff fe94 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8007478:	200f      	movs	r0, #15
 800747a:	f7ff fe91 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800747e:	2000      	movs	r0, #0
 8007480:	f7ff fe8e 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8007484:	2000      	movs	r0, #0
 8007486:	f7ff fe8b 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800748a:	2000      	movs	r0, #0
 800748c:	f7ff fe88 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 		 
 8007490:	2000      	movs	r0, #0
 8007492:	f7ff fe85 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma 
 8007496:	20e1      	movs	r0, #225	@ 0xe1
 8007498:	f7ff fe64 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800749c:	2000      	movs	r0, #0
 800749e:	f7ff fe7f 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15); 
 80074a2:	2015      	movs	r0, #21
 80074a4:	f7ff fe7c 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17); 
 80074a8:	2017      	movs	r0, #23
 80074aa:	f7ff fe79 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 80074ae:	2007      	movs	r0, #7
 80074b0:	f7ff fe76 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11); 
 80074b4:	2011      	movs	r0, #17
 80074b6:	f7ff fe73 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06); 
 80074ba:	2006      	movs	r0, #6
 80074bc:	f7ff fe70 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B); 
 80074c0:	202b      	movs	r0, #43	@ 0x2b
 80074c2:	f7ff fe6d 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56); 
 80074c6:	2056      	movs	r0, #86	@ 0x56
 80074c8:	f7ff fe6a 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C); 
 80074cc:	203c      	movs	r0, #60	@ 0x3c
 80074ce:	f7ff fe67 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 80074d2:	2005      	movs	r0, #5
 80074d4:	f7ff fe64 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 80074d8:	2010      	movs	r0, #16
 80074da:	f7ff fe61 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 80074de:	200f      	movs	r0, #15
 80074e0:	f7ff fe5e 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 80074e4:	203f      	movs	r0, #63	@ 0x3f
 80074e6:	f7ff fe5b 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 80074ea:	203f      	movs	r0, #63	@ 0x3f
 80074ec:	f7ff fe58 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 80074f0:	200f      	movs	r0, #15
 80074f2:	f7ff fe55 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B); 
 80074f6:	202b      	movs	r0, #43	@ 0x2b
 80074f8:	f7ff fe34 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80074fc:	2000      	movs	r0, #0
 80074fe:	f7ff fe4f 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8007502:	2000      	movs	r0, #0
 8007504:	f7ff fe4c 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8007508:	2001      	movs	r0, #1
 800750a:	f7ff fe49 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800750e:	203f      	movs	r0, #63	@ 0x3f
 8007510:	f7ff fe46 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 8007514:	202a      	movs	r0, #42	@ 0x2a
 8007516:	f7ff fe25 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800751a:	2000      	movs	r0, #0
 800751c:	f7ff fe40 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8007520:	2000      	movs	r0, #0
 8007522:	f7ff fe3d 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8007526:	2000      	movs	r0, #0
 8007528:	f7ff fe3a 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 800752c:	20ef      	movs	r0, #239	@ 0xef
 800752e:	f7ff fe37 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8007532:	2011      	movs	r0, #17
 8007534:	f7ff fe16 	bl	8007164 <LCD_WR_REG>
	delay_ms(120);
 8007538:	2078      	movs	r0, #120	@ 0x78
 800753a:	f7ff fdbf 	bl	80070bc <delay_ms>
	LCD_WR_REG(0x29); //display on		
 800753e:	2029      	movs	r0, #41	@ 0x29
 8007540:	f7ff fe10 	bl	8007164 <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8007544:	2000      	movs	r0, #0
 8007546:	f000 f86d 	bl	8007624 <LCD_direction>
	//LCD_LED=1;//��������
	LCD_Clear(WHITE);//��ȫ����ɫ
 800754a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800754e:	f7ff fe9f 	bl	8007290 <LCD_Clear>
}
 8007552:	bf00      	nop
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	461a      	mov	r2, r3
 8007566:	4623      	mov	r3, r4
 8007568:	80fb      	strh	r3, [r7, #6]
 800756a:	4603      	mov	r3, r0
 800756c:	80bb      	strh	r3, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	807b      	strh	r3, [r7, #2]
 8007572:	4613      	mov	r3, r2
 8007574:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8007576:	4b21      	ldr	r3, [pc, #132]	@ (80075fc <LCD_SetWindows+0xa4>)
 8007578:	895b      	ldrh	r3, [r3, #10]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fdf1 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	0a1b      	lsrs	r3, r3, #8
 8007586:	b29b      	uxth	r3, r3
 8007588:	b2db      	uxtb	r3, r3
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fe08 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fe03 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 800759a:	887b      	ldrh	r3, [r7, #2]
 800759c:	0a1b      	lsrs	r3, r3, #8
 800759e:	b29b      	uxth	r3, r3
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fdfc 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 80075a8:	887b      	ldrh	r3, [r7, #2]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fdf7 	bl	80071a0 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 80075b2:	4b12      	ldr	r3, [pc, #72]	@ (80075fc <LCD_SetWindows+0xa4>)
 80075b4:	899b      	ldrh	r3, [r3, #12]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fdd3 	bl	8007164 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 80075be:	88bb      	ldrh	r3, [r7, #4]
 80075c0:	0a1b      	lsrs	r3, r3, #8
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff fdea 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 80075cc:	88bb      	ldrh	r3, [r7, #4]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fde5 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 80075d6:	883b      	ldrh	r3, [r7, #0]
 80075d8:	0a1b      	lsrs	r3, r3, #8
 80075da:	b29b      	uxth	r3, r3
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fdde 	bl	80071a0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 80075e4:	883b      	ldrh	r3, [r7, #0]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff fdd9 	bl	80071a0 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 80075ee:	f7ff fe0b 	bl	8007208 <LCD_WriteRAM_Prepare>
}   
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd90      	pop	{r4, r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20025e18 	.word	0x20025e18

08007600 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	460a      	mov	r2, r1
 800760a:	80fb      	strh	r3, [r7, #6]
 800760c:	4613      	mov	r3, r2
 800760e:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8007610:	88bb      	ldrh	r3, [r7, #4]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	88b9      	ldrh	r1, [r7, #4]
 8007616:	88f8      	ldrh	r0, [r7, #6]
 8007618:	f7ff ff9e 	bl	8007558 <LCD_SetWindows>
} 
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 800762e:	4b26      	ldr	r3, [pc, #152]	@ (80076c8 <LCD_direction+0xa4>)
 8007630:	222a      	movs	r2, #42	@ 0x2a
 8007632:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 8007634:	4b24      	ldr	r3, [pc, #144]	@ (80076c8 <LCD_direction+0xa4>)
 8007636:	222b      	movs	r2, #43	@ 0x2b
 8007638:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 800763a:	4b23      	ldr	r3, [pc, #140]	@ (80076c8 <LCD_direction+0xa4>)
 800763c:	222c      	movs	r2, #44	@ 0x2c
 800763e:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d83a      	bhi.n	80076bc <LCD_direction+0x98>
 8007646:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <LCD_direction+0x28>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007675 	.word	0x08007675
 8007654:	0800768d 	.word	0x0800768d
 8007658:	080076a5 	.word	0x080076a5
		case 0:						 	 		
			lcddev.width=LCD_W;
 800765c:	4b1a      	ldr	r3, [pc, #104]	@ (80076c8 <LCD_direction+0xa4>)
 800765e:	22f0      	movs	r2, #240	@ 0xf0
 8007660:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8007662:	4b19      	ldr	r3, [pc, #100]	@ (80076c8 <LCD_direction+0xa4>)
 8007664:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007668:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 800766a:	2108      	movs	r1, #8
 800766c:	2036      	movs	r0, #54	@ 0x36
 800766e:	f7ff fdb5 	bl	80071dc <LCD_WriteReg>
		break;
 8007672:	e024      	b.n	80076be <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 8007674:	4b14      	ldr	r3, [pc, #80]	@ (80076c8 <LCD_direction+0xa4>)
 8007676:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800767a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800767c:	4b12      	ldr	r3, [pc, #72]	@ (80076c8 <LCD_direction+0xa4>)
 800767e:	22f0      	movs	r2, #240	@ 0xf0
 8007680:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8007682:	2168      	movs	r1, #104	@ 0x68
 8007684:	2036      	movs	r0, #54	@ 0x36
 8007686:	f7ff fda9 	bl	80071dc <LCD_WriteReg>
		break;
 800768a:	e018      	b.n	80076be <LCD_direction+0x9a>
		case 2:						 	 		
			lcddev.width=LCD_W;
 800768c:	4b0e      	ldr	r3, [pc, #56]	@ (80076c8 <LCD_direction+0xa4>)
 800768e:	22f0      	movs	r2, #240	@ 0xf0
 8007690:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8007692:	4b0d      	ldr	r3, [pc, #52]	@ (80076c8 <LCD_direction+0xa4>)
 8007694:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007698:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800769a:	21c8      	movs	r1, #200	@ 0xc8
 800769c:	2036      	movs	r0, #54	@ 0x36
 800769e:	f7ff fd9d 	bl	80071dc <LCD_WriteReg>
		break;
 80076a2:	e00c      	b.n	80076be <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 80076a4:	4b08      	ldr	r3, [pc, #32]	@ (80076c8 <LCD_direction+0xa4>)
 80076a6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80076aa:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <LCD_direction+0xa4>)
 80076ae:	22f0      	movs	r2, #240	@ 0xf0
 80076b0:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80076b2:	21a8      	movs	r1, #168	@ 0xa8
 80076b4:	2036      	movs	r0, #54	@ 0x36
 80076b6:	f7ff fd91 	bl	80071dc <LCD_WriteReg>
		break;	
 80076ba:	e000      	b.n	80076be <LCD_direction+0x9a>
		default:break;
 80076bc:	bf00      	nop
	}		
}	 
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20025e18 	.word	0x20025e18

080076cc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, 0) != USBD_OK)
 80076d0:	2200      	movs	r2, #0
 80076d2:	490e      	ldr	r1, [pc, #56]	@ (800770c <MX_USB_Device_Init+0x40>)
 80076d4:	480e      	ldr	r0, [pc, #56]	@ (8007710 <MX_USB_Device_Init+0x44>)
 80076d6:	f00c ffa5 	bl	8014624 <USBD_Init>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <MX_USB_Device_Init+0x18>
  {
    Error_Handler();
 80076e0:	f7fd fbcc 	bl	8004e7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076e4:	490b      	ldr	r1, [pc, #44]	@ (8007714 <MX_USB_Device_Init+0x48>)
 80076e6:	480a      	ldr	r0, [pc, #40]	@ (8007710 <MX_USB_Device_Init+0x44>)
 80076e8:	f00c ffcc 	bl	8014684 <USBD_RegisterClass>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <MX_USB_Device_Init+0x2a>
  {
    Error_Handler();
 80076f2:	f7fd fbc3 	bl	8004e7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076f6:	4908      	ldr	r1, [pc, #32]	@ (8007718 <MX_USB_Device_Init+0x4c>)
 80076f8:	4805      	ldr	r0, [pc, #20]	@ (8007710 <MX_USB_Device_Init+0x44>)
 80076fa:	f00c fb6d 	bl	8013dd8 <USBD_CDC_RegisterInterface>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <MX_USB_Device_Init+0x3c>
  {
    Error_Handler();
 8007704:	f7fd fbba 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007708:	bf00      	nop
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200000e0 	.word	0x200000e0
 8007710:	20025e28 	.word	0x20025e28
 8007714:	20000044 	.word	0x20000044
 8007718:	200000cc 	.word	0x200000cc

0800771c <LL_GPIO_IsInputPinSet>:
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691a      	ldr	r2, [r3, #16]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	4013      	ands	r3, r2
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d101      	bne.n	8007738 <LL_GPIO_IsInputPinSet+0x1c>
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <LL_GPIO_IsInputPinSet+0x1e>
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <LL_GPIO_SetOutputPin>:
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	619a      	str	r2, [r3, #24]
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <LL_GPIO_ResetOutputPin>:
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <LL_SPI_Enable>:
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f043 0201 	orr.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	601a      	str	r2, [r3, #0]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <LL_SPI_Disable>:
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f023 0201 	bic.w	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <LL_SPI_StartMasterTransfer>:
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <LL_SPI_SetDataWidth>:
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f023 021f 	bic.w	r2, r3, #31
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	609a      	str	r2, [r3, #8]
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <LL_SPI_IsActiveFlag_RXP>:
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <LL_SPI_IsActiveFlag_RXP+0x18>
 8007818:	2301      	movs	r3, #1
 800781a:	e000      	b.n	800781e <LL_SPI_IsActiveFlag_RXP+0x1a>
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <LL_SPI_IsActiveFlag_TXP>:
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b02      	cmp	r3, #2
 800783c:	d101      	bne.n	8007842 <LL_SPI_IsActiveFlag_TXP+0x18>
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <LL_SPI_IsActiveFlag_TXP+0x1a>
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <LL_SPI_IsActiveFlag_TXC>:
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007864:	d101      	bne.n	800786a <LL_SPI_IsActiveFlag_TXC+0x1a>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <LL_SPI_IsActiveFlag_TXC+0x1c>
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <LL_SPI_ClearFlag_EOT>:
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->IFCR, SPI_IFCR_EOTC);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f043 0208 	orr.w	r2, r3, #8
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	619a      	str	r2, [r3, #24]
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <LL_SPI_ReceiveData8>:
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3330      	adds	r3, #48	@ 0x30
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	b2db      	uxtb	r3, r3
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <LL_SPI_TransmitData8>:
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3320      	adds	r3, #32
 80078c4:	78fa      	ldrb	r2, [r7, #3]
 80078c6:	701a      	strb	r2, [r3, #0]
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <delay_nus>:
Matrix matrix ;
Coordinate display ;
Matrix Matrix_Default;
//--------------------------------------------------------------------------------delay
static void delay_nus(int cnt)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	int i,us;
	for(i = 0;i<cnt;i++)
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	e00a      	b.n	80078f8 <delay_nus+0x24>
	{
		us = 40;
 80078e2:	2328      	movs	r3, #40	@ 0x28
 80078e4:	60bb      	str	r3, [r7, #8]
		while (us--)     /* delay	*/
 80078e6:	bf00      	nop
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	1e5a      	subs	r2, r3, #1
 80078ec:	60ba      	str	r2, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1fa      	bne.n	80078e8 <delay_nus+0x14>
	for(i = 0;i<cnt;i++)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	dbf0      	blt.n	80078e2 <delay_nus+0xe>
		{
		}
	}
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <xpt2046_init>:
 //----------------------------------------------------------------------------XPT2046 SPI initialization
void xpt2046_init(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
//	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
//	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
//	SPI_InitStructure.SPI_CRCPolynomial = 7;
//	SPI_Init(SPI2, &SPI_InitStructure);
//	SPI_Cmd(SPI2, ENABLE);
	Matrix_Default.An = 52;
 8007914:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <xpt2046_init+0x3c>)
 8007916:	2234      	movs	r2, #52	@ 0x34
 8007918:	601a      	str	r2, [r3, #0]
	Matrix_Default.Bn = 4360;
 800791a:	4b0c      	ldr	r3, [pc, #48]	@ (800794c <xpt2046_init+0x3c>)
 800791c:	f241 1208 	movw	r2, #4360	@ 0x1108
 8007920:	605a      	str	r2, [r3, #4]
	Matrix_Default.Cn = -979832;
 8007922:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <xpt2046_init+0x3c>)
 8007924:	4a0a      	ldr	r2, [pc, #40]	@ (8007950 <xpt2046_init+0x40>)
 8007926:	609a      	str	r2, [r3, #8]
	Matrix_Default.Dn = -5923;
 8007928:	4b08      	ldr	r3, [pc, #32]	@ (800794c <xpt2046_init+0x3c>)
 800792a:	4a0a      	ldr	r2, [pc, #40]	@ (8007954 <xpt2046_init+0x44>)
 800792c:	60da      	str	r2, [r3, #12]
	Matrix_Default.En = 5;
 800792e:	4b07      	ldr	r3, [pc, #28]	@ (800794c <xpt2046_init+0x3c>)
 8007930:	2205      	movs	r2, #5
 8007932:	611a      	str	r2, [r3, #16]
	Matrix_Default.Fn = 23070954;
 8007934:	4b05      	ldr	r3, [pc, #20]	@ (800794c <xpt2046_init+0x3c>)
 8007936:	4a08      	ldr	r2, [pc, #32]	@ (8007958 <xpt2046_init+0x48>)
 8007938:	615a      	str	r2, [r3, #20]
	Matrix_Default.Divider = 65536;
 800793a:	4b04      	ldr	r3, [pc, #16]	@ (800794c <xpt2046_init+0x3c>)
 800793c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007940:	619a      	str	r2, [r3, #24]
}
 8007942:	bf00      	nop
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	20026128 	.word	0x20026128
 8007950:	fff10c88 	.word	0xfff10c88
 8007954:	ffffe8dd 	.word	0xffffe8dd
 8007958:	016008ea 	.word	0x016008ea

0800795c <getDisplayPoint>:
//------------------------------------------------------------------------------delay function
int getDisplayPoint(Coordinate * displayPtr, Coordinate * screenPtr, Matrix * matrixPtr )
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
	/* Operation order is important since we are doing integer math. 
	   Make sure you add all terms together before dividing, so that 
	   the remainder is not rounded off prematurely. */
	if(screenPtr == 0) {return -1;}
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <getDisplayPoint+0x18>
 800796e:	f04f 33ff 	mov.w	r3, #4294967295
 8007972:	e033      	b.n	80079dc <getDisplayPoint+0x80>
  if( matrixPtr->Divider != 0 )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d02d      	beq.n	80079d8 <getDisplayPoint+0x7c>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	fb03 f202 	mul.w	r2, r3, r2
                      (matrixPtr->Bn * screenPtr->y) + 
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	6849      	ldr	r1, [r1, #4]
 8007990:	fb01 f303 	mul.w	r3, r1, r3
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8007994:	441a      	add	r2, r3
                       matrixPtr->Cn 
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
                      (matrixPtr->Bn * screenPtr->y) + 
 800799a:	441a      	add	r2, r3
                    ) / matrixPtr->Divider ;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	fb92 f2f3 	sdiv	r2, r2, r3
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	601a      	str	r2, [r3, #0]
	/* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	fb03 f202 	mul.w	r2, r3, r2
                      (matrixPtr->En * screenPtr->y) + 
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	6849      	ldr	r1, [r1, #4]
 80079bc:	fb01 f303 	mul.w	r3, r1, r3
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 80079c0:	441a      	add	r2, r3
                       matrixPtr->Fn 
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
                      (matrixPtr->En * screenPtr->y) + 
 80079c6:	441a      	add	r2, r3
                    ) / matrixPtr->Divider ;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	fb92 f2f3 	sdiv	r2, r2, r3
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    return -1;
  }
  return 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	e001      	b.n	80079dc <getDisplayPoint+0x80>
    return -1;
 80079d8:	f04f 33ff 	mov.w	r3, #4294967295
} 
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <WR_CMD>:
	GUI_DrawPoint(x+1,y+1,color);
	GUI_DrawPoint(x+1,y,color);
}
//------------------------------------------------------------------------SPI bus transmit and receive data
unsigned char WR_CMD (unsigned char cmd)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	71fb      	strb	r3, [r7, #7]
	unsigned char Ret = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]
//	/* Wait for SPI data reception */
//	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
//	/* Read SPI received data */
//	return SPI_I2S_ReceiveData(SPI2);

	LL_SPI_SetDataWidth(SPI6, LL_SPI_DATAWIDTH_8BIT);
 80079f6:	2107      	movs	r1, #7
 80079f8:	4819      	ldr	r0, [pc, #100]	@ (8007a60 <WR_CMD+0x78>)
 80079fa:	f7ff fef0 	bl	80077de <LL_SPI_SetDataWidth>
	LL_SPI_Enable(SPI6);
 80079fe:	4818      	ldr	r0, [pc, #96]	@ (8007a60 <WR_CMD+0x78>)
 8007a00:	f7ff febd 	bl	800777e <LL_SPI_Enable>
	if(LL_SPI_IsActiveFlag_TXP(SPI6) == 1)
 8007a04:	4816      	ldr	r0, [pc, #88]	@ (8007a60 <WR_CMD+0x78>)
 8007a06:	f7ff ff10 	bl	800782a <LL_SPI_IsActiveFlag_TXP>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d104      	bne.n	8007a1a <WR_CMD+0x32>
	{
		LL_SPI_TransmitData8(SPI6, cmd);
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	4619      	mov	r1, r3
 8007a14:	4812      	ldr	r0, [pc, #72]	@ (8007a60 <WR_CMD+0x78>)
 8007a16:	f7ff ff4d 	bl	80078b4 <LL_SPI_TransmitData8>
	}
	LL_SPI_StartMasterTransfer(SPI6);
 8007a1a:	4811      	ldr	r0, [pc, #68]	@ (8007a60 <WR_CMD+0x78>)
 8007a1c:	f7ff fecf 	bl	80077be <LL_SPI_StartMasterTransfer>
	while( !( /*LL_SPI_IsActiveFlag_EOT(SPI6) &&*/ LL_SPI_IsActiveFlag_TXC(SPI6) ) )
 8007a20:	e000      	b.n	8007a24 <WR_CMD+0x3c>
	{
		__NOP();
 8007a22:	bf00      	nop
	while( !( /*LL_SPI_IsActiveFlag_EOT(SPI6) &&*/ LL_SPI_IsActiveFlag_TXC(SPI6) ) )
 8007a24:	480e      	ldr	r0, [pc, #56]	@ (8007a60 <WR_CMD+0x78>)
 8007a26:	f7ff ff13 	bl	8007850 <LL_SPI_IsActiveFlag_TXC>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0f8      	beq.n	8007a22 <WR_CMD+0x3a>
	}
	LL_SPI_ClearFlag_EOT(SPI6);
 8007a30:	480b      	ldr	r0, [pc, #44]	@ (8007a60 <WR_CMD+0x78>)
 8007a32:	f7ff ff21 	bl	8007878 <LL_SPI_ClearFlag_EOT>
	while( !( LL_SPI_IsActiveFlag_RXP(SPI6) ) )
 8007a36:	e000      	b.n	8007a3a <WR_CMD+0x52>
	{
		__NOP();
 8007a38:	bf00      	nop
	while( !( LL_SPI_IsActiveFlag_RXP(SPI6) ) )
 8007a3a:	4809      	ldr	r0, [pc, #36]	@ (8007a60 <WR_CMD+0x78>)
 8007a3c:	f7ff fee2 	bl	8007804 <LL_SPI_IsActiveFlag_RXP>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f8      	beq.n	8007a38 <WR_CMD+0x50>
	}
	Ret = LL_SPI_ReceiveData8(SPI6);
 8007a46:	4806      	ldr	r0, [pc, #24]	@ (8007a60 <WR_CMD+0x78>)
 8007a48:	f7ff ff26 	bl	8007898 <LL_SPI_ReceiveData8>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
	LL_SPI_Disable(SPI6);
 8007a50:	4803      	ldr	r0, [pc, #12]	@ (8007a60 <WR_CMD+0x78>)
 8007a52:	f7ff fea4 	bl	800779e <LL_SPI_Disable>
	return Ret;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
} 
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40015000 	.word	0x40015000

08007a64 <RD_AD>:
//-------------------------------------------------------------------------read xpt2046 adc value
unsigned short RD_AD(void)
{ 
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
	unsigned short buf,temp;
	//int buf,temp;
	buf = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	80fb      	strh	r3, [r7, #6]
	temp = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	80bb      	strh	r3, [r7, #4]

	temp = WR_CMD(0x00);
 8007a72:	2000      	movs	r0, #0
 8007a74:	f7ff ffb8 	bl	80079e8 <WR_CMD>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	80bb      	strh	r3, [r7, #4]
	buf = temp << 8; 
 8007a7c:	88bb      	ldrh	r3, [r7, #4]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	80fb      	strh	r3, [r7, #6]
	delay_nus(1); 
 8007a82:	2001      	movs	r0, #1
 8007a84:	f7ff ff26 	bl	80078d4 <delay_nus>
	temp = WR_CMD(0x00);
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f7ff ffad 	bl	80079e8 <WR_CMD>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	80bb      	strh	r3, [r7, #4]
	buf |= temp; 
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	88bb      	ldrh	r3, [r7, #4]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	80fb      	strh	r3, [r7, #6]
	buf >>= 4;
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	091b      	lsrs	r3, r3, #4
 8007a9e:	80fb      	strh	r3, [r7, #6]
	buf &= 0xfff;
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa6:	80fb      	strh	r3, [r7, #6]
	return buf;
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <Read_X>:
//------------------------------------------------------------------------read xpt2046 channel X+ adc value
unsigned short Read_X(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
	unsigned short temp = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	80fb      	strh	r3, [r7, #6]
	//int temp = 0;
	TP_CS(0); 
 8007abe:	2102      	movs	r1, #2
 8007ac0:	480c      	ldr	r0, [pc, #48]	@ (8007af4 <Read_X+0x40>)
 8007ac2:	f7ff fe4e 	bl	8007762 <LL_GPIO_ResetOutputPin>
	delay_nus(1); 
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	f7ff ff04 	bl	80078d4 <delay_nus>
	WR_CMD(CHX); 
 8007acc:	2090      	movs	r0, #144	@ 0x90
 8007ace:	f7ff ff8b 	bl	80079e8 <WR_CMD>
	delay_nus(1); 
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	f7ff fefe 	bl	80078d4 <delay_nus>
	temp = RD_AD(); 
 8007ad8:	f7ff ffc4 	bl	8007a64 <RD_AD>
 8007adc:	4603      	mov	r3, r0
 8007ade:	80fb      	strh	r3, [r7, #6]
	TP_CS(1); 
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4804      	ldr	r0, [pc, #16]	@ (8007af4 <Read_X+0x40>)
 8007ae4:	f7ff fe2f 	bl	8007746 <LL_GPIO_SetOutputPin>
	return temp;    
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
}  
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	42020800 	.word	0x42020800

08007af8 <Read_Y>:
//-----------------------------------------------------------------------read xpt2046 channel Y+ adc value
unsigned short Read_Y(void)
{  
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
	unsigned short temp = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	80fb      	strh	r3, [r7, #6]
	//int temp = 0;
	TP_CS(0);
 8007b02:	2102      	movs	r1, #2
 8007b04:	480c      	ldr	r0, [pc, #48]	@ (8007b38 <Read_Y+0x40>)
 8007b06:	f7ff fe2c 	bl	8007762 <LL_GPIO_ResetOutputPin>
	delay_nus(1);
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f7ff fee2 	bl	80078d4 <delay_nus>
	WR_CMD(CHY);
 8007b10:	20d0      	movs	r0, #208	@ 0xd0
 8007b12:	f7ff ff69 	bl	80079e8 <WR_CMD>
	delay_nus(1);
 8007b16:	2001      	movs	r0, #1
 8007b18:	f7ff fedc 	bl	80078d4 <delay_nus>
	temp = RD_AD();
 8007b1c:	f7ff ffa2 	bl	8007a64 <RD_AD>
 8007b20:	4603      	mov	r3, r0
 8007b22:	80fb      	strh	r3, [r7, #6]
	TP_CS(1); 
 8007b24:	2102      	movs	r1, #2
 8007b26:	4804      	ldr	r0, [pc, #16]	@ (8007b38 <Read_Y+0x40>)
 8007b28:	f7ff fe0d 	bl	8007746 <LL_GPIO_SetOutputPin>
	return temp;
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
} 
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	42020800 	.word	0x42020800

08007b3c <TP_GetAdXY>:
//----------------------------------------------------------------read xpt2046 channel X+ channel Y+ adc value
void TP_GetAdXY(int *x,int *y)  
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
	int adx,ady;
	adx = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
	ady = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60bb      	str	r3, [r7, #8]
	adx = Read_X(); 
 8007b4e:	f7ff ffb1 	bl	8007ab4 <Read_X>
 8007b52:	4603      	mov	r3, r0
 8007b54:	60fb      	str	r3, [r7, #12]
	delay_nus(1); 
 8007b56:	2001      	movs	r0, #1
 8007b58:	f7ff febc 	bl	80078d4 <delay_nus>
	ady = Read_Y(); 
 8007b5c:	f7ff ffcc 	bl	8007af8 <Read_Y>
 8007b60:	4603      	mov	r3, r0
 8007b62:	60bb      	str	r3, [r7, #8]
	*x = adx;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]
	*y = ady;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	601a      	str	r2, [r3, #0]
}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <Read_Value>:
//-------------------------------------------get xpt2046 channel X+ channel Y+ adc filtering value, some interference values can be excluded
Coordinate *Read_Value(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b09e      	sub	sp, #120	@ 0x78
 8007b7c:	af00      	add	r7, sp, #0
	static Coordinate screen;
	Coordinate screen_fail;
	int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
	unsigned char count=0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	int buffer[2][9]={{0},{0}};  /* channel X+ Y+ for sampling buffer */
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	2248      	movs	r2, #72	@ 0x48
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f00e fe3b 	bl	8016806 <memset>
	TP_X[0] = 0; TP_Y[0] = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b94:	2300      	movs	r3, #0
 8007b96:	65bb      	str	r3, [r7, #88]	@ 0x58
	screen.x=0; screen.y=0;
 8007b98:	4b9a      	ldr	r3, [pc, #616]	@ (8007e04 <Read_Value+0x28c>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	4b99      	ldr	r3, [pc, #612]	@ (8007e04 <Read_Value+0x28c>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	605a      	str	r2, [r3, #4]
	screen_fail.x=65535; screen_fail.y=65535;
 8007ba4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007baa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007bae:	667b      	str	r3, [r7, #100]	@ 0x64
	do                           /* 9 sampling times */
	{
		TP_GetAdXY(TP_X,TP_Y);
 8007bb0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8007bb4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff ffbe 	bl	8007b3c <TP_GetAdXY>
		buffer[0][count]=TP_X[0];
 8007bc0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007bc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	3378      	adds	r3, #120	@ 0x78
 8007bca:	443b      	add	r3, r7
 8007bcc:	f843 2c74 	str.w	r2, [r3, #-116]
		buffer[1][count]=TP_Y[0];
 8007bd0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007bd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bd6:	3309      	adds	r3, #9
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	3378      	adds	r3, #120	@ 0x78
 8007bdc:	443b      	add	r3, r7
 8007bde:	f843 2c74 	str.w	r2, [r3, #-116]
		count++;
 8007be2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007be6:	3301      	adds	r3, #1
 8007be8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}
	while(!TP_INT_IN&& count<9);  /* TP_INT_IN interrupt pin for the touch screen, when the user clicks on the touch screen��
 8007bec:	2104      	movs	r1, #4
 8007bee:	4886      	ldr	r0, [pc, #536]	@ (8007e08 <Read_Value+0x290>)
 8007bf0:	f7ff fd94 	bl	800771c <LL_GPIO_IsInputPinSet>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <Read_Value+0x8a>
 8007bfa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007bfe:	2b08      	cmp	r3, #8
 8007c00:	d9d6      	bls.n	8007bb0 <Read_Value+0x38>
	                                 TP_INT_IN Low level */
//TP_GetAdXY(&TP_X[0],&TP_Y[0]);
//screen.x=0; screen.y=0;
//screen.x=TP_X[0]; screen.y=TP_Y[0];
	if(count==9)   /* sampled 9 times, then filtering some interference values can be excluded*/
 8007c02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007c06:	2b09      	cmp	r3, #9
 8007c08:	f040 80f6 	bne.w	8007df8 <Read_Value+0x280>
		{
			/* average value of the 3 groups */
			temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	441a      	add	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	4a7d      	ldr	r2, [pc, #500]	@ (8007e0c <Read_Value+0x294>)
 8007c18:	fb82 1203 	smull	r1, r2, r2, r3
 8007c1c:	17db      	asrs	r3, r3, #31
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
			temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	441a      	add	r2, r3
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	4a77      	ldr	r2, [pc, #476]	@ (8007e0c <Read_Value+0x294>)
 8007c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8007c32:	17db      	asrs	r3, r3, #31
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	653b      	str	r3, [r7, #80]	@ 0x50
			temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	441a      	add	r2, r3
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	4413      	add	r3, r2
 8007c42:	4a72      	ldr	r2, [pc, #456]	@ (8007e0c <Read_Value+0x294>)
 8007c44:	fb82 1203 	smull	r1, r2, r2, r3
 8007c48:	17db      	asrs	r3, r3, #31
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	657b      	str	r3, [r7, #84]	@ 0x54
			/* D-value between the 3 groups */
			m0=temp[0]-temp[1];
 8007c4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=temp[1]-temp[2];
 8007c56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=temp[2]-temp[0];
 8007c5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	66bb      	str	r3, [r7, #104]	@ 0x68
			/* absolute value of D-value */
			m0=m0>0?m0:(-m0);
 8007c66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfb8      	it	lt
 8007c6c:	425b      	neglt	r3, r3
 8007c6e:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=m1>0?m1:(-m1);
 8007c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfb8      	it	lt
 8007c76:	425b      	neglt	r3, r3
 8007c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=m2>0?m2:(-m2);
 8007c7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bfb8      	it	lt
 8007c80:	425b      	neglt	r3, r3
 8007c82:	66bb      	str	r3, [r7, #104]	@ 0x68

			/* judging Whether the absolute value of D-value is more than threshold, if three absolute value of D-value is
			   more than threshold value, then determine the sampling point for the interference, ignore the sampling point,
			   the threshold value is setting to 2, in this example */
			if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8007c84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	dd07      	ble.n	8007c9a <Read_Value+0x122>
 8007c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	dd04      	ble.n	8007c9a <Read_Value+0x122>
 8007c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	dd01      	ble.n	8007c9a <Read_Value+0x122>
 8007c96:	2300      	movs	r3, #0
 8007c98:	e0af      	b.n	8007dfa <Read_Value+0x282>
			/* calculate channel X+ average values,then assign them to screen */
			if(m0<m1)
 8007c9a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	da17      	bge.n	8007cd2 <Read_Value+0x15a>
			{
				if(m2<m0)
 8007ca2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ca4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	da09      	bge.n	8007cbe <Read_Value+0x146>
				screen.x=(temp[0]+temp[2])/2;
 8007caa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cae:	4413      	add	r3, r2
 8007cb0:	0fda      	lsrs	r2, r3, #31
 8007cb2:	4413      	add	r3, r2
 8007cb4:	105b      	asrs	r3, r3, #1
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4b52      	ldr	r3, [pc, #328]	@ (8007e04 <Read_Value+0x28c>)
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e020      	b.n	8007d00 <Read_Value+0x188>
				else
				screen.x=(temp[0]+temp[1])/2;
 8007cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cc2:	4413      	add	r3, r2
 8007cc4:	0fda      	lsrs	r2, r3, #31
 8007cc6:	4413      	add	r3, r2
 8007cc8:	105b      	asrs	r3, r3, #1
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8007e04 <Read_Value+0x28c>)
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	e016      	b.n	8007d00 <Read_Value+0x188>
			}
			else if(m2<m1)
 8007cd2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	da09      	bge.n	8007cee <Read_Value+0x176>
				screen.x=(temp[0]+temp[2])/2;
 8007cda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cde:	4413      	add	r3, r2
 8007ce0:	0fda      	lsrs	r2, r3, #31
 8007ce2:	4413      	add	r3, r2
 8007ce4:	105b      	asrs	r3, r3, #1
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4b46      	ldr	r3, [pc, #280]	@ (8007e04 <Read_Value+0x28c>)
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e008      	b.n	8007d00 <Read_Value+0x188>
			else
				screen.x=(temp[1]+temp[2])/2;
 8007cee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf2:	4413      	add	r3, r2
 8007cf4:	0fda      	lsrs	r2, r3, #31
 8007cf6:	4413      	add	r3, r2
 8007cf8:	105b      	asrs	r3, r3, #1
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	4b41      	ldr	r3, [pc, #260]	@ (8007e04 <Read_Value+0x28c>)
 8007cfe:	601a      	str	r2, [r3, #0]

			/* same as above, this is channel Y+ */
			temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8007d00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	441a      	add	r2, r3
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	4413      	add	r3, r2
 8007d0a:	4a40      	ldr	r2, [pc, #256]	@ (8007e0c <Read_Value+0x294>)
 8007d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8007d10:	17db      	asrs	r3, r3, #31
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
			temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8007d16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1a:	441a      	add	r2, r3
 8007d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1e:	4413      	add	r3, r2
 8007d20:	4a3a      	ldr	r2, [pc, #232]	@ (8007e0c <Read_Value+0x294>)
 8007d22:	fb82 1203 	smull	r1, r2, r2, r3
 8007d26:	17db      	asrs	r3, r3, #31
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	653b      	str	r3, [r7, #80]	@ 0x50
			temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 8007d2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d30:	441a      	add	r2, r3
 8007d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d34:	4413      	add	r3, r2
 8007d36:	4a35      	ldr	r2, [pc, #212]	@ (8007e0c <Read_Value+0x294>)
 8007d38:	fb82 1203 	smull	r1, r2, r2, r3
 8007d3c:	17db      	asrs	r3, r3, #31
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	657b      	str	r3, [r7, #84]	@ 0x54
			m0=temp[0]-temp[1];
 8007d42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=temp[1]-temp[2];
 8007d4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=temp[2]-temp[0];
 8007d52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	66bb      	str	r3, [r7, #104]	@ 0x68
			m0=m0>0?m0:(-m0);
 8007d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfb8      	it	lt
 8007d60:	425b      	neglt	r3, r3
 8007d62:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=m1>0?m1:(-m1);
 8007d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bfb8      	it	lt
 8007d6a:	425b      	neglt	r3, r3
 8007d6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=m2>0?m2:(-m2);
 8007d6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bfb8      	it	lt
 8007d74:	425b      	neglt	r3, r3
 8007d76:	66bb      	str	r3, [r7, #104]	@ 0x68
			if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 8007d78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	dd07      	ble.n	8007d8e <Read_Value+0x216>
 8007d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	dd04      	ble.n	8007d8e <Read_Value+0x216>
 8007d84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	dd01      	ble.n	8007d8e <Read_Value+0x216>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e035      	b.n	8007dfa <Read_Value+0x282>

			if(m0<m1)
 8007d8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d92:	429a      	cmp	r2, r3
 8007d94:	da17      	bge.n	8007dc6 <Read_Value+0x24e>
			{
				if(m2<m0)
 8007d96:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007d98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	da09      	bge.n	8007db2 <Read_Value+0x23a>
					screen.y=(temp[0]+temp[2])/2;
 8007d9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da2:	4413      	add	r3, r2
 8007da4:	0fda      	lsrs	r2, r3, #31
 8007da6:	4413      	add	r3, r2
 8007da8:	105b      	asrs	r3, r3, #1
 8007daa:	461a      	mov	r2, r3
 8007dac:	4b15      	ldr	r3, [pc, #84]	@ (8007e04 <Read_Value+0x28c>)
 8007dae:	605a      	str	r2, [r3, #4]
 8007db0:	e020      	b.n	8007df4 <Read_Value+0x27c>
				else
					screen.y=(temp[0]+temp[1])/2;
 8007db2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007db6:	4413      	add	r3, r2
 8007db8:	0fda      	lsrs	r2, r3, #31
 8007dba:	4413      	add	r3, r2
 8007dbc:	105b      	asrs	r3, r3, #1
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4b10      	ldr	r3, [pc, #64]	@ (8007e04 <Read_Value+0x28c>)
 8007dc2:	605a      	str	r2, [r3, #4]
 8007dc4:	e016      	b.n	8007df4 <Read_Value+0x27c>
			}
			else if(m2<m1)
 8007dc6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	da09      	bge.n	8007de2 <Read_Value+0x26a>
				screen.y=(temp[0]+temp[2])/2;
 8007dce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dd2:	4413      	add	r3, r2
 8007dd4:	0fda      	lsrs	r2, r3, #31
 8007dd6:	4413      	add	r3, r2
 8007dd8:	105b      	asrs	r3, r3, #1
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4b09      	ldr	r3, [pc, #36]	@ (8007e04 <Read_Value+0x28c>)
 8007dde:	605a      	str	r2, [r3, #4]
 8007de0:	e008      	b.n	8007df4 <Read_Value+0x27c>
			else
				screen.y=(temp[1]+temp[2])/2;
 8007de2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007de6:	4413      	add	r3, r2
 8007de8:	0fda      	lsrs	r2, r3, #31
 8007dea:	4413      	add	r3, r2
 8007dec:	105b      	asrs	r3, r3, #1
 8007dee:	461a      	mov	r2, r3
 8007df0:	4b04      	ldr	r3, [pc, #16]	@ (8007e04 <Read_Value+0x28c>)
 8007df2:	605a      	str	r2, [r3, #4]

			return &screen;
 8007df4:	4b03      	ldr	r3, [pc, #12]	@ (8007e04 <Read_Value+0x28c>)
 8007df6:	e000      	b.n	8007dfa <Read_Value+0x282>
		}
		return 0;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3778      	adds	r7, #120	@ 0x78
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	20026144 	.word	0x20026144
 8007e08:	42020800 	.word	0x42020800
 8007e0c:	55555556 	.word	0x55555556

08007e10 <TS_Touched>:
//-------------------------------------------------------------------------------------------
uint8_t TS_Touched(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
//	return 1;
	return !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2);
 8007e14:	2104      	movs	r1, #4
 8007e16:	4805      	ldr	r0, [pc, #20]	@ (8007e2c <TS_Touched+0x1c>)
 8007e18:	f7ff fc80 	bl	800771c <LL_GPIO_IsInputPinSet>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	42020800 	.word	0x42020800

08007e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8007e3c:	4b33      	ldr	r3, [pc, #204]	@ (8007f0c <HAL_InitTick+0xdc>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e05c      	b.n	8007f02 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8007e48:	4b31      	ldr	r3, [pc, #196]	@ (8007f10 <HAL_InitTick+0xe0>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d10c      	bne.n	8007e6e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8007e54:	4b2f      	ldr	r3, [pc, #188]	@ (8007f14 <HAL_InitTick+0xe4>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	4b2c      	ldr	r3, [pc, #176]	@ (8007f0c <HAL_InitTick+0xdc>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	e037      	b.n	8007ede <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8007e6e:	f000 f935 	bl	80080dc <HAL_SYSTICK_GetCLKSourceConfig>
 8007e72:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d023      	beq.n	8007ec2 <HAL_InitTick+0x92>
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d82d      	bhi.n	8007edc <HAL_InitTick+0xac>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_InitTick+0x5e>
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d00d      	beq.n	8007ea8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8007e8c:	e026      	b.n	8007edc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8007e8e:	4b21      	ldr	r3, [pc, #132]	@ (8007f14 <HAL_InitTick+0xe4>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b1e      	ldr	r3, [pc, #120]	@ (8007f0c <HAL_InitTick+0xdc>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	4619      	mov	r1, r3
 8007e98:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8007e9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea4:	60fb      	str	r3, [r7, #12]
        break;
 8007ea6:	e01a      	b.n	8007ede <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8007ea8:	4b18      	ldr	r3, [pc, #96]	@ (8007f0c <HAL_InitTick+0xdc>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8007eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebe:	60fb      	str	r3, [r7, #12]
        break;
 8007ec0:	e00d      	b.n	8007ede <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8007ec2:	4b12      	ldr	r3, [pc, #72]	@ (8007f0c <HAL_InitTick+0xdc>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed8:	60fb      	str	r3, [r7, #12]
        break;
 8007eda:	e000      	b.n	8007ede <HAL_InitTick+0xae>
        break;
 8007edc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f8da 	bl	8008098 <HAL_SYSTICK_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e009      	b.n	8007f02 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef6:	f000 f8a6 	bl	8008046 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8007efa:	4a07      	ldr	r2, [pc, #28]	@ (8007f18 <HAL_InitTick+0xe8>)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	2000002c 	.word	0x2000002c
 8007f10:	e000e010 	.word	0xe000e010
 8007f14:	20000024 	.word	0x20000024
 8007f18:	20000028 	.word	0x20000028

08007f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8007f20:	4b03      	ldr	r3, [pc, #12]	@ (8007f30 <HAL_GetTick+0x14>)
 8007f22:	681b      	ldr	r3, [r3, #0]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	2002614c 	.word	0x2002614c

08007f34 <__NVIC_GetPriorityGrouping>:
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f38:	4b04      	ldr	r3, [pc, #16]	@ (8007f4c <__NVIC_GetPriorityGrouping+0x18>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	0a1b      	lsrs	r3, r3, #8
 8007f3e:	f003 0307 	and.w	r3, r3, #7
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	e000ed00 	.word	0xe000ed00

08007f50 <__NVIC_EnableIRQ>:
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	db0b      	blt.n	8007f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	f003 021f 	and.w	r2, r3, #31
 8007f68:	4907      	ldr	r1, [pc, #28]	@ (8007f88 <__NVIC_EnableIRQ+0x38>)
 8007f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	2001      	movs	r0, #1
 8007f72:	fa00 f202 	lsl.w	r2, r0, r2
 8007f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	e000e100 	.word	0xe000e100

08007f8c <__NVIC_SetPriority>:
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	db0a      	blt.n	8007fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	490c      	ldr	r1, [pc, #48]	@ (8007fd8 <__NVIC_SetPriority+0x4c>)
 8007fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007faa:	0112      	lsls	r2, r2, #4
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	440b      	add	r3, r1
 8007fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007fb4:	e00a      	b.n	8007fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	4908      	ldr	r1, [pc, #32]	@ (8007fdc <__NVIC_SetPriority+0x50>)
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	3b04      	subs	r3, #4
 8007fc4:	0112      	lsls	r2, r2, #4
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	440b      	add	r3, r1
 8007fca:	761a      	strb	r2, [r3, #24]
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	e000e100 	.word	0xe000e100
 8007fdc:	e000ed00 	.word	0xe000ed00

08007fe0 <NVIC_EncodePriority>:
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b089      	sub	sp, #36	@ 0x24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f1c3 0307 	rsb	r3, r3, #7
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	bf28      	it	cs
 8007ffe:	2304      	movcs	r3, #4
 8008000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	3304      	adds	r3, #4
 8008006:	2b06      	cmp	r3, #6
 8008008:	d902      	bls.n	8008010 <NVIC_EncodePriority+0x30>
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	3b03      	subs	r3, #3
 800800e:	e000      	b.n	8008012 <NVIC_EncodePriority+0x32>
 8008010:	2300      	movs	r3, #0
 8008012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008014:	f04f 32ff 	mov.w	r2, #4294967295
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	43da      	mvns	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	401a      	ands	r2, r3
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008028:	f04f 31ff 	mov.w	r1, #4294967295
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	fa01 f303 	lsl.w	r3, r1, r3
 8008032:	43d9      	mvns	r1, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008038:	4313      	orrs	r3, r2
}
 800803a:	4618      	mov	r0, r3
 800803c:	3724      	adds	r7, #36	@ 0x24
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b086      	sub	sp, #24
 800804a:	af00      	add	r7, sp, #0
 800804c:	4603      	mov	r3, r0
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008054:	f7ff ff6e 	bl	8007f34 <__NVIC_GetPriorityGrouping>
 8008058:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	6978      	ldr	r0, [r7, #20]
 8008060:	f7ff ffbe 	bl	8007fe0 <NVIC_EncodePriority>
 8008064:	4602      	mov	r2, r0
 8008066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff ff8d 	bl	8007f8c <__NVIC_SetPriority>
}
 8008072:	bf00      	nop
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	4603      	mov	r3, r0
 8008082:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff ff61 	bl	8007f50 <__NVIC_EnableIRQ>
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080a8:	d301      	bcc.n	80080ae <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80080aa:	2301      	movs	r3, #1
 80080ac:	e00d      	b.n	80080ca <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80080ae:	4a0a      	ldr	r2, [pc, #40]	@ (80080d8 <HAL_SYSTICK_Config+0x40>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80080b6:	4b08      	ldr	r3, [pc, #32]	@ (80080d8 <HAL_SYSTICK_Config+0x40>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80080bc:	4b06      	ldr	r3, [pc, #24]	@ (80080d8 <HAL_SYSTICK_Config+0x40>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a05      	ldr	r2, [pc, #20]	@ (80080d8 <HAL_SYSTICK_Config+0x40>)
 80080c2:	f043 0303 	orr.w	r3, r3, #3
 80080c6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	e000e010 	.word	0xe000e010

080080dc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80080e2:	4b17      	ldr	r3, [pc, #92]	@ (8008140 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80080ee:	2304      	movs	r3, #4
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	e01e      	b.n	8008132 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80080f4:	4b13      	ldr	r3, [pc, #76]	@ (8008144 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80080f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080fa:	f003 030c 	and.w	r3, r3, #12
 80080fe:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b08      	cmp	r3, #8
 8008104:	d00f      	beq.n	8008126 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b08      	cmp	r3, #8
 800810a:	d80f      	bhi.n	800812c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b04      	cmp	r3, #4
 8008116:	d003      	beq.n	8008120 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8008118:	e008      	b.n	800812c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
        break;
 800811e:	e008      	b.n	8008132 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8008120:	2301      	movs	r3, #1
 8008122:	607b      	str	r3, [r7, #4]
        break;
 8008124:	e005      	b.n	8008132 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8008126:	2302      	movs	r3, #2
 8008128:	607b      	str	r3, [r7, #4]
        break;
 800812a:	e002      	b.n	8008132 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800812c:	2300      	movs	r3, #0
 800812e:	607b      	str	r3, [r7, #4]
        break;
 8008130:	bf00      	nop
    }
  }
  return systick_source;
 8008132:	687b      	ldr	r3, [r7, #4]
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	e000e010 	.word	0xe000e010
 8008144:	44020c00 	.word	0x44020c00

08008148 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8008154:	230a      	movs	r3, #10
 8008156:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8008158:	e002      	b.n	8008160 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3b01      	subs	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1f9      	bne.n	800815a <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8008166:	887b      	ldrh	r3, [r7, #2]
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800816e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	0c1b      	lsrs	r3, r3, #16
 8008176:	b29b      	uxth	r3, r3
 8008178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800817c:	b29b      	uxth	r3, r3
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8008196:	230a      	movs	r3, #10
 8008198:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800819a:	e002      	b.n	80081a2 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3b01      	subs	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f9      	bne.n	800819c <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80081a8:	887b      	ldrh	r3, [r7, #2]
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80081b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	0c1b      	lsrs	r3, r3, #16
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081be:	b29b      	uxth	r3, r3
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80081d8:	230a      	movs	r3, #10
 80081da:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80081dc:	e002      	b.n	80081e4 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f9      	bne.n	80081de <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80081ea:	887b      	ldrh	r3, [r7, #2]
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80081f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	0c1b      	lsrs	r3, r3, #16
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008200:	b29b      	uxth	r3, r3
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b086      	sub	sp, #24
 8008212:	af02      	add	r7, sp, #8
 8008214:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e0c3      	b.n	80083a8 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f00b ff17 	bl	8014068 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2203      	movs	r2, #3
 800823e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f006 fa96 	bl	800e778 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
 8008250:	e03f      	b.n	80082d2 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008252:	7bfa      	ldrb	r2, [r7, #15]
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	440b      	add	r3, r1
 8008260:	3315      	adds	r3, #21
 8008262:	2201      	movs	r2, #1
 8008264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008266:	7bfa      	ldrb	r2, [r7, #15]
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	440b      	add	r3, r1
 8008274:	3314      	adds	r3, #20
 8008276:	7bfa      	ldrb	r2, [r7, #15]
 8008278:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800827a:	7bfa      	ldrb	r2, [r7, #15]
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	440b      	add	r3, r1
 8008288:	3317      	adds	r3, #23
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800828e:	7bfa      	ldrb	r2, [r7, #15]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	440b      	add	r3, r1
 800829c:	3324      	adds	r3, #36	@ 0x24
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80082a2:	7bfa      	ldrb	r2, [r7, #15]
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	440b      	add	r3, r1
 80082b0:	3328      	adds	r3, #40	@ 0x28
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	440b      	add	r3, r1
 80082c6:	3304      	adds	r3, #4
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	3301      	adds	r3, #1
 80082d0:	73fb      	strb	r3, [r7, #15]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	7bfa      	ldrb	r2, [r7, #15]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d3ba      	bcc.n	8008252 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]
 80082e0:	e044      	b.n	800836c <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082e2:	7bfa      	ldrb	r2, [r7, #15]
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	440b      	add	r3, r1
 80082f0:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80082f4:	2200      	movs	r2, #0
 80082f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082f8:	7bfa      	ldrb	r2, [r7, #15]
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	440b      	add	r3, r1
 8008306:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800830a:	7bfa      	ldrb	r2, [r7, #15]
 800830c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800830e:	7bfa      	ldrb	r2, [r7, #15]
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	440b      	add	r3, r1
 800831c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8008320:	2200      	movs	r2, #0
 8008322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008324:	7bfa      	ldrb	r2, [r7, #15]
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	440b      	add	r3, r1
 8008332:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800833a:	7bfa      	ldrb	r2, [r7, #15]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	440b      	add	r3, r1
 8008348:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008350:	7bfa      	ldrb	r2, [r7, #15]
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	440b      	add	r3, r1
 800835e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	3301      	adds	r3, #1
 800836a:	73fb      	strb	r3, [r7, #15]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	791b      	ldrb	r3, [r3, #4]
 8008370:	7bfa      	ldrb	r2, [r7, #15]
 8008372:	429a      	cmp	r2, r3
 8008374:	d3b5      	bcc.n	80082e2 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	7c1a      	ldrb	r2, [r3, #16]
 800837e:	f88d 2000 	strb.w	r2, [sp]
 8008382:	3304      	adds	r3, #4
 8008384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008386:	f006 fa2f 	bl	800e7e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7b1b      	ldrb	r3, [r3, #12]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d102      	bne.n	80083a6 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 fb30 	bl	8009a06 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f008 f878 	bl	80104b2 <USB_ReadInterrupts>
 80083c2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fade 	bl	8008990 <PCD_EP_ISR_Handler>

    return;
 80083d4:	e0de      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d010      	beq.n	8008402 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 80083ee:	400b      	ands	r3, r1
 80083f0:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f00b feef 	bl	80141d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80083f8:	2100      	movs	r1, #0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f8cd 	bl	800859a <HAL_PCD_SetAddress>

    return;
 8008400:	e0c8      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800841a:	400b      	ands	r3, r1
 800841c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800841e:	e0b9      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8008438:	400b      	ands	r3, r1
 800843a:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800843c:	e0aa      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d029      	beq.n	800849c <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0204 	bic.w	r2, r2, #4
 8008456:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0208 	bic.w	r2, r2, #8
 8008466:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800846e:	2b01      	cmp	r3, #1
 8008470:	d107      	bne.n	8008482 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800847a:	2100      	movs	r1, #0
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 fae4 	bl	8009a4a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f00b feee 	bl	8014264 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8008496:	400b      	ands	r3, r1
 8008498:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800849a:	e07b      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01c      	beq.n	80084e0 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0208 	orr.w	r2, r2, #8
 80084b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80084c4:	400b      	ands	r3, r1
 80084c6:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0204 	orr.w	r2, r2, #4
 80084d6:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f00b fe9b 	bl	8014214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80084de:	e059      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d033      	beq.n	8008552 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80084f8:	400b      	ands	r3, r1
 80084fa:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8008502:	2b00      	cmp	r3, #0
 8008504:	d121      	bne.n	800854a <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0204 	orr.w	r2, r2, #4
 8008514:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f042 0208 	orr.w	r2, r2, #8
 8008524:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008534:	089b      	lsrs	r3, r3, #2
 8008536:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008540:	2101      	movs	r1, #1
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fa81 	bl	8009a4a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008548:	e024      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f00b fe62 	bl	8014214 <HAL_PCD_SuspendCallback>
    return;
 8008550:	e020      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00c      	beq.n	8008576 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800856a:	400b      	ands	r3, r1
 800856c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f00b fe23 	bl	80141ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008574:	e00e      	b.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800857c:	2b00      	cmp	r3, #0
 800857e:	d009      	beq.n	8008594 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800858e:	400b      	ands	r3, r1
 8008590:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8008592:	bf00      	nop
  }
}
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	460b      	mov	r3, r1
 80085a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <HAL_PCD_SetAddress+0x1a>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e012      	b.n	80085da <HAL_PCD_SetAddress+0x40>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f007 ff5e 	bl	801048c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	461a      	mov	r2, r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	70fb      	strb	r3, [r7, #3]
 80085f4:	460b      	mov	r3, r1
 80085f6:	803b      	strh	r3, [r7, #0]
 80085f8:	4613      	mov	r3, r2
 80085fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008604:	2b00      	cmp	r3, #0
 8008606:	da0f      	bge.n	8008628 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	f003 0207 	and.w	r2, r3, #7
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	3310      	adds	r3, #16
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	4413      	add	r3, r2
 800861c:	3304      	adds	r3, #4
 800861e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2201      	movs	r2, #1
 8008624:	705a      	strb	r2, [r3, #1]
 8008626:	e00f      	b.n	8008648 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	f003 0207 	and.w	r2, r3, #7
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	3304      	adds	r3, #4
 8008640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	b2da      	uxtb	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008654:	883b      	ldrh	r3, [r7, #0]
 8008656:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	78ba      	ldrb	r2, [r7, #2]
 8008662:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008664:	78bb      	ldrb	r3, [r7, #2]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d102      	bne.n	8008670 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_PCD_EP_Open+0x9c>
 800867a:	2302      	movs	r3, #2
 800867c:	e00e      	b.n	800869c <HAL_PCD_EP_Open+0xba>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	4618      	mov	r0, r3
 800868e:	f006 f8cf 	bl	800e830 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 800869a:	7afb      	ldrb	r3, [r7, #11]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80086b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da0f      	bge.n	80086d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	f003 0207 	and.w	r2, r3, #7
 80086be:	4613      	mov	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	3310      	adds	r3, #16
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	4413      	add	r3, r2
 80086cc:	3304      	adds	r3, #4
 80086ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	705a      	strb	r2, [r3, #1]
 80086d6:	e00f      	b.n	80086f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	f003 0207 	and.w	r2, r3, #7
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	4413      	add	r3, r2
 80086ee:	3304      	adds	r3, #4
 80086f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	f003 0307 	and.w	r3, r3, #7
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <HAL_PCD_EP_Close+0x6e>
 800870e:	2302      	movs	r3, #2
 8008710:	e00e      	b.n	8008730 <HAL_PCD_EP_Close+0x8c>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	4618      	mov	r0, r3
 8008722:	f006 fbe5 	bl	800eef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	460b      	mov	r3, r1
 8008746:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	f003 0207 	and.w	r2, r3, #7
 800874e:	4613      	mov	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	3304      	adds	r3, #4
 8008760:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2200      	movs	r2, #0
 8008778:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	b2da      	uxtb	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6979      	ldr	r1, [r7, #20]
 800878c:	4618      	mov	r0, r3
 800878e:	f006 fd39 	bl	800f204 <USB_EPStartXfer>

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	f003 0207 	and.w	r2, r3, #7
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	440b      	add	r3, r1
 80087ba:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80087be:	681b      	ldr	r3, [r3, #0]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	460b      	mov	r3, r1
 80087da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	f003 0207 	and.w	r2, r3, #7
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	00db      	lsls	r3, r3, #3
 80087ea:	3310      	adds	r3, #16
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	3304      	adds	r3, #4
 80087f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2201      	movs	r2, #1
 8008818:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800881a:	7afb      	ldrb	r3, [r7, #11]
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	b2da      	uxtb	r2, r3
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6979      	ldr	r1, [r7, #20]
 800882c:	4618      	mov	r0, r3
 800882e:	f006 fce9 	bl	800f204 <USB_EPStartXfer>

  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	7912      	ldrb	r2, [r2, #4]
 8008852:	4293      	cmp	r3, r2
 8008854:	d901      	bls.n	800885a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e040      	b.n	80088dc <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800885a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800885e:	2b00      	cmp	r3, #0
 8008860:	da0f      	bge.n	8008882 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	f003 0207 	and.w	r2, r3, #7
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	3310      	adds	r3, #16
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	3304      	adds	r3, #4
 8008878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	705a      	strb	r2, [r3, #1]
 8008880:	e00d      	b.n	800889e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	3304      	adds	r3, #4
 8008896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_PCD_EP_SetStall+0x82>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e00e      	b.n	80088dc <HAL_PCD_EP_SetStall+0xa0>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68f9      	ldr	r1, [r7, #12]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f007 fd03 	bl	80102d8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	7912      	ldrb	r2, [r2, #4]
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d901      	bls.n	8008902 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e042      	b.n	8008988 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008906:	2b00      	cmp	r3, #0
 8008908:	da0f      	bge.n	800892a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	f003 0207 	and.w	r2, r3, #7
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	3310      	adds	r3, #16
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	3304      	adds	r3, #4
 8008920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	705a      	strb	r2, [r3, #1]
 8008928:	e00f      	b.n	800894a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	f003 0207 	and.w	r2, r3, #7
 8008930:	4613      	mov	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	4413      	add	r3, r2
 8008940:	3304      	adds	r3, #4
 8008942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	b2da      	uxtb	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_PCD_EP_ClrStall+0x86>
 8008966:	2302      	movs	r3, #2
 8008968:	e00e      	b.n	8008988 <HAL_PCD_EP_ClrStall+0xa4>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	4618      	mov	r0, r3
 800897a:	f007 fcf3 	bl	8010364 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08e      	sub	sp, #56	@ 0x38
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008998:	e326      	b.n	8008fe8 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a0:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80089a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80089ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f040 8124 	bne.w	8008c00 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80089b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d13e      	bne.n	8008a40 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	4b89      	ldr	r3, [pc, #548]	@ (8008bf0 <PCD_EP_ISR_Handler+0x260>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	60bb      	str	r3, [r7, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089d8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3314      	adds	r3, #20
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80089e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	0c1b      	lsrs	r3, r3, #16
 80089f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80089f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80089fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fc:	695a      	ldr	r2, [r3, #20]
 80089fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	441a      	add	r2, r3
 8008a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a06:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008a08:	2100      	movs	r1, #0
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f00b fbbb 	bl	8014186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	7c5b      	ldrb	r3, [r3, #17]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 82e6 	beq.w	8008fe8 <PCD_EP_ISR_Handler+0x658>
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f040 82e1 	bne.w	8008fe8 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7c5b      	ldrb	r3, [r3, #17]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	745a      	strb	r2, [r3, #17]
 8008a3e:	e2d3      	b.n	8008fe8 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a46:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008a50:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d027      	beq.n	8008aaa <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	4610      	mov	r0, r2
 8008a66:	f7ff fb6f 	bl	8008148 <PCD_GET_EP_RX_CNT>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a70:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f007 fd83 	bl	8010590 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b58      	ldr	r3, [pc, #352]	@ (8008bf4 <PCD_EP_ISR_Handler+0x264>)
 8008a92:	4013      	ands	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008aa0:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f00b fb42 	bl	801412c <HAL_PCD_SetupStageCallback>
 8008aa8:	e29e      	b.n	8008fe8 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8008aaa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f280 829a 	bge.w	8008fe8 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	4b4e      	ldr	r3, [pc, #312]	@ (8008bf4 <PCD_EP_ISR_Handler+0x264>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ac6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008aca:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	f7ff fb36 	bl	8008148 <PCD_GET_EP_RX_CNT>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d019      	beq.n	8008b20 <PCD_EP_ISR_Handler+0x190>
 8008aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d015      	beq.n	8008b20 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afa:	6959      	ldr	r1, [r3, #20]
 8008afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	f007 fd43 	bl	8010590 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	695a      	ldr	r2, [r3, #20]
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	441a      	add	r2, r3
 8008b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008b18:	2100      	movs	r1, #0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f00b fb18 	bl	8014150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008b28:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f040 825a 	bne.w	8008fe8 <PCD_EP_ISR_Handler+0x658>
 8008b34:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008b36:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008b3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b3e:	f000 8253 	beq.w	8008fe8 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008b42:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf8 <PCD_EP_ISR_Handler+0x268>)
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	4a2c      	ldr	r2, [pc, #176]	@ (8008bf8 <PCD_EP_ISR_Handler+0x268>)
 8008b48:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8008b4c:	6053      	str	r3, [r2, #4]
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <PCD_EP_ISR_Handler+0x1d4>
 8008b56:	4b28      	ldr	r3, [pc, #160]	@ (8008bf8 <PCD_EP_ISR_Handler+0x268>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	4a27      	ldr	r2, [pc, #156]	@ (8008bf8 <PCD_EP_ISR_Handler+0x268>)
 8008b5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b60:	6053      	str	r3, [r2, #4]
 8008b62:	e02e      	b.n	8008bc2 <PCD_EP_ISR_Handler+0x232>
 8008b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b6a:	d814      	bhi.n	8008b96 <PCD_EP_ISR_Handler+0x206>
 8008b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	085b      	lsrs	r3, r3, #1
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <PCD_EP_ISR_Handler+0x1f6>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3301      	adds	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf8 <PCD_EP_ISR_Handler+0x268>)
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	069b      	lsls	r3, r3, #26
 8008b8e:	491a      	ldr	r1, [pc, #104]	@ (8008bf8 <PCD_EP_ISR_Handler+0x268>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	604b      	str	r3, [r1, #4]
 8008b94:	e015      	b.n	8008bc2 <PCD_EP_ISR_Handler+0x232>
 8008b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d102      	bne.n	8008bb0 <PCD_EP_ISR_Handler+0x220>
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	4b11      	ldr	r3, [pc, #68]	@ (8008bf8 <PCD_EP_ISR_Handler+0x268>)
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	069b      	lsls	r3, r3, #26
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf8 <PCD_EP_ISR_Handler+0x268>)
 8008bbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bc0:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008bfc <PCD_EP_ISR_Handler+0x26c>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	613b      	str	r3, [r7, #16]
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	e1fb      	b.n	8008fe8 <PCD_EP_ISR_Handler+0x658>
 8008bf0:	07ff8f0f 	.word	0x07ff8f0f
 8008bf4:	07ff0f8f 	.word	0x07ff0f8f
 8008bf8:	40016400 	.word	0x40016400
 8008bfc:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8008c12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f280 80bd 	bge.w	8008d96 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	4b9e      	ldr	r3, [pc, #632]	@ (8008ea8 <PCD_EP_ISR_Handler+0x518>)
 8008c2e:	4013      	ands	r3, r2
 8008c30:	61fb      	str	r3, [r7, #28]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008c46:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008c48:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c62:	7b1b      	ldrb	r3, [r3, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d116      	bne.n	8008c96 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	4619      	mov	r1, r3
 8008c72:	4610      	mov	r0, r2
 8008c74:	f7ff fa68 	bl	8008148 <PCD_GET_EP_RX_CNT>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8008c7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d067      	beq.n	8008d52 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c88:	6959      	ldr	r1, [r3, #20]
 8008c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8c:	88da      	ldrh	r2, [r3, #6]
 8008c8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c90:	f007 fc7e 	bl	8010590 <USB_ReadPMA>
 8008c94:	e05d      	b.n	8008d52 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c98:	78db      	ldrb	r3, [r3, #3]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d108      	bne.n	8008cb0 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008c9e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f9ad 	bl	8009004 <HAL_PCD_EP_DB_Receive>
 8008caa:	4603      	mov	r3, r0
 8008cac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008cae:	e050      	b.n	8008d52 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	4b7a      	ldr	r3, [pc, #488]	@ (8008eac <PCD_EP_ISR_Handler+0x51c>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	441a      	add	r2, r3
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cde:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d016      	beq.n	8008d26 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7ff fa41 	bl	800818a <PCD_GET_EP_DBUF0_CNT>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8008d0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01f      	beq.n	8008d52 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d18:	6959      	ldr	r1, [r3, #20]
 8008d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1c:	891a      	ldrh	r2, [r3, #8]
 8008d1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d20:	f007 fc36 	bl	8010590 <USB_ReadPMA>
 8008d24:	e015      	b.n	8008d52 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	f7ff fa4b 	bl	80081cc <PCD_GET_EP_DBUF1_CNT>
 8008d36:	4603      	mov	r3, r0
 8008d38:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8008d3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d008      	beq.n	8008d52 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6818      	ldr	r0, [r3, #0]
 8008d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d46:	6959      	ldr	r1, [r3, #20]
 8008d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d4a:	895a      	ldrh	r2, [r3, #10]
 8008d4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d4e:	f007 fc1f 	bl	8010590 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d54:	69da      	ldr	r2, [r3, #28]
 8008d56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d58:	441a      	add	r2, r3
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d60:	695a      	ldr	r2, [r3, #20]
 8008d62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d64:	441a      	add	r2, r3
 8008d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d68:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d004      	beq.n	8008d7c <PCD_EP_ISR_Handler+0x3ec>
 8008d72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d206      	bcs.n	8008d8a <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f00b f9e4 	bl	8014150 <HAL_PCD_DataOutStageCallback>
 8008d88:	e005      	b.n	8008d96 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008d90:	4618      	mov	r0, r3
 8008d92:	f006 fa37 	bl	800f204 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8008d96:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8123 	beq.w	8008fe8 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8008da2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	3310      	adds	r3, #16
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	4413      	add	r3, r2
 8008db4:	3304      	adds	r3, #4
 8008db6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b39      	ldr	r3, [pc, #228]	@ (8008eb0 <PCD_EP_ISR_Handler+0x520>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008de2:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	78db      	ldrb	r3, [r3, #3]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	f040 80b8 	bne.w	8008f5e <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8008dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df0:	2200      	movs	r2, #0
 8008df2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df6:	7b1b      	ldrb	r3, [r3, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 80a9 	beq.w	8008f50 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008dfe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d055      	beq.n	8008eb4 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0a:	785b      	ldrb	r3, [r3, #1]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d124      	bne.n	8008e5a <PCD_EP_ISR_Handler+0x4ca>
 8008e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008e2e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008e52:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	e07a      	b.n	8008f50 <PCD_EP_ISR_Handler+0x5c0>
 8008e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d176      	bne.n	8008f50 <PCD_EP_ISR_Handler+0x5c0>
 8008e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008e80:	b292      	uxth	r2, r2
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	00db      	lsls	r3, r3, #3
 8008e8a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008e8e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8008e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008ea0:	6812      	ldr	r2, [r2, #0]
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e054      	b.n	8008f50 <PCD_EP_ISR_Handler+0x5c0>
 8008ea6:	bf00      	nop
 8008ea8:	07ff0f8f 	.word	0x07ff0f8f
 8008eac:	07ff8f8f 	.word	0x07ff8f8f
 8008eb0:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d124      	bne.n	8008f06 <PCD_EP_ISR_Handler+0x576>
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ec6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ed6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008eda:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008ede:	605a      	str	r2, [r3, #4]
 8008ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008eea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008efa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008efe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	e024      	b.n	8008f50 <PCD_EP_ISR_Handler+0x5c0>
 8008f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f08:	785b      	ldrb	r3, [r3, #1]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d120      	bne.n	8008f50 <PCD_EP_ISR_Handler+0x5c0>
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f2c:	b292      	uxth	r2, r2
 8008f2e:	605a      	str	r2, [r3, #4]
 8008f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008f3a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f4c:	6852      	ldr	r2, [r2, #4]
 8008f4e:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f00b f915 	bl	8014186 <HAL_PCD_DataInStageCallback>
 8008f5c:	e044      	b.n	8008fe8 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008f5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d139      	bne.n	8008fdc <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	0c1b      	lsrs	r3, r3, #16
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f80:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8008f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f84:	699a      	ldr	r2, [r3, #24]
 8008f86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d906      	bls.n	8008f9a <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f8e:	699a      	ldr	r2, [r3, #24]
 8008f90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f92:	1ad2      	subs	r2, r2, r3
 8008f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f96:	619a      	str	r2, [r3, #24]
 8008f98:	e002      	b.n	8008fa0 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8008f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f00b f8e9 	bl	8014186 <HAL_PCD_DataInStageCallback>
 8008fb4:	e018      	b.n	8008fe8 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008fbc:	441a      	add	r2, r3
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc4:	69da      	ldr	r2, [r3, #28]
 8008fc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008fc8:	441a      	add	r2, r3
 8008fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fcc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f006 f915 	bl	800f204 <USB_EPStartXfer>
 8008fda:	e005      	b.n	8008fe8 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008fdc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008fde:	461a      	mov	r2, r3
 8008fe0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f8e8 	bl	80091b8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f47f acd1 	bne.w	800899a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3738      	adds	r7, #56	@ 0x38
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop

08009004 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	@ 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d062      	beq.n	80090e2 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7ff f8af 	bl	800818a <PCD_GET_EP_DBUF0_CNT>
 800902c:	4603      	mov	r3, r0
 800902e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	8bfb      	ldrh	r3, [r7, #30]
 8009036:	429a      	cmp	r2, r3
 8009038:	d306      	bcc.n	8009048 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	699a      	ldr	r2, [r3, #24]
 800903e:	8bfb      	ldrh	r3, [r7, #30]
 8009040:	1ad2      	subs	r2, r2, r3
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	619a      	str	r2, [r3, #24]
 8009046:	e002      	b.n	800904e <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2200      	movs	r2, #0
 800904c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d11b      	bne.n	800908e <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	4b52      	ldr	r3, [pc, #328]	@ (80091b0 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8009068:	4013      	ands	r3, r2
 800906a:	61bb      	str	r3, [r7, #24]
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009072:	61bb      	str	r3, [r7, #24]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	441a      	add	r2, r3
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800908c:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800908e:	88fb      	ldrh	r3, [r7, #6]
 8009090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009094:	2b00      	cmp	r3, #0
 8009096:	d017      	beq.n	80090c8 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	4b42      	ldr	r3, [pc, #264]	@ (80091b4 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80090aa:	4013      	ands	r3, r2
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	441a      	add	r2, r3
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090c6:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80090c8:	8bfb      	ldrh	r3, [r7, #30]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d06b      	beq.n	80091a6 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	6959      	ldr	r1, [r3, #20]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	891a      	ldrh	r2, [r3, #8]
 80090da:	8bfb      	ldrh	r3, [r7, #30]
 80090dc:	f007 fa58 	bl	8010590 <USB_ReadPMA>
 80090e0:	e061      	b.n	80091a6 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	4610      	mov	r0, r2
 80090ee:	f7ff f86d 	bl	80081cc <PCD_GET_EP_DBUF1_CNT>
 80090f2:	4603      	mov	r3, r0
 80090f4:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	8bfb      	ldrh	r3, [r7, #30]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d306      	bcc.n	800910e <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	699a      	ldr	r2, [r3, #24]
 8009104:	8bfb      	ldrh	r3, [r7, #30]
 8009106:	1ad2      	subs	r2, r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	619a      	str	r2, [r3, #24]
 800910c:	e002      	b.n	8009114 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2200      	movs	r2, #0
 8009112:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11b      	bne.n	8009154 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	461a      	mov	r2, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	4b20      	ldr	r3, [pc, #128]	@ (80091b0 <HAL_PCD_EP_DB_Receive+0x1ac>)
 800912e:	4013      	ands	r3, r2
 8009130:	627b      	str	r3, [r7, #36]	@ 0x24
 8009132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009134:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	441a      	add	r2, r3
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800914e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009152:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d117      	bne.n	800918e <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b11      	ldr	r3, [pc, #68]	@ (80091b4 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8009170:	4013      	ands	r3, r2
 8009172:	623b      	str	r3, [r7, #32]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	441a      	add	r2, r3
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009188:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800918c:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800918e:	8bfb      	ldrh	r3, [r7, #30]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d008      	beq.n	80091a6 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6959      	ldr	r1, [r3, #20]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	895a      	ldrh	r2, [r3, #10]
 80091a0:	8bfb      	ldrh	r3, [r7, #30]
 80091a2:	f007 f9f5 	bl	8010590 <USB_ReadPMA>
    }
  }

  return count;
 80091a6:	8bfb      	ldrh	r3, [r7, #30]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3728      	adds	r7, #40	@ 0x28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	07ffbf8f 	.word	0x07ffbf8f
 80091b4:	07ff8f8f 	.word	0x07ff8f8f

080091b8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08e      	sub	sp, #56	@ 0x38
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80091c6:	88fb      	ldrh	r3, [r7, #6]
 80091c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 81d5 	beq.w	800957c <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f7fe ffd4 	bl	800818a <PCD_GET_EP_DBUF0_CNT>
 80091e2:	4603      	mov	r3, r0
 80091e4:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	8bfb      	ldrh	r3, [r7, #30]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d906      	bls.n	80091fe <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	699a      	ldr	r2, [r3, #24]
 80091f4:	8bfb      	ldrh	r3, [r7, #30]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	619a      	str	r2, [r3, #24]
 80091fc:	e002      	b.n	8009204 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2200      	movs	r2, #0
 8009202:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f040 80c1 	bne.w	8009390 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	785b      	ldrb	r3, [r3, #1]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d124      	bne.n	8009260 <HAL_PCD_EP_DB_Transmit+0xa8>
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009220:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009230:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009234:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009244:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009254:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009258:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e024      	b.n	80092aa <HAL_PCD_EP_DB_Transmit+0xf2>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d120      	bne.n	80092aa <HAL_PCD_EP_DB_Transmit+0xf2>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009272:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	00db      	lsls	r3, r3, #3
 800927e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009282:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009286:	b292      	uxth	r2, r2
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8009294:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092a6:	6812      	ldr	r2, [r2, #0]
 80092a8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d124      	bne.n	80092fc <HAL_PCD_EP_DB_Transmit+0x144>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092d0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80092d4:	605a      	str	r2, [r3, #4]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80092f8:	605a      	str	r2, [r3, #4]
 80092fa:	e024      	b.n	8009346 <HAL_PCD_EP_DB_Transmit+0x18e>
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d120      	bne.n	8009346 <HAL_PCD_EP_DB_Transmit+0x18e>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800930e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800931e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009322:	b292      	uxth	r2, r2
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8009330:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	00db      	lsls	r3, r3, #3
 800933a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800933e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009342:	6852      	ldr	r2, [r2, #4]
 8009344:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	4619      	mov	r1, r3
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f00a ff1a 	bl	8014186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009352:	88fb      	ldrh	r3, [r7, #6]
 8009354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 82e5 	beq.w	8009928 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4b8e      	ldr	r3, [pc, #568]	@ (80095a8 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8009370:	4013      	ands	r3, r2
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	441a      	add	r2, r3
 8009382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009384:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	e2cb      	b.n	8009928 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d017      	beq.n	80093ca <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b7f      	ldr	r3, [pc, #508]	@ (80095a8 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	441a      	add	r2, r3
 80093be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093c8:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	f040 82a9 	bne.w	8009928 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	695a      	ldr	r2, [r3, #20]
 80093da:	8bfb      	ldrh	r3, [r7, #30]
 80093dc:	441a      	add	r2, r3
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	69da      	ldr	r2, [r3, #28]
 80093e6:	8bfb      	ldrh	r3, [r7, #30]
 80093e8:	441a      	add	r2, r3
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	6a1a      	ldr	r2, [r3, #32]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d309      	bcc.n	800940e <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6a1a      	ldr	r2, [r3, #32]
 8009404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	621a      	str	r2, [r3, #32]
 800940c:	e014      	b.n	8009438 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d106      	bne.n	8009424 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8009416:	8bfb      	ldrh	r3, [r7, #30]
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009422:	e009      	b.n	8009438 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2200      	movs	r2, #0
 8009436:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	785b      	ldrb	r3, [r3, #1]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d16a      	bne.n	8009516 <HAL_PCD_EP_DB_Transmit+0x35e>
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800944a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	00db      	lsls	r3, r3, #3
 8009456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800945a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800945e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009466:	2b00      	cmp	r3, #0
 8009468:	d112      	bne.n	8009490 <HAL_PCD_EP_DB_Transmit+0x2d8>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009474:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009484:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009488:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e06a      	b.n	8009566 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8009490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009492:	2b3e      	cmp	r3, #62	@ 0x3e
 8009494:	d81e      	bhi.n	80094d4 <HAL_PCD_EP_DB_Transmit+0x31c>
 8009496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009498:	085b      	lsrs	r3, r3, #1
 800949a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <HAL_PCD_EP_DB_Transmit+0x2f4>
 80094a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a8:	3301      	adds	r3, #1
 80094aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	00db      	lsls	r3, r3, #3
 80094b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80094ba:	6819      	ldr	r1, [r3, #0]
 80094bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094be:	069a      	lsls	r2, r3, #26
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	00db      	lsls	r3, r3, #3
 80094c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80094ce:	430a      	orrs	r2, r1
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	e048      	b.n	8009566 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	095b      	lsrs	r3, r3, #5
 80094d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	f003 031f 	and.w	r3, r3, #31
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d102      	bne.n	80094ea <HAL_PCD_EP_DB_Transmit+0x332>
 80094e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e6:	3b01      	subs	r3, #1
 80094e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	00db      	lsls	r3, r3, #3
 80094f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fc:	069b      	lsls	r3, r3, #26
 80094fe:	431a      	orrs	r2, r3
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800950a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800950e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	e027      	b.n	8009566 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d123      	bne.n	8009566 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009528:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009538:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800953c:	b292      	uxth	r2, r2
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800954a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800954e:	6819      	ldr	r1, [r3, #0]
 8009550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009552:	041a      	lsls	r2, r3, #16
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800955e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009562:	430a      	orrs	r2, r1
 8009564:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	6959      	ldr	r1, [r3, #20]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	891a      	ldrh	r2, [r3, #8]
 8009572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009574:	b29b      	uxth	r3, r3
 8009576:	f006 ffaa 	bl	80104ce <USB_WritePMA>
 800957a:	e1d5      	b.n	8009928 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	4619      	mov	r1, r3
 8009586:	4610      	mov	r0, r2
 8009588:	f7fe fe20 	bl	80081cc <PCD_GET_EP_DBUF1_CNT>
 800958c:	4603      	mov	r3, r0
 800958e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	8bfb      	ldrh	r3, [r7, #30]
 8009596:	429a      	cmp	r2, r3
 8009598:	d308      	bcc.n	80095ac <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	699a      	ldr	r2, [r3, #24]
 800959e:	8bfb      	ldrh	r3, [r7, #30]
 80095a0:	1ad2      	subs	r2, r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	619a      	str	r2, [r3, #24]
 80095a6:	e004      	b.n	80095b2 <HAL_PCD_EP_DB_Transmit+0x3fa>
 80095a8:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f040 80c1 	bne.w	800973e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d124      	bne.n	800960e <HAL_PCD_EP_DB_Transmit+0x456>
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80095ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80095de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80095e2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80095f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009602:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009606:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e024      	b.n	8009658 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	785b      	ldrb	r3, [r3, #1]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d120      	bne.n	8009658 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009620:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009630:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009634:	b292      	uxth	r2, r2
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8009642:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009650:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009654:	6812      	ldr	r2, [r2, #0]
 8009656:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d124      	bne.n	80096aa <HAL_PCD_EP_DB_Transmit+0x4f2>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800966a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800967a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800967e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8009682:	605a      	str	r2, [r3, #4]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800968e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800969e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80096a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80096a6:	605a      	str	r2, [r3, #4]
 80096a8:	e024      	b.n	80096f4 <HAL_PCD_EP_DB_Transmit+0x53c>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d120      	bne.n	80096f4 <HAL_PCD_EP_DB_Transmit+0x53c>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80096bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80096cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80096d0:	b292      	uxth	r2, r2
 80096d2:	605a      	str	r2, [r3, #4]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80096de:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80096ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80096f0:	6852      	ldr	r2, [r2, #4]
 80096f2:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	4619      	mov	r1, r3
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f00a fd43 	bl	8014186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009706:	2b00      	cmp	r3, #0
 8009708:	f040 810e 	bne.w	8009928 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	461a      	mov	r2, r3
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	4b95      	ldr	r3, [pc, #596]	@ (8009974 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800971e:	4013      	ands	r3, r2
 8009720:	623b      	str	r3, [r7, #32]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	441a      	add	r2, r3
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	e0f4      	b.n	8009928 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800973e:	88fb      	ldrh	r3, [r7, #6]
 8009740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d117      	bne.n	8009778 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	4b86      	ldr	r3, [pc, #536]	@ (8009974 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800975a:	4013      	ands	r3, r2
 800975c:	617b      	str	r3, [r7, #20]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	441a      	add	r2, r3
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009776:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800977e:	2b01      	cmp	r3, #1
 8009780:	f040 80d2 	bne.w	8009928 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	695a      	ldr	r2, [r3, #20]
 8009788:	8bfb      	ldrh	r3, [r7, #30]
 800978a:	441a      	add	r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	69da      	ldr	r2, [r3, #28]
 8009794:	8bfb      	ldrh	r3, [r7, #30]
 8009796:	441a      	add	r2, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	6a1a      	ldr	r2, [r3, #32]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d309      	bcc.n	80097bc <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6a1a      	ldr	r2, [r3, #32]
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	1ad2      	subs	r2, r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	621a      	str	r2, [r3, #32]
 80097ba:	e014      	b.n	80097e6 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d106      	bne.n	80097d2 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80097c4:	8bfb      	ldrh	r3, [r7, #30]
 80097c6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80097d0:	e009      	b.n	80097e6 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2200      	movs	r2, #0
 80097dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d16a      	bne.n	80098c4 <HAL_PCD_EP_DB_Transmit+0x70c>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80097f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009808:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800980c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8009810:	605a      	str	r2, [r3, #4]
 8009812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d112      	bne.n	800983e <HAL_PCD_EP_DB_Transmit+0x686>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009822:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009832:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009836:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800983a:	605a      	str	r2, [r3, #4]
 800983c:	e06a      	b.n	8009914 <HAL_PCD_EP_DB_Transmit+0x75c>
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	2b3e      	cmp	r3, #62	@ 0x3e
 8009842:	d81e      	bhi.n	8009882 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <HAL_PCD_EP_DB_Transmit+0x6a2>
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	3301      	adds	r3, #1
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009864:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009868:	6859      	ldr	r1, [r3, #4]
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	069a      	lsls	r2, r3, #26
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009878:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800987c:	430a      	orrs	r2, r1
 800987e:	605a      	str	r2, [r3, #4]
 8009880:	e048      	b.n	8009914 <HAL_PCD_EP_DB_Transmit+0x75c>
 8009882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009884:	095b      	lsrs	r3, r3, #5
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988a:	f003 031f 	and.w	r3, r3, #31
 800988e:	2b00      	cmp	r3, #0
 8009890:	d102      	bne.n	8009898 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	3b01      	subs	r3, #1
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	069b      	lsls	r3, r3, #26
 80098ac:	431a      	orrs	r2, r3
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80098bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	e027      	b.n	8009914 <HAL_PCD_EP_DB_Transmit+0x75c>
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	785b      	ldrb	r3, [r3, #1]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d123      	bne.n	8009914 <HAL_PCD_EP_DB_Transmit+0x75c>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80098ea:	b292      	uxth	r2, r2
 80098ec:	605a      	str	r2, [r3, #4]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80098fc:	6859      	ldr	r1, [r3, #4]
 80098fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009900:	041a      	lsls	r2, r3, #16
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800990c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009910:	430a      	orrs	r2, r1
 8009912:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6818      	ldr	r0, [r3, #0]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	6959      	ldr	r1, [r3, #20]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	895a      	ldrh	r2, [r3, #10]
 8009920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009922:	b29b      	uxth	r3, r3
 8009924:	f006 fdd3 	bl	80104ce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	461a      	mov	r2, r3
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4b0f      	ldr	r3, [pc, #60]	@ (8009978 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 800993a:	4013      	ands	r3, r2
 800993c:	633b      	str	r3, [r7, #48]	@ 0x30
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	f083 0310 	eor.w	r3, r3, #16
 8009944:	633b      	str	r3, [r7, #48]	@ 0x30
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	f083 0320 	eor.w	r3, r3, #32
 800994c:	633b      	str	r3, [r7, #48]	@ 0x30
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	441a      	add	r2, r3
 800995c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009966:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3738      	adds	r7, #56	@ 0x38
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	07ff8f8f 	.word	0x07ff8f8f
 8009978:	07ff8fbf 	.word	0x07ff8fbf

0800997c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	607b      	str	r3, [r7, #4]
 8009986:	460b      	mov	r3, r1
 8009988:	817b      	strh	r3, [r7, #10]
 800998a:	4613      	mov	r3, r2
 800998c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800998e:	897b      	ldrh	r3, [r7, #10]
 8009990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00c      	beq.n	80099b4 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800999a:	897b      	ldrh	r3, [r7, #10]
 800999c:	f003 0207 	and.w	r2, r3, #7
 80099a0:	4613      	mov	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	00db      	lsls	r3, r3, #3
 80099a8:	3310      	adds	r3, #16
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	4413      	add	r3, r2
 80099ae:	3304      	adds	r3, #4
 80099b0:	617b      	str	r3, [r7, #20]
 80099b2:	e00a      	b.n	80099ca <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80099b4:	897a      	ldrh	r2, [r7, #10]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	00db      	lsls	r3, r3, #3
 80099be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	4413      	add	r3, r2
 80099c6:	3304      	adds	r3, #4
 80099c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80099ca:	893b      	ldrh	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d107      	bne.n	80099e0 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	2200      	movs	r2, #0
 80099d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	b29a      	uxth	r2, r3
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	80da      	strh	r2, [r3, #6]
 80099de:	e00b      	b.n	80099f8 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2201      	movs	r2, #1
 80099e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	0c1b      	lsrs	r3, r3, #16
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	371c      	adds	r7, #28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a28:	f043 0201 	orr.w	r2, r3, #1
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a34:	f043 0202 	orr.w	r2, r3, #2
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009a56:	bf00      	nop
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
	...

08009a64 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8009a68:	4b05      	ldr	r3, [pc, #20]	@ (8009a80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a6c:	4a04      	ldr	r2, [pc, #16]	@ (8009a80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009a6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009a72:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8009a74:	bf00      	nop
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	44020800 	.word	0x44020800

08009a84 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a88:	b0d8      	sub	sp, #352	@ 0x160
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a96:	2300      	movs	r3, #0
 8009a98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8009aa8:	2500      	movs	r5, #0
 8009aaa:	ea54 0305 	orrs.w	r3, r4, r5
 8009aae:	d00b      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8009ab0:	4bcd      	ldr	r3, [pc, #820]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009ab2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ab6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8009aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac0:	4ac9      	ldr	r2, [pc, #804]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f002 0801 	and.w	r8, r2, #1
 8009ad4:	f04f 0900 	mov.w	r9, #0
 8009ad8:	ea58 0309 	orrs.w	r3, r8, r9
 8009adc:	d042      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8009ade:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d823      	bhi.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8009ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b39 	.word	0x08009b39
 8009af4:	08009b09 	.word	0x08009b09
 8009af8:	08009b1d 	.word	0x08009b1d
 8009afc:	08009b39 	.word	0x08009b39
 8009b00:	08009b39 	.word	0x08009b39
 8009b04:	08009b39 	.word	0x08009b39
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f001 ff42 	bl	800b998 <RCCEx_PLL2_Config>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8009b1a:	e00e      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009b20:	3330      	adds	r3, #48	@ 0x30
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 ffd0 	bl	800bac8 <RCCEx_PLL3_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8009b2e:	e004      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009b36:	e000      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8009b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10c      	bne.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009b42:	4ba9      	ldr	r3, [pc, #676]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009b48:	f023 0107 	bic.w	r1, r3, #7
 8009b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b52:	4aa5      	ldr	r2, [pc, #660]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009b54:	430b      	orrs	r3, r1
 8009b56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009b5a:	e003      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009b60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f002 0a02 	and.w	sl, r2, #2
 8009b70:	f04f 0b00 	mov.w	fp, #0
 8009b74:	ea5a 030b 	orrs.w	r3, sl, fp
 8009b78:	f000 8088 	beq.w	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8009b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b82:	2b28      	cmp	r3, #40	@ 0x28
 8009b84:	d868      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009b86:	a201      	add	r2, pc, #4	@ (adr r2, 8009b8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009c61 	.word	0x08009c61
 8009b90:	08009c59 	.word	0x08009c59
 8009b94:	08009c59 	.word	0x08009c59
 8009b98:	08009c59 	.word	0x08009c59
 8009b9c:	08009c59 	.word	0x08009c59
 8009ba0:	08009c59 	.word	0x08009c59
 8009ba4:	08009c59 	.word	0x08009c59
 8009ba8:	08009c59 	.word	0x08009c59
 8009bac:	08009c31 	.word	0x08009c31
 8009bb0:	08009c59 	.word	0x08009c59
 8009bb4:	08009c59 	.word	0x08009c59
 8009bb8:	08009c59 	.word	0x08009c59
 8009bbc:	08009c59 	.word	0x08009c59
 8009bc0:	08009c59 	.word	0x08009c59
 8009bc4:	08009c59 	.word	0x08009c59
 8009bc8:	08009c59 	.word	0x08009c59
 8009bcc:	08009c45 	.word	0x08009c45
 8009bd0:	08009c59 	.word	0x08009c59
 8009bd4:	08009c59 	.word	0x08009c59
 8009bd8:	08009c59 	.word	0x08009c59
 8009bdc:	08009c59 	.word	0x08009c59
 8009be0:	08009c59 	.word	0x08009c59
 8009be4:	08009c59 	.word	0x08009c59
 8009be8:	08009c59 	.word	0x08009c59
 8009bec:	08009c61 	.word	0x08009c61
 8009bf0:	08009c59 	.word	0x08009c59
 8009bf4:	08009c59 	.word	0x08009c59
 8009bf8:	08009c59 	.word	0x08009c59
 8009bfc:	08009c59 	.word	0x08009c59
 8009c00:	08009c59 	.word	0x08009c59
 8009c04:	08009c59 	.word	0x08009c59
 8009c08:	08009c59 	.word	0x08009c59
 8009c0c:	08009c61 	.word	0x08009c61
 8009c10:	08009c59 	.word	0x08009c59
 8009c14:	08009c59 	.word	0x08009c59
 8009c18:	08009c59 	.word	0x08009c59
 8009c1c:	08009c59 	.word	0x08009c59
 8009c20:	08009c59 	.word	0x08009c59
 8009c24:	08009c59 	.word	0x08009c59
 8009c28:	08009c59 	.word	0x08009c59
 8009c2c:	08009c61 	.word	0x08009c61
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009c34:	3308      	adds	r3, #8
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 feae 	bl	800b998 <RCCEx_PLL2_Config>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8009c42:	e00e      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009c48:	3330      	adds	r3, #48	@ 0x30
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 ff3c 	bl	800bac8 <RCCEx_PLL3_Config>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8009c56:	e004      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009c5e:	e000      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8009c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10c      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009c70:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009c82:	e003      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009c88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f002 0304 	and.w	r3, r2, #4
 8009c98:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8009ca2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	d04e      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8009cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cb2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009cb6:	d02c      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8009cb8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009cbc:	d825      	bhi.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cc2:	d028      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cc8:	d81f      	bhi.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009cca:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ccc:	d025      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8009cce:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cd0:	d81b      	bhi.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009cd2:	2b80      	cmp	r3, #128	@ 0x80
 8009cd4:	d00f      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8009cd6:	2b80      	cmp	r3, #128	@ 0x80
 8009cd8:	d817      	bhi.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d01f      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8009cde:	2b40      	cmp	r3, #64	@ 0x40
 8009ce0:	d113      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 fe55 	bl	800b998 <RCCEx_PLL2_Config>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8009cf4:	e014      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009cfa:	3330      	adds	r3, #48	@ 0x30
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fee3 	bl	800bac8 <RCCEx_PLL3_Config>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8009d08:	e00a      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009d10:	e006      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8009d12:	bf00      	nop
 8009d14:	e004      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8009d16:	bf00      	nop
 8009d18:	e002      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8009d1a:	bf00      	nop
 8009d1c:	e000      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8009d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10c      	bne.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009d28:	4b2f      	ldr	r3, [pc, #188]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d2e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d38:	4a2b      	ldr	r2, [pc, #172]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009d3a:	430b      	orrs	r3, r1
 8009d3c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009d40:	e003      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009d46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f002 0308 	and.w	r3, r2, #8
 8009d56:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8009d60:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8009d64:	460b      	mov	r3, r1
 8009d66:	4313      	orrs	r3, r2
 8009d68:	d056      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8009d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d70:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009d74:	d031      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x356>
 8009d76:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009d7a:	d82a      	bhi.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d80:	d02d      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8009d82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d86:	d824      	bhi.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009d88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d8c:	d029      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8009d8e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d92:	d81e      	bhi.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d98:	d011      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8009d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d9e:	d818      	bhi.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d023      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009da8:	d113      	bne.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009dae:	3308      	adds	r3, #8
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 fdf1 	bl	800b998 <RCCEx_PLL2_Config>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8009dbc:	e017      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009dc2:	3330      	adds	r3, #48	@ 0x30
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 fe7f 	bl	800bac8 <RCCEx_PLL3_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8009dd0:	e00d      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009dd8:	e009      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8009dda:	bf00      	nop
 8009ddc:	e007      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8009dde:	bf00      	nop
 8009de0:	e005      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8009de2:	bf00      	nop
 8009de4:	e003      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009de6:	bf00      	nop
 8009de8:	44020c00 	.word	0x44020c00
        break;
 8009dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10c      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009df6:	4bbb      	ldr	r3, [pc, #748]	@ (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009dfc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009e00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e06:	4ab7      	ldr	r2, [pc, #732]	@ (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009e0e:	e003      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009e14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f002 0310 	and.w	r3, r2, #16
 8009e24:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8009e2e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8009e32:	460b      	mov	r3, r1
 8009e34:	4313      	orrs	r3, r2
 8009e36:	d053      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8009e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e3e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009e42:	d031      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8009e44:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009e48:	d82a      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e4e:	d02d      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e54:	d824      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009e56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009e5a:	d029      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8009e5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009e60:	d81e      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e66:	d011      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e6c:	d818      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d020      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8009e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e76:	d113      	bne.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 fd8a 	bl	800b998 <RCCEx_PLL2_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8009e8a:	e014      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e90:	3330      	adds	r3, #48	@ 0x30
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 fe18 	bl	800bac8 <RCCEx_PLL3_Config>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8009e9e:	e00a      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009ea6:	e006      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8009ea8:	bf00      	nop
 8009eaa:	e004      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8009eac:	bf00      	nop
 8009eae:	e002      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8009eb0:	bf00      	nop
 8009eb2:	e000      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8009eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10c      	bne.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009ebe:	4b89      	ldr	r3, [pc, #548]	@ (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009ec4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ece:	4a85      	ldr	r2, [pc, #532]	@ (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009ed6:	e003      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009edc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f002 0320 	and.w	r3, r2, #32
 8009eec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8009ef6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8009efa:	460b      	mov	r3, r1
 8009efc:	4313      	orrs	r3, r2
 8009efe:	d053      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8009f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f06:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009f0a:	d031      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8009f0c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009f10:	d82a      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f16:	d02d      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f1c:	d824      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009f1e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009f22:	d029      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8009f24:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009f28:	d81e      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f2e:	d011      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f34:	d818      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d020      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8009f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f3e:	d113      	bne.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009f44:	3308      	adds	r3, #8
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 fd26 	bl	800b998 <RCCEx_PLL2_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8009f52:	e014      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009f58:	3330      	adds	r3, #48	@ 0x30
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 fdb4 	bl	800bac8 <RCCEx_PLL3_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8009f66:	e00a      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009f6e:	e006      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8009f70:	bf00      	nop
 8009f72:	e004      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8009f74:	bf00      	nop
 8009f76:	e002      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8009f78:	bf00      	nop
 8009f7a:	e000      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8009f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10c      	bne.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8009f86:	4b57      	ldr	r3, [pc, #348]	@ (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009f8c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8009f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f96:	4a53      	ldr	r2, [pc, #332]	@ (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009f9e:	e003      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009fa4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009fa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009fb4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8009fbe:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	d053      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8009fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fce:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009fd2:	d031      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009fd4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009fd8:	d82a      	bhi.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fde:	d02d      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8009fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fe4:	d824      	bhi.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009fe6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009fea:	d029      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009fec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009ff0:	d81e      	bhi.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009ff2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009ff6:	d011      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009ff8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009ffc:	d818      	bhi.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d020      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a002:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a006:	d113      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a00c:	3308      	adds	r3, #8
 800a00e:	4618      	mov	r0, r3
 800a010:	f001 fcc2 	bl	800b998 <RCCEx_PLL2_Config>
 800a014:	4603      	mov	r3, r0
 800a016:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800a01a:	e014      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a01c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a020:	3330      	adds	r3, #48	@ 0x30
 800a022:	4618      	mov	r0, r3
 800a024:	f001 fd50 	bl	800bac8 <RCCEx_PLL3_Config>
 800a028:	4603      	mov	r3, r0
 800a02a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800a02e:	e00a      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a036:	e006      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a038:	bf00      	nop
 800a03a:	e004      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a03c:	bf00      	nop
 800a03e:	e002      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a040:	bf00      	nop
 800a042:	e000      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a044:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a046:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10c      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800a04e:	4b25      	ldr	r3, [pc, #148]	@ (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a054:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800a058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a05c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a05e:	4a21      	ldr	r2, [pc, #132]	@ (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a060:	430b      	orrs	r3, r1
 800a062:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a066:	e003      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a068:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a06c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a07c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800a080:	2300      	movs	r3, #0
 800a082:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800a086:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800a08a:	460b      	mov	r3, r1
 800a08c:	4313      	orrs	r3, r2
 800a08e:	d055      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800a090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a096:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a09a:	d033      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800a09c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a0a0:	d82c      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a0a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0a6:	d02f      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800a0a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0ac:	d826      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a0ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0b2:	d02b      	beq.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x688>
 800a0b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0b8:	d820      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a0ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0be:	d013      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a0c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0c4:	d81a      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d022      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800a0ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0ce:	d115      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a0d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 fc5e 	bl	800b998 <RCCEx_PLL2_Config>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800a0e2:	e016      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800a0e4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a0e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0ec:	3330      	adds	r3, #48	@ 0x30
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 fcea 	bl	800bac8 <RCCEx_PLL3_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800a0fa:	e00a      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a102:	e006      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a104:	bf00      	nop
 800a106:	e004      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a108:	bf00      	nop
 800a10a:	e002      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a10c:	bf00      	nop
 800a10e:	e000      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a112:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10c      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800a11a:	4bbb      	ldr	r3, [pc, #748]	@ (800a408 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a11c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a120:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a12a:	4ab7      	ldr	r2, [pc, #732]	@ (800a408 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a12c:	430b      	orrs	r3, r1
 800a12e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a132:	e003      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a134:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a138:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800a13c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800a148:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800a14c:	2300      	movs	r3, #0
 800a14e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800a152:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800a156:	460b      	mov	r3, r1
 800a158:	4313      	orrs	r3, r2
 800a15a:	d053      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800a15c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a162:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a166:	d031      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x748>
 800a168:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a16c:	d82a      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a16e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a172:	d02d      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800a174:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a178:	d824      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a17a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a17e:	d029      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800a180:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a184:	d81e      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a18a:	d011      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800a18c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a190:	d818      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d020      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800a196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a19a:	d113      	bne.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a19c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 fbf8 	bl	800b998 <RCCEx_PLL2_Config>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800a1ae:	e014      	b.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a1b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a1b4:	3330      	adds	r3, #48	@ 0x30
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f001 fc86 	bl	800bac8 <RCCEx_PLL3_Config>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800a1c2:	e00a      	b.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a1ca:	e006      	b.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a1cc:	bf00      	nop
 800a1ce:	e004      	b.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a1d0:	bf00      	nop
 800a1d2:	e002      	b.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a1d4:	bf00      	nop
 800a1d6:	e000      	b.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a1d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10c      	bne.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800a1e2:	4b89      	ldr	r3, [pc, #548]	@ (800a408 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a1e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a1e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a1ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a1f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1f2:	4a85      	ldr	r2, [pc, #532]	@ (800a408 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a1fa:	e003      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a200:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800a204:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800a210:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a214:	2300      	movs	r3, #0
 800a216:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a21a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a21e:	460b      	mov	r3, r1
 800a220:	4313      	orrs	r3, r2
 800a222:	d055      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800a224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a22c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a230:	d031      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800a232:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a236:	d82a      	bhi.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a23c:	d02d      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800a23e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a242:	d824      	bhi.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a244:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a248:	d029      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800a24a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a24e:	d81e      	bhi.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a254:	d011      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800a256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a25a:	d818      	bhi.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d020      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800a260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a264:	d113      	bne.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a266:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a26a:	3308      	adds	r3, #8
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 fb93 	bl	800b998 <RCCEx_PLL2_Config>
 800a272:	4603      	mov	r3, r0
 800a274:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800a278:	e014      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a27a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a27e:	3330      	adds	r3, #48	@ 0x30
 800a280:	4618      	mov	r0, r3
 800a282:	f001 fc21 	bl	800bac8 <RCCEx_PLL3_Config>
 800a286:	4603      	mov	r3, r0
 800a288:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800a28c:	e00a      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a294:	e006      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a296:	bf00      	nop
 800a298:	e004      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a29a:	bf00      	nop
 800a29c:	e002      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a29e:	bf00      	nop
 800a2a0:	e000      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a2a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10d      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800a2ac:	4b56      	ldr	r3, [pc, #344]	@ (800a408 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a2ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a2b2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800a2b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2be:	4a52      	ldr	r2, [pc, #328]	@ (800a408 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a2c6:	e003      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a2cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800a2d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a2dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a2e6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	d044      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800a2f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2f8:	2b05      	cmp	r3, #5
 800a2fa:	d823      	bhi.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800a2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a304 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a302:	bf00      	nop
 800a304:	0800a34d 	.word	0x0800a34d
 800a308:	0800a31d 	.word	0x0800a31d
 800a30c:	0800a331 	.word	0x0800a331
 800a310:	0800a34d 	.word	0x0800a34d
 800a314:	0800a34d 	.word	0x0800a34d
 800a318:	0800a34d 	.word	0x0800a34d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a31c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a320:	3308      	adds	r3, #8
 800a322:	4618      	mov	r0, r3
 800a324:	f001 fb38 	bl	800b998 <RCCEx_PLL2_Config>
 800a328:	4603      	mov	r3, r0
 800a32a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800a32e:	e00e      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a330:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a334:	3330      	adds	r3, #48	@ 0x30
 800a336:	4618      	mov	r0, r3
 800a338:	f001 fbc6 	bl	800bac8 <RCCEx_PLL3_Config>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800a342:	e004      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a34a:	e000      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800a34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a34e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10d      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800a356:	4b2c      	ldr	r3, [pc, #176]	@ (800a408 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a358:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a35c:	f023 0107 	bic.w	r1, r3, #7
 800a360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a368:	4a27      	ldr	r2, [pc, #156]	@ (800a408 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a36a:	430b      	orrs	r3, r1
 800a36c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a370:	e003      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a372:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a376:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800a37a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a386:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a38a:	2300      	movs	r3, #0
 800a38c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a390:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a394:	460b      	mov	r3, r1
 800a396:	4313      	orrs	r3, r2
 800a398:	d04f      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800a39a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3a2:	2b50      	cmp	r3, #80	@ 0x50
 800a3a4:	d029      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a3a6:	2b50      	cmp	r3, #80	@ 0x50
 800a3a8:	d823      	bhi.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a3aa:	2b40      	cmp	r3, #64	@ 0x40
 800a3ac:	d027      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a3ae:	2b40      	cmp	r3, #64	@ 0x40
 800a3b0:	d81f      	bhi.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a3b2:	2b30      	cmp	r3, #48	@ 0x30
 800a3b4:	d025      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a3b6:	2b30      	cmp	r3, #48	@ 0x30
 800a3b8:	d81b      	bhi.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a3ba:	2b20      	cmp	r3, #32
 800a3bc:	d00f      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800a3be:	2b20      	cmp	r3, #32
 800a3c0:	d817      	bhi.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d022      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a3c6:	2b10      	cmp	r3, #16
 800a3c8:	d113      	bne.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f001 fae1 	bl	800b998 <RCCEx_PLL2_Config>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800a3dc:	e017      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a3de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3e2:	3330      	adds	r3, #48	@ 0x30
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 fb6f 	bl	800bac8 <RCCEx_PLL3_Config>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800a3f0:	e00d      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a3f8:	e009      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a3fa:	bf00      	nop
 800a3fc:	e007      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a3fe:	bf00      	nop
 800a400:	e005      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a402:	bf00      	nop
 800a404:	e003      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800a406:	bf00      	nop
 800a408:	44020c00 	.word	0x44020c00
        break;
 800a40c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a40e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10d      	bne.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800a416:	4baf      	ldr	r3, [pc, #700]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a418:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a41c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800a420:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a428:	4aaa      	ldr	r2, [pc, #680]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a42a:	430b      	orrs	r3, r1
 800a42c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a430:	e003      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a432:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a436:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a43a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a446:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a44a:	2300      	movs	r3, #0
 800a44c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a450:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a454:	460b      	mov	r3, r1
 800a456:	4313      	orrs	r3, r2
 800a458:	d055      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800a45a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a462:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a466:	d031      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800a468:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a46c:	d82a      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a46e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a472:	d02d      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800a474:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a478:	d824      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a47a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a47e:	d029      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800a480:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a484:	d81e      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a48a:	d011      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800a48c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a490:	d818      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d020      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800a496:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a49a:	d113      	bne.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a49c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f001 fa78 	bl	800b998 <RCCEx_PLL2_Config>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800a4ae:	e014      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a4b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4b4:	3330      	adds	r3, #48	@ 0x30
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f001 fb06 	bl	800bac8 <RCCEx_PLL3_Config>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800a4c2:	e00a      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a4ca:	e006      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a4cc:	bf00      	nop
 800a4ce:	e004      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a4d0:	bf00      	nop
 800a4d2:	e002      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a4d4:	bf00      	nop
 800a4d6:	e000      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10d      	bne.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a4e2:	4b7c      	ldr	r3, [pc, #496]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a4e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a4ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4f4:	4a77      	ldr	r2, [pc, #476]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a4f6:	430b      	orrs	r3, r1
 800a4f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a4fc:	e003      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a502:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a512:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a516:	2300      	movs	r3, #0
 800a518:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a51c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a520:	460b      	mov	r3, r1
 800a522:	4313      	orrs	r3, r2
 800a524:	d03d      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800a526:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a52e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a532:	d01b      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800a534:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a538:	d814      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800a53a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a53e:	d017      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800a540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a544:	d80e      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800a546:	2b00      	cmp	r3, #0
 800a548:	d014      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800a54a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a54e:	d109      	bne.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a554:	3330      	adds	r3, #48	@ 0x30
 800a556:	4618      	mov	r0, r3
 800a558:	f001 fab6 	bl	800bac8 <RCCEx_PLL3_Config>
 800a55c:	4603      	mov	r3, r0
 800a55e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800a562:	e008      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a56a:	e004      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a56c:	bf00      	nop
 800a56e:	e002      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a570:	bf00      	nop
 800a572:	e000      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a574:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a576:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10d      	bne.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a57e:	4b55      	ldr	r3, [pc, #340]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a580:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a584:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a588:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a590:	4a50      	ldr	r2, [pc, #320]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a592:	430b      	orrs	r3, r1
 800a594:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a598:	e003      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a59e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a5a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a5ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a5b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	d03d      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800a5c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a5ce:	d01b      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800a5d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a5d4:	d814      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800a5d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a5da:	d017      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800a5dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a5e0:	d80e      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d014      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800a5e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5ea:	d109      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5f0:	3330      	adds	r3, #48	@ 0x30
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f001 fa68 	bl	800bac8 <RCCEx_PLL3_Config>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800a5fe:	e008      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a606:	e004      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a608:	bf00      	nop
 800a60a:	e002      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a60c:	bf00      	nop
 800a60e:	e000      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a610:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a612:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10d      	bne.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a61a:	4b2e      	ldr	r3, [pc, #184]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a61c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a620:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800a624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a62c:	4a29      	ldr	r2, [pc, #164]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a62e:	430b      	orrs	r3, r1
 800a630:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a634:	e003      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a636:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a63a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a63e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a64a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a64e:	2300      	movs	r3, #0
 800a650:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a654:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a658:	460b      	mov	r3, r1
 800a65a:	4313      	orrs	r3, r2
 800a65c:	d040      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800a65e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a666:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a66a:	d01b      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800a66c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a670:	d814      	bhi.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800a672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a676:	d017      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a678:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a67c:	d80e      	bhi.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d014      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a686:	d109      	bne.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a68c:	3330      	adds	r3, #48	@ 0x30
 800a68e:	4618      	mov	r0, r3
 800a690:	f001 fa1a 	bl	800bac8 <RCCEx_PLL3_Config>
 800a694:	4603      	mov	r3, r0
 800a696:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800a69a:	e008      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a6a2:	e004      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800a6a4:	bf00      	nop
 800a6a6:	e002      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800a6a8:	bf00      	nop
 800a6aa:	e000      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800a6ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d110      	bne.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800a6b6:	4b07      	ldr	r3, [pc, #28]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a6b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a6bc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a6c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a6c8:	4a02      	ldr	r2, [pc, #8]	@ (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a6d0:	e006      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a6d2:	bf00      	nop
 800a6d4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a6dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a6e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800a6ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a6f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	d03d      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800a700:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a704:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a708:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a70c:	d01b      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800a70e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a712:	d814      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800a714:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a718:	d017      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800a71a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a71e:	d80e      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d014      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800a724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a728:	d109      	bne.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a72a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a72e:	3330      	adds	r3, #48	@ 0x30
 800a730:	4618      	mov	r0, r3
 800a732:	f001 f9c9 	bl	800bac8 <RCCEx_PLL3_Config>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800a73c:	e008      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a744:	e004      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800a746:	bf00      	nop
 800a748:	e002      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800a74a:	bf00      	nop
 800a74c:	e000      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800a74e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a750:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10d      	bne.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800a758:	4bbe      	ldr	r3, [pc, #760]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a75a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a75e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a762:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a76a:	4aba      	ldr	r2, [pc, #744]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a76c:	430b      	orrs	r3, r1
 800a76e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a772:	e003      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a774:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a778:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800a77c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a788:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a78c:	2300      	movs	r3, #0
 800a78e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a792:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a796:	460b      	mov	r3, r1
 800a798:	4313      	orrs	r3, r2
 800a79a:	d035      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800a79c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a7a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7a8:	d015      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800a7aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ae:	d80e      	bhi.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d012      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800a7b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7b8:	d109      	bne.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a7ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7be:	3330      	adds	r3, #48	@ 0x30
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 f981 	bl	800bac8 <RCCEx_PLL3_Config>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800a7cc:	e006      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a7d4:	e002      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800a7d6:	bf00      	nop
 800a7d8:	e000      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800a7da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10d      	bne.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800a7e4:	4b9b      	ldr	r3, [pc, #620]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a7e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a7ea:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800a7ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a7f6:	4a97      	ldr	r2, [pc, #604]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a7f8:	430b      	orrs	r3, r1
 800a7fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a7fe:	e003      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a800:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a804:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a808:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	2100      	movs	r1, #0
 800a812:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800a816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a81a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a81e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a822:	460b      	mov	r3, r1
 800a824:	4313      	orrs	r3, r2
 800a826:	d00e      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800a828:	4b8a      	ldr	r3, [pc, #552]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a82a:	69db      	ldr	r3, [r3, #28]
 800a82c:	4a89      	ldr	r2, [pc, #548]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a82e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a832:	61d3      	str	r3, [r2, #28]
 800a834:	4b87      	ldr	r3, [pc, #540]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a836:	69d9      	ldr	r1, [r3, #28]
 800a838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a83c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a840:	4a84      	ldr	r2, [pc, #528]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a842:	430b      	orrs	r3, r1
 800a844:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a852:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a856:	2300      	movs	r3, #0
 800a858:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a85c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a860:	460b      	mov	r3, r1
 800a862:	4313      	orrs	r3, r2
 800a864:	d055      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800a866:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a86a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a86e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a872:	d031      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800a874:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a878:	d82a      	bhi.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800a87a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a87e:	d02d      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800a880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a884:	d824      	bhi.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800a886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a88a:	d029      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800a88c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a890:	d81e      	bhi.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800a892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a896:	d011      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800a898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a89c:	d818      	bhi.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d020      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800a8a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8a6:	d113      	bne.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a8a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8ac:	3308      	adds	r3, #8
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f001 f872 	bl	800b998 <RCCEx_PLL2_Config>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800a8ba:	e014      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a8bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8c0:	3330      	adds	r3, #48	@ 0x30
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f001 f900 	bl	800bac8 <RCCEx_PLL3_Config>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800a8ce:	e00a      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a8d6:	e006      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800a8d8:	bf00      	nop
 800a8da:	e004      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800a8dc:	bf00      	nop
 800a8de:	e002      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800a8e0:	bf00      	nop
 800a8e2:	e000      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800a8e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10d      	bne.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800a8ee:	4b59      	ldr	r3, [pc, #356]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a8f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a8f4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800a8f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a900:	4a54      	ldr	r2, [pc, #336]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a902:	430b      	orrs	r3, r1
 800a904:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a908:	e003      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a90e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a912:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a91e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a922:	2300      	movs	r3, #0
 800a924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a928:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4313      	orrs	r3, r2
 800a930:	d055      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800a932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a936:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a93a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a93e:	d031      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800a940:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a944:	d82a      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800a946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a94a:	d02d      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800a94c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a950:	d824      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800a952:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a956:	d029      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800a958:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a95c:	d81e      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800a95e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a962:	d011      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800a964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a968:	d818      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d020      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a96e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a972:	d113      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a974:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a978:	3308      	adds	r3, #8
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 f80c 	bl	800b998 <RCCEx_PLL2_Config>
 800a980:	4603      	mov	r3, r0
 800a982:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800a986:	e014      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a98c:	3330      	adds	r3, #48	@ 0x30
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 f89a 	bl	800bac8 <RCCEx_PLL3_Config>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800a99a:	e00a      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a9a2:	e006      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800a9a4:	bf00      	nop
 800a9a6:	e004      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800a9a8:	bf00      	nop
 800a9aa:	e002      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800a9ac:	bf00      	nop
 800a9ae:	e000      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800a9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10d      	bne.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800a9ba:	4b26      	ldr	r3, [pc, #152]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a9bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a9c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a9c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a9cc:	4a21      	ldr	r2, [pc, #132]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a9d4:	e003      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a9da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800a9de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800a9ec:	f003 0320 	and.w	r3, r3, #32
 800a9f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a9f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	d057      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800a9fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aa06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa0a:	d033      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800aa0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa10:	d82c      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800aa12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa16:	d02f      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800aa18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa1c:	d826      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800aa1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa22:	d02b      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800aa24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa28:	d820      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800aa2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa2e:	d013      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800aa30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa34:	d81a      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d022      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800aa3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa3e:	d115      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aa40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa44:	3308      	adds	r3, #8
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 ffa6 	bl	800b998 <RCCEx_PLL2_Config>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800aa52:	e016      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800aa54:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aa58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa5c:	3330      	adds	r3, #48	@ 0x30
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 f832 	bl	800bac8 <RCCEx_PLL3_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800aa6a:	e00a      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aa72:	e006      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800aa74:	bf00      	nop
 800aa76:	e004      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800aa78:	bf00      	nop
 800aa7a:	e002      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800aa7c:	bf00      	nop
 800aa7e:	e000      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800aa80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10d      	bne.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800aa8a:	4bbb      	ldr	r3, [pc, #748]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800aa8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aa90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800aa94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aa9c:	4ab6      	ldr	r2, [pc, #728]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800aa9e:	430b      	orrs	r3, r1
 800aaa0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800aaa4:	e003      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aaaa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800aaae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	2100      	movs	r1, #0
 800aab8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800aabc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aac4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4313      	orrs	r3, r2
 800aacc:	d055      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800aace:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aad6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800aada:	d031      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800aadc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800aae0:	d82a      	bhi.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800aae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aae6:	d02d      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800aae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aaec:	d824      	bhi.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800aaee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aaf2:	d029      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800aaf4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aaf8:	d81e      	bhi.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800aafa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aafe:	d011      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800ab00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab04:	d818      	bhi.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d020      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800ab0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab0e:	d113      	bne.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ab10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab14:	3308      	adds	r3, #8
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 ff3e 	bl	800b998 <RCCEx_PLL2_Config>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800ab22:	e014      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ab24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab28:	3330      	adds	r3, #48	@ 0x30
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 ffcc 	bl	800bac8 <RCCEx_PLL3_Config>
 800ab30:	4603      	mov	r3, r0
 800ab32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800ab36:	e00a      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ab3e:	e006      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ab40:	bf00      	nop
 800ab42:	e004      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ab44:	bf00      	nop
 800ab46:	e002      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ab48:	bf00      	nop
 800ab4a:	e000      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ab4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10d      	bne.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800ab56:	4b88      	ldr	r3, [pc, #544]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ab58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ab5c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800ab60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab68:	4a83      	ldr	r2, [pc, #524]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ab6a:	430b      	orrs	r3, r1
 800ab6c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ab70:	e003      	b.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800ab7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	2100      	movs	r1, #0
 800ab84:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800ab88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab90:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ab94:	460b      	mov	r3, r1
 800ab96:	4313      	orrs	r3, r2
 800ab98:	d055      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800ab9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aba2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aba6:	d031      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800aba8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800abac:	d82a      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800abae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800abb2:	d02d      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800abb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800abb8:	d824      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800abba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800abbe:	d029      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800abc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800abc4:	d81e      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800abc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abca:	d011      	beq.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800abcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abd0:	d818      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d020      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800abd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abda:	d113      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800abdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abe0:	3308      	adds	r3, #8
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 fed8 	bl	800b998 <RCCEx_PLL2_Config>
 800abe8:	4603      	mov	r3, r0
 800abea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800abee:	e014      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800abf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abf4:	3330      	adds	r3, #48	@ 0x30
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 ff66 	bl	800bac8 <RCCEx_PLL3_Config>
 800abfc:	4603      	mov	r3, r0
 800abfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800ac02:	e00a      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ac0a:	e006      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800ac0c:	bf00      	nop
 800ac0e:	e004      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800ac10:	bf00      	nop
 800ac12:	e002      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800ac14:	bf00      	nop
 800ac16:	e000      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800ac18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10d      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800ac22:	4b55      	ldr	r3, [pc, #340]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ac24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ac28:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ac2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac34:	4a50      	ldr	r2, [pc, #320]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ac36:	430b      	orrs	r3, r1
 800ac38:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ac3c:	e003      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800ac46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	2100      	movs	r1, #0
 800ac50:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800ac54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac5c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ac60:	460b      	mov	r3, r1
 800ac62:	4313      	orrs	r3, r2
 800ac64:	d055      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800ac66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ac6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac72:	d031      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800ac74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac78:	d82a      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800ac7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac7e:	d02d      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800ac80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac84:	d824      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800ac86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac8a:	d029      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800ac8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac90:	d81e      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800ac92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac96:	d011      	beq.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800ac98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac9c:	d818      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d020      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800aca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aca6:	d113      	bne.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aca8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acac:	3308      	adds	r3, #8
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 fe72 	bl	800b998 <RCCEx_PLL2_Config>
 800acb4:	4603      	mov	r3, r0
 800acb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800acba:	e014      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800acbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acc0:	3330      	adds	r3, #48	@ 0x30
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 ff00 	bl	800bac8 <RCCEx_PLL3_Config>
 800acc8:	4603      	mov	r3, r0
 800acca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800acce:	e00a      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800acd6:	e006      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800acd8:	bf00      	nop
 800acda:	e004      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800acdc:	bf00      	nop
 800acde:	e002      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800ace0:	bf00      	nop
 800ace2:	e000      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800ace4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10d      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800acee:	4b22      	ldr	r3, [pc, #136]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800acf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800acf4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800acf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ad00:	4a1d      	ldr	r2, [pc, #116]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ad02:	430b      	orrs	r3, r1
 800ad04:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ad08:	e003      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ad0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ad1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad22:	2300      	movs	r3, #0
 800ad24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	d055      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800ad32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad36:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad3e:	d035      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800ad40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad44:	d82e      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800ad46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad4a:	d031      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800ad4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad50:	d828      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800ad52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad56:	d01b      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800ad58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad5c:	d822      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d003      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800ad62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad66:	d009      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800ad68:	e01c      	b.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad6a:	4b03      	ldr	r3, [pc, #12]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ad6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6e:	4a02      	ldr	r2, [pc, #8]	@ (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ad70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad74:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ad76:	e01c      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800ad78:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ad7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad80:	3308      	adds	r3, #8
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fe08 	bl	800b998 <RCCEx_PLL2_Config>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ad8e:	e010      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad94:	3330      	adds	r3, #48	@ 0x30
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 fe96 	bl	800bac8 <RCCEx_PLL3_Config>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ada2:	e006      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800adaa:	e002      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800adac:	bf00      	nop
 800adae:	e000      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800adb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10d      	bne.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800adba:	4bc3      	ldr	r3, [pc, #780]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800adbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800adc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800adc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800adc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800adcc:	4abe      	ldr	r2, [pc, #760]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800adce:	430b      	orrs	r3, r1
 800add0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800add4:	e003      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800adda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800adde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800adea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adee:	2300      	movs	r3, #0
 800adf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800adf4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800adf8:	460b      	mov	r3, r1
 800adfa:	4313      	orrs	r3, r2
 800adfc:	d051      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800adfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ae06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae0a:	d033      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800ae0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae10:	d82c      	bhi.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800ae12:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800ae16:	d02d      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800ae18:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800ae1c:	d826      	bhi.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800ae1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae22:	d019      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800ae24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae28:	d820      	bhi.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800ae2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ae32:	d007      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800ae34:	e01a      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae36:	4ba4      	ldr	r3, [pc, #656]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ae38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae3a:	4aa3      	ldr	r2, [pc, #652]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ae3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae40:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ae42:	e018      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ae44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae48:	3308      	adds	r3, #8
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 fda4 	bl	800b998 <RCCEx_PLL2_Config>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ae56:	e00e      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ae58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae5c:	3330      	adds	r3, #48	@ 0x30
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 fe32 	bl	800bac8 <RCCEx_PLL3_Config>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ae6a:	e004      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ae72:	e000      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800ae74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10d      	bne.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800ae7e:	4b92      	ldr	r3, [pc, #584]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ae80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae84:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800ae88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae8c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ae90:	4a8d      	ldr	r2, [pc, #564]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ae92:	430b      	orrs	r3, r1
 800ae94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ae98:	e003      	b.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ae9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800aea2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800aeae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aeb4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4313      	orrs	r3, r2
 800aebc:	d032      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800aebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aec2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800aec6:	2b05      	cmp	r3, #5
 800aec8:	d80f      	bhi.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d211      	bcs.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d911      	bls.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d109      	bne.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aeda:	3308      	adds	r3, #8
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 fd5b 	bl	800b998 <RCCEx_PLL2_Config>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aee8:	e006      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aef0:	e002      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800aef2:	bf00      	nop
 800aef4:	e000      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800aef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aef8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10d      	bne.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800af00:	4b71      	ldr	r3, [pc, #452]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800af02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af06:	f023 0107 	bic.w	r1, r3, #7
 800af0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800af12:	4a6d      	ldr	r2, [pc, #436]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800af14:	430b      	orrs	r3, r1
 800af16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800af1a:	e003      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800af24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	2100      	movs	r1, #0
 800af2e:	6739      	str	r1, [r7, #112]	@ 0x70
 800af30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af34:	677b      	str	r3, [r7, #116]	@ 0x74
 800af36:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800af3a:	460b      	mov	r3, r1
 800af3c:	4313      	orrs	r3, r2
 800af3e:	d024      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800af40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d005      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d005      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800af56:	e002      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800af58:	bf00      	nop
 800af5a:	e000      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800af5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10d      	bne.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800af66:	4b58      	ldr	r3, [pc, #352]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800af68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af6c:	f023 0108 	bic.w	r1, r3, #8
 800af70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800af78:	4a53      	ldr	r2, [pc, #332]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800af7a:	430b      	orrs	r3, r1
 800af7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800af80:	e003      	b.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800af96:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af98:	2300      	movs	r3, #0
 800af9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af9c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800afa0:	460b      	mov	r3, r1
 800afa2:	4313      	orrs	r3, r2
 800afa4:	f000 80b9 	beq.w	800b11a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800afa8:	4b48      	ldr	r3, [pc, #288]	@ (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800afaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afac:	4a47      	ldr	r2, [pc, #284]	@ (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800afae:	f043 0301 	orr.w	r3, r3, #1
 800afb2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afb4:	f7fc ffb2 	bl	8007f1c <HAL_GetTick>
 800afb8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800afbc:	e00b      	b.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afbe:	f7fc ffad 	bl	8007f1c <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d903      	bls.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800afd4:	e005      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800afd6:	4b3d      	ldr	r3, [pc, #244]	@ (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800afd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d0ed      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800afe2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f040 8093 	bne.w	800b112 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800afec:	4b36      	ldr	r3, [pc, #216]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800afee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aff6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800affa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d023      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800b002:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b006:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800b00a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b00e:	4293      	cmp	r3, r2
 800b010:	d01b      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b012:	4b2d      	ldr	r3, [pc, #180]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b01c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b020:	4b29      	ldr	r3, [pc, #164]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b026:	4a28      	ldr	r2, [pc, #160]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b02c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b030:	4b25      	ldr	r3, [pc, #148]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b036:	4a24      	ldr	r2, [pc, #144]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b03c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b040:	4a21      	ldr	r2, [pc, #132]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b042:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b046:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b04a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	2b00      	cmp	r3, #0
 800b054:	d019      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b056:	f7fc ff61 	bl	8007f1c <HAL_GetTick>
 800b05a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b05e:	e00d      	b.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b060:	f7fc ff5c 	bl	8007f1c <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b06a:	1ad2      	subs	r2, r2, r3
 800b06c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b070:	429a      	cmp	r2, r3
 800b072:	d903      	bls.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800b074:	2303      	movs	r3, #3
 800b076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800b07a:	e006      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b07c:	4b12      	ldr	r3, [pc, #72]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b07e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0ea      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800b08a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d13a      	bne.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b092:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b096:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b09a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b09e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0a2:	d115      	bne.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800b0a4:	4b08      	ldr	r3, [pc, #32]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b0ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b0b4:	091b      	lsrs	r3, r3, #4
 800b0b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b0ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b0be:	4a02      	ldr	r2, [pc, #8]	@ (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	61d3      	str	r3, [r2, #28]
 800b0c4:	e00a      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800b0c6:	bf00      	nop
 800b0c8:	44020c00 	.word	0x44020c00
 800b0cc:	44020800 	.word	0x44020800
 800b0d0:	4b9f      	ldr	r3, [pc, #636]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	4a9e      	ldr	r2, [pc, #632]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b0d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b0da:	61d3      	str	r3, [r2, #28]
 800b0dc:	4b9c      	ldr	r3, [pc, #624]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b0de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0e2:	4a9b      	ldr	r2, [pc, #620]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b0e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b0ec:	4b98      	ldr	r3, [pc, #608]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b0ee:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800b0f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0f6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b0fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0fe:	4a94      	ldr	r2, [pc, #592]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b100:	430b      	orrs	r3, r1
 800b102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b106:	e008      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b108:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b10c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800b110:	e003      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b112:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b116:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b11a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b126:	663b      	str	r3, [r7, #96]	@ 0x60
 800b128:	2300      	movs	r3, #0
 800b12a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b12c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b130:	460b      	mov	r3, r1
 800b132:	4313      	orrs	r3, r2
 800b134:	d035      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b136:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b13a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b13e:	2b30      	cmp	r3, #48	@ 0x30
 800b140:	d014      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800b142:	2b30      	cmp	r3, #48	@ 0x30
 800b144:	d80e      	bhi.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800b146:	2b20      	cmp	r3, #32
 800b148:	d012      	beq.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	d80a      	bhi.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d010      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800b152:	2b10      	cmp	r3, #16
 800b154:	d106      	bne.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b156:	4b7e      	ldr	r3, [pc, #504]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15a:	4a7d      	ldr	r2, [pc, #500]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b15c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b160:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800b162:	e008      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b16a:	e004      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b16c:	bf00      	nop
 800b16e:	e002      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b170:	bf00      	nop
 800b172:	e000      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b174:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b176:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10d      	bne.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b17e:	4b74      	ldr	r3, [pc, #464]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b184:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b18c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b190:	4a6f      	ldr	r2, [pc, #444]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b192:	430b      	orrs	r3, r1
 800b194:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b198:	e003      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b19a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b19e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b1a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b1ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	d033      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800b1be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800b1ca:	2b40      	cmp	r3, #64	@ 0x40
 800b1cc:	d007      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800b1ce:	e010      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1d0:	4b5f      	ldr	r3, [pc, #380]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d4:	4a5e      	ldr	r2, [pc, #376]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b1d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800b1dc:	e00d      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b1de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f000 fbd7 	bl	800b998 <RCCEx_PLL2_Config>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800b1f0:	e003      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10d      	bne.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800b202:	4b53      	ldr	r3, [pc, #332]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b204:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b208:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800b20c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b210:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b214:	4a4e      	ldr	r2, [pc, #312]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b216:	430b      	orrs	r3, r1
 800b218:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b21c:	e003      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b222:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b232:	653b      	str	r3, [r7, #80]	@ 0x50
 800b234:	2300      	movs	r3, #0
 800b236:	657b      	str	r3, [r7, #84]	@ 0x54
 800b238:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b23c:	460b      	mov	r3, r1
 800b23e:	4313      	orrs	r3, r2
 800b240:	d033      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800b242:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b246:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800b24e:	2b80      	cmp	r3, #128	@ 0x80
 800b250:	d007      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800b252:	e010      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b254:	4b3e      	ldr	r3, [pc, #248]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b258:	4a3d      	ldr	r2, [pc, #244]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b25a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b25e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800b260:	e00d      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b266:	3308      	adds	r3, #8
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 fb95 	bl	800b998 <RCCEx_PLL2_Config>
 800b26e:	4603      	mov	r3, r0
 800b270:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800b274:	e003      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b27c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b27e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10d      	bne.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800b286:	4b32      	ldr	r3, [pc, #200]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b28c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800b290:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b294:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b298:	4a2d      	ldr	r2, [pc, #180]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b29a:	430b      	orrs	r3, r1
 800b29c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b2a0:	e003      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b2a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b2aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b2b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	d04a      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800b2c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	d827      	bhi.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800b2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800b2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d8:	0800b2ed 	.word	0x0800b2ed
 800b2dc:	0800b2fb 	.word	0x0800b2fb
 800b2e0:	0800b30f 	.word	0x0800b30f
 800b2e4:	0800b32b 	.word	0x0800b32b
 800b2e8:	0800b32b 	.word	0x0800b32b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2ec:	4b18      	ldr	r3, [pc, #96]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f0:	4a17      	ldr	r2, [pc, #92]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b2f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b2f8:	e018      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b2fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2fe:	3308      	adds	r3, #8
 800b300:	4618      	mov	r0, r3
 800b302:	f000 fb49 	bl	800b998 <RCCEx_PLL2_Config>
 800b306:	4603      	mov	r3, r0
 800b308:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b30c:	e00e      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b30e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b312:	3330      	adds	r3, #48	@ 0x30
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fbd7 	bl	800bac8 <RCCEx_PLL3_Config>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b320:	e004      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b328:	e000      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800b32a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b32c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10f      	bne.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b334:	4b06      	ldr	r3, [pc, #24]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b33a:	f023 0107 	bic.w	r1, r3, #7
 800b33e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b346:	4a02      	ldr	r2, [pc, #8]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b348:	430b      	orrs	r3, r1
 800b34a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b34e:	e005      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800b350:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b354:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b358:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b35c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b368:	643b      	str	r3, [r7, #64]	@ 0x40
 800b36a:	2300      	movs	r3, #0
 800b36c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b36e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b372:	460b      	mov	r3, r1
 800b374:	4313      	orrs	r3, r2
 800b376:	f000 8081 	beq.w	800b47c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800b37a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b37e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b382:	2b20      	cmp	r3, #32
 800b384:	d85f      	bhi.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800b386:	a201      	add	r2, pc, #4	@ (adr r2, 800b38c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b411 	.word	0x0800b411
 800b390:	0800b447 	.word	0x0800b447
 800b394:	0800b447 	.word	0x0800b447
 800b398:	0800b447 	.word	0x0800b447
 800b39c:	0800b447 	.word	0x0800b447
 800b3a0:	0800b447 	.word	0x0800b447
 800b3a4:	0800b447 	.word	0x0800b447
 800b3a8:	0800b447 	.word	0x0800b447
 800b3ac:	0800b41f 	.word	0x0800b41f
 800b3b0:	0800b447 	.word	0x0800b447
 800b3b4:	0800b447 	.word	0x0800b447
 800b3b8:	0800b447 	.word	0x0800b447
 800b3bc:	0800b447 	.word	0x0800b447
 800b3c0:	0800b447 	.word	0x0800b447
 800b3c4:	0800b447 	.word	0x0800b447
 800b3c8:	0800b447 	.word	0x0800b447
 800b3cc:	0800b433 	.word	0x0800b433
 800b3d0:	0800b447 	.word	0x0800b447
 800b3d4:	0800b447 	.word	0x0800b447
 800b3d8:	0800b447 	.word	0x0800b447
 800b3dc:	0800b447 	.word	0x0800b447
 800b3e0:	0800b447 	.word	0x0800b447
 800b3e4:	0800b447 	.word	0x0800b447
 800b3e8:	0800b447 	.word	0x0800b447
 800b3ec:	0800b44f 	.word	0x0800b44f
 800b3f0:	0800b447 	.word	0x0800b447
 800b3f4:	0800b447 	.word	0x0800b447
 800b3f8:	0800b447 	.word	0x0800b447
 800b3fc:	0800b447 	.word	0x0800b447
 800b400:	0800b447 	.word	0x0800b447
 800b404:	0800b447 	.word	0x0800b447
 800b408:	0800b447 	.word	0x0800b447
 800b40c:	0800b44f 	.word	0x0800b44f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b410:	4bab      	ldr	r3, [pc, #684]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b414:	4aaa      	ldr	r2, [pc, #680]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b41a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b41c:	e018      	b.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b41e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b422:	3308      	adds	r3, #8
 800b424:	4618      	mov	r0, r3
 800b426:	f000 fab7 	bl	800b998 <RCCEx_PLL2_Config>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b430:	e00e      	b.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b432:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b436:	3330      	adds	r3, #48	@ 0x30
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 fb45 	bl	800bac8 <RCCEx_PLL3_Config>
 800b43e:	4603      	mov	r3, r0
 800b440:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b444:	e004      	b.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b44c:	e000      	b.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800b44e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b450:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10d      	bne.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b458:	4b99      	ldr	r3, [pc, #612]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b45a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b45e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b462:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b46a:	4a95      	ldr	r2, [pc, #596]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b46c:	430b      	orrs	r3, r1
 800b46e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b472:	e003      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b474:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b478:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b47c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b488:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b48a:	2300      	movs	r3, #0
 800b48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b48e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b492:	460b      	mov	r3, r1
 800b494:	4313      	orrs	r3, r2
 800b496:	d04e      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800b498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b49c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4a4:	d02e      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800b4a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4aa:	d827      	bhi.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b4ac:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4ae:	d02b      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800b4b0:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4b2:	d823      	bhi.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b4b4:	2b80      	cmp	r3, #128	@ 0x80
 800b4b6:	d017      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800b4b8:	2b80      	cmp	r3, #128	@ 0x80
 800b4ba:	d81f      	bhi.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800b4c0:	2b40      	cmp	r3, #64	@ 0x40
 800b4c2:	d007      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800b4c4:	e01a      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4c6:	4b7e      	ldr	r3, [pc, #504]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ca:	4a7d      	ldr	r2, [pc, #500]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b4cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b4d2:	e01a      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b4d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4d8:	3308      	adds	r3, #8
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 fa5c 	bl	800b998 <RCCEx_PLL2_Config>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b4e6:	e010      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4ec:	3330      	adds	r3, #48	@ 0x30
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 faea 	bl	800bac8 <RCCEx_PLL3_Config>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b4fa:	e006      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b502:	e002      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800b504:	bf00      	nop
 800b506:	e000      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800b508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b50a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10d      	bne.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b512:	4b6b      	ldr	r3, [pc, #428]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b518:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b51c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b524:	4a66      	ldr	r2, [pc, #408]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b526:	430b      	orrs	r3, r1
 800b528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b52c:	e003      	b.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b52e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b532:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800b536:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b542:	633b      	str	r3, [r7, #48]	@ 0x30
 800b544:	2300      	movs	r3, #0
 800b546:	637b      	str	r3, [r7, #52]	@ 0x34
 800b548:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b54c:	460b      	mov	r3, r1
 800b54e:	4313      	orrs	r3, r2
 800b550:	d055      	beq.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800b552:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b556:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800b55a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b55e:	d031      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800b560:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b564:	d82a      	bhi.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b566:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b56a:	d02d      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800b56c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b570:	d824      	bhi.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b572:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b576:	d029      	beq.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800b578:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b57c:	d81e      	bhi.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b57e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b582:	d011      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800b584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b588:	d818      	bhi.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d020      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800b58e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b592:	d113      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b598:	3308      	adds	r3, #8
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 f9fc 	bl	800b998 <RCCEx_PLL2_Config>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800b5a6:	e014      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b5a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5ac:	3330      	adds	r3, #48	@ 0x30
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fa8a 	bl	800bac8 <RCCEx_PLL3_Config>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800b5ba:	e00a      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b5c2:	e006      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b5c4:	bf00      	nop
 800b5c6:	e004      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b5c8:	bf00      	nop
 800b5ca:	e002      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b5cc:	bf00      	nop
 800b5ce:	e000      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b5d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10d      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800b5da:	4b39      	ldr	r3, [pc, #228]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b5dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5e0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b5e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800b5ec:	4a34      	ldr	r2, [pc, #208]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b5ee:	430b      	orrs	r3, r1
 800b5f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b5f4:	e003      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b5fa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800b5fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b60a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b60c:	2300      	movs	r3, #0
 800b60e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b610:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b614:	460b      	mov	r3, r1
 800b616:	4313      	orrs	r3, r2
 800b618:	d058      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800b61a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b61e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b622:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b626:	d031      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800b628:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b62c:	d82a      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b62e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b632:	d02d      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800b634:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b638:	d824      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b63a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b63e:	d029      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800b640:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b644:	d81e      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b64a:	d011      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800b64c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b650:	d818      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d020      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800b656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b65a:	d113      	bne.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b65c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b660:	3308      	adds	r3, #8
 800b662:	4618      	mov	r0, r3
 800b664:	f000 f998 	bl	800b998 <RCCEx_PLL2_Config>
 800b668:	4603      	mov	r3, r0
 800b66a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800b66e:	e014      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b674:	3330      	adds	r3, #48	@ 0x30
 800b676:	4618      	mov	r0, r3
 800b678:	f000 fa26 	bl	800bac8 <RCCEx_PLL3_Config>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800b682:	e00a      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b68a:	e006      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800b68c:	bf00      	nop
 800b68e:	e004      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800b690:	bf00      	nop
 800b692:	e002      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800b694:	bf00      	nop
 800b696:	e000      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800b698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b69a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d110      	bne.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800b6a2:	4b07      	ldr	r3, [pc, #28]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b6a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6a8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800b6ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6b4:	4902      	ldr	r1, [pc, #8]	@ (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b6bc:	e006      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800b6be:	bf00      	nop
 800b6c0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b6c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b6cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	6239      	str	r1, [r7, #32]
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	d055      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800b6e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6f0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b6f4:	d031      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800b6f6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b6fa:	d82a      	bhi.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800b6fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b700:	d02d      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800b702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b706:	d824      	bhi.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800b708:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b70c:	d029      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800b70e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b712:	d81e      	bhi.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800b714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b718:	d011      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800b71a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b71e:	d818      	bhi.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800b720:	2b00      	cmp	r3, #0
 800b722:	d020      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800b724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b728:	d113      	bne.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b72a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b72e:	3308      	adds	r3, #8
 800b730:	4618      	mov	r0, r3
 800b732:	f000 f931 	bl	800b998 <RCCEx_PLL2_Config>
 800b736:	4603      	mov	r3, r0
 800b738:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b73c:	e014      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b73e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b742:	3330      	adds	r3, #48	@ 0x30
 800b744:	4618      	mov	r0, r3
 800b746:	f000 f9bf 	bl	800bac8 <RCCEx_PLL3_Config>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b750:	e00a      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b758:	e006      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800b75a:	bf00      	nop
 800b75c:	e004      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800b75e:	bf00      	nop
 800b760:	e002      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800b762:	bf00      	nop
 800b764:	e000      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800b766:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b768:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10d      	bne.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800b770:	4b88      	ldr	r3, [pc, #544]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b776:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800b77a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b77e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b782:	4984      	ldr	r1, [pc, #528]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b784:	4313      	orrs	r3, r2
 800b786:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b78a:	e003      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b78c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b790:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b794:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	2100      	movs	r1, #0
 800b79e:	61b9      	str	r1, [r7, #24]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	d03d      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800b7b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b7b8:	2b03      	cmp	r3, #3
 800b7ba:	d81c      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800b7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7ff 	.word	0x0800b7ff
 800b7c8:	0800b7d5 	.word	0x0800b7d5
 800b7cc:	0800b7e3 	.word	0x0800b7e3
 800b7d0:	0800b7ff 	.word	0x0800b7ff
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d4:	4b6f      	ldr	r3, [pc, #444]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d8:	4a6e      	ldr	r2, [pc, #440]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b7da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7de:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b7e0:	e00e      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b7e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f000 f8d5 	bl	800b998 <RCCEx_PLL2_Config>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800b7f4:	e004      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b7fc:	e000      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800b7fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b800:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10d      	bne.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b808:	4b62      	ldr	r3, [pc, #392]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b80a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b80e:	f023 0203 	bic.w	r2, r3, #3
 800b812:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b816:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b81a:	495e      	ldr	r1, [pc, #376]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b81c:	4313      	orrs	r3, r2
 800b81e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b822:	e003      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b824:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b828:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b82c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	2100      	movs	r1, #0
 800b836:	6139      	str	r1, [r7, #16]
 800b838:	f003 0304 	and.w	r3, r3, #4
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b842:	460b      	mov	r3, r1
 800b844:	4313      	orrs	r3, r2
 800b846:	d03a      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800b848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b84c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b854:	d00e      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800b856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b85a:	d815      	bhi.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d017      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800b860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b864:	d110      	bne.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b866:	4b4b      	ldr	r3, [pc, #300]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b86a:	4a4a      	ldr	r2, [pc, #296]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b86c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b870:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800b872:	e00e      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b878:	3308      	adds	r3, #8
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 f88c 	bl	800b998 <RCCEx_PLL2_Config>
 800b880:	4603      	mov	r3, r0
 800b882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800b886:	e004      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b88e:	e000      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800b890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b892:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10d      	bne.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800b89a:	4b3e      	ldr	r3, [pc, #248]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b89c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b8a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b8ac:	4939      	ldr	r1, [pc, #228]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800b8b4:	e003      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b8ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b8be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	f003 0310 	and.w	r3, r3, #16
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	d038      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800b8da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800b8e2:	2b30      	cmp	r3, #48	@ 0x30
 800b8e4:	d01b      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800b8e6:	2b30      	cmp	r3, #48	@ 0x30
 800b8e8:	d815      	bhi.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800b8ea:	2b10      	cmp	r3, #16
 800b8ec:	d002      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800b8ee:	2b20      	cmp	r3, #32
 800b8f0:	d007      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800b8f2:	e010      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8f4:	4b27      	ldr	r3, [pc, #156]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f8:	4a26      	ldr	r2, [pc, #152]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b8fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800b900:	e00e      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b902:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b906:	3330      	adds	r3, #48	@ 0x30
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 f8dd 	bl	800bac8 <RCCEx_PLL3_Config>
 800b90e:	4603      	mov	r3, r0
 800b910:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800b914:	e004      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b91c:	e000      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800b91e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b920:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10d      	bne.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800b928:	4b1a      	ldr	r3, [pc, #104]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b92a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b92e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b936:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800b93a:	4916      	ldr	r1, [pc, #88]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b942:	e003      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b944:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b948:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b94c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	2100      	movs	r1, #0
 800b956:	6039      	str	r1, [r7, #0]
 800b958:	f003 0308 	and.w	r3, r3, #8
 800b95c:	607b      	str	r3, [r7, #4]
 800b95e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b962:	460b      	mov	r3, r1
 800b964:	4313      	orrs	r3, r2
 800b966:	d00c      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800b968:	4b0a      	ldr	r3, [pc, #40]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b96a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b96e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b972:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b976:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800b97a:	4906      	ldr	r1, [pc, #24]	@ (800b994 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800b982:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800b986:	4618      	mov	r0, r3
 800b988:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800b98c:	46bd      	mov	sp, r7
 800b98e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b992:	bf00      	nop
 800b994:	44020c00 	.word	0x44020c00

0800b998 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800b9a0:	4b48      	ldr	r3, [pc, #288]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a47      	ldr	r2, [pc, #284]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800b9a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b9aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b9ac:	f7fc fab6 	bl	8007f1c <HAL_GetTick>
 800b9b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9b2:	e008      	b.n	800b9c6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9b4:	f7fc fab2 	bl	8007f1c <HAL_GetTick>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d901      	bls.n	800b9c6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e07a      	b.n	800babc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9c6:	4b3f      	ldr	r3, [pc, #252]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1f0      	bne.n	800b9b4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b9d2:	4b3c      	ldr	r3, [pc, #240]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800b9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b9da:	f023 0303 	bic.w	r3, r3, #3
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	6811      	ldr	r1, [r2, #0]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	6852      	ldr	r2, [r2, #4]
 800b9e6:	0212      	lsls	r2, r2, #8
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	4936      	ldr	r1, [pc, #216]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	025b      	lsls	r3, r3, #9
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	431a      	orrs	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	041b      	lsls	r3, r3, #16
 800ba0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ba12:	431a      	orrs	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	061b      	lsls	r3, r3, #24
 800ba1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ba20:	4928      	ldr	r1, [pc, #160]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba22:	4313      	orrs	r3, r2
 800ba24:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ba26:	4b27      	ldr	r3, [pc, #156]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2a:	f023 020c 	bic.w	r2, r3, #12
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	4924      	ldr	r1, [pc, #144]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba34:	4313      	orrs	r3, r2
 800ba36:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800ba38:	4b22      	ldr	r3, [pc, #136]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	f023 0220 	bic.w	r2, r3, #32
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	491f      	ldr	r1, [pc, #124]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ba4a:	4b1e      	ldr	r3, [pc, #120]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba52:	491c      	ldr	r1, [pc, #112]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800ba58:	4b1a      	ldr	r3, [pc, #104]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5c:	4a19      	ldr	r2, [pc, #100]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba5e:	f023 0310 	bic.w	r3, r3, #16
 800ba62:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800ba64:	4b17      	ldr	r3, [pc, #92]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba6c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	6a12      	ldr	r2, [r2, #32]
 800ba74:	00d2      	lsls	r2, r2, #3
 800ba76:	4913      	ldr	r1, [pc, #76]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800ba7c:	4b11      	ldr	r3, [pc, #68]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba80:	4a10      	ldr	r2, [pc, #64]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba82:	f043 0310 	orr.w	r3, r3, #16
 800ba86:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800ba88:	4b0e      	ldr	r3, [pc, #56]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a0d      	ldr	r2, [pc, #52]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800ba8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ba92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba94:	f7fc fa42 	bl	8007f1c <HAL_GetTick>
 800ba98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba9a:	e008      	b.n	800baae <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba9c:	f7fc fa3e 	bl	8007f1c <HAL_GetTick>
 800baa0:	4602      	mov	r2, r0
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d901      	bls.n	800baae <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	e006      	b.n	800babc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800baae:	4b05      	ldr	r3, [pc, #20]	@ (800bac4 <RCCEx_PLL2_Config+0x12c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0f0      	beq.n	800ba9c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800baba:	2300      	movs	r3, #0

}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	44020c00 	.word	0x44020c00

0800bac8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800bad0:	4b48      	ldr	r3, [pc, #288]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a47      	ldr	r2, [pc, #284]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bada:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800badc:	f7fc fa1e 	bl	8007f1c <HAL_GetTick>
 800bae0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bae2:	e008      	b.n	800baf6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bae4:	f7fc fa1a 	bl	8007f1c <HAL_GetTick>
 800bae8:	4602      	mov	r2, r0
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d901      	bls.n	800baf6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e07a      	b.n	800bbec <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800baf6:	4b3f      	ldr	r3, [pc, #252]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1f0      	bne.n	800bae4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bb02:	4b3c      	ldr	r3, [pc, #240]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bb0a:	f023 0303 	bic.w	r3, r3, #3
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	6811      	ldr	r1, [r2, #0]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	6852      	ldr	r2, [r2, #4]
 800bb16:	0212      	lsls	r2, r2, #8
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	4936      	ldr	r1, [pc, #216]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	630b      	str	r3, [r1, #48]	@ 0x30
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	025b      	lsls	r3, r3, #9
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	431a      	orrs	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	041b      	lsls	r3, r3, #16
 800bb3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bb42:	431a      	orrs	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	061b      	lsls	r3, r3, #24
 800bb4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bb50:	4928      	ldr	r1, [pc, #160]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb52:	4313      	orrs	r3, r2
 800bb54:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb56:	4b27      	ldr	r3, [pc, #156]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb5a:	f023 020c 	bic.w	r2, r3, #12
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	4924      	ldr	r1, [pc, #144]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800bb68:	4b22      	ldr	r3, [pc, #136]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb6c:	f023 0220 	bic.w	r2, r3, #32
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	491f      	ldr	r1, [pc, #124]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb76:	4313      	orrs	r3, r2
 800bb78:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bb7a:	4b1e      	ldr	r3, [pc, #120]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb82:	491c      	ldr	r1, [pc, #112]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800bb88:	4b1a      	ldr	r3, [pc, #104]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb8c:	4a19      	ldr	r2, [pc, #100]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb8e:	f023 0310 	bic.w	r3, r3, #16
 800bb92:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800bb94:	4b17      	ldr	r3, [pc, #92]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bb96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb9c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	6a12      	ldr	r2, [r2, #32]
 800bba4:	00d2      	lsls	r2, r2, #3
 800bba6:	4913      	ldr	r1, [pc, #76]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800bbac:	4b11      	ldr	r3, [pc, #68]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bbae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbb0:	4a10      	ldr	r2, [pc, #64]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bbb2:	f043 0310 	orr.w	r3, r3, #16
 800bbb6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800bbb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a0d      	ldr	r2, [pc, #52]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bbbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bbc4:	f7fc f9aa 	bl	8007f1c <HAL_GetTick>
 800bbc8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bbca:	e008      	b.n	800bbde <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bbcc:	f7fc f9a6 	bl	8007f1c <HAL_GetTick>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d901      	bls.n	800bbde <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	e006      	b.n	800bbec <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bbde:	4b05      	ldr	r3, [pc, #20]	@ (800bbf4 <RCCEx_PLL3_Config+0x12c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0f0      	beq.n	800bbcc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	44020c00 	.word	0x44020c00

0800bbf8 <LL_DMA_SetLinkedListBaseAddr>:
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CLBAR, DMA_CLBAR_LBA,
 800bc08:	4a0c      	ldr	r2, [pc, #48]	@ (800bc3c <LL_DMA_SetLinkedListBaseAddr+0x44>)
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	4413      	add	r3, r2
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	0c1b      	lsrs	r3, r3, #16
 800bc1c:	041b      	lsls	r3, r3, #16
 800bc1e:	4807      	ldr	r0, [pc, #28]	@ (800bc3c <LL_DMA_SetLinkedListBaseAddr+0x44>)
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800bc26:	6979      	ldr	r1, [r7, #20]
 800bc28:	4401      	add	r1, r0
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	600b      	str	r3, [r1, #0]
}
 800bc2e:	bf00      	nop
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	0801a488 	.word	0x0801a488

0800bc40 <LL_DMA_ConfigControl>:
{
 800bc40:	b480      	push	{r7}
 800bc42:	b087      	sub	sp, #28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR,
 800bc50:	4a0c      	ldr	r2, [pc, #48]	@ (800bc84 <LL_DMA_ConfigControl+0x44>)
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	f423 0243 	bic.w	r2, r3, #12779520	@ 0xc30000
 800bc62:	4908      	ldr	r1, [pc, #32]	@ (800bc84 <LL_DMA_ConfigControl+0x44>)
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	440b      	add	r3, r1
 800bc6e:	4619      	mov	r1, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	614b      	str	r3, [r1, #20]
}
 800bc76:	bf00      	nop
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	0801a488 	.word	0x0801a488

0800bc88 <LL_DMA_ConfigTransfer>:
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR1,
 800bc98:	4a0c      	ldr	r2, [pc, #48]	@ (800bccc <LL_DMA_ConfigTransfer+0x44>)
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	4413      	add	r3, r2
 800bca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bca6:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd0 <LL_DMA_ConfigTransfer+0x48>)
 800bca8:	4013      	ands	r3, r2
 800bcaa:	4908      	ldr	r1, [pc, #32]	@ (800bccc <LL_DMA_ConfigTransfer+0x44>)
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	440a      	add	r2, r1
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800bcbe:	bf00      	nop
 800bcc0:	371c      	adds	r7, #28
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	0801a488 	.word	0x0801a488
 800bcd0:	b3f487f4 	.word	0xb3f487f4

0800bcd4 <LL_DMA_ConfigBurstLength>:
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b087      	sub	sp, #28
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR1,
 800bce6:	4a12      	ldr	r2, [pc, #72]	@ (800bd30 <LL_DMA_ConfigBurstLength+0x5c>)
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800bcf8:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	3a01      	subs	r2, #1
 800bd00:	0112      	lsls	r2, r2, #4
 800bd02:	f402 717c 	and.w	r1, r2, #1008	@ 0x3f0
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	3a01      	subs	r2, #1
 800bd0a:	0512      	lsls	r2, r2, #20
 800bd0c:	f002 727c 	and.w	r2, r2, #66060288	@ 0x3f00000
 800bd10:	430a      	orrs	r2, r1
 800bd12:	4807      	ldr	r0, [pc, #28]	@ (800bd30 <LL_DMA_ConfigBurstLength+0x5c>)
 800bd14:	68b9      	ldr	r1, [r7, #8]
 800bd16:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800bd1a:	6979      	ldr	r1, [r7, #20]
 800bd1c:	4401      	add	r1, r0
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	0801a488 	.word	0x0801a488

0800bd34 <LL_DMA_ConfigChannelTransfer>:
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2,
 800bd44:	4a0d      	ldr	r2, [pc, #52]	@ (800bd7c <LL_DMA_ConfigChannelTransfer+0x48>)
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	4413      	add	r3, r2
 800bd50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd52:	f023 4343 	bic.w	r3, r3, #3271557120	@ 0xc3000000
 800bd56:	f423 435e 	bic.w	r3, r3, #56832	@ 0xde00
 800bd5a:	4908      	ldr	r1, [pc, #32]	@ (800bd7c <LL_DMA_ConfigChannelTransfer+0x48>)
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	440a      	add	r2, r1
 800bd66:	4611      	mov	r1, r2
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800bd6e:	bf00      	nop
 800bd70:	371c      	adds	r7, #28
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	0801a488 	.word	0x0801a488

0800bd80 <LL_DMA_SetTriggerMode>:
{
 800bd80:	b480      	push	{r7}
 800bd82:	b087      	sub	sp, #28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_TRIGM,
 800bd90:	4a0c      	ldr	r2, [pc, #48]	@ (800bdc4 <LL_DMA_SetTriggerMode+0x44>)
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bda2:	4908      	ldr	r1, [pc, #32]	@ (800bdc4 <LL_DMA_SetTriggerMode+0x44>)
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	440b      	add	r3, r1
 800bdae:	4619      	mov	r1, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800bdb6:	bf00      	nop
 800bdb8:	371c      	adds	r7, #28
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	0801a488 	.word	0x0801a488

0800bdc8 <LL_DMA_SetPeriphRequest>:
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_REQSEL, Request);
 800bdd8:	4a0c      	ldr	r2, [pc, #48]	@ (800be0c <LL_DMA_SetPeriphRequest+0x44>)
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	4413      	add	r3, r2
 800bde4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bde6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bdea:	4908      	ldr	r1, [pc, #32]	@ (800be0c <LL_DMA_SetPeriphRequest+0x44>)
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	440b      	add	r3, r1
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800bdfe:	bf00      	nop
 800be00:	371c      	adds	r7, #28
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	0801a488 	.word	0x0801a488

0800be10 <LL_DMA_SetHWTrigger>:
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_TRIGSEL,
 800be20:	4a0d      	ldr	r2, [pc, #52]	@ (800be58 <LL_DMA_SetHWTrigger+0x48>)
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	4413      	add	r3, r2
 800be2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be2e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	041b      	lsls	r3, r3, #16
 800be36:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800be3a:	4807      	ldr	r0, [pc, #28]	@ (800be58 <LL_DMA_SetHWTrigger+0x48>)
 800be3c:	68b9      	ldr	r1, [r7, #8]
 800be3e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800be42:	6979      	ldr	r1, [r7, #20]
 800be44:	4401      	add	r1, r0
 800be46:	4313      	orrs	r3, r2
 800be48:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800be4a:	bf00      	nop
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	0801a488 	.word	0x0801a488

0800be5c <LL_DMA_ConfigBlkRptAddrUpdate>:
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1,
 800be6c:	4a0c      	ldr	r2, [pc, #48]	@ (800bea0 <LL_DMA_ConfigBlkRptAddrUpdate+0x44>)
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	4413      	add	r3, r2
 800be78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800be7e:	4908      	ldr	r1, [pc, #32]	@ (800bea0 <LL_DMA_ConfigBlkRptAddrUpdate+0x44>)
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	440b      	add	r3, r1
 800be8a:	4619      	mov	r1, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4313      	orrs	r3, r2
 800be90:	648b      	str	r3, [r1, #72]	@ 0x48
}
 800be92:	bf00      	nop
 800be94:	371c      	adds	r7, #28
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	0801a488 	.word	0x0801a488

0800bea4 <LL_DMA_SetBlkRptCount>:
{
 800bea4:	b480      	push	{r7}
 800bea6:	b087      	sub	sp, #28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BRC,
 800beb4:	4a0e      	ldr	r2, [pc, #56]	@ (800bef0 <LL_DMA_SetBlkRptCount+0x4c>)
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	4413      	add	r3, r2
 800bec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bec2:	f023 63ff 	bic.w	r3, r3, #133693440	@ 0x7f80000
 800bec6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	0411      	lsls	r1, r2, #16
 800bece:	4a09      	ldr	r2, [pc, #36]	@ (800bef4 <LL_DMA_SetBlkRptCount+0x50>)
 800bed0:	400a      	ands	r2, r1
 800bed2:	4807      	ldr	r0, [pc, #28]	@ (800bef0 <LL_DMA_SetBlkRptCount+0x4c>)
 800bed4:	68b9      	ldr	r1, [r7, #8]
 800bed6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800beda:	6979      	ldr	r1, [r7, #20]
 800bedc:	4401      	add	r1, r0
 800bede:	4313      	orrs	r3, r2
 800bee0:	648b      	str	r3, [r1, #72]	@ 0x48
}
 800bee2:	bf00      	nop
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	0801a488 	.word	0x0801a488
 800bef4:	07ff0000 	.word	0x07ff0000

0800bef8 <LL_DMA_SetBlkDataLength>:
{
 800bef8:	b480      	push	{r7}
 800befa:	b087      	sub	sp, #28
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BNDT,
 800bf08:	4a0c      	ldr	r2, [pc, #48]	@ (800bf3c <LL_DMA_SetBlkDataLength+0x44>)
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf16:	0c1b      	lsrs	r3, r3, #16
 800bf18:	041b      	lsls	r3, r3, #16
 800bf1a:	4908      	ldr	r1, [pc, #32]	@ (800bf3c <LL_DMA_SetBlkDataLength+0x44>)
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	440a      	add	r2, r1
 800bf26:	4611      	mov	r1, r2
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	648b      	str	r3, [r1, #72]	@ 0x48
}
 800bf2e:	bf00      	nop
 800bf30:	371c      	adds	r7, #28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	0801a488 	.word	0x0801a488

0800bf40 <LL_DMA_ConfigAddresses>:
{
 800bf40:	b480      	push	{r7}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CSAR, SrcAddress);
 800bf52:	4a0c      	ldr	r2, [pc, #48]	@ (800bf84 <LL_DMA_ConfigAddresses+0x44>)
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	461a      	mov	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 800bf64:	4a07      	ldr	r2, [pc, #28]	@ (800bf84 <LL_DMA_ConfigAddresses+0x44>)
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	4413      	add	r3, r2
 800bf70:	461a      	mov	r2, r3
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	6513      	str	r3, [r2, #80]	@ 0x50
}
 800bf76:	bf00      	nop
 800bf78:	371c      	adds	r7, #28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	0801a488 	.word	0x0801a488

0800bf88 <LL_DMA_ConfigAddrUpdateValue>:
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b087      	sub	sp, #28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR3,
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	0419      	lsls	r1, r3, #16
 800bfa4:	4b07      	ldr	r3, [pc, #28]	@ (800bfc4 <LL_DMA_ConfigAddrUpdateValue+0x3c>)
 800bfa6:	400b      	ands	r3, r1
 800bfa8:	4807      	ldr	r0, [pc, #28]	@ (800bfc8 <LL_DMA_ConfigAddrUpdateValue+0x40>)
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800bfb0:	6979      	ldr	r1, [r7, #20]
 800bfb2:	4401      	add	r1, r0
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	654b      	str	r3, [r1, #84]	@ 0x54
}
 800bfb8:	bf00      	nop
 800bfba:	371c      	adds	r7, #28
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr
 800bfc4:	1fff0000 	.word	0x1fff0000
 800bfc8:	0801a488 	.word	0x0801a488

0800bfcc <LL_DMA_ConfigBlkRptAddrUpdateValue>:
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR2,
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	041a      	lsls	r2, r3, #16
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	4807      	ldr	r0, [pc, #28]	@ (800c004 <LL_DMA_ConfigBlkRptAddrUpdateValue+0x38>)
 800bfe8:	68b9      	ldr	r1, [r7, #8]
 800bfea:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800bfee:	6979      	ldr	r1, [r7, #20]
 800bff0:	4401      	add	r1, r0
 800bff2:	4313      	orrs	r3, r2
 800bff4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800bff6:	bf00      	nop
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	0801a488 	.word	0x0801a488

0800c008 <LL_DMA_SetLinkedListAddrOffset>:
{
 800c008:	b480      	push	{r7}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CLLR, DMA_CLLR_LA,
 800c018:	4a0e      	ldr	r2, [pc, #56]	@ (800c054 <LL_DMA_SetLinkedListAddrOffset+0x4c>)
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	4413      	add	r3, r2
 800c024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c02a:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800c034:	400a      	ands	r2, r1
 800c036:	4807      	ldr	r0, [pc, #28]	@ (800c054 <LL_DMA_SetLinkedListAddrOffset+0x4c>)
 800c038:	68b9      	ldr	r1, [r7, #8]
 800c03a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c03e:	6979      	ldr	r1, [r7, #20]
 800c040:	4401      	add	r1, r0
 800c042:	4313      	orrs	r3, r2
 800c044:	67cb      	str	r3, [r1, #124]	@ 0x7c
}
 800c046:	bf00      	nop
 800c048:	371c      	adds	r7, #28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	0801a488 	.word	0x0801a488

0800c058 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS : DMA registers are initialized.
  *          - ERROR   : Not applicable.
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  {
    assert_param(IS_LL_DMA_PFREQ_INSTANCE(DMAx, Channel));
  }

  /* Check DMA instance */
  if (IS_LL_GPDMA_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	4a8a      	ldr	r2, [pc, #552]	@ (800c290 <LL_DMA_Init+0x238>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d117      	bne.n	800c09c <LL_DMA_Init+0x44>
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d02f      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d02c      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d029      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2b03      	cmp	r3, #3
 800c082:	d026      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2b04      	cmp	r3, #4
 800c088:	d023      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2b05      	cmp	r3, #5
 800c08e:	d020      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2b06      	cmp	r3, #6
 800c094:	d01d      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b07      	cmp	r3, #7
 800c09a:	d01a      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4a7d      	ldr	r2, [pc, #500]	@ (800c294 <LL_DMA_Init+0x23c>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d116      	bne.n	800c0d2 <LL_DMA_Init+0x7a>
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d013      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d010      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d00d      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d00a      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	d007      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b05      	cmp	r3, #5
 800c0c6:	d004      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2b06      	cmp	r3, #6
 800c0cc:	d001      	beq.n	800c0d2 <LL_DMA_Init+0x7a>
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b07      	cmp	r3, #7
    assert_param(IS_LL_DMA_TRIGGER_MODE(DMA_InitStruct->TriggerMode));
    assert_param(IS_LL_DMA_TRIGGER_SELECTION(DMA_InitStruct->TriggerSelection));
  }

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	4a6e      	ldr	r2, [pc, #440]	@ (800c290 <LL_DMA_Init+0x238>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d105      	bne.n	800c0e6 <LL_DMA_Init+0x8e>
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b06      	cmp	r3, #6
 800c0de:	d00b      	beq.n	800c0f8 <LL_DMA_Init+0xa0>
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2b07      	cmp	r3, #7
 800c0e4:	d008      	beq.n	800c0f8 <LL_DMA_Init+0xa0>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4a6a      	ldr	r2, [pc, #424]	@ (800c294 <LL_DMA_Init+0x23c>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d104      	bne.n	800c0f8 <LL_DMA_Init+0xa0>
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	2b06      	cmp	r3, #6
 800c0f2:	d001      	beq.n	800c0f8 <LL_DMA_Init+0xa0>
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2b07      	cmp	r3, #7

  /*-------------------------- DMAx CLBAR Configuration ------------------------
   * Configure the Transfer linked list address with parameter :
   * - LinkedListBaseAdd:                              DMA_CLBAR_LBA[31:16] bits
   */
  LL_DMA_SetLinkedListBaseAddr(DMAx, Channel, DMA_InitStruct->LinkedListBaseAddr);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0fe:	461a      	mov	r2, r3
 800c100:	68b9      	ldr	r1, [r7, #8]
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7ff fd78 	bl	800bbf8 <LL_DMA_SetLinkedListBaseAddr>
   * Configure the control parameter :
   * - LinkAllocatedPort:                              DMA_CCR_LAP bit
   * - LinkStepMode:                                   DMA_CCR_LSM bit
   * - Priority:                                       DMA_CCR_PRIO [23:22] bits
   */
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                       DMA_InitStruct->LinkAllocatedPort       | \
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 800c110:	431a      	orrs	r2, r3
                       DMA_InitStruct->LinkStepMode);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 800c116:	4313      	orrs	r3, r2
 800c118:	461a      	mov	r2, r3
 800c11a:	68b9      	ldr	r1, [r7, #8]
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f7ff fd8f 	bl	800bc40 <LL_DMA_ConfigControl>
   * - SrcIncMode:                                DMA_CTR1_SINC bit
   * - SrcDataWidth:                              DMA_CTR1_SDW_LOG2 [1:0] bits
   * - SrcBurstLength:                            DMA_CTR1_SBL_1 [9:4] bits
   * - DestBurstLength:                           DMA_CTR1_DBL_1 [25:20] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
                        DMA_InitStruct->DestHWordExchange                | \
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 800c12a:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestByteExchange                 | \
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        DMA_InitStruct->DestHWordExchange                | \
 800c130:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestIncMode                      | \
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                        DMA_InitStruct->DestByteExchange                 | \
 800c136:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestDataWidth                    | \
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a1b      	ldr	r3, [r3, #32]
                        DMA_InitStruct->DestIncMode                      | \
 800c13c:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcAllocatedPort                 | \
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                        DMA_InitStruct->DestDataWidth                    | \
 800c142:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcByteExchange                  | \
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                        DMA_InitStruct->SrcAllocatedPort                 | \
 800c148:	431a      	orrs	r2, r3
                        DMA_InitStruct->DataAlignment                    | \
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->SrcByteExchange                  | \
 800c14e:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcIncMode                       | \
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        DMA_InitStruct->DataAlignment                    | \
 800c154:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcDataWidth);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	69db      	ldr	r3, [r3, #28]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 800c15a:	4313      	orrs	r3, r2
 800c15c:	461a      	mov	r2, r3
 800c15e:	68b9      	ldr	r1, [r7, #8]
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff fd91 	bl	800bc88 <LL_DMA_ConfigTransfer>
  /* Check DMA instance */
  if (IS_LL_GPDMA_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	4a49      	ldr	r2, [pc, #292]	@ (800c290 <LL_DMA_Init+0x238>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d117      	bne.n	800c19e <LL_DMA_Init+0x146>
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d030      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d02d      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d02a      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2b03      	cmp	r3, #3
 800c184:	d027      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b04      	cmp	r3, #4
 800c18a:	d024      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2b05      	cmp	r3, #5
 800c190:	d021      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2b06      	cmp	r3, #6
 800c196:	d01e      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b07      	cmp	r3, #7
 800c19c:	d01b      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	4a3c      	ldr	r2, [pc, #240]	@ (800c294 <LL_DMA_Init+0x23c>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d119      	bne.n	800c1da <LL_DMA_Init+0x182>
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d014      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d011      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d00e      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d00b      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b04      	cmp	r3, #4
 800c1c2:	d008      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2b05      	cmp	r3, #5
 800c1c8:	d005      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2b06      	cmp	r3, #6
 800c1ce:	d002      	beq.n	800c1d6 <LL_DMA_Init+0x17e>
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2b07      	cmp	r3, #7
 800c1d4:	d101      	bne.n	800c1da <LL_DMA_Init+0x182>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e000      	b.n	800c1dc <LL_DMA_Init+0x184>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d007      	beq.n	800c1f0 <LL_DMA_Init+0x198>
  {
    LL_DMA_ConfigBurstLength(DMAx, Channel,  DMA_InitStruct->SrcBurstLength,
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	695a      	ldr	r2, [r3, #20]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	68b9      	ldr	r1, [r7, #8]
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f7ff fd72 	bl	800bcd4 <LL_DMA_ConfigBurstLength>
   * - Direction:                                  DMA_CTR2_DREQ bit
   * - Direction:                                  DMA_CTR2_SWREQ bit
   * - TriggerSelection:                           DMA_CTR2_TRIGSEL [21:16] bits
   * - Request:                                    DMA_CTR2_REQSEL [6:0] bits
   */
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
                               DMA_InitStruct->TriggerPolarity                  | \
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 800c1f8:	431a      	orrs	r2, r3
                               DMA_InitStruct->BlkHWRequest                     | \
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68db      	ldr	r3, [r3, #12]
                               DMA_InitStruct->TriggerPolarity                  | \
 800c1fe:	431a      	orrs	r2, r3
                               DMA_InitStruct->Mode                             | \
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
                               DMA_InitStruct->BlkHWRequest                     | \
 800c206:	431a      	orrs	r2, r3
                               DMA_InitStruct->Direction);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	689b      	ldr	r3, [r3, #8]
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 800c20c:	4313      	orrs	r3, r2
 800c20e:	461a      	mov	r2, r3
 800c210:	68b9      	ldr	r1, [r7, #8]
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f7ff fd8e 	bl	800bd34 <LL_DMA_ConfigChannelTransfer>

  /* Check direction */
  if (DMA_InitStruct->Direction != LL_DMA_DIRECTION_MEMORY_TO_MEMORY)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c220:	d006      	beq.n	800c230 <LL_DMA_Init+0x1d8>
  {
    LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->Request);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c226:	461a      	mov	r2, r3
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f7ff fdcc 	bl	800bdc8 <LL_DMA_SetPeriphRequest>
  }

  /* Check trigger polarity */
  if (DMA_InitStruct->TriggerPolarity != LL_DMA_TRIG_POLARITY_MASKED)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00d      	beq.n	800c254 <LL_DMA_Init+0x1fc>
  {
    LL_DMA_SetHWTrigger(DMAx, Channel, DMA_InitStruct->TriggerSelection);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c23c:	461a      	mov	r2, r3
 800c23e:	68b9      	ldr	r1, [r7, #8]
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f7ff fde5 	bl	800be10 <LL_DMA_SetHWTrigger>
    LL_DMA_SetTriggerMode(DMAx, Channel, DMA_InitStruct->TriggerMode);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c24a:	461a      	mov	r2, r3
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f7ff fd96 	bl	800bd80 <LL_DMA_SetTriggerMode>
   * - SrcAddrUpdateMode:                                      DMA_CBR1_SDEC bit
   *   SrcAddrUpdateMode field is supported only by 2D addressing channels.
   * - DestAddrUpdateMode:                                     DMA_CBR1_DDEC bit
   *   DestAddrUpdateMode field is supported only by 2D addressing channels.
   */
  LL_DMA_SetBlkDataLength(DMAx, Channel, DMA_InitStruct->BlkDataLength);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c258:	461a      	mov	r2, r3
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f7ff fe4b 	bl	800bef8 <LL_DMA_SetBlkDataLength>

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4a0a      	ldr	r2, [pc, #40]	@ (800c290 <LL_DMA_Init+0x238>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d105      	bne.n	800c276 <LL_DMA_Init+0x21e>
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2b06      	cmp	r3, #6
 800c26e:	d00c      	beq.n	800c28a <LL_DMA_Init+0x232>
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2b07      	cmp	r3, #7
 800c274:	d009      	beq.n	800c28a <LL_DMA_Init+0x232>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4a06      	ldr	r2, [pc, #24]	@ (800c294 <LL_DMA_Init+0x23c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d10c      	bne.n	800c298 <LL_DMA_Init+0x240>
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2b06      	cmp	r3, #6
 800c282:	d002      	beq.n	800c28a <LL_DMA_Init+0x232>
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	2b07      	cmp	r3, #7
 800c288:	d106      	bne.n	800c298 <LL_DMA_Init+0x240>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e005      	b.n	800c29a <LL_DMA_Init+0x242>
 800c28e:	bf00      	nop
 800c290:	40020000 	.word	0x40020000
 800c294:	40021000 	.word	0x40021000
 800c298:	2300      	movs	r3, #0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d016      	beq.n	800c2cc <LL_DMA_Init+0x274>
  {
    LL_DMA_SetBlkRptCount(DMAx, Channel, DMA_InitStruct->BlkRptCount);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f7ff fdfc 	bl	800bea4 <LL_DMA_SetBlkRptCount>
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                                  DMA_InitStruct->BlkRptDestAddrUpdateMode                | \
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 800c2b4:	431a      	orrs	r2, r3
                                  DMA_InitStruct->SrcAddrUpdateMode                       | \
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                                  DMA_InitStruct->BlkRptDestAddrUpdateMode                | \
 800c2ba:	431a      	orrs	r2, r3
                                  DMA_InitStruct->DestAddrUpdateMode);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f7ff fdc8 	bl	800be5c <LL_DMA_ConfigBlkRptAddrUpdate>
  /*-------------------------- DMAx CSAR and CDAR Configuration ----------------
   * Configure the Transfer source address with parameter :
   * - SrcAddress:                                        DMA_CSAR_SA[31:0] bits
   * - DestAddress:                                       DMA_CDAR_DA[31:0] bits
   */
  LL_DMA_ConfigAddresses(DMAx, Channel, DMA_InitStruct->SrcAddress, DMA_InitStruct->DestAddress);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f7ff fe32 	bl	800bf40 <LL_DMA_ConfigAddresses>

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4a1b      	ldr	r2, [pc, #108]	@ (800c34c <LL_DMA_Init+0x2f4>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d105      	bne.n	800c2f0 <LL_DMA_Init+0x298>
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b06      	cmp	r3, #6
 800c2e8:	d00c      	beq.n	800c304 <LL_DMA_Init+0x2ac>
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	2b07      	cmp	r3, #7
 800c2ee:	d009      	beq.n	800c304 <LL_DMA_Init+0x2ac>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4a17      	ldr	r2, [pc, #92]	@ (800c350 <LL_DMA_Init+0x2f8>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d107      	bne.n	800c308 <LL_DMA_Init+0x2b0>
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2b06      	cmp	r3, #6
 800c2fc:	d002      	beq.n	800c304 <LL_DMA_Init+0x2ac>
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2b07      	cmp	r3, #7
 800c302:	d101      	bne.n	800c308 <LL_DMA_Init+0x2b0>
 800c304:	2301      	movs	r3, #1
 800c306:	e000      	b.n	800c30a <LL_DMA_Init+0x2b2>
 800c308:	2300      	movs	r3, #0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d011      	beq.n	800c332 <LL_DMA_Init+0x2da>
     * - SrcAddrOffset:                                 DMA_CTR3_SAO[28:16] bits
     *   SrcAddrOffset field is supported only by 2D addressing channels.
     * - DestAddrOffset:                                DMA_CTR3_DAO[12:0] bits
     *   DestAddrOffset field is supported only by 2D addressing channels.
     */
    LL_DMA_ConfigAddrUpdateValue(DMAx, Channel, DMA_InitStruct->SrcAddrOffset, DMA_InitStruct->DestAddrOffset);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7ff fe35 	bl	800bf88 <LL_DMA_ConfigAddrUpdateValue>
     * - BlkRptSrcAddrOffset:                         DMA_CBR2_BRSAO[15:0] bits
     *   BlkRptSrcAddrOffset field is supported only by 2D addressing channels.
     * - BlkRptDestAddrOffset:                        DMA_CBR2_BRDAO[31:16] bits
     *   BlkRptDestAddrOffset field is supported only by 2D addressing channels.
     */
    LL_DMA_ConfigBlkRptAddrUpdateValue(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrOffset,
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c32a:	68b9      	ldr	r1, [r7, #8]
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f7ff fe4d 	bl	800bfcc <LL_DMA_ConfigBlkRptAddrUpdateValue>

  /*-------------------------- DMAx CLLR Configuration -------------------------
   * Configure the Transfer linked list address with parameter :
   * - DestAddrOffset:                                    DMA_CLLR_LA[15:2] bits
   */
  LL_DMA_SetLinkedListAddrOffset(DMAx, Channel, DMA_InitStruct->LinkedListAddrOffset);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c338:	461a      	mov	r2, r3
 800c33a:	68b9      	ldr	r1, [r7, #8]
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f7ff fe63 	bl	800c008 <LL_DMA_SetLinkedListAddrOffset>

  return (uint32_t)SUCCESS;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	40020000 	.word	0x40020000
 800c350:	40021000 	.word	0x40021000

0800c354 <LL_GPIO_SetPinMode>:
{
 800c354:	b480      	push	{r7}
 800c356:	b08b      	sub	sp, #44	@ 0x2c
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	fa93 f3a3 	rbit	r3, r3
 800c36e:	613b      	str	r3, [r7, #16]
  return result;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800c37a:	2320      	movs	r3, #32
 800c37c:	e003      	b.n	800c386 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	fab3 f383 	clz	r3, r3
 800c384:	b2db      	uxtb	r3, r3
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	2103      	movs	r1, #3
 800c38a:	fa01 f303 	lsl.w	r3, r1, r3
 800c38e:	43db      	mvns	r3, r3
 800c390:	401a      	ands	r2, r3
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	fa93 f3a3 	rbit	r3, r3
 800c39c:	61fb      	str	r3, [r7, #28]
  return result;
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800c3a8:	2320      	movs	r3, #32
 800c3aa:	e003      	b.n	800c3b4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ae:	fab3 f383 	clz	r3, r3
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3bc:	431a      	orrs	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	601a      	str	r2, [r3, #0]
}
 800c3c2:	bf00      	nop
 800c3c4:	372c      	adds	r7, #44	@ 0x2c
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <LL_GPIO_SetPinOutputType>:
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	60f8      	str	r0, [r7, #12]
 800c3d6:	60b9      	str	r1, [r7, #8]
 800c3d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	43db      	mvns	r3, r3
 800c3e2:	401a      	ands	r2, r3
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	6879      	ldr	r1, [r7, #4]
 800c3e8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ec:	431a      	orrs	r2, r3
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	605a      	str	r2, [r3, #4]
}
 800c3f2:	bf00      	nop
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <LL_GPIO_SetPinSpeed>:
{
 800c3fe:	b480      	push	{r7}
 800c400:	b08b      	sub	sp, #44	@ 0x2c
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	689a      	ldr	r2, [r3, #8]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	fa93 f3a3 	rbit	r3, r3
 800c418:	613b      	str	r3, [r7, #16]
  return result;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d101      	bne.n	800c428 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800c424:	2320      	movs	r3, #32
 800c426:	e003      	b.n	800c430 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	fab3 f383 	clz	r3, r3
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	005b      	lsls	r3, r3, #1
 800c432:	2103      	movs	r1, #3
 800c434:	fa01 f303 	lsl.w	r3, r1, r3
 800c438:	43db      	mvns	r3, r3
 800c43a:	401a      	ands	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	fa93 f3a3 	rbit	r3, r3
 800c446:	61fb      	str	r3, [r7, #28]
  return result;
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800c452:	2320      	movs	r3, #32
 800c454:	e003      	b.n	800c45e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c458:	fab3 f383 	clz	r3, r3
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	005b      	lsls	r3, r3, #1
 800c460:	6879      	ldr	r1, [r7, #4]
 800c462:	fa01 f303 	lsl.w	r3, r1, r3
 800c466:	431a      	orrs	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	609a      	str	r2, [r3, #8]
}
 800c46c:	bf00      	nop
 800c46e:	372c      	adds	r7, #44	@ 0x2c
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <LL_GPIO_SetPinPull>:
{
 800c478:	b480      	push	{r7}
 800c47a:	b08b      	sub	sp, #44	@ 0x2c
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	68da      	ldr	r2, [r3, #12]
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	fa93 f3a3 	rbit	r3, r3
 800c492:	613b      	str	r3, [r7, #16]
  return result;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800c49e:	2320      	movs	r3, #32
 800c4a0:	e003      	b.n	800c4aa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	fab3 f383 	clz	r3, r3
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	005b      	lsls	r3, r3, #1
 800c4ac:	2103      	movs	r1, #3
 800c4ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b2:	43db      	mvns	r3, r3
 800c4b4:	401a      	ands	r2, r3
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4ba:	6a3b      	ldr	r3, [r7, #32]
 800c4bc:	fa93 f3a3 	rbit	r3, r3
 800c4c0:	61fb      	str	r3, [r7, #28]
  return result;
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800c4cc:	2320      	movs	r3, #32
 800c4ce:	e003      	b.n	800c4d8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d2:	fab3 f383 	clz	r3, r3
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	6879      	ldr	r1, [r7, #4]
 800c4dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	60da      	str	r2, [r3, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	372c      	adds	r7, #44	@ 0x2c
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <LL_GPIO_SetAFPin_0_7>:
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b08b      	sub	sp, #44	@ 0x2c
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6a1a      	ldr	r2, [r3, #32]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	fa93 f3a3 	rbit	r3, r3
 800c50c:	613b      	str	r3, [r7, #16]
  return result;
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800c518:	2320      	movs	r3, #32
 800c51a:	e003      	b.n	800c524 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	fab3 f383 	clz	r3, r3
 800c522:	b2db      	uxtb	r3, r3
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	210f      	movs	r1, #15
 800c528:	fa01 f303 	lsl.w	r3, r1, r3
 800c52c:	43db      	mvns	r3, r3
 800c52e:	401a      	ands	r2, r3
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	fa93 f3a3 	rbit	r3, r3
 800c53a:	61fb      	str	r3, [r7, #28]
  return result;
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800c546:	2320      	movs	r3, #32
 800c548:	e003      	b.n	800c552 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800c54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54c:	fab3 f383 	clz	r3, r3
 800c550:	b2db      	uxtb	r3, r3
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	6879      	ldr	r1, [r7, #4]
 800c556:	fa01 f303 	lsl.w	r3, r1, r3
 800c55a:	431a      	orrs	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	621a      	str	r2, [r3, #32]
}
 800c560:	bf00      	nop
 800c562:	372c      	adds	r7, #44	@ 0x2c
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <LL_GPIO_SetAFPin_8_15>:
{
 800c56c:	b480      	push	{r7}
 800c56e:	b08b      	sub	sp, #44	@ 0x2c
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	0a1b      	lsrs	r3, r3, #8
 800c580:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	fa93 f3a3 	rbit	r3, r3
 800c588:	613b      	str	r3, [r7, #16]
  return result;
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800c594:	2320      	movs	r3, #32
 800c596:	e003      	b.n	800c5a0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	fab3 f383 	clz	r3, r3
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	210f      	movs	r1, #15
 800c5a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a8:	43db      	mvns	r3, r3
 800c5aa:	401a      	ands	r2, r3
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	0a1b      	lsrs	r3, r3, #8
 800c5b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5b2:	6a3b      	ldr	r3, [r7, #32]
 800c5b4:	fa93 f3a3 	rbit	r3, r3
 800c5b8:	61fb      	str	r3, [r7, #28]
  return result;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800c5c4:	2320      	movs	r3, #32
 800c5c6:	e003      	b.n	800c5d0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ca:	fab3 f383 	clz	r3, r3
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d8:	431a      	orrs	r2, r3
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c5de:	bf00      	nop
 800c5e0:	372c      	adds	r7, #44	@ 0x2c
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b08a      	sub	sp, #40	@ 0x28
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	fa93 f3a3 	rbit	r3, r3
 800c600:	617b      	str	r3, [r7, #20]
  return result;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <LL_GPIO_Init+0x26>
    return 32U;
 800c60c:	2320      	movs	r3, #32
 800c60e:	e003      	b.n	800c618 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	fab3 f383 	clz	r3, r3
 800c616:	b2db      	uxtb	r3, r3
 800c618:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800c61a:	e058      	b.n	800c6ce <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	2101      	movs	r1, #1
 800c622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c624:	fa01 f303 	lsl.w	r3, r1, r3
 800c628:	4013      	ands	r3, r2
 800c62a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d04a      	beq.n	800c6c8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d003      	beq.n	800c642 <LL_GPIO_Init+0x58>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d10e      	bne.n	800c660 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	461a      	mov	r2, r3
 800c648:	6a39      	ldr	r1, [r7, #32]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff fed7 	bl	800c3fe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	6819      	ldr	r1, [r3, #0]
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	461a      	mov	r2, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff feb7 	bl	800c3ce <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	461a      	mov	r2, r3
 800c666:	6a39      	ldr	r1, [r7, #32]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff ff05 	bl	800c478 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	2b02      	cmp	r3, #2
 800c674:	d121      	bne.n	800c6ba <LL_GPIO_Init+0xd0>
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	fa93 f3a3 	rbit	r3, r3
 800c680:	60bb      	str	r3, [r7, #8]
  return result;
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d101      	bne.n	800c690 <LL_GPIO_Init+0xa6>
    return 32U;
 800c68c:	2320      	movs	r3, #32
 800c68e:	e003      	b.n	800c698 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	fab3 f383 	clz	r3, r3
 800c696:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800c698:	2b07      	cmp	r3, #7
 800c69a:	d807      	bhi.n	800c6ac <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	6a39      	ldr	r1, [r7, #32]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff ff24 	bl	800c4f2 <LL_GPIO_SetAFPin_0_7>
 800c6aa:	e006      	b.n	800c6ba <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	6a39      	ldr	r1, [r7, #32]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f7ff ff59 	bl	800c56c <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	6a39      	ldr	r1, [r7, #32]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff fe46 	bl	800c354 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d19f      	bne.n	800c61c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3728      	adds	r7, #40	@ 0x28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <LL_LPUART_IsEnabled>:
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b083      	sub	sp, #12
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 0301 	and.w	r3, r3, #1
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d101      	bne.n	800c6fe <LL_LPUART_IsEnabled+0x18>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e000      	b.n	800c700 <LL_LPUART_IsEnabled+0x1a>
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <LL_LPUART_SetPrescaler>:
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c71a:	f023 030f 	bic.w	r3, r3, #15
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	b292      	uxth	r2, r2
 800c722:	431a      	orrs	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c728:	bf00      	nop
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <LL_LPUART_SetStopBitsLength>:
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	431a      	orrs	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	605a      	str	r2, [r3, #4]
}
 800c74e:	bf00      	nop
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <LL_LPUART_SetHWFlowCtrl>:
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	609a      	str	r2, [r3, #8]
}
 800c774:	bf00      	nop
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <LL_LPUART_SetBaudRate>:
{
 800c780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c784:	b088      	sub	sp, #32
 800c786:	af00      	add	r7, sp, #0
 800c788:	61f8      	str	r0, [r7, #28]
 800c78a:	61b9      	str	r1, [r7, #24]
 800c78c:	617a      	str	r2, [r7, #20]
 800c78e:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d039      	beq.n	800c80a <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	2200      	movs	r2, #0
 800c79a:	60bb      	str	r3, [r7, #8]
 800c79c:	60fa      	str	r2, [r7, #12]
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c814 <LL_LPUART_SetBaudRate+0x94>)
 800c7a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	603b      	str	r3, [r7, #0]
 800c7b0:	607a      	str	r2, [r7, #4]
 800c7b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c7ba:	f7f4 fa05 	bl	8000bc8 <__aeabi_uldivmod>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	f04f 0200 	mov.w	r2, #0
 800c7ca:	f04f 0300 	mov.w	r3, #0
 800c7ce:	020b      	lsls	r3, r1, #8
 800c7d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7d4:	0202      	lsls	r2, r0, #8
 800c7d6:	6939      	ldr	r1, [r7, #16]
 800c7d8:	0849      	lsrs	r1, r1, #1
 800c7da:	2000      	movs	r0, #0
 800c7dc:	460c      	mov	r4, r1
 800c7de:	4605      	mov	r5, r0
 800c7e0:	eb12 0804 	adds.w	r8, r2, r4
 800c7e4:	eb43 0905 	adc.w	r9, r3, r5
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	469a      	mov	sl, r3
 800c7ee:	4693      	mov	fp, r2
 800c7f0:	4652      	mov	r2, sl
 800c7f2:	465b      	mov	r3, fp
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f7f4 f9e6 	bl	8000bc8 <__aeabi_uldivmod>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4613      	mov	r3, r2
 800c802:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	60da      	str	r2, [r3, #12]
}
 800c80a:	bf00      	nop
 800c80c:	3720      	adds	r7, #32
 800c80e:	46bd      	mov	sp, r7
 800c810:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c814:	0801a4a8 	.word	0x0801a4a8

0800c818 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c822:	2301      	movs	r3, #1
 800c824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7ff ff5d 	bl	800c6e6 <LL_LPUART_IsEnabled>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d136      	bne.n	800c8a0 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	4b1d      	ldr	r3, [pc, #116]	@ (800c8ac <LL_LPUART_Init+0x94>)
 800c838:	4013      	ands	r3, r2
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	6891      	ldr	r1, [r2, #8]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	6912      	ldr	r2, [r2, #16]
 800c842:	4311      	orrs	r1, r2
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	6952      	ldr	r2, [r2, #20]
 800c848:	430a      	orrs	r2, r1
 800c84a:	431a      	orrs	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	4619      	mov	r1, r3
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff ff6c 	bl	800c734 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	699b      	ldr	r3, [r3, #24]
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff ff79 	bl	800c75a <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 800c868:	f04f 60e0 	mov.w	r0, #117440512	@ 0x7000000
 800c86c:	f001 fbb8 	bl	800dfe0 <LL_RCC_GetLPUARTClockFreq>
 800c870:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00d      	beq.n	800c894 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d009      	beq.n	800c894 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 800c880:	2300      	movs	r3, #0
 800c882:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7ff ff76 	bl	800c780 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4619      	mov	r1, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7ff ff36 	bl	800c70c <LL_LPUART_SetPrescaler>
  }

  return (status);
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	efffe9f3 	.word	0xefffe9f3

0800c8b0 <LL_RCC_HSE_IsReady>:
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 800c8b4:	4b07      	ldr	r3, [pc, #28]	@ (800c8d4 <LL_RCC_HSE_IsReady+0x24>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8c0:	d101      	bne.n	800c8c6 <LL_RCC_HSE_IsReady+0x16>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e000      	b.n	800c8c8 <LL_RCC_HSE_IsReady+0x18>
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	44020c00 	.word	0x44020c00

0800c8d8 <LL_RCC_HSI_IsReady>:
{
 800c8d8:	b480      	push	{r7}
 800c8da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800c8dc:	4b06      	ldr	r3, [pc, #24]	@ (800c8f8 <LL_RCC_HSI_IsReady+0x20>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d101      	bne.n	800c8ec <LL_RCC_HSI_IsReady+0x14>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e000      	b.n	800c8ee <LL_RCC_HSI_IsReady+0x16>
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	44020c00 	.word	0x44020c00

0800c8fc <LL_RCC_HSI_GetDivider>:
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800c900:	4b04      	ldr	r3, [pc, #16]	@ (800c914 <LL_RCC_HSI_GetDivider+0x18>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0318 	and.w	r3, r3, #24
}
 800c908:	4618      	mov	r0, r3
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	44020c00 	.word	0x44020c00

0800c918 <LL_RCC_CSI_IsReady>:
{
 800c918:	b480      	push	{r7}
 800c91a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800c91c:	4b07      	ldr	r3, [pc, #28]	@ (800c93c <LL_RCC_CSI_IsReady+0x24>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c928:	d101      	bne.n	800c92e <LL_RCC_CSI_IsReady+0x16>
 800c92a:	2301      	movs	r3, #1
 800c92c:	e000      	b.n	800c930 <LL_RCC_CSI_IsReady+0x18>
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	44020c00 	.word	0x44020c00

0800c940 <LL_RCC_LSE_IsReady>:
{
 800c940:	b480      	push	{r7}
 800c942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800c944:	4b07      	ldr	r3, [pc, #28]	@ (800c964 <LL_RCC_LSE_IsReady+0x24>)
 800c946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c94a:	f003 0302 	and.w	r3, r3, #2
 800c94e:	2b02      	cmp	r3, #2
 800c950:	d101      	bne.n	800c956 <LL_RCC_LSE_IsReady+0x16>
 800c952:	2301      	movs	r3, #1
 800c954:	e000      	b.n	800c958 <LL_RCC_LSE_IsReady+0x18>
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	44020c00 	.word	0x44020c00

0800c968 <LL_RCC_GetSysClkSource>:
{
 800c968:	b480      	push	{r7}
 800c96a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 800c96c:	4b04      	ldr	r3, [pc, #16]	@ (800c980 <LL_RCC_GetSysClkSource+0x18>)
 800c96e:	69db      	ldr	r3, [r3, #28]
 800c970:	f003 0318 	and.w	r3, r3, #24
}
 800c974:	4618      	mov	r0, r3
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	44020c00 	.word	0x44020c00

0800c984 <LL_RCC_GetAHBPrescaler>:
{
 800c984:	b480      	push	{r7}
 800c986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
 800c988:	4b04      	ldr	r3, [pc, #16]	@ (800c99c <LL_RCC_GetAHBPrescaler+0x18>)
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	f003 030f 	and.w	r3, r3, #15
}
 800c990:	4618      	mov	r0, r3
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	44020c00 	.word	0x44020c00

0800c9a0 <LL_RCC_GetAPB1Prescaler>:
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
 800c9a4:	4b04      	ldr	r3, [pc, #16]	@ (800c9b8 <LL_RCC_GetAPB1Prescaler+0x18>)
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	44020c00 	.word	0x44020c00

0800c9bc <LL_RCC_GetAPB2Prescaler>:
{
 800c9bc:	b480      	push	{r7}
 800c9be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
 800c9c0:	4b04      	ldr	r3, [pc, #16]	@ (800c9d4 <LL_RCC_GetAPB2Prescaler+0x18>)
 800c9c2:	6a1b      	ldr	r3, [r3, #32]
 800c9c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	44020c00 	.word	0x44020c00

0800c9d8 <LL_RCC_GetAPB3Prescaler>:
{
 800c9d8:	b480      	push	{r7}
 800c9da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE3));
 800c9dc:	4b04      	ldr	r3, [pc, #16]	@ (800c9f0 <LL_RCC_GetAPB3Prescaler+0x18>)
 800c9de:	6a1b      	ldr	r3, [r3, #32]
 800c9e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	44020c00 	.word	0x44020c00

0800c9f4 <LL_RCC_GetClockSource>:
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	4b0e      	ldr	r3, [pc, #56]	@ (800ca3c <LL_RCC_GetClockSource+0x48>)
 800ca02:	4413      	add	r3, r2
 800ca04:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	0e19      	lsrs	r1, r3, #24
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	0a1b      	lsrs	r3, r3, #8
 800ca12:	f003 031f 	and.w	r3, r3, #31
 800ca16:	fa01 f303 	lsl.w	r3, r1, r3
 800ca1a:	401a      	ands	r2, r3
                               LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	0a1b      	lsrs	r3, r3, #8
 800ca20:	f003 031f 	and.w	r3, r3, #31
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 800ca24:	fa22 f303 	lsr.w	r3, r2, r3
                               LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800ca28:	041a      	lsls	r2, r3, #16
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4313      	orrs	r3, r2
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3714      	adds	r7, #20
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	44020cd8 	.word	0x44020cd8

0800ca40 <LL_RCC_GetUSARTClockSource>:
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(USARTx);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7ff ffd3 	bl	800c9f4 <LL_RCC_GetClockSource>
 800ca4e:	4603      	mov	r3, r0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <LL_RCC_GetUARTClockSource>:
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(UARTx);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7ff ffc7 	bl	800c9f4 <LL_RCC_GetClockSource>
 800ca66:	4603      	mov	r3, r0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <LL_RCC_GetLPUARTClockSource>:
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, LPUARTx));
 800ca78:	4b05      	ldr	r3, [pc, #20]	@ (800ca90 <LL_RCC_GetLPUARTClockSource+0x20>)
 800ca7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4013      	ands	r3, r2
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	370c      	adds	r7, #12
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	44020c00 	.word	0x44020c00

0800ca94 <LL_RCC_PLL1_GetSource>:
{
 800ca94:	b480      	push	{r7}
 800ca96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC));
 800ca98:	4b04      	ldr	r3, [pc, #16]	@ (800caac <LL_RCC_PLL1_GetSource+0x18>)
 800ca9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca9c:	f003 0303 	and.w	r3, r3, #3
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	44020c00 	.word	0x44020c00

0800cab0 <LL_RCC_PLL1_GetN>:
{
 800cab0:	b480      	push	{r7}
 800cab2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 800cab4:	4b04      	ldr	r3, [pc, #16]	@ (800cac8 <LL_RCC_PLL1_GetN+0x18>)
 800cab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cabc:	3301      	adds	r3, #1
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	44020c00 	.word	0x44020c00

0800cacc <LL_RCC_PLL1_GetP>:
{
 800cacc:	b480      	push	{r7}
 800cace:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P) >>  RCC_PLL1DIVR_PLL1P_Pos) + 1UL);
 800cad0:	4b05      	ldr	r3, [pc, #20]	@ (800cae8 <LL_RCC_PLL1_GetP+0x1c>)
 800cad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cad4:	0a5b      	lsrs	r3, r3, #9
 800cad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cada:	3301      	adds	r3, #1
}
 800cadc:	4618      	mov	r0, r3
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	44020c00 	.word	0x44020c00

0800caec <LL_RCC_PLL1_GetM>:
{
 800caec:	b480      	push	{r7}
 800caee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos);
 800caf0:	4b04      	ldr	r3, [pc, #16]	@ (800cb04 <LL_RCC_PLL1_GetM+0x18>)
 800caf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf4:	0a1b      	lsrs	r3, r3, #8
 800caf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	44020c00 	.word	0x44020c00

0800cb08 <LL_RCC_PLL2_IsReady>:
{
 800cb08:	b480      	push	{r7}
 800cb0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == RCC_CR_PLL2RDY) ? 1UL : 0UL);
 800cb0c:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <LL_RCC_PLL2_IsReady+0x24>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb18:	d101      	bne.n	800cb1e <LL_RCC_PLL2_IsReady+0x16>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e000      	b.n	800cb20 <LL_RCC_PLL2_IsReady+0x18>
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	44020c00 	.word	0x44020c00

0800cb30 <LL_RCC_PLL2_GetSource>:
{
 800cb30:	b480      	push	{r7}
 800cb32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2SRC));
 800cb34:	4b04      	ldr	r3, [pc, #16]	@ (800cb48 <LL_RCC_PLL2_GetSource+0x18>)
 800cb36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb38:	f003 0303 	and.w	r3, r3, #3
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	44020c00 	.word	0x44020c00

0800cb4c <LL_RCC_PLL2_GetM>:
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2M) >>  RCC_PLL2CFGR_PLL2M_Pos);
 800cb50:	4b04      	ldr	r3, [pc, #16]	@ (800cb64 <LL_RCC_PLL2_GetM+0x18>)
 800cb52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb54:	0a1b      	lsrs	r3, r3, #8
 800cb56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	44020c00 	.word	0x44020c00

0800cb68 <LL_RCC_PLL2_GetN>:
{
 800cb68:	b480      	push	{r7}
 800cb6a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2N) >>  RCC_PLL2DIVR_PLL2N_Pos) + 1UL);
 800cb6c:	4b04      	ldr	r3, [pc, #16]	@ (800cb80 <LL_RCC_PLL2_GetN+0x18>)
 800cb6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb74:	3301      	adds	r3, #1
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	44020c00 	.word	0x44020c00

0800cb84 <LL_RCC_PLL2_GetP>:
{
 800cb84:	b480      	push	{r7}
 800cb86:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2P) >>  RCC_PLL2DIVR_PLL2P_Pos) + 1UL);
 800cb88:	4b05      	ldr	r3, [pc, #20]	@ (800cba0 <LL_RCC_PLL2_GetP+0x1c>)
 800cb8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb8c:	0a5b      	lsrs	r3, r3, #9
 800cb8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb92:	3301      	adds	r3, #1
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	44020c00 	.word	0x44020c00

0800cba4 <LL_RCC_PLL2_GetQ>:
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2Q) >>  RCC_PLL2DIVR_PLL2Q_Pos) + 1UL);
 800cba8:	4b05      	ldr	r3, [pc, #20]	@ (800cbc0 <LL_RCC_PLL2_GetQ+0x1c>)
 800cbaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbac:	0c1b      	lsrs	r3, r3, #16
 800cbae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbb2:	3301      	adds	r3, #1
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	44020c00 	.word	0x44020c00

0800cbc4 <LL_RCC_PLL2_GetR>:
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2R) >>  RCC_PLL2DIVR_PLL2R_Pos) + 1UL);
 800cbc8:	4b05      	ldr	r3, [pc, #20]	@ (800cbe0 <LL_RCC_PLL2_GetR+0x1c>)
 800cbca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbcc:	0e1b      	lsrs	r3, r3, #24
 800cbce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbd2:	3301      	adds	r3, #1
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	44020c00 	.word	0x44020c00

0800cbe4 <LL_RCC_PLL2P_IsEnabled>:
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2PEN) == RCC_PLL2CFGR_PLL2PEN) ? 1UL : 0UL);
 800cbe8:	4b07      	ldr	r3, [pc, #28]	@ (800cc08 <LL_RCC_PLL2P_IsEnabled+0x24>)
 800cbea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cbf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbf4:	d101      	bne.n	800cbfa <LL_RCC_PLL2P_IsEnabled+0x16>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e000      	b.n	800cbfc <LL_RCC_PLL2P_IsEnabled+0x18>
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	44020c00 	.word	0x44020c00

0800cc0c <LL_RCC_PLL2Q_IsEnabled>:
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2QEN) == RCC_PLL2CFGR_PLL2QEN) ? 1UL : 0UL);
 800cc10:	4b07      	ldr	r3, [pc, #28]	@ (800cc30 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800cc12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc1c:	d101      	bne.n	800cc22 <LL_RCC_PLL2Q_IsEnabled+0x16>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e000      	b.n	800cc24 <LL_RCC_PLL2Q_IsEnabled+0x18>
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	44020c00 	.word	0x44020c00

0800cc34 <LL_RCC_PLL2R_IsEnabled>:
{
 800cc34:	b480      	push	{r7}
 800cc36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2REN) == RCC_PLL2CFGR_PLL2REN) ? 1UL : 0UL);
 800cc38:	4b07      	ldr	r3, [pc, #28]	@ (800cc58 <LL_RCC_PLL2R_IsEnabled+0x24>)
 800cc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cc44:	d101      	bne.n	800cc4a <LL_RCC_PLL2R_IsEnabled+0x16>
 800cc46:	2301      	movs	r3, #1
 800cc48:	e000      	b.n	800cc4c <LL_RCC_PLL2R_IsEnabled+0x18>
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	44020c00 	.word	0x44020c00

0800cc5c <LL_RCC_PLL2FRACN_IsEnabled>:
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2FRACEN) == RCC_PLL2CFGR_PLL2FRACEN) ? 1UL : 0UL);
 800cc60:	4b06      	ldr	r3, [pc, #24]	@ (800cc7c <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800cc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc64:	f003 0310 	and.w	r3, r3, #16
 800cc68:	2b10      	cmp	r3, #16
 800cc6a:	d101      	bne.n	800cc70 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e000      	b.n	800cc72 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	44020c00 	.word	0x44020c00

0800cc80 <LL_RCC_PLL2_GetFRACN>:
{
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_PLL2FRACN) >>  RCC_PLL2FRACR_PLL2FRACN_Pos);
 800cc84:	4b04      	ldr	r3, [pc, #16]	@ (800cc98 <LL_RCC_PLL2_GetFRACN+0x18>)
 800cc86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc88:	08db      	lsrs	r3, r3, #3
 800cc8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	44020c00 	.word	0x44020c00

0800cc9c <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 is Ready
  * @rmtoll CR           PLL3RDY    LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == RCC_CR_PLL3RDY) ? 1UL : 0UL);
 800cca0:	4b07      	ldr	r3, [pc, #28]	@ (800ccc0 <LL_RCC_PLL3_IsReady+0x24>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccac:	d101      	bne.n	800ccb2 <LL_RCC_PLL3_IsReady+0x16>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e000      	b.n	800ccb4 <LL_RCC_PLL3_IsReady+0x18>
 800ccb2:	2300      	movs	r3, #0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	44020c00 	.word	0x44020c00

0800ccc4 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLL3SOURCE_CSI
  *         @arg @ref LL_RCC_PLL3SOURCE_HSI
  *         @arg @ref LL_RCC_PLL3SOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3SRC));
 800ccc8:	4b04      	ldr	r3, [pc, #16]	@ (800ccdc <LL_RCC_PLL3_GetSource+0x18>)
 800ccca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cccc:	f003 0303 	and.w	r3, r3, #3
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	44020c00 	.word	0x44020c00

0800cce0 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 multiplication factor N
  * @rmtoll PLL3CFGR      PLL3N          LL_RCC_PLL3_GetN
  * @retval Between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800cce0:	b480      	push	{r7}
 800cce2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3N) >>  RCC_PLL3DIVR_PLL3N_Pos) + 1UL);
 800cce4:	4b04      	ldr	r3, [pc, #16]	@ (800ccf8 <LL_RCC_PLL3_GetN+0x18>)
 800cce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccec:	3301      	adds	r3, #1
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr
 800ccf8:	44020c00 	.word	0x44020c00

0800ccfc <LL_RCC_PLL3_GetP>:
  * @note Used for peripherals clocks
  * @rmtoll PLL3CFGR      PLL3P      LL_RCC_PLL3_GetP
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3P) >>  RCC_PLL3DIVR_PLL3P_Pos) + 1UL);
 800cd00:	4b05      	ldr	r3, [pc, #20]	@ (800cd18 <LL_RCC_PLL3_GetP+0x1c>)
 800cd02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd04:	0a5b      	lsrs	r3, r3, #9
 800cd06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd0a:	3301      	adds	r3, #1
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	44020c00 	.word	0x44020c00

0800cd1c <LL_RCC_PLL3_GetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLL3CFGR      PLL3Q          LL_RCC_PLL3_GetQ
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3Q) >>  RCC_PLL3DIVR_PLL3Q_Pos) + 1UL);
 800cd20:	4b05      	ldr	r3, [pc, #20]	@ (800cd38 <LL_RCC_PLL3_GetQ+0x1c>)
 800cd22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd24:	0c1b      	lsrs	r3, r3, #16
 800cd26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd2a:	3301      	adds	r3, #1
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	44020c00 	.word	0x44020c00

0800cd3c <LL_RCC_PLL3_GetR>:
  * @note Used for PLL3CLK (system clock)
  * @rmtoll PLL3DIVR      PLL3R          LL_RCC_PLL3_GetR
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3R) >>  RCC_PLL3DIVR_PLL3R_Pos) + 1UL);
 800cd40:	4b05      	ldr	r3, [pc, #20]	@ (800cd58 <LL_RCC_PLL3_GetR+0x1c>)
 800cd42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd44:	0e1b      	lsrs	r3, r3, #24
 800cd46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd4a:	3301      	adds	r3, #1
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	44020c00 	.word	0x44020c00

0800cd5c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 Division factor M
  * @rmtoll PLL3CFGR      PLL3M          LL_RCC_PLL3_GetM
  * @retval Between 1 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800cd60:	4b04      	ldr	r3, [pc, #16]	@ (800cd74 <LL_RCC_PLL3_GetM+0x18>)
 800cd62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd64:	0a1b      	lsrs	r3, r3, #8
 800cd66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	44020c00 	.word	0x44020c00

0800cd78 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLL3CFGR           PLL3PEN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3PEN) == RCC_PLL3CFGR_PLL3PEN) ? 1UL : 0UL);
 800cd7c:	4b07      	ldr	r3, [pc, #28]	@ (800cd9c <LL_RCC_PLL3P_IsEnabled+0x24>)
 800cd7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd88:	d101      	bne.n	800cd8e <LL_RCC_PLL3P_IsEnabled+0x16>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e000      	b.n	800cd90 <LL_RCC_PLL3P_IsEnabled+0x18>
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	44020c00 	.word	0x44020c00

0800cda0 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLL3CFGR           PLL3QEN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800cda0:	b480      	push	{r7}
 800cda2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3QEN) == RCC_PLL3CFGR_PLL3QEN) ? 1UL : 0UL);
 800cda4:	4b07      	ldr	r3, [pc, #28]	@ (800cdc4 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800cda6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cda8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdb0:	d101      	bne.n	800cdb6 <LL_RCC_PLL3Q_IsEnabled+0x16>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e000      	b.n	800cdb8 <LL_RCC_PLL3Q_IsEnabled+0x18>
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	44020c00 	.word	0x44020c00

0800cdc8 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLL3CFGR           PLL3REN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3REN) == RCC_PLL3CFGR_PLL3REN) ? 1UL : 0UL);
 800cdcc:	4b07      	ldr	r3, [pc, #28]	@ (800cdec <LL_RCC_PLL3R_IsEnabled+0x24>)
 800cdce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cdd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cdd8:	d101      	bne.n	800cdde <LL_RCC_PLL3R_IsEnabled+0x16>
 800cdda:	2301      	movs	r3, #1
 800cddc:	e000      	b.n	800cde0 <LL_RCC_PLL3R_IsEnabled+0x18>
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	44020c00 	.word	0x44020c00

0800cdf0 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLL3CFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3FRACEN) == RCC_PLL3CFGR_PLL3FRACEN) ? 1UL : 0UL);
 800cdf4:	4b06      	ldr	r3, [pc, #24]	@ (800ce10 <LL_RCC_PLL3FRACN_IsEnabled+0x20>)
 800cdf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdf8:	f003 0310 	and.w	r3, r3, #16
 800cdfc:	2b10      	cmp	r3, #16
 800cdfe:	d101      	bne.n	800ce04 <LL_RCC_PLL3FRACN_IsEnabled+0x14>
 800ce00:	2301      	movs	r3, #1
 800ce02:	e000      	b.n	800ce06 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr
 800ce10:	44020c00 	.word	0x44020c00

0800ce14 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      PLL3FRACN          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_PLL3FRACN) >>  RCC_PLL3FRACR_PLL3FRACN_Pos);
 800ce18:	4b04      	ldr	r3, [pc, #16]	@ (800ce2c <LL_RCC_PLL3_GetFRACN+0x18>)
 800ce1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce1c:	08db      	lsrs	r3, r3, #3
 800ce1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	44020c00 	.word	0x44020c00

0800ce30 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *pPLL_Clocks)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b08a      	sub	sp, #40	@ 0x28
 800ce34:	af02      	add	r7, sp, #8
 800ce36:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t plln;
  uint32_t fracn = 0U;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */

  pPLL_Clocks->PLL_P_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	601a      	str	r2, [r3, #0]
  pPLL_Clocks->PLL_Q_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	605a      	str	r2, [r3, #4]
  pPLL_Clocks->PLL_R_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	609a      	str	r2, [r3, #8]

  if (LL_RCC_PLL2_IsReady() != 0U)
 800ce52:	f7ff fe59 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d07e      	beq.n	800cf5a <LL_RCC_GetPLL2ClockFreq+0x12a>
  {

    pllsource = LL_RCC_PLL2_GetSource();
 800ce5c:	f7ff fe68 	bl	800cb30 <LL_RCC_PLL2_GetSource>
 800ce60:	6178      	str	r0, [r7, #20]

    switch (pllsource)
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d01f      	beq.n	800cea8 <LL_RCC_GetPLL2ClockFreq+0x78>
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d824      	bhi.n	800ceb8 <LL_RCC_GetPLL2ClockFreq+0x88>
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d003      	beq.n	800ce7c <LL_RCC_GetPLL2ClockFreq+0x4c>
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	d00e      	beq.n	800ce98 <LL_RCC_GetPLL2ClockFreq+0x68>
        break;

      case LL_RCC_PLL2SOURCE_NONE:
      default:
        /* PLL clock disabled */
        break;
 800ce7a:	e01d      	b.n	800ceb8 <LL_RCC_GetPLL2ClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 800ce7c:	f7ff fd2c 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d01a      	beq.n	800cebc <LL_RCC_GetPLL2ClockFreq+0x8c>
          pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800ce86:	f7ff fd39 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	08db      	lsrs	r3, r3, #3
 800ce8e:	4a35      	ldr	r2, [pc, #212]	@ (800cf64 <LL_RCC_GetPLL2ClockFreq+0x134>)
 800ce90:	fa42 f303 	asr.w	r3, r2, r3
 800ce94:	61fb      	str	r3, [r7, #28]
        break;
 800ce96:	e011      	b.n	800cebc <LL_RCC_GetPLL2ClockFreq+0x8c>
        if (LL_RCC_CSI_IsReady() != 0U)
 800ce98:	f7ff fd3e 	bl	800c918 <LL_RCC_CSI_IsReady>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00e      	beq.n	800cec0 <LL_RCC_GetPLL2ClockFreq+0x90>
          pllinputfreq = CSI_VALUE;
 800cea2:	4b31      	ldr	r3, [pc, #196]	@ (800cf68 <LL_RCC_GetPLL2ClockFreq+0x138>)
 800cea4:	61fb      	str	r3, [r7, #28]
        break;
 800cea6:	e00b      	b.n	800cec0 <LL_RCC_GetPLL2ClockFreq+0x90>
        if (LL_RCC_HSE_IsReady() != 0U)
 800cea8:	f7ff fd02 	bl	800c8b0 <LL_RCC_HSE_IsReady>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d008      	beq.n	800cec4 <LL_RCC_GetPLL2ClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800ceb2:	4b2e      	ldr	r3, [pc, #184]	@ (800cf6c <LL_RCC_GetPLL2ClockFreq+0x13c>)
 800ceb4:	61fb      	str	r3, [r7, #28]
        break;
 800ceb6:	e005      	b.n	800cec4 <LL_RCC_GetPLL2ClockFreq+0x94>
        break;
 800ceb8:	bf00      	nop
 800ceba:	e004      	b.n	800cec6 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 800cebc:	bf00      	nop
 800cebe:	e002      	b.n	800cec6 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 800cec0:	bf00      	nop
 800cec2:	e000      	b.n	800cec6 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 800cec4:	bf00      	nop
    }

    pllm = LL_RCC_PLL2_GetM();
 800cec6:	f7ff fe41 	bl	800cb4c <LL_RCC_PLL2_GetM>
 800ceca:	6138      	str	r0, [r7, #16]
    plln = LL_RCC_PLL2_GetN();
 800cecc:	f7ff fe4c 	bl	800cb68 <LL_RCC_PLL2_GetN>
 800ced0:	60f8      	str	r0, [r7, #12]

    if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800ced2:	f7ff fec3 	bl	800cc5c <LL_RCC_PLL2FRACN_IsEnabled>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <LL_RCC_GetPLL2ClockFreq+0xb2>
    {
      fracn = LL_RCC_PLL2_GetFRACN();
 800cedc:	f7ff fed0 	bl	800cc80 <LL_RCC_PLL2_GetFRACN>
 800cee0:	61b8      	str	r0, [r7, #24]
    }

    if ((pllinputfreq != LL_RCC_PERIPH_FREQUENCY_NO) && (pllm != 0U))
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d038      	beq.n	800cf5a <LL_RCC_GetPLL2ClockFreq+0x12a>
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d035      	beq.n	800cf5a <LL_RCC_GetPLL2ClockFreq+0x12a>
    {
      if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800ceee:	f7ff fe79 	bl	800cbe4 <LL_RCC_PLL2P_IsEnabled>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00c      	beq.n	800cf12 <LL_RCC_GetPLL2ClockFreq+0xe2>
      {
        pPLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetP());
 800cef8:	f7ff fe44 	bl	800cb84 <LL_RCC_PLL2_GetP>
 800cefc:	4603      	mov	r3, r0
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	6939      	ldr	r1, [r7, #16]
 800cf06:	69f8      	ldr	r0, [r7, #28]
 800cf08:	f000 f8d2 	bl	800d0b0 <LL_RCC_CalcPLLClockFreq>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	601a      	str	r2, [r3, #0]
      }

      if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800cf12:	f7ff fe7b 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00c      	beq.n	800cf36 <LL_RCC_GetPLL2ClockFreq+0x106>
      {
        pPLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetQ());
 800cf1c:	f7ff fe42 	bl	800cba4 <LL_RCC_PLL2_GetQ>
 800cf20:	4603      	mov	r3, r0
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	6939      	ldr	r1, [r7, #16]
 800cf2a:	69f8      	ldr	r0, [r7, #28]
 800cf2c:	f000 f8c0 	bl	800d0b0 <LL_RCC_CalcPLLClockFreq>
 800cf30:	4602      	mov	r2, r0
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	605a      	str	r2, [r3, #4]
      }

      if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800cf36:	f7ff fe7d 	bl	800cc34 <LL_RCC_PLL2R_IsEnabled>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00c      	beq.n	800cf5a <LL_RCC_GetPLL2ClockFreq+0x12a>
      {
        pPLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetR());
 800cf40:	f7ff fe40 	bl	800cbc4 <LL_RCC_PLL2_GetR>
 800cf44:	4603      	mov	r3, r0
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	6939      	ldr	r1, [r7, #16]
 800cf4e:	69f8      	ldr	r0, [r7, #28]
 800cf50:	f000 f8ae 	bl	800d0b0 <LL_RCC_CalcPLLClockFreq>
 800cf54:	4602      	mov	r2, r0
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	609a      	str	r2, [r3, #8]
      }
    }
  }
}
 800cf5a:	bf00      	nop
 800cf5c:	3720      	adds	r7, #32
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	03d09000 	.word	0x03d09000
 800cf68:	003d0900 	.word	0x003d0900
 800cf6c:	01312d00 	.word	0x01312d00

0800cf70 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *pPLL_Clocks)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08a      	sub	sp, #40	@ 0x28
 800cf74:	af02      	add	r7, sp, #8
 800cf76:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t plln;
  uint32_t fracn = 0U;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */

  pPLL_Clocks->PLL_P_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	601a      	str	r2, [r3, #0]
  pPLL_Clocks->PLL_Q_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	605a      	str	r2, [r3, #4]
  pPLL_Clocks->PLL_R_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	609a      	str	r2, [r3, #8]

  if (LL_RCC_PLL3_IsReady() != 0U)
 800cf92:	f7ff fe83 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d07e      	beq.n	800d09a <LL_RCC_GetPLL3ClockFreq+0x12a>
  {

    pllsource = LL_RCC_PLL3_GetSource();
 800cf9c:	f7ff fe92 	bl	800ccc4 <LL_RCC_PLL3_GetSource>
 800cfa0:	6178      	str	r0, [r7, #20]

    switch (pllsource)
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	d01f      	beq.n	800cfe8 <LL_RCC_GetPLL3ClockFreq+0x78>
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	d824      	bhi.n	800cff8 <LL_RCC_GetPLL3ClockFreq+0x88>
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d003      	beq.n	800cfbc <LL_RCC_GetPLL3ClockFreq+0x4c>
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d00e      	beq.n	800cfd8 <LL_RCC_GetPLL3ClockFreq+0x68>
        break;

      case LL_RCC_PLL3SOURCE_NONE:
      default:
        /* PLL clock disabled */
        break;
 800cfba:	e01d      	b.n	800cff8 <LL_RCC_GetPLL3ClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 800cfbc:	f7ff fc8c 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d01a      	beq.n	800cffc <LL_RCC_GetPLL3ClockFreq+0x8c>
          pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800cfc6:	f7ff fc99 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	08db      	lsrs	r3, r3, #3
 800cfce:	4a35      	ldr	r2, [pc, #212]	@ (800d0a4 <LL_RCC_GetPLL3ClockFreq+0x134>)
 800cfd0:	fa42 f303 	asr.w	r3, r2, r3
 800cfd4:	61fb      	str	r3, [r7, #28]
        break;
 800cfd6:	e011      	b.n	800cffc <LL_RCC_GetPLL3ClockFreq+0x8c>
        if (LL_RCC_CSI_IsReady() != 0U)
 800cfd8:	f7ff fc9e 	bl	800c918 <LL_RCC_CSI_IsReady>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00e      	beq.n	800d000 <LL_RCC_GetPLL3ClockFreq+0x90>
          pllinputfreq = CSI_VALUE;
 800cfe2:	4b31      	ldr	r3, [pc, #196]	@ (800d0a8 <LL_RCC_GetPLL3ClockFreq+0x138>)
 800cfe4:	61fb      	str	r3, [r7, #28]
        break;
 800cfe6:	e00b      	b.n	800d000 <LL_RCC_GetPLL3ClockFreq+0x90>
        if (LL_RCC_HSE_IsReady() != 0U)
 800cfe8:	f7ff fc62 	bl	800c8b0 <LL_RCC_HSE_IsReady>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d008      	beq.n	800d004 <LL_RCC_GetPLL3ClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800cff2:	4b2e      	ldr	r3, [pc, #184]	@ (800d0ac <LL_RCC_GetPLL3ClockFreq+0x13c>)
 800cff4:	61fb      	str	r3, [r7, #28]
        break;
 800cff6:	e005      	b.n	800d004 <LL_RCC_GetPLL3ClockFreq+0x94>
        break;
 800cff8:	bf00      	nop
 800cffa:	e004      	b.n	800d006 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 800cffc:	bf00      	nop
 800cffe:	e002      	b.n	800d006 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 800d000:	bf00      	nop
 800d002:	e000      	b.n	800d006 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 800d004:	bf00      	nop
    }

    pllm = LL_RCC_PLL3_GetM();
 800d006:	f7ff fea9 	bl	800cd5c <LL_RCC_PLL3_GetM>
 800d00a:	6138      	str	r0, [r7, #16]
    plln = LL_RCC_PLL3_GetN();
 800d00c:	f7ff fe68 	bl	800cce0 <LL_RCC_PLL3_GetN>
 800d010:	60f8      	str	r0, [r7, #12]
    if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800d012:	f7ff feed 	bl	800cdf0 <LL_RCC_PLL3FRACN_IsEnabled>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <LL_RCC_GetPLL3ClockFreq+0xb2>
    {
      fracn = LL_RCC_PLL3_GetFRACN();
 800d01c:	f7ff fefa 	bl	800ce14 <LL_RCC_PLL3_GetFRACN>
 800d020:	61b8      	str	r0, [r7, #24]
    }

    if ((pllinputfreq != LL_RCC_PERIPH_FREQUENCY_NO) && (pllm != 0U))
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d038      	beq.n	800d09a <LL_RCC_GetPLL3ClockFreq+0x12a>
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d035      	beq.n	800d09a <LL_RCC_GetPLL3ClockFreq+0x12a>
    {
      if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800d02e:	f7ff fea3 	bl	800cd78 <LL_RCC_PLL3P_IsEnabled>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00c      	beq.n	800d052 <LL_RCC_GetPLL3ClockFreq+0xe2>
      {
        pPLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetP());
 800d038:	f7ff fe60 	bl	800ccfc <LL_RCC_PLL3_GetP>
 800d03c:	4603      	mov	r3, r0
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	6939      	ldr	r1, [r7, #16]
 800d046:	69f8      	ldr	r0, [r7, #28]
 800d048:	f000 f832 	bl	800d0b0 <LL_RCC_CalcPLLClockFreq>
 800d04c:	4602      	mov	r2, r0
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	601a      	str	r2, [r3, #0]
      }

      if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d052:	f7ff fea5 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00c      	beq.n	800d076 <LL_RCC_GetPLL3ClockFreq+0x106>
      {
        pPLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetQ());
 800d05c:	f7ff fe5e 	bl	800cd1c <LL_RCC_PLL3_GetQ>
 800d060:	4603      	mov	r3, r0
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	6939      	ldr	r1, [r7, #16]
 800d06a:	69f8      	ldr	r0, [r7, #28]
 800d06c:	f000 f820 	bl	800d0b0 <LL_RCC_CalcPLLClockFreq>
 800d070:	4602      	mov	r2, r0
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	605a      	str	r2, [r3, #4]
      }

      if (LL_RCC_PLL3R_IsEnabled() != 0U)
 800d076:	f7ff fea7 	bl	800cdc8 <LL_RCC_PLL3R_IsEnabled>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00c      	beq.n	800d09a <LL_RCC_GetPLL3ClockFreq+0x12a>
      {
        pPLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetR());
 800d080:	f7ff fe5c 	bl	800cd3c <LL_RCC_PLL3_GetR>
 800d084:	4603      	mov	r3, r0
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	6939      	ldr	r1, [r7, #16]
 800d08e:	69f8      	ldr	r0, [r7, #28]
 800d090:	f000 f80e 	bl	800d0b0 <LL_RCC_CalcPLLClockFreq>
 800d094:	4602      	mov	r2, r0
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	609a      	str	r2, [r3, #8]
      }
    }
  }
}
 800d09a:	bf00      	nop
 800d09c:	3720      	adds	r7, #32
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	03d09000 	.word	0x03d09000
 800d0a8:	003d0900 	.word	0x003d0900
 800d0ac:	01312d00 	.word	0x01312d00

0800d0b0 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 output clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b087      	sub	sp, #28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	ee07 3a90 	vmov	s15, r3
 800d0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	ee07 3a90 	vmov	s15, r3
 800d0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	ee07 3a90 	vmov	s15, r3
 800d0e6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800d0ea:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800d12c <LL_RCC_CalcPLLClockFreq+0x7c>
 800d0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fa:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	ee07 3a90 	vmov	s15, r3
 800d104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d108:	edd7 6a05 	vldr	s13, [r7, #20]
 800d10c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d110:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 800d114:	edd7 7a05 	vldr	s15, [r7, #20]
 800d118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d11c:	ee17 3a90 	vmov	r3, s15
}
 800d120:	4618      	mov	r0, r3
 800d122:	371c      	adds	r7, #28
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	46000000 	.word	0x46000000

0800d130 <LL_RCC_GetUSARTClockFreq>:
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800d138:	2300      	movs	r3, #0
 800d13a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 800d142:	d17c      	bne.n	800d23e <LL_RCC_GetUSARTClockFreq+0x10e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff fc7b 	bl	800ca40 <LL_RCC_GetUSARTClockSource>
 800d14a:	4603      	mov	r3, r0
 800d14c:	4aad      	ldr	r2, [pc, #692]	@ (800d404 <LL_RCC_GetUSARTClockFreq+0x2d4>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d06b      	beq.n	800d22a <LL_RCC_GetUSARTClockFreq+0xfa>
 800d152:	4aac      	ldr	r2, [pc, #688]	@ (800d404 <LL_RCC_GetUSARTClockFreq+0x2d4>)
 800d154:	4293      	cmp	r3, r2
 800d156:	f200 8346 	bhi.w	800d7e6 <LL_RCC_GetUSARTClockFreq+0x6b6>
 800d15a:	4aab      	ldr	r2, [pc, #684]	@ (800d408 <LL_RCC_GetUSARTClockFreq+0x2d8>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d05b      	beq.n	800d218 <LL_RCC_GetUSARTClockFreq+0xe8>
 800d160:	4aa9      	ldr	r2, [pc, #676]	@ (800d408 <LL_RCC_GetUSARTClockFreq+0x2d8>)
 800d162:	4293      	cmp	r3, r2
 800d164:	f200 833f 	bhi.w	800d7e6 <LL_RCC_GetUSARTClockFreq+0x6b6>
 800d168:	4aa8      	ldr	r2, [pc, #672]	@ (800d40c <LL_RCC_GetUSARTClockFreq+0x2dc>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d045      	beq.n	800d1fa <LL_RCC_GetUSARTClockFreq+0xca>
 800d16e:	4aa7      	ldr	r2, [pc, #668]	@ (800d40c <LL_RCC_GetUSARTClockFreq+0x2dc>)
 800d170:	4293      	cmp	r3, r2
 800d172:	f200 8338 	bhi.w	800d7e6 <LL_RCC_GetUSARTClockFreq+0x6b6>
 800d176:	4aa6      	ldr	r2, [pc, #664]	@ (800d410 <LL_RCC_GetUSARTClockFreq+0x2e0>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d02a      	beq.n	800d1d2 <LL_RCC_GetUSARTClockFreq+0xa2>
 800d17c:	4aa4      	ldr	r2, [pc, #656]	@ (800d410 <LL_RCC_GetUSARTClockFreq+0x2e0>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	f200 8331 	bhi.w	800d7e6 <LL_RCC_GetUSARTClockFreq+0x6b6>
 800d184:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 800d188:	d003      	beq.n	800d192 <LL_RCC_GetUSARTClockFreq+0x62>
 800d18a:	4aa2      	ldr	r2, [pc, #648]	@ (800d414 <LL_RCC_GetUSARTClockFreq+0x2e4>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d00c      	beq.n	800d1aa <LL_RCC_GetUSARTClockFreq+0x7a>
        }
        break;

      default:
        /* unreachable code */
        break;
 800d190:	e329      	b.n	800d7e6 <LL_RCC_GetUSARTClockFreq+0x6b6>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d192:	f000 ffb1 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800d196:	4603      	mov	r3, r0
 800d198:	4618      	mov	r0, r3
 800d19a:	f001 f813 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f001 f839 	bl	800e218 <RCC_GetPCLK2ClockFreq>
 800d1a6:	6178      	str	r0, [r7, #20]
        break;
 800d1a8:	e364      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800d1aa:	f7ff fcad 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 831a 	beq.w	800d7ea <LL_RCC_GetUSARTClockFreq+0x6ba>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d1b6:	f7ff fd29 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f000 8314 	beq.w	800d7ea <LL_RCC_GetUSARTClockFreq+0x6ba>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800d1c2:	f107 0308 	add.w	r3, r7, #8
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fe32 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	617b      	str	r3, [r7, #20]
        break;
 800d1d0:	e30b      	b.n	800d7ea <LL_RCC_GetUSARTClockFreq+0x6ba>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800d1d2:	f7ff fd63 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f000 8308 	beq.w	800d7ee <LL_RCC_GetUSARTClockFreq+0x6be>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d1de:	f7ff fddf 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 8302 	beq.w	800d7ee <LL_RCC_GetUSARTClockFreq+0x6be>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800d1ea:	f107 0308 	add.w	r3, r7, #8
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7ff febe 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	617b      	str	r3, [r7, #20]
        break;
 800d1f8:	e2f9      	b.n	800d7ee <LL_RCC_GetUSARTClockFreq+0x6be>
        if (LL_RCC_HSI_IsReady() == 1U)
 800d1fa:	f7ff fb6d 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b01      	cmp	r3, #1
 800d202:	f040 82f6 	bne.w	800d7f2 <LL_RCC_GetUSARTClockFreq+0x6c2>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800d206:	f7ff fb79 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800d20a:	4603      	mov	r3, r0
 800d20c:	08db      	lsrs	r3, r3, #3
 800d20e:	4a82      	ldr	r2, [pc, #520]	@ (800d418 <LL_RCC_GetUSARTClockFreq+0x2e8>)
 800d210:	fa42 f303 	asr.w	r3, r2, r3
 800d214:	617b      	str	r3, [r7, #20]
        break;
 800d216:	e2ec      	b.n	800d7f2 <LL_RCC_GetUSARTClockFreq+0x6c2>
        if (LL_RCC_CSI_IsReady() == 1U)
 800d218:	f7ff fb7e 	bl	800c918 <LL_RCC_CSI_IsReady>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b01      	cmp	r3, #1
 800d220:	f040 82e9 	bne.w	800d7f6 <LL_RCC_GetUSARTClockFreq+0x6c6>
          usart_frequency = CSI_VALUE;
 800d224:	4b7d      	ldr	r3, [pc, #500]	@ (800d41c <LL_RCC_GetUSARTClockFreq+0x2ec>)
 800d226:	617b      	str	r3, [r7, #20]
        break;
 800d228:	e2e5      	b.n	800d7f6 <LL_RCC_GetUSARTClockFreq+0x6c6>
        if (LL_RCC_LSE_IsReady() == 1U)
 800d22a:	f7ff fb89 	bl	800c940 <LL_RCC_LSE_IsReady>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b01      	cmp	r3, #1
 800d232:	f040 82e2 	bne.w	800d7fa <LL_RCC_GetUSARTClockFreq+0x6ca>
          usart_frequency = LSE_VALUE;
 800d236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d23a:	617b      	str	r3, [r7, #20]
        break;
 800d23c:	e2dd      	b.n	800d7fa <LL_RCC_GetUSARTClockFreq+0x6ca>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a77      	ldr	r2, [pc, #476]	@ (800d420 <LL_RCC_GetUSARTClockFreq+0x2f0>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d17c      	bne.n	800d340 <LL_RCC_GetUSARTClockFreq+0x210>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff fbfa 	bl	800ca40 <LL_RCC_GetUSARTClockSource>
 800d24c:	4603      	mov	r3, r0
 800d24e:	4a75      	ldr	r2, [pc, #468]	@ (800d424 <LL_RCC_GetUSARTClockFreq+0x2f4>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d06b      	beq.n	800d32c <LL_RCC_GetUSARTClockFreq+0x1fc>
 800d254:	4a73      	ldr	r2, [pc, #460]	@ (800d424 <LL_RCC_GetUSARTClockFreq+0x2f4>)
 800d256:	4293      	cmp	r3, r2
 800d258:	f200 82d1 	bhi.w	800d7fe <LL_RCC_GetUSARTClockFreq+0x6ce>
 800d25c:	4a72      	ldr	r2, [pc, #456]	@ (800d428 <LL_RCC_GetUSARTClockFreq+0x2f8>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d05b      	beq.n	800d31a <LL_RCC_GetUSARTClockFreq+0x1ea>
 800d262:	4a71      	ldr	r2, [pc, #452]	@ (800d428 <LL_RCC_GetUSARTClockFreq+0x2f8>)
 800d264:	4293      	cmp	r3, r2
 800d266:	f200 82ca 	bhi.w	800d7fe <LL_RCC_GetUSARTClockFreq+0x6ce>
 800d26a:	4a70      	ldr	r2, [pc, #448]	@ (800d42c <LL_RCC_GetUSARTClockFreq+0x2fc>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d045      	beq.n	800d2fc <LL_RCC_GetUSARTClockFreq+0x1cc>
 800d270:	4a6e      	ldr	r2, [pc, #440]	@ (800d42c <LL_RCC_GetUSARTClockFreq+0x2fc>)
 800d272:	4293      	cmp	r3, r2
 800d274:	f200 82c3 	bhi.w	800d7fe <LL_RCC_GetUSARTClockFreq+0x6ce>
 800d278:	4a6d      	ldr	r2, [pc, #436]	@ (800d430 <LL_RCC_GetUSARTClockFreq+0x300>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d02a      	beq.n	800d2d4 <LL_RCC_GetUSARTClockFreq+0x1a4>
 800d27e:	4a6c      	ldr	r2, [pc, #432]	@ (800d430 <LL_RCC_GetUSARTClockFreq+0x300>)
 800d280:	4293      	cmp	r3, r2
 800d282:	f200 82bc 	bhi.w	800d7fe <LL_RCC_GetUSARTClockFreq+0x6ce>
 800d286:	4a66      	ldr	r2, [pc, #408]	@ (800d420 <LL_RCC_GetUSARTClockFreq+0x2f0>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d003      	beq.n	800d294 <LL_RCC_GetUSARTClockFreq+0x164>
 800d28c:	4a69      	ldr	r2, [pc, #420]	@ (800d434 <LL_RCC_GetUSARTClockFreq+0x304>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d00c      	beq.n	800d2ac <LL_RCC_GetUSARTClockFreq+0x17c>
        }
        break;

      default:
        /* unreachable code */
        break;
 800d292:	e2b4      	b.n	800d7fe <LL_RCC_GetUSARTClockFreq+0x6ce>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d294:	f000 ff30 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800d298:	4603      	mov	r3, r0
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 ff92 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 ffa2 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800d2a8:	6178      	str	r0, [r7, #20]
        break;
 800d2aa:	e2e3      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800d2ac:	f7ff fc2c 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f000 82a5 	beq.w	800d802 <LL_RCC_GetUSARTClockFreq+0x6d2>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d2b8:	f7ff fca8 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 829f 	beq.w	800d802 <LL_RCC_GetUSARTClockFreq+0x6d2>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800d2c4:	f107 0308 	add.w	r3, r7, #8
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff fdb1 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	617b      	str	r3, [r7, #20]
        break;
 800d2d2:	e296      	b.n	800d802 <LL_RCC_GetUSARTClockFreq+0x6d2>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800d2d4:	f7ff fce2 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 8293 	beq.w	800d806 <LL_RCC_GetUSARTClockFreq+0x6d6>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d2e0:	f7ff fd5e 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 828d 	beq.w	800d806 <LL_RCC_GetUSARTClockFreq+0x6d6>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800d2ec:	f107 0308 	add.w	r3, r7, #8
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff fe3d 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	617b      	str	r3, [r7, #20]
        break;
 800d2fa:	e284      	b.n	800d806 <LL_RCC_GetUSARTClockFreq+0x6d6>
        if (LL_RCC_HSI_IsReady() == 1U)
 800d2fc:	f7ff faec 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800d300:	4603      	mov	r3, r0
 800d302:	2b01      	cmp	r3, #1
 800d304:	f040 8281 	bne.w	800d80a <LL_RCC_GetUSARTClockFreq+0x6da>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800d308:	f7ff faf8 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800d30c:	4603      	mov	r3, r0
 800d30e:	08db      	lsrs	r3, r3, #3
 800d310:	4a41      	ldr	r2, [pc, #260]	@ (800d418 <LL_RCC_GetUSARTClockFreq+0x2e8>)
 800d312:	fa42 f303 	asr.w	r3, r2, r3
 800d316:	617b      	str	r3, [r7, #20]
        break;
 800d318:	e277      	b.n	800d80a <LL_RCC_GetUSARTClockFreq+0x6da>
        if (LL_RCC_CSI_IsReady() == 1U)
 800d31a:	f7ff fafd 	bl	800c918 <LL_RCC_CSI_IsReady>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b01      	cmp	r3, #1
 800d322:	f040 8274 	bne.w	800d80e <LL_RCC_GetUSARTClockFreq+0x6de>
          usart_frequency = CSI_VALUE;
 800d326:	4b3d      	ldr	r3, [pc, #244]	@ (800d41c <LL_RCC_GetUSARTClockFreq+0x2ec>)
 800d328:	617b      	str	r3, [r7, #20]
        break;
 800d32a:	e270      	b.n	800d80e <LL_RCC_GetUSARTClockFreq+0x6de>
        if (LL_RCC_LSE_IsReady() == 1U)
 800d32c:	f7ff fb08 	bl	800c940 <LL_RCC_LSE_IsReady>
 800d330:	4603      	mov	r3, r0
 800d332:	2b01      	cmp	r3, #1
 800d334:	f040 826d 	bne.w	800d812 <LL_RCC_GetUSARTClockFreq+0x6e2>
          usart_frequency = LSE_VALUE;
 800d338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d33c:	617b      	str	r3, [r7, #20]
        break;
 800d33e:	e268      	b.n	800d812 <LL_RCC_GetUSARTClockFreq+0x6e2>
    }
  }
  else if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a3d      	ldr	r2, [pc, #244]	@ (800d438 <LL_RCC_GetUSARTClockFreq+0x308>)
 800d344:	4293      	cmp	r3, r2
 800d346:	f040 80a5 	bne.w	800d494 <LL_RCC_GetUSARTClockFreq+0x364>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f7ff fb78 	bl	800ca40 <LL_RCC_GetUSARTClockSource>
 800d350:	4603      	mov	r3, r0
 800d352:	4a3a      	ldr	r2, [pc, #232]	@ (800d43c <LL_RCC_GetUSARTClockFreq+0x30c>)
 800d354:	4293      	cmp	r3, r2
 800d356:	f000 8093 	beq.w	800d480 <LL_RCC_GetUSARTClockFreq+0x350>
 800d35a:	4a38      	ldr	r2, [pc, #224]	@ (800d43c <LL_RCC_GetUSARTClockFreq+0x30c>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	f200 825a 	bhi.w	800d816 <LL_RCC_GetUSARTClockFreq+0x6e6>
 800d362:	4a37      	ldr	r2, [pc, #220]	@ (800d440 <LL_RCC_GetUSARTClockFreq+0x310>)
 800d364:	4293      	cmp	r3, r2
 800d366:	f000 8082 	beq.w	800d46e <LL_RCC_GetUSARTClockFreq+0x33e>
 800d36a:	4a35      	ldr	r2, [pc, #212]	@ (800d440 <LL_RCC_GetUSARTClockFreq+0x310>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	f200 8252 	bhi.w	800d816 <LL_RCC_GetUSARTClockFreq+0x6e6>
 800d372:	4a34      	ldr	r2, [pc, #208]	@ (800d444 <LL_RCC_GetUSARTClockFreq+0x314>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d06b      	beq.n	800d450 <LL_RCC_GetUSARTClockFreq+0x320>
 800d378:	4a32      	ldr	r2, [pc, #200]	@ (800d444 <LL_RCC_GetUSARTClockFreq+0x314>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	f200 824b 	bhi.w	800d816 <LL_RCC_GetUSARTClockFreq+0x6e6>
 800d380:	4a31      	ldr	r2, [pc, #196]	@ (800d448 <LL_RCC_GetUSARTClockFreq+0x318>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d02a      	beq.n	800d3dc <LL_RCC_GetUSARTClockFreq+0x2ac>
 800d386:	4a30      	ldr	r2, [pc, #192]	@ (800d448 <LL_RCC_GetUSARTClockFreq+0x318>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	f200 8244 	bhi.w	800d816 <LL_RCC_GetUSARTClockFreq+0x6e6>
 800d38e:	4a2a      	ldr	r2, [pc, #168]	@ (800d438 <LL_RCC_GetUSARTClockFreq+0x308>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d003      	beq.n	800d39c <LL_RCC_GetUSARTClockFreq+0x26c>
 800d394:	4a2d      	ldr	r2, [pc, #180]	@ (800d44c <LL_RCC_GetUSARTClockFreq+0x31c>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d00c      	beq.n	800d3b4 <LL_RCC_GetUSARTClockFreq+0x284>
        }
        break;

      default:
        /* unreachable code */
        break;
 800d39a:	e23c      	b.n	800d816 <LL_RCC_GetUSARTClockFreq+0x6e6>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d39c:	f000 feac 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 ff0e 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 ff1e 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800d3b0:	6178      	str	r0, [r7, #20]
        break;
 800d3b2:	e25f      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800d3b4:	f7ff fba8 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 822d 	beq.w	800d81a <LL_RCC_GetUSARTClockFreq+0x6ea>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d3c0:	f7ff fc24 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 8227 	beq.w	800d81a <LL_RCC_GetUSARTClockFreq+0x6ea>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800d3cc:	f107 0308 	add.w	r3, r7, #8
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff fd2d 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	617b      	str	r3, [r7, #20]
        break;
 800d3da:	e21e      	b.n	800d81a <LL_RCC_GetUSARTClockFreq+0x6ea>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800d3dc:	f7ff fc5e 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 821b 	beq.w	800d81e <LL_RCC_GetUSARTClockFreq+0x6ee>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d3e8:	f7ff fcda 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 8215 	beq.w	800d81e <LL_RCC_GetUSARTClockFreq+0x6ee>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800d3f4:	f107 0308 	add.w	r3, r7, #8
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff fdb9 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	617b      	str	r3, [r7, #20]
        break;
 800d402:	e20c      	b.n	800d81e <LL_RCC_GetUSARTClockFreq+0x6ee>
 800d404:	07050000 	.word	0x07050000
 800d408:	07040000 	.word	0x07040000
 800d40c:	07030000 	.word	0x07030000
 800d410:	07020000 	.word	0x07020000
 800d414:	07010000 	.word	0x07010000
 800d418:	03d09000 	.word	0x03d09000
 800d41c:	003d0900 	.word	0x003d0900
 800d420:	07000300 	.word	0x07000300
 800d424:	07050300 	.word	0x07050300
 800d428:	07040300 	.word	0x07040300
 800d42c:	07030300 	.word	0x07030300
 800d430:	07020300 	.word	0x07020300
 800d434:	07010300 	.word	0x07010300
 800d438:	07000600 	.word	0x07000600
 800d43c:	07050600 	.word	0x07050600
 800d440:	07040600 	.word	0x07040600
 800d444:	07030600 	.word	0x07030600
 800d448:	07020600 	.word	0x07020600
 800d44c:	07010600 	.word	0x07010600
        if (LL_RCC_HSI_IsReady() == 1U)
 800d450:	f7ff fa42 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800d454:	4603      	mov	r3, r0
 800d456:	2b01      	cmp	r3, #1
 800d458:	f040 81e3 	bne.w	800d822 <LL_RCC_GetUSARTClockFreq+0x6f2>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800d45c:	f7ff fa4e 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800d460:	4603      	mov	r3, r0
 800d462:	08db      	lsrs	r3, r3, #3
 800d464:	4aa9      	ldr	r2, [pc, #676]	@ (800d70c <LL_RCC_GetUSARTClockFreq+0x5dc>)
 800d466:	fa42 f303 	asr.w	r3, r2, r3
 800d46a:	617b      	str	r3, [r7, #20]
        break;
 800d46c:	e1d9      	b.n	800d822 <LL_RCC_GetUSARTClockFreq+0x6f2>
        if (LL_RCC_CSI_IsReady() == 1U)
 800d46e:	f7ff fa53 	bl	800c918 <LL_RCC_CSI_IsReady>
 800d472:	4603      	mov	r3, r0
 800d474:	2b01      	cmp	r3, #1
 800d476:	f040 81d6 	bne.w	800d826 <LL_RCC_GetUSARTClockFreq+0x6f6>
          usart_frequency = CSI_VALUE;
 800d47a:	4ba5      	ldr	r3, [pc, #660]	@ (800d710 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 800d47c:	617b      	str	r3, [r7, #20]
        break;
 800d47e:	e1d2      	b.n	800d826 <LL_RCC_GetUSARTClockFreq+0x6f6>
        if (LL_RCC_LSE_IsReady() == 1U)
 800d480:	f7ff fa5e 	bl	800c940 <LL_RCC_LSE_IsReady>
 800d484:	4603      	mov	r3, r0
 800d486:	2b01      	cmp	r3, #1
 800d488:	f040 81cf 	bne.w	800d82a <LL_RCC_GetUSARTClockFreq+0x6fa>
          usart_frequency = LSE_VALUE;
 800d48c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d490:	617b      	str	r3, [r7, #20]
        break;
 800d492:	e1ca      	b.n	800d82a <LL_RCC_GetUSARTClockFreq+0x6fa>
    }
  }

#if defined(USART6)
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a9f      	ldr	r2, [pc, #636]	@ (800d714 <LL_RCC_GetUSARTClockFreq+0x5e4>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d17c      	bne.n	800d596 <LL_RCC_GetUSARTClockFreq+0x466>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7ff facf 	bl	800ca40 <LL_RCC_GetUSARTClockSource>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4a9c      	ldr	r2, [pc, #624]	@ (800d718 <LL_RCC_GetUSARTClockFreq+0x5e8>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d06b      	beq.n	800d582 <LL_RCC_GetUSARTClockFreq+0x452>
 800d4aa:	4a9b      	ldr	r2, [pc, #620]	@ (800d718 <LL_RCC_GetUSARTClockFreq+0x5e8>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	f200 81be 	bhi.w	800d82e <LL_RCC_GetUSARTClockFreq+0x6fe>
 800d4b2:	4a9a      	ldr	r2, [pc, #616]	@ (800d71c <LL_RCC_GetUSARTClockFreq+0x5ec>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d05b      	beq.n	800d570 <LL_RCC_GetUSARTClockFreq+0x440>
 800d4b8:	4a98      	ldr	r2, [pc, #608]	@ (800d71c <LL_RCC_GetUSARTClockFreq+0x5ec>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	f200 81b7 	bhi.w	800d82e <LL_RCC_GetUSARTClockFreq+0x6fe>
 800d4c0:	4a97      	ldr	r2, [pc, #604]	@ (800d720 <LL_RCC_GetUSARTClockFreq+0x5f0>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d045      	beq.n	800d552 <LL_RCC_GetUSARTClockFreq+0x422>
 800d4c6:	4a96      	ldr	r2, [pc, #600]	@ (800d720 <LL_RCC_GetUSARTClockFreq+0x5f0>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	f200 81b0 	bhi.w	800d82e <LL_RCC_GetUSARTClockFreq+0x6fe>
 800d4ce:	4a95      	ldr	r2, [pc, #596]	@ (800d724 <LL_RCC_GetUSARTClockFreq+0x5f4>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d02a      	beq.n	800d52a <LL_RCC_GetUSARTClockFreq+0x3fa>
 800d4d4:	4a93      	ldr	r2, [pc, #588]	@ (800d724 <LL_RCC_GetUSARTClockFreq+0x5f4>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	f200 81a9 	bhi.w	800d82e <LL_RCC_GetUSARTClockFreq+0x6fe>
 800d4dc:	4a8d      	ldr	r2, [pc, #564]	@ (800d714 <LL_RCC_GetUSARTClockFreq+0x5e4>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d003      	beq.n	800d4ea <LL_RCC_GetUSARTClockFreq+0x3ba>
 800d4e2:	4a91      	ldr	r2, [pc, #580]	@ (800d728 <LL_RCC_GetUSARTClockFreq+0x5f8>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d00c      	beq.n	800d502 <LL_RCC_GetUSARTClockFreq+0x3d2>
        }
        break;

      default:
        /* unreachable code */
        break;
 800d4e8:	e1a1      	b.n	800d82e <LL_RCC_GetUSARTClockFreq+0x6fe>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d4ea:	f000 fe05 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f000 fe67 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f000 fe77 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800d4fe:	6178      	str	r0, [r7, #20]
        break;
 800d500:	e1b8      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800d502:	f7ff fb01 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f000 8192 	beq.w	800d832 <LL_RCC_GetUSARTClockFreq+0x702>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d50e:	f7ff fb7d 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	f000 818c 	beq.w	800d832 <LL_RCC_GetUSARTClockFreq+0x702>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800d51a:	f107 0308 	add.w	r3, r7, #8
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff fc86 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	617b      	str	r3, [r7, #20]
        break;
 800d528:	e183      	b.n	800d832 <LL_RCC_GetUSARTClockFreq+0x702>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800d52a:	f7ff fbb7 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 8180 	beq.w	800d836 <LL_RCC_GetUSARTClockFreq+0x706>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d536:	f7ff fc33 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f000 817a 	beq.w	800d836 <LL_RCC_GetUSARTClockFreq+0x706>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800d542:	f107 0308 	add.w	r3, r7, #8
 800d546:	4618      	mov	r0, r3
 800d548:	f7ff fd12 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	617b      	str	r3, [r7, #20]
        break;
 800d550:	e171      	b.n	800d836 <LL_RCC_GetUSARTClockFreq+0x706>
        if (LL_RCC_HSI_IsReady() == 1U)
 800d552:	f7ff f9c1 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800d556:	4603      	mov	r3, r0
 800d558:	2b01      	cmp	r3, #1
 800d55a:	f040 816e 	bne.w	800d83a <LL_RCC_GetUSARTClockFreq+0x70a>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800d55e:	f7ff f9cd 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800d562:	4603      	mov	r3, r0
 800d564:	08db      	lsrs	r3, r3, #3
 800d566:	4a69      	ldr	r2, [pc, #420]	@ (800d70c <LL_RCC_GetUSARTClockFreq+0x5dc>)
 800d568:	fa42 f303 	asr.w	r3, r2, r3
 800d56c:	617b      	str	r3, [r7, #20]
        break;
 800d56e:	e164      	b.n	800d83a <LL_RCC_GetUSARTClockFreq+0x70a>
        if (LL_RCC_CSI_IsReady() == 1U)
 800d570:	f7ff f9d2 	bl	800c918 <LL_RCC_CSI_IsReady>
 800d574:	4603      	mov	r3, r0
 800d576:	2b01      	cmp	r3, #1
 800d578:	f040 8161 	bne.w	800d83e <LL_RCC_GetUSARTClockFreq+0x70e>
          usart_frequency = CSI_VALUE;
 800d57c:	4b64      	ldr	r3, [pc, #400]	@ (800d710 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 800d57e:	617b      	str	r3, [r7, #20]
        break;
 800d580:	e15d      	b.n	800d83e <LL_RCC_GetUSARTClockFreq+0x70e>
        if (LL_RCC_LSE_IsReady() == 1U)
 800d582:	f7ff f9dd 	bl	800c940 <LL_RCC_LSE_IsReady>
 800d586:	4603      	mov	r3, r0
 800d588:	2b01      	cmp	r3, #1
 800d58a:	f040 815a 	bne.w	800d842 <LL_RCC_GetUSARTClockFreq+0x712>
          usart_frequency = LSE_VALUE;
 800d58e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d592:	617b      	str	r3, [r7, #20]
        break;
 800d594:	e155      	b.n	800d842 <LL_RCC_GetUSARTClockFreq+0x712>
    }
  }
#endif /* USART6 */

#if defined(USART10)
  else if (USARTxSource == LL_RCC_USART10_CLKSOURCE)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4a64      	ldr	r2, [pc, #400]	@ (800d72c <LL_RCC_GetUSARTClockFreq+0x5fc>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d17c      	bne.n	800d698 <LL_RCC_GetUSARTClockFreq+0x568>
  {
    /* USART10CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7ff fa4e 	bl	800ca40 <LL_RCC_GetUSARTClockSource>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	4a62      	ldr	r2, [pc, #392]	@ (800d730 <LL_RCC_GetUSARTClockFreq+0x600>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d06b      	beq.n	800d684 <LL_RCC_GetUSARTClockFreq+0x554>
 800d5ac:	4a60      	ldr	r2, [pc, #384]	@ (800d730 <LL_RCC_GetUSARTClockFreq+0x600>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	f200 8149 	bhi.w	800d846 <LL_RCC_GetUSARTClockFreq+0x716>
 800d5b4:	4a5f      	ldr	r2, [pc, #380]	@ (800d734 <LL_RCC_GetUSARTClockFreq+0x604>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d05b      	beq.n	800d672 <LL_RCC_GetUSARTClockFreq+0x542>
 800d5ba:	4a5e      	ldr	r2, [pc, #376]	@ (800d734 <LL_RCC_GetUSARTClockFreq+0x604>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	f200 8142 	bhi.w	800d846 <LL_RCC_GetUSARTClockFreq+0x716>
 800d5c2:	4a5d      	ldr	r2, [pc, #372]	@ (800d738 <LL_RCC_GetUSARTClockFreq+0x608>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d045      	beq.n	800d654 <LL_RCC_GetUSARTClockFreq+0x524>
 800d5c8:	4a5b      	ldr	r2, [pc, #364]	@ (800d738 <LL_RCC_GetUSARTClockFreq+0x608>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	f200 813b 	bhi.w	800d846 <LL_RCC_GetUSARTClockFreq+0x716>
 800d5d0:	4a5a      	ldr	r2, [pc, #360]	@ (800d73c <LL_RCC_GetUSARTClockFreq+0x60c>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d02a      	beq.n	800d62c <LL_RCC_GetUSARTClockFreq+0x4fc>
 800d5d6:	4a59      	ldr	r2, [pc, #356]	@ (800d73c <LL_RCC_GetUSARTClockFreq+0x60c>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	f200 8134 	bhi.w	800d846 <LL_RCC_GetUSARTClockFreq+0x716>
 800d5de:	4a53      	ldr	r2, [pc, #332]	@ (800d72c <LL_RCC_GetUSARTClockFreq+0x5fc>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d003      	beq.n	800d5ec <LL_RCC_GetUSARTClockFreq+0x4bc>
 800d5e4:	4a56      	ldr	r2, [pc, #344]	@ (800d740 <LL_RCC_GetUSARTClockFreq+0x610>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d00c      	beq.n	800d604 <LL_RCC_GetUSARTClockFreq+0x4d4>
        }
        break;

      default:
        /* unreachable code */
        break;
 800d5ea:	e12c      	b.n	800d846 <LL_RCC_GetUSARTClockFreq+0x716>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d5ec:	f000 fd84 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 fde6 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 fdf6 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800d600:	6178      	str	r0, [r7, #20]
        break;
 800d602:	e137      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800d604:	f7ff fa80 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 811d 	beq.w	800d84a <LL_RCC_GetUSARTClockFreq+0x71a>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d610:	f7ff fafc 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	f000 8117 	beq.w	800d84a <LL_RCC_GetUSARTClockFreq+0x71a>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800d61c:	f107 0308 	add.w	r3, r7, #8
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff fc05 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	617b      	str	r3, [r7, #20]
        break;
 800d62a:	e10e      	b.n	800d84a <LL_RCC_GetUSARTClockFreq+0x71a>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800d62c:	f7ff fb36 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 810b 	beq.w	800d84e <LL_RCC_GetUSARTClockFreq+0x71e>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d638:	f7ff fbb2 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 8105 	beq.w	800d84e <LL_RCC_GetUSARTClockFreq+0x71e>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800d644:	f107 0308 	add.w	r3, r7, #8
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff fc91 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	617b      	str	r3, [r7, #20]
        break;
 800d652:	e0fc      	b.n	800d84e <LL_RCC_GetUSARTClockFreq+0x71e>
        if (LL_RCC_HSI_IsReady() == 1U)
 800d654:	f7ff f940 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	f040 80f9 	bne.w	800d852 <LL_RCC_GetUSARTClockFreq+0x722>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800d660:	f7ff f94c 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800d664:	4603      	mov	r3, r0
 800d666:	08db      	lsrs	r3, r3, #3
 800d668:	4a28      	ldr	r2, [pc, #160]	@ (800d70c <LL_RCC_GetUSARTClockFreq+0x5dc>)
 800d66a:	fa42 f303 	asr.w	r3, r2, r3
 800d66e:	617b      	str	r3, [r7, #20]
        break;
 800d670:	e0ef      	b.n	800d852 <LL_RCC_GetUSARTClockFreq+0x722>
        if (LL_RCC_CSI_IsReady() == 1U)
 800d672:	f7ff f951 	bl	800c918 <LL_RCC_CSI_IsReady>
 800d676:	4603      	mov	r3, r0
 800d678:	2b01      	cmp	r3, #1
 800d67a:	f040 80ec 	bne.w	800d856 <LL_RCC_GetUSARTClockFreq+0x726>
          usart_frequency = CSI_VALUE;
 800d67e:	4b24      	ldr	r3, [pc, #144]	@ (800d710 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 800d680:	617b      	str	r3, [r7, #20]
        break;
 800d682:	e0e8      	b.n	800d856 <LL_RCC_GetUSARTClockFreq+0x726>
        if (LL_RCC_LSE_IsReady() == 1U)
 800d684:	f7ff f95c 	bl	800c940 <LL_RCC_LSE_IsReady>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	f040 80e5 	bne.w	800d85a <LL_RCC_GetUSARTClockFreq+0x72a>
          usart_frequency = LSE_VALUE;
 800d690:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d694:	617b      	str	r3, [r7, #20]
        break;
 800d696:	e0e0      	b.n	800d85a <LL_RCC_GetUSARTClockFreq+0x72a>
    }
  }
#endif /* USART10 */

#if defined(USART11)
  else if (USARTxSource == LL_RCC_USART11_CLKSOURCE)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	4a2a      	ldr	r2, [pc, #168]	@ (800d744 <LL_RCC_GetUSARTClockFreq+0x614>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	f040 80e9 	bne.w	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
  {
    /* USART11CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7ff f9cc 	bl	800ca40 <LL_RCC_GetUSARTClockSource>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	4a27      	ldr	r2, [pc, #156]	@ (800d748 <LL_RCC_GetUSARTClockFreq+0x618>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	f000 8091 	beq.w	800d7d4 <LL_RCC_GetUSARTClockFreq+0x6a4>
 800d6b2:	4a26      	ldr	r2, [pc, #152]	@ (800d74c <LL_RCC_GetUSARTClockFreq+0x61c>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	f080 80d2 	bcs.w	800d85e <LL_RCC_GetUSARTClockFreq+0x72e>
 800d6ba:	4a25      	ldr	r2, [pc, #148]	@ (800d750 <LL_RCC_GetUSARTClockFreq+0x620>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	f000 8081 	beq.w	800d7c4 <LL_RCC_GetUSARTClockFreq+0x694>
 800d6c2:	4a23      	ldr	r2, [pc, #140]	@ (800d750 <LL_RCC_GetUSARTClockFreq+0x620>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	f200 80ca 	bhi.w	800d85e <LL_RCC_GetUSARTClockFreq+0x72e>
 800d6ca:	4a22      	ldr	r2, [pc, #136]	@ (800d754 <LL_RCC_GetUSARTClockFreq+0x624>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d06b      	beq.n	800d7a8 <LL_RCC_GetUSARTClockFreq+0x678>
 800d6d0:	4a20      	ldr	r2, [pc, #128]	@ (800d754 <LL_RCC_GetUSARTClockFreq+0x624>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	f200 80c3 	bhi.w	800d85e <LL_RCC_GetUSARTClockFreq+0x72e>
 800d6d8:	4a1f      	ldr	r2, [pc, #124]	@ (800d758 <LL_RCC_GetUSARTClockFreq+0x628>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d052      	beq.n	800d784 <LL_RCC_GetUSARTClockFreq+0x654>
 800d6de:	4a1e      	ldr	r2, [pc, #120]	@ (800d758 <LL_RCC_GetUSARTClockFreq+0x628>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	f200 80bc 	bhi.w	800d85e <LL_RCC_GetUSARTClockFreq+0x72e>
 800d6e6:	4a17      	ldr	r2, [pc, #92]	@ (800d744 <LL_RCC_GetUSARTClockFreq+0x614>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d003      	beq.n	800d6f4 <LL_RCC_GetUSARTClockFreq+0x5c4>
 800d6ec:	4a1b      	ldr	r2, [pc, #108]	@ (800d75c <LL_RCC_GetUSARTClockFreq+0x62c>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d036      	beq.n	800d760 <LL_RCC_GetUSARTClockFreq+0x630>
        }
        break;

      default:
        /* unreachable code */
        break;
 800d6f2:	e0b4      	b.n	800d85e <LL_RCC_GetUSARTClockFreq+0x72e>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d6f4:	f000 fd00 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f000 fd62 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800d700:	4603      	mov	r3, r0
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fd72 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800d708:	6178      	str	r0, [r7, #20]
        break;
 800d70a:	e0b3      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
 800d70c:	03d09000 	.word	0x03d09000
 800d710:	003d0900 	.word	0x003d0900
 800d714:	07000f00 	.word	0x07000f00
 800d718:	07050f00 	.word	0x07050f00
 800d71c:	07040f00 	.word	0x07040f00
 800d720:	07030f00 	.word	0x07030f00
 800d724:	07020f00 	.word	0x07020f00
 800d728:	07010f00 	.word	0x07010f00
 800d72c:	07001b00 	.word	0x07001b00
 800d730:	07051b00 	.word	0x07051b00
 800d734:	07041b00 	.word	0x07041b00
 800d738:	07031b00 	.word	0x07031b00
 800d73c:	07021b00 	.word	0x07021b00
 800d740:	07011b00 	.word	0x07011b00
 800d744:	07000004 	.word	0x07000004
 800d748:	07050004 	.word	0x07050004
 800d74c:	07050005 	.word	0x07050005
 800d750:	07040004 	.word	0x07040004
 800d754:	07030004 	.word	0x07030004
 800d758:	07020004 	.word	0x07020004
 800d75c:	07010004 	.word	0x07010004
        if (LL_RCC_PLL2_IsReady() != 0U)
 800d760:	f7ff f9d2 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d07b      	beq.n	800d862 <LL_RCC_GetUSARTClockFreq+0x732>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d76a:	f7ff fa4f 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d076      	beq.n	800d862 <LL_RCC_GetUSARTClockFreq+0x732>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800d774:	f107 0308 	add.w	r3, r7, #8
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff fb59 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	617b      	str	r3, [r7, #20]
        break;
 800d782:	e06e      	b.n	800d862 <LL_RCC_GetUSARTClockFreq+0x732>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800d784:	f7ff fa8a 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d06b      	beq.n	800d866 <LL_RCC_GetUSARTClockFreq+0x736>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d78e:	f7ff fb07 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d066      	beq.n	800d866 <LL_RCC_GetUSARTClockFreq+0x736>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800d798:	f107 0308 	add.w	r3, r7, #8
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff fbe7 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	617b      	str	r3, [r7, #20]
        break;
 800d7a6:	e05e      	b.n	800d866 <LL_RCC_GetUSARTClockFreq+0x736>
        if (LL_RCC_HSI_IsReady() == 1U)
 800d7a8:	f7ff f896 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d15b      	bne.n	800d86a <LL_RCC_GetUSARTClockFreq+0x73a>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800d7b2:	f7ff f8a3 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	08db      	lsrs	r3, r3, #3
 800d7ba:	4a31      	ldr	r2, [pc, #196]	@ (800d880 <LL_RCC_GetUSARTClockFreq+0x750>)
 800d7bc:	fa42 f303 	asr.w	r3, r2, r3
 800d7c0:	617b      	str	r3, [r7, #20]
        break;
 800d7c2:	e052      	b.n	800d86a <LL_RCC_GetUSARTClockFreq+0x73a>
        if (LL_RCC_CSI_IsReady() == 1U)
 800d7c4:	f7ff f8a8 	bl	800c918 <LL_RCC_CSI_IsReady>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d14f      	bne.n	800d86e <LL_RCC_GetUSARTClockFreq+0x73e>
          usart_frequency = CSI_VALUE;
 800d7ce:	4b2d      	ldr	r3, [pc, #180]	@ (800d884 <LL_RCC_GetUSARTClockFreq+0x754>)
 800d7d0:	617b      	str	r3, [r7, #20]
        break;
 800d7d2:	e04c      	b.n	800d86e <LL_RCC_GetUSARTClockFreq+0x73e>
        if (LL_RCC_LSE_IsReady() == 1U)
 800d7d4:	f7ff f8b4 	bl	800c940 <LL_RCC_LSE_IsReady>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d149      	bne.n	800d872 <LL_RCC_GetUSARTClockFreq+0x742>
          usart_frequency = LSE_VALUE;
 800d7de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7e2:	617b      	str	r3, [r7, #20]
        break;
 800d7e4:	e045      	b.n	800d872 <LL_RCC_GetUSARTClockFreq+0x742>
        break;
 800d7e6:	bf00      	nop
 800d7e8:	e044      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d7ea:	bf00      	nop
 800d7ec:	e042      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d7ee:	bf00      	nop
 800d7f0:	e040      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d7f2:	bf00      	nop
 800d7f4:	e03e      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d7f6:	bf00      	nop
 800d7f8:	e03c      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d7fa:	bf00      	nop
 800d7fc:	e03a      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d7fe:	bf00      	nop
 800d800:	e038      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d802:	bf00      	nop
 800d804:	e036      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d806:	bf00      	nop
 800d808:	e034      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d80a:	bf00      	nop
 800d80c:	e032      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d80e:	bf00      	nop
 800d810:	e030      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d812:	bf00      	nop
 800d814:	e02e      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d816:	bf00      	nop
 800d818:	e02c      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d81a:	bf00      	nop
 800d81c:	e02a      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d81e:	bf00      	nop
 800d820:	e028      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d822:	bf00      	nop
 800d824:	e026      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d826:	bf00      	nop
 800d828:	e024      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d82a:	bf00      	nop
 800d82c:	e022      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d82e:	bf00      	nop
 800d830:	e020      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d832:	bf00      	nop
 800d834:	e01e      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d836:	bf00      	nop
 800d838:	e01c      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d83a:	bf00      	nop
 800d83c:	e01a      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d83e:	bf00      	nop
 800d840:	e018      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d842:	bf00      	nop
 800d844:	e016      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d846:	bf00      	nop
 800d848:	e014      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d84a:	bf00      	nop
 800d84c:	e012      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d84e:	bf00      	nop
 800d850:	e010      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d852:	bf00      	nop
 800d854:	e00e      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d856:	bf00      	nop
 800d858:	e00c      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d85a:	bf00      	nop
 800d85c:	e00a      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d85e:	bf00      	nop
 800d860:	e008      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d862:	bf00      	nop
 800d864:	e006      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d866:	bf00      	nop
 800d868:	e004      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d86a:	bf00      	nop
 800d86c:	e002      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d86e:	bf00      	nop
 800d870:	e000      	b.n	800d874 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 800d872:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return usart_frequency;
 800d874:	697b      	ldr	r3, [r7, #20]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	03d09000 	.word	0x03d09000
 800d884:	003d0900 	.word	0x003d0900

0800d888 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART12_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b086      	sub	sp, #24
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800d890:	2300      	movs	r3, #0
 800d892:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4ab1      	ldr	r2, [pc, #708]	@ (800db5c <LL_RCC_GetUARTClockFreq+0x2d4>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d17c      	bne.n	800d996 <LL_RCC_GetUARTClockFreq+0x10e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff f8db 	bl	800ca58 <LL_RCC_GetUARTClockSource>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	4aae      	ldr	r2, [pc, #696]	@ (800db60 <LL_RCC_GetUARTClockFreq+0x2d8>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d06b      	beq.n	800d982 <LL_RCC_GetUARTClockFreq+0xfa>
 800d8aa:	4aad      	ldr	r2, [pc, #692]	@ (800db60 <LL_RCC_GetUARTClockFreq+0x2d8>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	f200 8346 	bhi.w	800df3e <LL_RCC_GetUARTClockFreq+0x6b6>
 800d8b2:	4aac      	ldr	r2, [pc, #688]	@ (800db64 <LL_RCC_GetUARTClockFreq+0x2dc>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d05b      	beq.n	800d970 <LL_RCC_GetUARTClockFreq+0xe8>
 800d8b8:	4aaa      	ldr	r2, [pc, #680]	@ (800db64 <LL_RCC_GetUARTClockFreq+0x2dc>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	f200 833f 	bhi.w	800df3e <LL_RCC_GetUARTClockFreq+0x6b6>
 800d8c0:	4aa9      	ldr	r2, [pc, #676]	@ (800db68 <LL_RCC_GetUARTClockFreq+0x2e0>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d045      	beq.n	800d952 <LL_RCC_GetUARTClockFreq+0xca>
 800d8c6:	4aa8      	ldr	r2, [pc, #672]	@ (800db68 <LL_RCC_GetUARTClockFreq+0x2e0>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	f200 8338 	bhi.w	800df3e <LL_RCC_GetUARTClockFreq+0x6b6>
 800d8ce:	4aa7      	ldr	r2, [pc, #668]	@ (800db6c <LL_RCC_GetUARTClockFreq+0x2e4>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d02a      	beq.n	800d92a <LL_RCC_GetUARTClockFreq+0xa2>
 800d8d4:	4aa5      	ldr	r2, [pc, #660]	@ (800db6c <LL_RCC_GetUARTClockFreq+0x2e4>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	f200 8331 	bhi.w	800df3e <LL_RCC_GetUARTClockFreq+0x6b6>
 800d8dc:	4a9f      	ldr	r2, [pc, #636]	@ (800db5c <LL_RCC_GetUARTClockFreq+0x2d4>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d003      	beq.n	800d8ea <LL_RCC_GetUARTClockFreq+0x62>
 800d8e2:	4aa3      	ldr	r2, [pc, #652]	@ (800db70 <LL_RCC_GetUARTClockFreq+0x2e8>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00c      	beq.n	800d902 <LL_RCC_GetUARTClockFreq+0x7a>
        }
        break;

      default:
        /* unreachable code */
        break;
 800d8e8:	e329      	b.n	800df3e <LL_RCC_GetUARTClockFreq+0x6b6>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d8ea:	f000 fc05 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 fc67 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fc77 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800d8fe:	6178      	str	r0, [r7, #20]
        break;
 800d900:	e364      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800d902:	f7ff f901 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 831a 	beq.w	800df42 <LL_RCC_GetUARTClockFreq+0x6ba>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800d90e:	f7ff f97d 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	f000 8314 	beq.w	800df42 <LL_RCC_GetUARTClockFreq+0x6ba>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800d91a:	f107 0308 	add.w	r3, r7, #8
 800d91e:	4618      	mov	r0, r3
 800d920:	f7ff fa86 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	617b      	str	r3, [r7, #20]
        break;
 800d928:	e30b      	b.n	800df42 <LL_RCC_GetUARTClockFreq+0x6ba>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800d92a:	f7ff f9b7 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 8308 	beq.w	800df46 <LL_RCC_GetUARTClockFreq+0x6be>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800d936:	f7ff fa33 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f000 8302 	beq.w	800df46 <LL_RCC_GetUARTClockFreq+0x6be>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800d942:	f107 0308 	add.w	r3, r7, #8
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff fb12 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	617b      	str	r3, [r7, #20]
        break;
 800d950:	e2f9      	b.n	800df46 <LL_RCC_GetUARTClockFreq+0x6be>
        if (LL_RCC_HSI_IsReady() == 1U)
 800d952:	f7fe ffc1 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800d956:	4603      	mov	r3, r0
 800d958:	2b01      	cmp	r3, #1
 800d95a:	f040 82f6 	bne.w	800df4a <LL_RCC_GetUARTClockFreq+0x6c2>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800d95e:	f7fe ffcd 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800d962:	4603      	mov	r3, r0
 800d964:	08db      	lsrs	r3, r3, #3
 800d966:	4a83      	ldr	r2, [pc, #524]	@ (800db74 <LL_RCC_GetUARTClockFreq+0x2ec>)
 800d968:	fa42 f303 	asr.w	r3, r2, r3
 800d96c:	617b      	str	r3, [r7, #20]
        break;
 800d96e:	e2ec      	b.n	800df4a <LL_RCC_GetUARTClockFreq+0x6c2>
        if (LL_RCC_CSI_IsReady() == 1U)
 800d970:	f7fe ffd2 	bl	800c918 <LL_RCC_CSI_IsReady>
 800d974:	4603      	mov	r3, r0
 800d976:	2b01      	cmp	r3, #1
 800d978:	f040 82e9 	bne.w	800df4e <LL_RCC_GetUARTClockFreq+0x6c6>
          uart_frequency = CSI_VALUE;
 800d97c:	4b7e      	ldr	r3, [pc, #504]	@ (800db78 <LL_RCC_GetUARTClockFreq+0x2f0>)
 800d97e:	617b      	str	r3, [r7, #20]
        break;
 800d980:	e2e5      	b.n	800df4e <LL_RCC_GetUARTClockFreq+0x6c6>
        if (LL_RCC_LSE_IsReady() == 1U)
 800d982:	f7fe ffdd 	bl	800c940 <LL_RCC_LSE_IsReady>
 800d986:	4603      	mov	r3, r0
 800d988:	2b01      	cmp	r3, #1
 800d98a:	f040 82e2 	bne.w	800df52 <LL_RCC_GetUARTClockFreq+0x6ca>
          uart_frequency = LSE_VALUE;
 800d98e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d992:	617b      	str	r3, [r7, #20]
        break;
 800d994:	e2dd      	b.n	800df52 <LL_RCC_GetUARTClockFreq+0x6ca>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a78      	ldr	r2, [pc, #480]	@ (800db7c <LL_RCC_GetUARTClockFreq+0x2f4>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d17c      	bne.n	800da98 <LL_RCC_GetUARTClockFreq+0x210>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff f85a 	bl	800ca58 <LL_RCC_GetUARTClockSource>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	4a76      	ldr	r2, [pc, #472]	@ (800db80 <LL_RCC_GetUARTClockFreq+0x2f8>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d06b      	beq.n	800da84 <LL_RCC_GetUARTClockFreq+0x1fc>
 800d9ac:	4a74      	ldr	r2, [pc, #464]	@ (800db80 <LL_RCC_GetUARTClockFreq+0x2f8>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	f200 82d1 	bhi.w	800df56 <LL_RCC_GetUARTClockFreq+0x6ce>
 800d9b4:	4a73      	ldr	r2, [pc, #460]	@ (800db84 <LL_RCC_GetUARTClockFreq+0x2fc>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d05b      	beq.n	800da72 <LL_RCC_GetUARTClockFreq+0x1ea>
 800d9ba:	4a72      	ldr	r2, [pc, #456]	@ (800db84 <LL_RCC_GetUARTClockFreq+0x2fc>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	f200 82ca 	bhi.w	800df56 <LL_RCC_GetUARTClockFreq+0x6ce>
 800d9c2:	4a71      	ldr	r2, [pc, #452]	@ (800db88 <LL_RCC_GetUARTClockFreq+0x300>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d045      	beq.n	800da54 <LL_RCC_GetUARTClockFreq+0x1cc>
 800d9c8:	4a6f      	ldr	r2, [pc, #444]	@ (800db88 <LL_RCC_GetUARTClockFreq+0x300>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	f200 82c3 	bhi.w	800df56 <LL_RCC_GetUARTClockFreq+0x6ce>
 800d9d0:	4a6e      	ldr	r2, [pc, #440]	@ (800db8c <LL_RCC_GetUARTClockFreq+0x304>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d02a      	beq.n	800da2c <LL_RCC_GetUARTClockFreq+0x1a4>
 800d9d6:	4a6d      	ldr	r2, [pc, #436]	@ (800db8c <LL_RCC_GetUARTClockFreq+0x304>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	f200 82bc 	bhi.w	800df56 <LL_RCC_GetUARTClockFreq+0x6ce>
 800d9de:	4a67      	ldr	r2, [pc, #412]	@ (800db7c <LL_RCC_GetUARTClockFreq+0x2f4>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d003      	beq.n	800d9ec <LL_RCC_GetUARTClockFreq+0x164>
 800d9e4:	4a6a      	ldr	r2, [pc, #424]	@ (800db90 <LL_RCC_GetUARTClockFreq+0x308>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d00c      	beq.n	800da04 <LL_RCC_GetUARTClockFreq+0x17c>
        }
        break;

      default:
        /* unreachable code */
        break;
 800d9ea:	e2b4      	b.n	800df56 <LL_RCC_GetUARTClockFreq+0x6ce>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d9ec:	f000 fb84 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 fbe6 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f000 fbf6 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800da00:	6178      	str	r0, [r7, #20]
        break;
 800da02:	e2e3      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800da04:	f7ff f880 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 82a5 	beq.w	800df5a <LL_RCC_GetUARTClockFreq+0x6d2>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800da10:	f7ff f8fc 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	f000 829f 	beq.w	800df5a <LL_RCC_GetUARTClockFreq+0x6d2>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800da1c:	f107 0308 	add.w	r3, r7, #8
 800da20:	4618      	mov	r0, r3
 800da22:	f7ff fa05 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	617b      	str	r3, [r7, #20]
        break;
 800da2a:	e296      	b.n	800df5a <LL_RCC_GetUARTClockFreq+0x6d2>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800da2c:	f7ff f936 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	f000 8293 	beq.w	800df5e <LL_RCC_GetUARTClockFreq+0x6d6>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800da38:	f7ff f9b2 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	f000 828d 	beq.w	800df5e <LL_RCC_GetUARTClockFreq+0x6d6>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800da44:	f107 0308 	add.w	r3, r7, #8
 800da48:	4618      	mov	r0, r3
 800da4a:	f7ff fa91 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	617b      	str	r3, [r7, #20]
        break;
 800da52:	e284      	b.n	800df5e <LL_RCC_GetUARTClockFreq+0x6d6>
        if (LL_RCC_HSI_IsReady() == 1U)
 800da54:	f7fe ff40 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	f040 8281 	bne.w	800df62 <LL_RCC_GetUARTClockFreq+0x6da>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800da60:	f7fe ff4c 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800da64:	4603      	mov	r3, r0
 800da66:	08db      	lsrs	r3, r3, #3
 800da68:	4a42      	ldr	r2, [pc, #264]	@ (800db74 <LL_RCC_GetUARTClockFreq+0x2ec>)
 800da6a:	fa42 f303 	asr.w	r3, r2, r3
 800da6e:	617b      	str	r3, [r7, #20]
        break;
 800da70:	e277      	b.n	800df62 <LL_RCC_GetUARTClockFreq+0x6da>
        if (LL_RCC_CSI_IsReady() == 1U)
 800da72:	f7fe ff51 	bl	800c918 <LL_RCC_CSI_IsReady>
 800da76:	4603      	mov	r3, r0
 800da78:	2b01      	cmp	r3, #1
 800da7a:	f040 8274 	bne.w	800df66 <LL_RCC_GetUARTClockFreq+0x6de>
          uart_frequency = CSI_VALUE;
 800da7e:	4b3e      	ldr	r3, [pc, #248]	@ (800db78 <LL_RCC_GetUARTClockFreq+0x2f0>)
 800da80:	617b      	str	r3, [r7, #20]
        break;
 800da82:	e270      	b.n	800df66 <LL_RCC_GetUARTClockFreq+0x6de>
        if (LL_RCC_LSE_IsReady() == 1U)
 800da84:	f7fe ff5c 	bl	800c940 <LL_RCC_LSE_IsReady>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	f040 826d 	bne.w	800df6a <LL_RCC_GetUARTClockFreq+0x6e2>
          uart_frequency = LSE_VALUE;
 800da90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da94:	617b      	str	r3, [r7, #20]
        break;
 800da96:	e268      	b.n	800df6a <LL_RCC_GetUARTClockFreq+0x6e2>
    }
  }
#if defined(UART7)
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4a3e      	ldr	r2, [pc, #248]	@ (800db94 <LL_RCC_GetUARTClockFreq+0x30c>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	f040 80a7 	bne.w	800dbf0 <LL_RCC_GetUARTClockFreq+0x368>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7fe ffd8 	bl	800ca58 <LL_RCC_GetUARTClockSource>
 800daa8:	4603      	mov	r3, r0
 800daaa:	4a3b      	ldr	r2, [pc, #236]	@ (800db98 <LL_RCC_GetUARTClockFreq+0x310>)
 800daac:	4293      	cmp	r3, r2
 800daae:	f000 8095 	beq.w	800dbdc <LL_RCC_GetUARTClockFreq+0x354>
 800dab2:	4a39      	ldr	r2, [pc, #228]	@ (800db98 <LL_RCC_GetUARTClockFreq+0x310>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	f200 825a 	bhi.w	800df6e <LL_RCC_GetUARTClockFreq+0x6e6>
 800daba:	4a38      	ldr	r2, [pc, #224]	@ (800db9c <LL_RCC_GetUARTClockFreq+0x314>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	f000 8084 	beq.w	800dbca <LL_RCC_GetUARTClockFreq+0x342>
 800dac2:	4a36      	ldr	r2, [pc, #216]	@ (800db9c <LL_RCC_GetUARTClockFreq+0x314>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	f200 8252 	bhi.w	800df6e <LL_RCC_GetUARTClockFreq+0x6e6>
 800daca:	4a35      	ldr	r2, [pc, #212]	@ (800dba0 <LL_RCC_GetUARTClockFreq+0x318>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d06d      	beq.n	800dbac <LL_RCC_GetUARTClockFreq+0x324>
 800dad0:	4a33      	ldr	r2, [pc, #204]	@ (800dba0 <LL_RCC_GetUARTClockFreq+0x318>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	f200 824b 	bhi.w	800df6e <LL_RCC_GetUARTClockFreq+0x6e6>
 800dad8:	4a32      	ldr	r2, [pc, #200]	@ (800dba4 <LL_RCC_GetUARTClockFreq+0x31c>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d02a      	beq.n	800db34 <LL_RCC_GetUARTClockFreq+0x2ac>
 800dade:	4a31      	ldr	r2, [pc, #196]	@ (800dba4 <LL_RCC_GetUARTClockFreq+0x31c>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	f200 8244 	bhi.w	800df6e <LL_RCC_GetUARTClockFreq+0x6e6>
 800dae6:	4a2b      	ldr	r2, [pc, #172]	@ (800db94 <LL_RCC_GetUARTClockFreq+0x30c>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d003      	beq.n	800daf4 <LL_RCC_GetUARTClockFreq+0x26c>
 800daec:	4a2e      	ldr	r2, [pc, #184]	@ (800dba8 <LL_RCC_GetUARTClockFreq+0x320>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d00c      	beq.n	800db0c <LL_RCC_GetUARTClockFreq+0x284>
        }
        break;

      default:
        /* unreachable code */
        break;
 800daf2:	e23c      	b.n	800df6e <LL_RCC_GetUARTClockFreq+0x6e6>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800daf4:	f000 fb00 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800daf8:	4603      	mov	r3, r0
 800dafa:	4618      	mov	r0, r3
 800dafc:	f000 fb62 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800db00:	4603      	mov	r3, r0
 800db02:	4618      	mov	r0, r3
 800db04:	f000 fb72 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800db08:	6178      	str	r0, [r7, #20]
        break;
 800db0a:	e25f      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800db0c:	f7fe fffc 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 822d 	beq.w	800df72 <LL_RCC_GetUARTClockFreq+0x6ea>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800db18:	f7ff f878 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 8227 	beq.w	800df72 <LL_RCC_GetUARTClockFreq+0x6ea>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800db24:	f107 0308 	add.w	r3, r7, #8
 800db28:	4618      	mov	r0, r3
 800db2a:	f7ff f981 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	617b      	str	r3, [r7, #20]
        break;
 800db32:	e21e      	b.n	800df72 <LL_RCC_GetUARTClockFreq+0x6ea>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800db34:	f7ff f8b2 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f000 821b 	beq.w	800df76 <LL_RCC_GetUARTClockFreq+0x6ee>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800db40:	f7ff f92e 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 8215 	beq.w	800df76 <LL_RCC_GetUARTClockFreq+0x6ee>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800db4c:	f107 0308 	add.w	r3, r7, #8
 800db50:	4618      	mov	r0, r3
 800db52:	f7ff fa0d 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	617b      	str	r3, [r7, #20]
        break;
 800db5a:	e20c      	b.n	800df76 <LL_RCC_GetUARTClockFreq+0x6ee>
 800db5c:	07000900 	.word	0x07000900
 800db60:	07050900 	.word	0x07050900
 800db64:	07040900 	.word	0x07040900
 800db68:	07030900 	.word	0x07030900
 800db6c:	07020900 	.word	0x07020900
 800db70:	07010900 	.word	0x07010900
 800db74:	03d09000 	.word	0x03d09000
 800db78:	003d0900 	.word	0x003d0900
 800db7c:	07000c00 	.word	0x07000c00
 800db80:	07050c00 	.word	0x07050c00
 800db84:	07040c00 	.word	0x07040c00
 800db88:	07030c00 	.word	0x07030c00
 800db8c:	07020c00 	.word	0x07020c00
 800db90:	07010c00 	.word	0x07010c00
 800db94:	07001200 	.word	0x07001200
 800db98:	07051200 	.word	0x07051200
 800db9c:	07041200 	.word	0x07041200
 800dba0:	07031200 	.word	0x07031200
 800dba4:	07021200 	.word	0x07021200
 800dba8:	07011200 	.word	0x07011200
        if (LL_RCC_HSI_IsReady() == 1U)
 800dbac:	f7fe fe94 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	f040 81e1 	bne.w	800df7a <LL_RCC_GetUARTClockFreq+0x6f2>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800dbb8:	f7fe fea0 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	08db      	lsrs	r3, r3, #3
 800dbc0:	4aa9      	ldr	r2, [pc, #676]	@ (800de68 <LL_RCC_GetUARTClockFreq+0x5e0>)
 800dbc2:	fa42 f303 	asr.w	r3, r2, r3
 800dbc6:	617b      	str	r3, [r7, #20]
        break;
 800dbc8:	e1d7      	b.n	800df7a <LL_RCC_GetUARTClockFreq+0x6f2>
        if (LL_RCC_CSI_IsReady() == 1U)
 800dbca:	f7fe fea5 	bl	800c918 <LL_RCC_CSI_IsReady>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	f040 81d4 	bne.w	800df7e <LL_RCC_GetUARTClockFreq+0x6f6>
          uart_frequency = CSI_VALUE;
 800dbd6:	4ba5      	ldr	r3, [pc, #660]	@ (800de6c <LL_RCC_GetUARTClockFreq+0x5e4>)
 800dbd8:	617b      	str	r3, [r7, #20]
        break;
 800dbda:	e1d0      	b.n	800df7e <LL_RCC_GetUARTClockFreq+0x6f6>
        if (LL_RCC_LSE_IsReady() == 1U)
 800dbdc:	f7fe feb0 	bl	800c940 <LL_RCC_LSE_IsReady>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	f040 81cd 	bne.w	800df82 <LL_RCC_GetUARTClockFreq+0x6fa>
          uart_frequency = LSE_VALUE;
 800dbe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dbec:	617b      	str	r3, [r7, #20]
        break;
 800dbee:	e1c8      	b.n	800df82 <LL_RCC_GetUARTClockFreq+0x6fa>
    }
  }
#endif /* UART7 */
#if defined(UART8)
  else if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a9f      	ldr	r2, [pc, #636]	@ (800de70 <LL_RCC_GetUARTClockFreq+0x5e8>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d17c      	bne.n	800dcf2 <LL_RCC_GetUARTClockFreq+0x46a>
  {
    /* UART8CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7fe ff2d 	bl	800ca58 <LL_RCC_GetUARTClockSource>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	4a9c      	ldr	r2, [pc, #624]	@ (800de74 <LL_RCC_GetUARTClockFreq+0x5ec>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d06b      	beq.n	800dcde <LL_RCC_GetUARTClockFreq+0x456>
 800dc06:	4a9b      	ldr	r2, [pc, #620]	@ (800de74 <LL_RCC_GetUARTClockFreq+0x5ec>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	f200 81bc 	bhi.w	800df86 <LL_RCC_GetUARTClockFreq+0x6fe>
 800dc0e:	4a9a      	ldr	r2, [pc, #616]	@ (800de78 <LL_RCC_GetUARTClockFreq+0x5f0>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d05b      	beq.n	800dccc <LL_RCC_GetUARTClockFreq+0x444>
 800dc14:	4a98      	ldr	r2, [pc, #608]	@ (800de78 <LL_RCC_GetUARTClockFreq+0x5f0>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	f200 81b5 	bhi.w	800df86 <LL_RCC_GetUARTClockFreq+0x6fe>
 800dc1c:	4a97      	ldr	r2, [pc, #604]	@ (800de7c <LL_RCC_GetUARTClockFreq+0x5f4>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d045      	beq.n	800dcae <LL_RCC_GetUARTClockFreq+0x426>
 800dc22:	4a96      	ldr	r2, [pc, #600]	@ (800de7c <LL_RCC_GetUARTClockFreq+0x5f4>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	f200 81ae 	bhi.w	800df86 <LL_RCC_GetUARTClockFreq+0x6fe>
 800dc2a:	4a95      	ldr	r2, [pc, #596]	@ (800de80 <LL_RCC_GetUARTClockFreq+0x5f8>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d02a      	beq.n	800dc86 <LL_RCC_GetUARTClockFreq+0x3fe>
 800dc30:	4a93      	ldr	r2, [pc, #588]	@ (800de80 <LL_RCC_GetUARTClockFreq+0x5f8>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	f200 81a7 	bhi.w	800df86 <LL_RCC_GetUARTClockFreq+0x6fe>
 800dc38:	4a8d      	ldr	r2, [pc, #564]	@ (800de70 <LL_RCC_GetUARTClockFreq+0x5e8>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d003      	beq.n	800dc46 <LL_RCC_GetUARTClockFreq+0x3be>
 800dc3e:	4a91      	ldr	r2, [pc, #580]	@ (800de84 <LL_RCC_GetUARTClockFreq+0x5fc>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d00c      	beq.n	800dc5e <LL_RCC_GetUARTClockFreq+0x3d6>
        }
        break;

      default:
        /* unreachable code */
        break;
 800dc44:	e19f      	b.n	800df86 <LL_RCC_GetUARTClockFreq+0x6fe>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800dc46:	f000 fa57 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f000 fab9 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800dc52:	4603      	mov	r3, r0
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fac9 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800dc5a:	6178      	str	r0, [r7, #20]
        break;
 800dc5c:	e1b6      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800dc5e:	f7fe ff53 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 8190 	beq.w	800df8a <LL_RCC_GetUARTClockFreq+0x702>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800dc6a:	f7fe ffcf 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f000 818a 	beq.w	800df8a <LL_RCC_GetUARTClockFreq+0x702>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800dc76:	f107 0308 	add.w	r3, r7, #8
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7ff f8d8 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	617b      	str	r3, [r7, #20]
        break;
 800dc84:	e181      	b.n	800df8a <LL_RCC_GetUARTClockFreq+0x702>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800dc86:	f7ff f809 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f000 817e 	beq.w	800df8e <LL_RCC_GetUARTClockFreq+0x706>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800dc92:	f7ff f885 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 8178 	beq.w	800df8e <LL_RCC_GetUARTClockFreq+0x706>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800dc9e:	f107 0308 	add.w	r3, r7, #8
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7ff f964 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	617b      	str	r3, [r7, #20]
        break;
 800dcac:	e16f      	b.n	800df8e <LL_RCC_GetUARTClockFreq+0x706>
        if (LL_RCC_HSI_IsReady() == 1U)
 800dcae:	f7fe fe13 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	f040 816c 	bne.w	800df92 <LL_RCC_GetUARTClockFreq+0x70a>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800dcba:	f7fe fe1f 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	08db      	lsrs	r3, r3, #3
 800dcc2:	4a69      	ldr	r2, [pc, #420]	@ (800de68 <LL_RCC_GetUARTClockFreq+0x5e0>)
 800dcc4:	fa42 f303 	asr.w	r3, r2, r3
 800dcc8:	617b      	str	r3, [r7, #20]
        break;
 800dcca:	e162      	b.n	800df92 <LL_RCC_GetUARTClockFreq+0x70a>
        if (LL_RCC_CSI_IsReady() == 1U)
 800dccc:	f7fe fe24 	bl	800c918 <LL_RCC_CSI_IsReady>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	f040 815f 	bne.w	800df96 <LL_RCC_GetUARTClockFreq+0x70e>
          uart_frequency = CSI_VALUE;
 800dcd8:	4b64      	ldr	r3, [pc, #400]	@ (800de6c <LL_RCC_GetUARTClockFreq+0x5e4>)
 800dcda:	617b      	str	r3, [r7, #20]
        break;
 800dcdc:	e15b      	b.n	800df96 <LL_RCC_GetUARTClockFreq+0x70e>
        if (LL_RCC_LSE_IsReady() == 1U)
 800dcde:	f7fe fe2f 	bl	800c940 <LL_RCC_LSE_IsReady>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	f040 8158 	bne.w	800df9a <LL_RCC_GetUARTClockFreq+0x712>
          uart_frequency = LSE_VALUE;
 800dcea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcee:	617b      	str	r3, [r7, #20]
        break;
 800dcf0:	e153      	b.n	800df9a <LL_RCC_GetUARTClockFreq+0x712>
    }
  }
#endif /* UART8 */
#if defined(UART9)
  else if (UARTxSource == LL_RCC_UART9_CLKSOURCE)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a64      	ldr	r2, [pc, #400]	@ (800de88 <LL_RCC_GetUARTClockFreq+0x600>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d17c      	bne.n	800ddf4 <LL_RCC_GetUARTClockFreq+0x56c>
  {
    /* UART9CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7fe feac 	bl	800ca58 <LL_RCC_GetUARTClockSource>
 800dd00:	4603      	mov	r3, r0
 800dd02:	4a62      	ldr	r2, [pc, #392]	@ (800de8c <LL_RCC_GetUARTClockFreq+0x604>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d06b      	beq.n	800dde0 <LL_RCC_GetUARTClockFreq+0x558>
 800dd08:	4a60      	ldr	r2, [pc, #384]	@ (800de8c <LL_RCC_GetUARTClockFreq+0x604>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	f200 8147 	bhi.w	800df9e <LL_RCC_GetUARTClockFreq+0x716>
 800dd10:	4a5f      	ldr	r2, [pc, #380]	@ (800de90 <LL_RCC_GetUARTClockFreq+0x608>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d05b      	beq.n	800ddce <LL_RCC_GetUARTClockFreq+0x546>
 800dd16:	4a5e      	ldr	r2, [pc, #376]	@ (800de90 <LL_RCC_GetUARTClockFreq+0x608>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	f200 8140 	bhi.w	800df9e <LL_RCC_GetUARTClockFreq+0x716>
 800dd1e:	4a5d      	ldr	r2, [pc, #372]	@ (800de94 <LL_RCC_GetUARTClockFreq+0x60c>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d045      	beq.n	800ddb0 <LL_RCC_GetUARTClockFreq+0x528>
 800dd24:	4a5b      	ldr	r2, [pc, #364]	@ (800de94 <LL_RCC_GetUARTClockFreq+0x60c>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	f200 8139 	bhi.w	800df9e <LL_RCC_GetUARTClockFreq+0x716>
 800dd2c:	4a5a      	ldr	r2, [pc, #360]	@ (800de98 <LL_RCC_GetUARTClockFreq+0x610>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d02a      	beq.n	800dd88 <LL_RCC_GetUARTClockFreq+0x500>
 800dd32:	4a59      	ldr	r2, [pc, #356]	@ (800de98 <LL_RCC_GetUARTClockFreq+0x610>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	f200 8132 	bhi.w	800df9e <LL_RCC_GetUARTClockFreq+0x716>
 800dd3a:	4a53      	ldr	r2, [pc, #332]	@ (800de88 <LL_RCC_GetUARTClockFreq+0x600>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d003      	beq.n	800dd48 <LL_RCC_GetUARTClockFreq+0x4c0>
 800dd40:	4a56      	ldr	r2, [pc, #344]	@ (800de9c <LL_RCC_GetUARTClockFreq+0x614>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d00c      	beq.n	800dd60 <LL_RCC_GetUARTClockFreq+0x4d8>
        }
        break;

      default:
        /* unreachable code */
        break;
 800dd46:	e12a      	b.n	800df9e <LL_RCC_GetUARTClockFreq+0x716>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800dd48:	f000 f9d6 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 fa38 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800dd54:	4603      	mov	r3, r0
 800dd56:	4618      	mov	r0, r3
 800dd58:	f000 fa48 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800dd5c:	6178      	str	r0, [r7, #20]
        break;
 800dd5e:	e135      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800dd60:	f7fe fed2 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 811b 	beq.w	800dfa2 <LL_RCC_GetUARTClockFreq+0x71a>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800dd6c:	f7fe ff4e 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f000 8115 	beq.w	800dfa2 <LL_RCC_GetUARTClockFreq+0x71a>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800dd78:	f107 0308 	add.w	r3, r7, #8
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7ff f857 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	617b      	str	r3, [r7, #20]
        break;
 800dd86:	e10c      	b.n	800dfa2 <LL_RCC_GetUARTClockFreq+0x71a>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800dd88:	f7fe ff88 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	f000 8109 	beq.w	800dfa6 <LL_RCC_GetUARTClockFreq+0x71e>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800dd94:	f7ff f804 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 8103 	beq.w	800dfa6 <LL_RCC_GetUARTClockFreq+0x71e>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800dda0:	f107 0308 	add.w	r3, r7, #8
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7ff f8e3 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	617b      	str	r3, [r7, #20]
        break;
 800ddae:	e0fa      	b.n	800dfa6 <LL_RCC_GetUARTClockFreq+0x71e>
        if (LL_RCC_HSI_IsReady() == 1U)
 800ddb0:	f7fe fd92 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	f040 80f7 	bne.w	800dfaa <LL_RCC_GetUARTClockFreq+0x722>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800ddbc:	f7fe fd9e 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	08db      	lsrs	r3, r3, #3
 800ddc4:	4a28      	ldr	r2, [pc, #160]	@ (800de68 <LL_RCC_GetUARTClockFreq+0x5e0>)
 800ddc6:	fa42 f303 	asr.w	r3, r2, r3
 800ddca:	617b      	str	r3, [r7, #20]
        break;
 800ddcc:	e0ed      	b.n	800dfaa <LL_RCC_GetUARTClockFreq+0x722>
        if (LL_RCC_CSI_IsReady() == 1U)
 800ddce:	f7fe fda3 	bl	800c918 <LL_RCC_CSI_IsReady>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	f040 80ea 	bne.w	800dfae <LL_RCC_GetUARTClockFreq+0x726>
          uart_frequency = CSI_VALUE;
 800ddda:	4b24      	ldr	r3, [pc, #144]	@ (800de6c <LL_RCC_GetUARTClockFreq+0x5e4>)
 800dddc:	617b      	str	r3, [r7, #20]
        break;
 800ddde:	e0e6      	b.n	800dfae <LL_RCC_GetUARTClockFreq+0x726>
        if (LL_RCC_LSE_IsReady() == 1U)
 800dde0:	f7fe fdae 	bl	800c940 <LL_RCC_LSE_IsReady>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	f040 80e3 	bne.w	800dfb2 <LL_RCC_GetUARTClockFreq+0x72a>
          uart_frequency = LSE_VALUE;
 800ddec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddf0:	617b      	str	r3, [r7, #20]
        break;
 800ddf2:	e0de      	b.n	800dfb2 <LL_RCC_GetUARTClockFreq+0x72a>
    }
  }
#endif /* UART9 */
#if defined(UART12)
  else if (UARTxSource == LL_RCC_UART12_CLKSOURCE)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a2a      	ldr	r2, [pc, #168]	@ (800dea0 <LL_RCC_GetUARTClockFreq+0x618>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	f040 80e7 	bne.w	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
  {
    /* UART12CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7fe fe2a 	bl	800ca58 <LL_RCC_GetUARTClockSource>
 800de04:	4603      	mov	r3, r0
 800de06:	4a27      	ldr	r2, [pc, #156]	@ (800dea4 <LL_RCC_GetUARTClockFreq+0x61c>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	f000 808f 	beq.w	800df2c <LL_RCC_GetUARTClockFreq+0x6a4>
 800de0e:	4a25      	ldr	r2, [pc, #148]	@ (800dea4 <LL_RCC_GetUARTClockFreq+0x61c>)
 800de10:	4293      	cmp	r3, r2
 800de12:	f200 80d0 	bhi.w	800dfb6 <LL_RCC_GetUARTClockFreq+0x72e>
 800de16:	4a24      	ldr	r2, [pc, #144]	@ (800dea8 <LL_RCC_GetUARTClockFreq+0x620>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d07f      	beq.n	800df1c <LL_RCC_GetUARTClockFreq+0x694>
 800de1c:	4a22      	ldr	r2, [pc, #136]	@ (800dea8 <LL_RCC_GetUARTClockFreq+0x620>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	f200 80c9 	bhi.w	800dfb6 <LL_RCC_GetUARTClockFreq+0x72e>
 800de24:	4a21      	ldr	r2, [pc, #132]	@ (800deac <LL_RCC_GetUARTClockFreq+0x624>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d06a      	beq.n	800df00 <LL_RCC_GetUARTClockFreq+0x678>
 800de2a:	4a20      	ldr	r2, [pc, #128]	@ (800deac <LL_RCC_GetUARTClockFreq+0x624>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	f200 80c2 	bhi.w	800dfb6 <LL_RCC_GetUARTClockFreq+0x72e>
 800de32:	4a1f      	ldr	r2, [pc, #124]	@ (800deb0 <LL_RCC_GetUARTClockFreq+0x628>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d051      	beq.n	800dedc <LL_RCC_GetUARTClockFreq+0x654>
 800de38:	4a1d      	ldr	r2, [pc, #116]	@ (800deb0 <LL_RCC_GetUARTClockFreq+0x628>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	f200 80bb 	bhi.w	800dfb6 <LL_RCC_GetUARTClockFreq+0x72e>
 800de40:	4a17      	ldr	r2, [pc, #92]	@ (800dea0 <LL_RCC_GetUARTClockFreq+0x618>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d003      	beq.n	800de4e <LL_RCC_GetUARTClockFreq+0x5c6>
 800de46:	4a1b      	ldr	r2, [pc, #108]	@ (800deb4 <LL_RCC_GetUARTClockFreq+0x62c>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d035      	beq.n	800deb8 <LL_RCC_GetUARTClockFreq+0x630>
        }
        break;

      default:
        /* unreachable code */
        break;
 800de4c:	e0b3      	b.n	800dfb6 <LL_RCC_GetUARTClockFreq+0x72e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800de4e:	f000 f953 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800de52:	4603      	mov	r3, r0
 800de54:	4618      	mov	r0, r3
 800de56:	f000 f9b5 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800de5a:	4603      	mov	r3, r0
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 f9c5 	bl	800e1ec <RCC_GetPCLK1ClockFreq>
 800de62:	6178      	str	r0, [r7, #20]
        break;
 800de64:	e0b2      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
 800de66:	bf00      	nop
 800de68:	03d09000 	.word	0x03d09000
 800de6c:	003d0900 	.word	0x003d0900
 800de70:	07001500 	.word	0x07001500
 800de74:	07051500 	.word	0x07051500
 800de78:	07041500 	.word	0x07041500
 800de7c:	07031500 	.word	0x07031500
 800de80:	07021500 	.word	0x07021500
 800de84:	07011500 	.word	0x07011500
 800de88:	07001800 	.word	0x07001800
 800de8c:	07051800 	.word	0x07051800
 800de90:	07041800 	.word	0x07041800
 800de94:	07031800 	.word	0x07031800
 800de98:	07021800 	.word	0x07021800
 800de9c:	07011800 	.word	0x07011800
 800dea0:	07000404 	.word	0x07000404
 800dea4:	07050404 	.word	0x07050404
 800dea8:	07040404 	.word	0x07040404
 800deac:	07030404 	.word	0x07030404
 800deb0:	07020404 	.word	0x07020404
 800deb4:	07010404 	.word	0x07010404
        if (LL_RCC_PLL2_IsReady() != 0U)
 800deb8:	f7fe fe26 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d07b      	beq.n	800dfba <LL_RCC_GetUARTClockFreq+0x732>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800dec2:	f7fe fea3 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d076      	beq.n	800dfba <LL_RCC_GetUARTClockFreq+0x732>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800decc:	f107 0308 	add.w	r3, r7, #8
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fe ffad 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	617b      	str	r3, [r7, #20]
        break;
 800deda:	e06e      	b.n	800dfba <LL_RCC_GetUARTClockFreq+0x732>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800dedc:	f7fe fede 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d06b      	beq.n	800dfbe <LL_RCC_GetUARTClockFreq+0x736>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800dee6:	f7fe ff5b 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d066      	beq.n	800dfbe <LL_RCC_GetUARTClockFreq+0x736>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800def0:	f107 0308 	add.w	r3, r7, #8
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff f83b 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	617b      	str	r3, [r7, #20]
        break;
 800defe:	e05e      	b.n	800dfbe <LL_RCC_GetUARTClockFreq+0x736>
        if (LL_RCC_HSI_IsReady() == 1U)
 800df00:	f7fe fcea 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800df04:	4603      	mov	r3, r0
 800df06:	2b01      	cmp	r3, #1
 800df08:	d15b      	bne.n	800dfc2 <LL_RCC_GetUARTClockFreq+0x73a>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800df0a:	f7fe fcf7 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800df0e:	4603      	mov	r3, r0
 800df10:	08db      	lsrs	r3, r3, #3
 800df12:	4a31      	ldr	r2, [pc, #196]	@ (800dfd8 <LL_RCC_GetUARTClockFreq+0x750>)
 800df14:	fa42 f303 	asr.w	r3, r2, r3
 800df18:	617b      	str	r3, [r7, #20]
        break;
 800df1a:	e052      	b.n	800dfc2 <LL_RCC_GetUARTClockFreq+0x73a>
        if (LL_RCC_CSI_IsReady() == 1U)
 800df1c:	f7fe fcfc 	bl	800c918 <LL_RCC_CSI_IsReady>
 800df20:	4603      	mov	r3, r0
 800df22:	2b01      	cmp	r3, #1
 800df24:	d14f      	bne.n	800dfc6 <LL_RCC_GetUARTClockFreq+0x73e>
          uart_frequency = CSI_VALUE;
 800df26:	4b2d      	ldr	r3, [pc, #180]	@ (800dfdc <LL_RCC_GetUARTClockFreq+0x754>)
 800df28:	617b      	str	r3, [r7, #20]
        break;
 800df2a:	e04c      	b.n	800dfc6 <LL_RCC_GetUARTClockFreq+0x73e>
        if (LL_RCC_LSE_IsReady() == 1U)
 800df2c:	f7fe fd08 	bl	800c940 <LL_RCC_LSE_IsReady>
 800df30:	4603      	mov	r3, r0
 800df32:	2b01      	cmp	r3, #1
 800df34:	d149      	bne.n	800dfca <LL_RCC_GetUARTClockFreq+0x742>
          uart_frequency = LSE_VALUE;
 800df36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df3a:	617b      	str	r3, [r7, #20]
        break;
 800df3c:	e045      	b.n	800dfca <LL_RCC_GetUARTClockFreq+0x742>
        break;
 800df3e:	bf00      	nop
 800df40:	e044      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df42:	bf00      	nop
 800df44:	e042      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df46:	bf00      	nop
 800df48:	e040      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df4a:	bf00      	nop
 800df4c:	e03e      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df4e:	bf00      	nop
 800df50:	e03c      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df52:	bf00      	nop
 800df54:	e03a      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df56:	bf00      	nop
 800df58:	e038      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df5a:	bf00      	nop
 800df5c:	e036      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df5e:	bf00      	nop
 800df60:	e034      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df62:	bf00      	nop
 800df64:	e032      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df66:	bf00      	nop
 800df68:	e030      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df6a:	bf00      	nop
 800df6c:	e02e      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df6e:	bf00      	nop
 800df70:	e02c      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df72:	bf00      	nop
 800df74:	e02a      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df76:	bf00      	nop
 800df78:	e028      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df7a:	bf00      	nop
 800df7c:	e026      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df7e:	bf00      	nop
 800df80:	e024      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df82:	bf00      	nop
 800df84:	e022      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df86:	bf00      	nop
 800df88:	e020      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df8a:	bf00      	nop
 800df8c:	e01e      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df8e:	bf00      	nop
 800df90:	e01c      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df92:	bf00      	nop
 800df94:	e01a      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df96:	bf00      	nop
 800df98:	e018      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df9a:	bf00      	nop
 800df9c:	e016      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800df9e:	bf00      	nop
 800dfa0:	e014      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfa2:	bf00      	nop
 800dfa4:	e012      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfa6:	bf00      	nop
 800dfa8:	e010      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfaa:	bf00      	nop
 800dfac:	e00e      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfae:	bf00      	nop
 800dfb0:	e00c      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfb2:	bf00      	nop
 800dfb4:	e00a      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfb6:	bf00      	nop
 800dfb8:	e008      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfba:	bf00      	nop
 800dfbc:	e006      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfbe:	bf00      	nop
 800dfc0:	e004      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfc2:	bf00      	nop
 800dfc4:	e002      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfc6:	bf00      	nop
 800dfc8:	e000      	b.n	800dfcc <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800dfca:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return uart_frequency;
 800dfcc:	697b      	ldr	r3, [r7, #20]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	03d09000 	.word	0x03d09000
 800dfdc:	003d0900 	.word	0x003d0900

0800dfe0 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	617b      	str	r3, [r7, #20]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7fe fd3f 	bl	800ca70 <LL_RCC_GetLPUARTClockSource>
 800dff2:	4603      	mov	r3, r0
 800dff4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dff8:	d060      	beq.n	800e0bc <LL_RCC_GetLPUARTClockFreq+0xdc>
 800dffa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dffe:	d866      	bhi.n	800e0ce <LL_RCC_GetLPUARTClockFreq+0xee>
 800e000:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e004:	d052      	beq.n	800e0ac <LL_RCC_GetLPUARTClockFreq+0xcc>
 800e006:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e00a:	d860      	bhi.n	800e0ce <LL_RCC_GetLPUARTClockFreq+0xee>
 800e00c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e010:	d03e      	beq.n	800e090 <LL_RCC_GetLPUARTClockFreq+0xb0>
 800e012:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e016:	d85a      	bhi.n	800e0ce <LL_RCC_GetLPUARTClockFreq+0xee>
 800e018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e01c:	d026      	beq.n	800e06c <LL_RCC_GetLPUARTClockFreq+0x8c>
 800e01e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e022:	d854      	bhi.n	800e0ce <LL_RCC_GetLPUARTClockFreq+0xee>
 800e024:	2b00      	cmp	r3, #0
 800e026:	d003      	beq.n	800e030 <LL_RCC_GetLPUARTClockFreq+0x50>
 800e028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e02c:	d00c      	beq.n	800e048 <LL_RCC_GetLPUARTClockFreq+0x68>
      }
      break;

    default:
      /* unreachable code */
      break;
 800e02e:	e04e      	b.n	800e0ce <LL_RCC_GetLPUARTClockFreq+0xee>
      lpuart_frequency = RCC_GetPCLK3ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800e030:	f000 f862 	bl	800e0f8 <RCC_GetSystemClockFreq>
 800e034:	4603      	mov	r3, r0
 800e036:	4618      	mov	r0, r3
 800e038:	f000 f8c4 	bl	800e1c4 <RCC_GetHCLKClockFreq>
 800e03c:	4603      	mov	r3, r0
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f8fe 	bl	800e240 <RCC_GetPCLK3ClockFreq>
 800e044:	6178      	str	r0, [r7, #20]
      break;
 800e046:	e04d      	b.n	800e0e4 <LL_RCC_GetLPUARTClockFreq+0x104>
      if (LL_RCC_PLL2_IsReady() != 0U)
 800e048:	f7fe fd5e 	bl	800cb08 <LL_RCC_PLL2_IsReady>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d03f      	beq.n	800e0d2 <LL_RCC_GetLPUARTClockFreq+0xf2>
        if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800e052:	f7fe fddb 	bl	800cc0c <LL_RCC_PLL2Q_IsEnabled>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d03a      	beq.n	800e0d2 <LL_RCC_GetLPUARTClockFreq+0xf2>
          LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800e05c:	f107 0308 	add.w	r3, r7, #8
 800e060:	4618      	mov	r0, r3
 800e062:	f7fe fee5 	bl	800ce30 <LL_RCC_GetPLL2ClockFreq>
          lpuart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	617b      	str	r3, [r7, #20]
      break;
 800e06a:	e032      	b.n	800e0d2 <LL_RCC_GetLPUARTClockFreq+0xf2>
      if (LL_RCC_PLL3_IsReady() != 0U)
 800e06c:	f7fe fe16 	bl	800cc9c <LL_RCC_PLL3_IsReady>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d02f      	beq.n	800e0d6 <LL_RCC_GetLPUARTClockFreq+0xf6>
        if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800e076:	f7fe fe93 	bl	800cda0 <LL_RCC_PLL3Q_IsEnabled>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d02a      	beq.n	800e0d6 <LL_RCC_GetLPUARTClockFreq+0xf6>
          LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800e080:	f107 0308 	add.w	r3, r7, #8
 800e084:	4618      	mov	r0, r3
 800e086:	f7fe ff73 	bl	800cf70 <LL_RCC_GetPLL3ClockFreq>
          lpuart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	617b      	str	r3, [r7, #20]
      break;
 800e08e:	e022      	b.n	800e0d6 <LL_RCC_GetLPUARTClockFreq+0xf6>
      if (LL_RCC_HSI_IsReady() == 1U)
 800e090:	f7fe fc22 	bl	800c8d8 <LL_RCC_HSI_IsReady>
 800e094:	4603      	mov	r3, r0
 800e096:	2b01      	cmp	r3, #1
 800e098:	d11f      	bne.n	800e0da <LL_RCC_GetLPUARTClockFreq+0xfa>
        lpuart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800e09a:	f7fe fc2f 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	08db      	lsrs	r3, r3, #3
 800e0a2:	4a13      	ldr	r2, [pc, #76]	@ (800e0f0 <LL_RCC_GetLPUARTClockFreq+0x110>)
 800e0a4:	fa42 f303 	asr.w	r3, r2, r3
 800e0a8:	617b      	str	r3, [r7, #20]
      break;
 800e0aa:	e016      	b.n	800e0da <LL_RCC_GetLPUARTClockFreq+0xfa>
      if (LL_RCC_CSI_IsReady() == 1U)
 800e0ac:	f7fe fc34 	bl	800c918 <LL_RCC_CSI_IsReady>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d113      	bne.n	800e0de <LL_RCC_GetLPUARTClockFreq+0xfe>
        lpuart_frequency = CSI_VALUE;
 800e0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e0f4 <LL_RCC_GetLPUARTClockFreq+0x114>)
 800e0b8:	617b      	str	r3, [r7, #20]
      break;
 800e0ba:	e010      	b.n	800e0de <LL_RCC_GetLPUARTClockFreq+0xfe>
      if (LL_RCC_LSE_IsReady() == 1U)
 800e0bc:	f7fe fc40 	bl	800c940 <LL_RCC_LSE_IsReady>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d10d      	bne.n	800e0e2 <LL_RCC_GetLPUARTClockFreq+0x102>
        lpuart_frequency = LSE_VALUE;
 800e0c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0ca:	617b      	str	r3, [r7, #20]
      break;
 800e0cc:	e009      	b.n	800e0e2 <LL_RCC_GetLPUARTClockFreq+0x102>
      break;
 800e0ce:	bf00      	nop
 800e0d0:	e008      	b.n	800e0e4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 800e0d2:	bf00      	nop
 800e0d4:	e006      	b.n	800e0e4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 800e0d6:	bf00      	nop
 800e0d8:	e004      	b.n	800e0e4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 800e0da:	bf00      	nop
 800e0dc:	e002      	b.n	800e0e4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 800e0de:	bf00      	nop
 800e0e0:	e000      	b.n	800e0e4 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 800e0e2:	bf00      	nop
  }

  return lpuart_frequency;
 800e0e4:	697b      	ldr	r3, [r7, #20]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3718      	adds	r7, #24
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	03d09000 	.word	0x03d09000
 800e0f4:	003d0900 	.word	0x003d0900

0800e0f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800e0fe:	f7fe fc33 	bl	800c968 <LL_RCC_GetSysClkSource>
 800e102:	4603      	mov	r3, r0
 800e104:	2b18      	cmp	r3, #24
 800e106:	d848      	bhi.n	800e19a <RCC_GetSystemClockFreq+0xa2>
 800e108:	a201      	add	r2, pc, #4	@ (adr r2, 800e110 <RCC_GetSystemClockFreq+0x18>)
 800e10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e10e:	bf00      	nop
 800e110:	0800e175 	.word	0x0800e175
 800e114:	0800e19b 	.word	0x0800e19b
 800e118:	0800e19b 	.word	0x0800e19b
 800e11c:	0800e19b 	.word	0x0800e19b
 800e120:	0800e19b 	.word	0x0800e19b
 800e124:	0800e19b 	.word	0x0800e19b
 800e128:	0800e19b 	.word	0x0800e19b
 800e12c:	0800e19b 	.word	0x0800e19b
 800e130:	0800e187 	.word	0x0800e187
 800e134:	0800e19b 	.word	0x0800e19b
 800e138:	0800e19b 	.word	0x0800e19b
 800e13c:	0800e19b 	.word	0x0800e19b
 800e140:	0800e19b 	.word	0x0800e19b
 800e144:	0800e19b 	.word	0x0800e19b
 800e148:	0800e19b 	.word	0x0800e19b
 800e14c:	0800e19b 	.word	0x0800e19b
 800e150:	0800e18d 	.word	0x0800e18d
 800e154:	0800e19b 	.word	0x0800e19b
 800e158:	0800e19b 	.word	0x0800e19b
 800e15c:	0800e19b 	.word	0x0800e19b
 800e160:	0800e19b 	.word	0x0800e19b
 800e164:	0800e19b 	.word	0x0800e19b
 800e168:	0800e19b 	.word	0x0800e19b
 800e16c:	0800e19b 	.word	0x0800e19b
 800e170:	0800e193 	.word	0x0800e193
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:   /* HSI used as system clock  source */
      frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800e174:	f7fe fbc2 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800e178:	4603      	mov	r3, r0
 800e17a:	08db      	lsrs	r3, r3, #3
 800e17c:	4a0e      	ldr	r2, [pc, #56]	@ (800e1b8 <RCC_GetSystemClockFreq+0xc0>)
 800e17e:	fa42 f303 	asr.w	r3, r2, r3
 800e182:	607b      	str	r3, [r7, #4]
      break;
 800e184:	e012      	b.n	800e1ac <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:   /* CSI used as system clock  source */
      frequency = CSI_VALUE;
 800e186:	4b0d      	ldr	r3, [pc, #52]	@ (800e1bc <RCC_GetSystemClockFreq+0xc4>)
 800e188:	607b      	str	r3, [r7, #4]
      break;
 800e18a:	e00f      	b.n	800e1ac <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:   /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800e18c:	4b0c      	ldr	r3, [pc, #48]	@ (800e1c0 <RCC_GetSystemClockFreq+0xc8>)
 800e18e:	607b      	str	r3, [r7, #4]
      break;
 800e190:	e00c      	b.n	800e1ac <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:  /* PLL1 used as system clock  source */
      frequency = RCC_PLL1_GetFreqSystem();
 800e192:	f000 f869 	bl	800e268 <RCC_PLL1_GetFreqSystem>
 800e196:	6078      	str	r0, [r7, #4]
      break;
 800e198:	e008      	b.n	800e1ac <RCC_GetSystemClockFreq+0xb4>

    default:
      frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800e19a:	f7fe fbaf 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	08db      	lsrs	r3, r3, #3
 800e1a2:	4a05      	ldr	r2, [pc, #20]	@ (800e1b8 <RCC_GetSystemClockFreq+0xc0>)
 800e1a4:	fa42 f303 	asr.w	r3, r2, r3
 800e1a8:	607b      	str	r3, [r7, #4]
      break;
 800e1aa:	bf00      	nop
  }

  return frequency;
 800e1ac:	687b      	ldr	r3, [r7, #4]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	03d09000 	.word	0x03d09000
 800e1bc:	003d0900 	.word	0x003d0900
 800e1c0:	01312d00 	.word	0x01312d00

0800e1c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800e1cc:	f7fe fbda 	bl	800c984 <LL_RCC_GetAHBPrescaler>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f003 030f 	and.w	r3, r3, #15
 800e1d6:	4a04      	ldr	r2, [pc, #16]	@ (800e1e8 <RCC_GetHCLKClockFreq+0x24>)
 800e1d8:	5cd3      	ldrb	r3, [r2, r3]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	40d3      	lsrs	r3, r2
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	08018dc0 	.word	0x08018dc0

0800e1ec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800e1f4:	f7fe fbd4 	bl	800c9a0 <LL_RCC_GetAPB1Prescaler>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	091b      	lsrs	r3, r3, #4
 800e1fc:	f003 0307 	and.w	r3, r3, #7
 800e200:	4a04      	ldr	r2, [pc, #16]	@ (800e214 <RCC_GetPCLK1ClockFreq+0x28>)
 800e202:	5cd3      	ldrb	r3, [r2, r3]
 800e204:	461a      	mov	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	40d3      	lsrs	r3, r2
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	08018dd0 	.word	0x08018dd0

0800e218 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800e220:	f7fe fbcc 	bl	800c9bc <LL_RCC_GetAPB2Prescaler>
 800e224:	4603      	mov	r3, r0
 800e226:	0a1b      	lsrs	r3, r3, #8
 800e228:	4a04      	ldr	r2, [pc, #16]	@ (800e23c <RCC_GetPCLK2ClockFreq+0x24>)
 800e22a:	5cd3      	ldrb	r3, [r2, r3]
 800e22c:	461a      	mov	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	40d3      	lsrs	r3, r2
}
 800e232:	4618      	mov	r0, r3
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	08018dd0 	.word	0x08018dd0

0800e240 <RCC_GetPCLK3ClockFreq>:
  * @brief  Return PCLK3 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK3 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK3ClockFreq(uint32_t HCLK_Frequency)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  /* PCLK3 clock frequency */
  return __LL_RCC_CALC_PCLK3_FREQ(HCLK_Frequency, LL_RCC_GetAPB3Prescaler());
 800e248:	f7fe fbc6 	bl	800c9d8 <LL_RCC_GetAPB3Prescaler>
 800e24c:	4603      	mov	r3, r0
 800e24e:	0b1b      	lsrs	r3, r3, #12
 800e250:	4a04      	ldr	r2, [pc, #16]	@ (800e264 <RCC_GetPCLK3ClockFreq+0x24>)
 800e252:	5cd3      	ldrb	r3, [r2, r3]
 800e254:	461a      	mov	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	40d3      	lsrs	r3, r2
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	08018dd0 	.word	0x08018dd0

0800e268 <RCC_PLL1_GetFreqSystem>:
/**
  * @brief  Return PLL1 clock frequency used for system clock
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t RCC_PLL1_GetFreqSystem(void)
{
 800e268:	b590      	push	{r4, r7, lr}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL1_GetSource();
 800e26e:	f7fe fc11 	bl	800ca94 <LL_RCC_PLL1_GetSource>
 800e272:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	2b03      	cmp	r3, #3
 800e278:	d015      	beq.n	800e2a6 <RCC_PLL1_GetFreqSystem+0x3e>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d815      	bhi.n	800e2ac <RCC_PLL1_GetFreqSystem+0x44>
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b01      	cmp	r3, #1
 800e284:	d003      	beq.n	800e28e <RCC_PLL1_GetFreqSystem+0x26>
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d009      	beq.n	800e2a0 <RCC_PLL1_GetFreqSystem+0x38>
 800e28c:	e00e      	b.n	800e2ac <RCC_PLL1_GetFreqSystem+0x44>
  {
    case LL_RCC_PLL1SOURCE_HSI:  /* HSI used as PLL1 clock source */
      pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800e28e:	f7fe fb35 	bl	800c8fc <LL_RCC_HSI_GetDivider>
 800e292:	4603      	mov	r3, r0
 800e294:	08db      	lsrs	r3, r3, #3
 800e296:	4a11      	ldr	r2, [pc, #68]	@ (800e2dc <RCC_PLL1_GetFreqSystem+0x74>)
 800e298:	fa42 f303 	asr.w	r3, r2, r3
 800e29c:	607b      	str	r3, [r7, #4]
      break;
 800e29e:	e008      	b.n	800e2b2 <RCC_PLL1_GetFreqSystem+0x4a>

    case LL_RCC_PLL1SOURCE_CSI:  /* CSI used as PLL1 clock source */
      pllinputfreq = CSI_VALUE;
 800e2a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e0 <RCC_PLL1_GetFreqSystem+0x78>)
 800e2a2:	607b      	str	r3, [r7, #4]
      break;
 800e2a4:	e005      	b.n	800e2b2 <RCC_PLL1_GetFreqSystem+0x4a>

    case LL_RCC_PLL1SOURCE_HSE:  /* HSE used as PLL1 clock source */
      pllinputfreq = HSE_VALUE;
 800e2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e4 <RCC_PLL1_GetFreqSystem+0x7c>)
 800e2a8:	607b      	str	r3, [r7, #4]
      break;
 800e2aa:	e002      	b.n	800e2b2 <RCC_PLL1_GetFreqSystem+0x4a>

    default:
      pllinputfreq = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	607b      	str	r3, [r7, #4]
      break;
 800e2b0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLL1CLK_P_FREQ(pllinputfreq, LL_RCC_PLL1_GetM(),
 800e2b2:	f7fe fc1b 	bl	800caec <LL_RCC_PLL1_GetM>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	fbb3 f4f2 	udiv	r4, r3, r2
 800e2be:	f7fe fbf7 	bl	800cab0 <LL_RCC_PLL1_GetN>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	fb03 f404 	mul.w	r4, r3, r4
 800e2c8:	f7fe fc00 	bl	800cacc <LL_RCC_PLL1_GetP>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	fbb4 f3f3 	udiv	r3, r4, r3
                                      LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetP());
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	370c      	adds	r7, #12
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd90      	pop	{r4, r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	03d09000 	.word	0x03d09000
 800e2e0:	003d0900 	.word	0x003d0900
 800e2e4:	01312d00 	.word	0x01312d00

0800e2e8 <LL_SPI_IsEnabled>:
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f003 0301 	and.w	r3, r3, #1
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d101      	bne.n	800e300 <LL_SPI_IsEnabled+0x18>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e000      	b.n	800e302 <LL_SPI_IsEnabled+0x1a>
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	370c      	adds	r7, #12
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <LL_SPI_SetInternalSSLevel>:
{
 800e30e:	b480      	push	{r7}
 800e310:	b083      	sub	sp, #12
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	431a      	orrs	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	601a      	str	r2, [r3, #0]
}
 800e328:	bf00      	nop
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <LL_SPI_GetNSSPolarity>:
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 800e344:	4618      	mov	r0, r3
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b086      	sub	sp, #24
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff ffb4 	bl	800e2e8 <LL_SPI_IsEnabled>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d169      	bne.n	800e45a <LL_SPI_Init+0xee>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits & SPI_CFG1_BPASS bit
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_BPASS | SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	689a      	ldr	r2, [r3, #8]
 800e38a:	4b36      	ldr	r3, [pc, #216]	@ (800e464 <LL_SPI_Init+0xf8>)
 800e38c:	4013      	ands	r3, r2
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	6991      	ldr	r1, [r2, #24]
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	6a12      	ldr	r2, [r2, #32]
 800e396:	4311      	orrs	r1, r2
 800e398:	683a      	ldr	r2, [r7, #0]
 800e39a:	6892      	ldr	r2, [r2, #8]
 800e39c:	430a      	orrs	r2, r1
 800e39e:	431a      	orrs	r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7ff ffbf 	bl	800e334 <LL_SPI_GetNSSPolarity>
 800e3b6:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e3be:	d112      	bne.n	800e3e6 <LL_SPI_Init+0x7a>
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d103      	bne.n	800e3ce <LL_SPI_Init+0x62>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3cc:	d006      	beq.n	800e3dc <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3d4:	d107      	bne.n	800e3e6 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d104      	bne.n	800e3e6 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 800e3dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7ff ff94 	bl	800e30e <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	f023 531f 	bic.w	r3, r3, #666894336	@ 0x27c00000
 800e3ee:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800e3f2:	683a      	ldr	r2, [r7, #0]
 800e3f4:	6951      	ldr	r1, [r2, #20]
 800e3f6:	683a      	ldr	r2, [r7, #0]
 800e3f8:	68d2      	ldr	r2, [r2, #12]
 800e3fa:	4311      	orrs	r1, r2
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	6912      	ldr	r2, [r2, #16]
 800e400:	4311      	orrs	r1, r2
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	69d2      	ldr	r2, [r2, #28]
 800e406:	4311      	orrs	r1, r2
 800e408:	683a      	ldr	r2, [r7, #0]
 800e40a:	6852      	ldr	r2, [r2, #4]
 800e40c:	4311      	orrs	r1, r2
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	6812      	ldr	r2, [r2, #0]
 800e412:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 800e416:	430a      	orrs	r2, r1
 800e418:	431a      	orrs	r2, r3
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e42e:	431a      	orrs	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	6a1b      	ldr	r3, [r3, #32]
 800e438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e43c:	d105      	bne.n	800e44a <LL_SPI_Init+0xde>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff ff83 	bl	800e350 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e44e:	f023 0201 	bic.w	r2, r3, #1
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 800e456:	2300      	movs	r3, #0
 800e458:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	0fbfffe0 	.word	0x0fbfffe0

0800e468 <LL_USART_IsEnabled>:
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 0301 	and.w	r3, r3, #1
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d101      	bne.n	800e480 <LL_USART_IsEnabled+0x18>
 800e47c:	2301      	movs	r3, #1
 800e47e:	e000      	b.n	800e482 <LL_USART_IsEnabled+0x1a>
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	370c      	adds	r7, #12
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <LL_USART_SetPrescaler>:
{
 800e48e:	b480      	push	{r7}
 800e490:	b083      	sub	sp, #12
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49c:	f023 030f 	bic.w	r3, r3, #15
 800e4a0:	683a      	ldr	r2, [r7, #0]
 800e4a2:	b292      	uxth	r2, r2
 800e4a4:	431a      	orrs	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800e4aa:	bf00      	nop
 800e4ac:	370c      	adds	r7, #12
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <LL_USART_SetStopBitsLength>:
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	b083      	sub	sp, #12
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	431a      	orrs	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	605a      	str	r2, [r3, #4]
}
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <LL_USART_SetHWFlowCtrl>:
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	431a      	orrs	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	609a      	str	r2, [r3, #8]
}
 800e4f6:	bf00      	nop
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
	...

0800e504 <LL_USART_SetBaudRate>:
{
 800e504:	b480      	push	{r7}
 800e506:	b087      	sub	sp, #28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
 800e510:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b0b      	cmp	r3, #11
 800e516:	d83c      	bhi.n	800e592 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d039      	beq.n	800e592 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e524:	d122      	bne.n	800e56c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	461a      	mov	r2, r3
 800e52c:	4b1c      	ldr	r3, [pc, #112]	@ (800e5a0 <LL_USART_SetBaudRate+0x9c>)
 800e52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	fbb2 f3f3 	udiv	r3, r2, r3
 800e538:	005a      	lsls	r2, r3, #1
 800e53a:	6a3b      	ldr	r3, [r7, #32]
 800e53c:	085b      	lsrs	r3, r3, #1
 800e53e:	441a      	add	r2, r3
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	fbb2 f3f3 	udiv	r3, r2, r3
 800e546:	b29b      	uxth	r3, r3
 800e548:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800e550:	4013      	ands	r3, r2
 800e552:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	085b      	lsrs	r3, r3, #1
 800e558:	b29b      	uxth	r3, r3
 800e55a:	f003 0307 	and.w	r3, r3, #7
 800e55e:	693a      	ldr	r2, [r7, #16]
 800e560:	4313      	orrs	r3, r2
 800e562:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	693a      	ldr	r2, [r7, #16]
 800e568:	60da      	str	r2, [r3, #12]
}
 800e56a:	e012      	b.n	800e592 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	461a      	mov	r2, r3
 800e572:	4b0b      	ldr	r3, [pc, #44]	@ (800e5a0 <LL_USART_SetBaudRate+0x9c>)
 800e574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	fbb2 f2f3 	udiv	r2, r2, r3
 800e57e:	6a3b      	ldr	r3, [r7, #32]
 800e580:	085b      	lsrs	r3, r3, #1
 800e582:	441a      	add	r2, r3
 800e584:	6a3b      	ldr	r3, [r7, #32]
 800e586:	fbb2 f3f3 	udiv	r3, r2, r3
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	461a      	mov	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	60da      	str	r2, [r3, #12]
}
 800e592:	bf00      	nop
 800e594:	371c      	adds	r7, #28
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	0801a4c0 	.word	0x0801a4c0

0800e5a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af02      	add	r7, sp, #8
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff ff56 	bl	800e468 <LL_USART_IsEnabled>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	f040 80a5 	bne.w	800e70e <LL_USART_Init+0x16a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	4b53      	ldr	r3, [pc, #332]	@ (800e718 <LL_USART_Init+0x174>)
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	6891      	ldr	r1, [r2, #8]
 800e5d0:	683a      	ldr	r2, [r7, #0]
 800e5d2:	6912      	ldr	r2, [r2, #16]
 800e5d4:	4311      	orrs	r1, r2
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	6952      	ldr	r2, [r2, #20]
 800e5da:	4311      	orrs	r1, r2
 800e5dc:	683a      	ldr	r2, [r7, #0]
 800e5de:	69d2      	ldr	r2, [r2, #28]
 800e5e0:	430a      	orrs	r2, r1
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff ff61 	bl	800e4b6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	699b      	ldr	r3, [r3, #24]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f7ff ff6e 	bl	800e4dc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4a46      	ldr	r2, [pc, #280]	@ (800e71c <LL_USART_Init+0x178>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d105      	bne.n	800e614 <LL_USART_Init+0x70>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800e608:	f04f 60e0 	mov.w	r0, #117440512	@ 0x7000000
 800e60c:	f7fe fd90 	bl	800d130 <LL_RCC_GetUSARTClockFreq>
 800e610:	60b8      	str	r0, [r7, #8]
 800e612:	e061      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
    else if (USARTx == USART2)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a42      	ldr	r2, [pc, #264]	@ (800e720 <LL_USART_Init+0x17c>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d104      	bne.n	800e626 <LL_USART_Init+0x82>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800e61c:	4841      	ldr	r0, [pc, #260]	@ (800e724 <LL_USART_Init+0x180>)
 800e61e:	f7fe fd87 	bl	800d130 <LL_RCC_GetUSARTClockFreq>
 800e622:	60b8      	str	r0, [r7, #8]
 800e624:	e058      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
    else if (USARTx == USART3)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4a3f      	ldr	r2, [pc, #252]	@ (800e728 <LL_USART_Init+0x184>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d104      	bne.n	800e638 <LL_USART_Init+0x94>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800e62e:	483f      	ldr	r0, [pc, #252]	@ (800e72c <LL_USART_Init+0x188>)
 800e630:	f7fe fd7e 	bl	800d130 <LL_RCC_GetUSARTClockFreq>
 800e634:	60b8      	str	r0, [r7, #8]
 800e636:	e04f      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a3d      	ldr	r2, [pc, #244]	@ (800e730 <LL_USART_Init+0x18c>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d104      	bne.n	800e64a <LL_USART_Init+0xa6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800e640:	483c      	ldr	r0, [pc, #240]	@ (800e734 <LL_USART_Init+0x190>)
 800e642:	f7ff f921 	bl	800d888 <LL_RCC_GetUARTClockFreq>
 800e646:	60b8      	str	r0, [r7, #8]
 800e648:	e046      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4a3a      	ldr	r2, [pc, #232]	@ (800e738 <LL_USART_Init+0x194>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d104      	bne.n	800e65c <LL_USART_Init+0xb8>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800e652:	483a      	ldr	r0, [pc, #232]	@ (800e73c <LL_USART_Init+0x198>)
 800e654:	f7ff f918 	bl	800d888 <LL_RCC_GetUARTClockFreq>
 800e658:	60b8      	str	r0, [r7, #8]
 800e65a:	e03d      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#endif /* UART5 */
#if defined(USART6)
    else if (USARTx == USART6)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a38      	ldr	r2, [pc, #224]	@ (800e740 <LL_USART_Init+0x19c>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d104      	bne.n	800e66e <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 800e664:	4837      	ldr	r0, [pc, #220]	@ (800e744 <LL_USART_Init+0x1a0>)
 800e666:	f7fe fd63 	bl	800d130 <LL_RCC_GetUSARTClockFreq>
 800e66a:	60b8      	str	r0, [r7, #8]
 800e66c:	e034      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#endif /* USART6 */
#if defined(UART7)
    else if (USARTx == UART7)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a35      	ldr	r2, [pc, #212]	@ (800e748 <LL_USART_Init+0x1a4>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d104      	bne.n	800e680 <LL_USART_Init+0xdc>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 800e676:	4835      	ldr	r0, [pc, #212]	@ (800e74c <LL_USART_Init+0x1a8>)
 800e678:	f7ff f906 	bl	800d888 <LL_RCC_GetUARTClockFreq>
 800e67c:	60b8      	str	r0, [r7, #8]
 800e67e:	e02b      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4a33      	ldr	r2, [pc, #204]	@ (800e750 <LL_USART_Init+0x1ac>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d104      	bne.n	800e692 <LL_USART_Init+0xee>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800e688:	4832      	ldr	r0, [pc, #200]	@ (800e754 <LL_USART_Init+0x1b0>)
 800e68a:	f7ff f8fd 	bl	800d888 <LL_RCC_GetUARTClockFreq>
 800e68e:	60b8      	str	r0, [r7, #8]
 800e690:	e022      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#endif /* UART8 */
#if defined(UART9)
    else if (USARTx == UART9)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	4a30      	ldr	r2, [pc, #192]	@ (800e758 <LL_USART_Init+0x1b4>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d104      	bne.n	800e6a4 <LL_USART_Init+0x100>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART9_CLKSOURCE);
 800e69a:	4830      	ldr	r0, [pc, #192]	@ (800e75c <LL_USART_Init+0x1b8>)
 800e69c:	f7ff f8f4 	bl	800d888 <LL_RCC_GetUARTClockFreq>
 800e6a0:	60b8      	str	r0, [r7, #8]
 800e6a2:	e019      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a2e      	ldr	r2, [pc, #184]	@ (800e760 <LL_USART_Init+0x1bc>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d104      	bne.n	800e6b6 <LL_USART_Init+0x112>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART10_CLKSOURCE);
 800e6ac:	482d      	ldr	r0, [pc, #180]	@ (800e764 <LL_USART_Init+0x1c0>)
 800e6ae:	f7fe fd3f 	bl	800d130 <LL_RCC_GetUSARTClockFreq>
 800e6b2:	60b8      	str	r0, [r7, #8]
 800e6b4:	e010      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#endif /* USART10 */
#if defined(USART11)
    else if (USARTx == USART11)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4a2b      	ldr	r2, [pc, #172]	@ (800e768 <LL_USART_Init+0x1c4>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d104      	bne.n	800e6c8 <LL_USART_Init+0x124>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART11_CLKSOURCE);
 800e6be:	482b      	ldr	r0, [pc, #172]	@ (800e76c <LL_USART_Init+0x1c8>)
 800e6c0:	f7fe fd36 	bl	800d130 <LL_RCC_GetUSARTClockFreq>
 800e6c4:	60b8      	str	r0, [r7, #8]
 800e6c6:	e007      	b.n	800e6d8 <LL_USART_Init+0x134>
    }
#endif /* USART11 */
#if defined(UART12)
    else if (USARTx == UART12)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a29      	ldr	r2, [pc, #164]	@ (800e770 <LL_USART_Init+0x1cc>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d103      	bne.n	800e6d8 <LL_USART_Init+0x134>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART12_CLKSOURCE);
 800e6d0:	4828      	ldr	r0, [pc, #160]	@ (800e774 <LL_USART_Init+0x1d0>)
 800e6d2:	f7ff f8d9 	bl	800d888 <LL_RCC_GetUARTClockFreq>
 800e6d6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d011      	beq.n	800e702 <LL_USART_Init+0x15e>
        && (USART_InitStruct->BaudRate != 0U))
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00d      	beq.n	800e702 <LL_USART_Init+0x15e>
    {
      status = SUCCESS;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	68b9      	ldr	r1, [r7, #8]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7ff ff01 	bl	800e504 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4619      	mov	r1, r3
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f7ff fec0 	bl	800e48e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800e70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	efff69f3 	.word	0xefff69f3
 800e71c:	40013800 	.word	0x40013800
 800e720:	40004400 	.word	0x40004400
 800e724:	07000300 	.word	0x07000300
 800e728:	40004800 	.word	0x40004800
 800e72c:	07000600 	.word	0x07000600
 800e730:	40004c00 	.word	0x40004c00
 800e734:	07000900 	.word	0x07000900
 800e738:	40005000 	.word	0x40005000
 800e73c:	07000c00 	.word	0x07000c00
 800e740:	40006400 	.word	0x40006400
 800e744:	07000f00 	.word	0x07000f00
 800e748:	40007800 	.word	0x40007800
 800e74c:	07001200 	.word	0x07001200
 800e750:	40007c00 	.word	0x40007c00
 800e754:	07001500 	.word	0x07001500
 800e758:	40008000 	.word	0x40008000
 800e75c:	07001800 	.word	0x07001800
 800e760:	40006800 	.word	0x40006800
 800e764:	07001b00 	.word	0x07001b00
 800e768:	40006c00 	.word	0x40006c00
 800e76c:	07000004 	.word	0x07000004
 800e770:	40008400 	.word	0x40008400
 800e774:	07000404 	.word	0x07000404

0800e778 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e780:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e784:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	43db      	mvns	r3, r3
 800e78e:	401a      	ands	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e794:	2300      	movs	r3, #0
}
 800e796:	4618      	mov	r0, r3
 800e798:	3714      	adds	r7, #20
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800e7a2:	b480      	push	{r7}
 800e7a4:	b083      	sub	sp, #12
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800e7ae:	78fb      	ldrb	r3, [r7, #3]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d106      	bne.n	800e7c2 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	641a      	str	r2, [r3, #64]	@ 0x40
 800e7c0:	e00b      	b.n	800e7da <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800e7c2:	78fb      	ldrb	r3, [r7, #3]
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d106      	bne.n	800e7d6 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	641a      	str	r2, [r3, #64]	@ 0x40
 800e7d4:	e001      	b.n	800e7da <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e000      	b.n	800e7dc <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800e7e8:	b084      	sub	sp, #16
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	f107 001c 	add.w	r0, r7, #28
 800e7f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e804:	f023 0201 	bic.w	r2, r3, #1
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800e80c:	2100      	movs	r1, #0
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7ff ffc7 	bl	800e7a2 <USB_SetCurrentMode>
 800e814:	4603      	mov	r3, r0
 800e816:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e82a:	b004      	add	sp, #16
 800e82c:	4770      	bx	lr
	...

0800e830 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e830:	b480      	push	{r7}
 800e832:	b09f      	sub	sp, #124	@ 0x7c
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	4413      	add	r3, r2
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	4ba0      	ldr	r3, [pc, #640]	@ (800ead0 <USB_ActivateEndpoint+0x2a0>)
 800e84e:	4013      	ands	r3, r2
 800e850:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	78db      	ldrb	r3, [r3, #3]
 800e856:	2b03      	cmp	r3, #3
 800e858:	d819      	bhi.n	800e88e <USB_ActivateEndpoint+0x5e>
 800e85a:	a201      	add	r2, pc, #4	@ (adr r2, 800e860 <USB_ActivateEndpoint+0x30>)
 800e85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e860:	0800e871 	.word	0x0800e871
 800e864:	0800e885 	.word	0x0800e885
 800e868:	0800e897 	.word	0x0800e897
 800e86c:	0800e87b 	.word	0x0800e87b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e876:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e878:	e00e      	b.n	800e898 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e87a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e87c:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800e880:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e882:	e009      	b.n	800e898 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e88a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e88c:	e004      	b.n	800e898 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800e894:	e000      	b.n	800e898 <USB_ActivateEndpoint+0x68>
      break;
 800e896:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	441a      	add	r2, r3
 800e8a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e8a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8ac:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4413      	add	r3, r2
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	4b86      	ldr	r3, [pc, #536]	@ (800ead4 <USB_ActivateEndpoint+0x2a4>)
 800e8bc:	4013      	ands	r3, r2
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	7812      	ldrb	r2, [r2, #0]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	441a      	add	r2, r3
 800e8d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8da:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	7b1b      	ldrb	r3, [r3, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f040 8177 	bne.w	800ebd4 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	785b      	ldrb	r3, [r3, #1]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d079      	beq.n	800e9e2 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	00db      	lsls	r3, r3, #3
 800e8f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	00db      	lsls	r3, r3, #3
 800e904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e908:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e90c:	0c12      	lsrs	r2, r2, #16
 800e90e:	0412      	lsls	r2, r2, #16
 800e910:	601a      	str	r2, [r3, #0]
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	00db      	lsls	r3, r3, #3
 800e918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e91c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e920:	6819      	ldr	r1, [r3, #0]
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	88db      	ldrh	r3, [r3, #6]
 800e926:	089b      	lsrs	r3, r3, #2
 800e928:	b29b      	uxth	r3, r3
 800e92a:	009a      	lsls	r2, r3, #2
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	00db      	lsls	r3, r3, #3
 800e932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e93a:	430a      	orrs	r2, r1
 800e93c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	4413      	add	r3, r2
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	61bb      	str	r3, [r7, #24]
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e952:	2b00      	cmp	r3, #0
 800e954:	d013      	beq.n	800e97e <USB_ActivateEndpoint+0x14e>
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	4413      	add	r3, r2
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	4b5c      	ldr	r3, [pc, #368]	@ (800ead4 <USB_ActivateEndpoint+0x2a4>)
 800e964:	4013      	ands	r3, r2
 800e966:	617b      	str	r3, [r7, #20]
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	009b      	lsls	r3, r3, #2
 800e970:	441a      	add	r2, r3
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e978:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e97c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	78db      	ldrb	r3, [r3, #3]
 800e982:	2b01      	cmp	r3, #1
 800e984:	d018      	beq.n	800e9b8 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	4b51      	ldr	r3, [pc, #324]	@ (800ead8 <USB_ActivateEndpoint+0x2a8>)
 800e994:	4013      	ands	r3, r2
 800e996:	60fb      	str	r3, [r7, #12]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f083 0320 	eor.w	r3, r3, #32
 800e99e:	60fb      	str	r3, [r7, #12]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	441a      	add	r2, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	e28c      	b.n	800eed2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4413      	add	r3, r2
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	4b44      	ldr	r3, [pc, #272]	@ (800ead8 <USB_ActivateEndpoint+0x2a8>)
 800e9c6:	4013      	ands	r3, r2
 800e9c8:	613b      	str	r3, [r7, #16]
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	441a      	add	r2, r3
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	e277      	b.n	800eed2 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	00db      	lsls	r3, r3, #3
 800e9e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9f0:	685a      	ldr	r2, [r3, #4]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	00db      	lsls	r3, r3, #3
 800e9f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea00:	0c12      	lsrs	r2, r2, #16
 800ea02:	0412      	lsls	r2, r2, #16
 800ea04:	605a      	str	r2, [r3, #4]
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	00db      	lsls	r3, r3, #3
 800ea0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea14:	6859      	ldr	r1, [r3, #4]
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	88db      	ldrh	r3, [r3, #6]
 800ea1a:	089b      	lsrs	r3, r3, #2
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	009a      	lsls	r2, r3, #2
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	00db      	lsls	r3, r3, #3
 800ea26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea2e:	430a      	orrs	r2, r1
 800ea30:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	00db      	lsls	r3, r3, #3
 800ea38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	00db      	lsls	r3, r3, #3
 800ea48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea50:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ea54:	605a      	str	r2, [r3, #4]
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d112      	bne.n	800ea84 <USB_ActivateEndpoint+0x254>
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	00db      	lsls	r3, r3, #3
 800ea74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea7c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ea80:	605a      	str	r2, [r3, #4]
 800ea82:	e04d      	b.n	800eb20 <USB_ActivateEndpoint+0x2f0>
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea8a:	d827      	bhi.n	800eadc <USB_ActivateEndpoint+0x2ac>
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	691b      	ldr	r3, [r3, #16]
 800ea90:	085b      	lsrs	r3, r3, #1
 800ea92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	691b      	ldr	r3, [r3, #16]
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <USB_ActivateEndpoint+0x276>
 800eaa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	00db      	lsls	r3, r3, #3
 800eaac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eab4:	6859      	ldr	r1, [r3, #4]
 800eab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eab8:	069a      	lsls	r2, r3, #26
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eac4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eac8:	430a      	orrs	r2, r1
 800eaca:	605a      	str	r2, [r3, #4]
 800eacc:	e028      	b.n	800eb20 <USB_ActivateEndpoint+0x2f0>
 800eace:	bf00      	nop
 800ead0:	07ff898f 	.word	0x07ff898f
 800ead4:	07ff8f8f 	.word	0x07ff8f8f
 800ead8:	07ff8fbf 	.word	0x07ff8fbf
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	691b      	ldr	r3, [r3, #16]
 800eae0:	095b      	lsrs	r3, r3, #5
 800eae2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	f003 031f 	and.w	r3, r3, #31
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d102      	bne.n	800eaf6 <USB_ActivateEndpoint+0x2c6>
 800eaf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	00db      	lsls	r3, r3, #3
 800eafc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb04:	685a      	ldr	r2, [r3, #4]
 800eb06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb08:	069b      	lsls	r3, r3, #26
 800eb0a:	431a      	orrs	r2, r3
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb1a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eb1e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	4413      	add	r3, r2
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d013      	beq.n	800eb60 <USB_ActivateEndpoint+0x330>
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	4b9c      	ldr	r3, [pc, #624]	@ (800edb8 <USB_ActivateEndpoint+0x588>)
 800eb46:	4013      	ands	r3, r2
 800eb48:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	441a      	add	r2, r3
 800eb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800eb5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb5e:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d11c      	bne.n	800eba2 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	4413      	add	r3, r2
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	4b91      	ldr	r3, [pc, #580]	@ (800edbc <USB_ActivateEndpoint+0x58c>)
 800eb76:	4013      	ands	r3, r2
 800eb78:	61fb      	str	r3, [r7, #28]
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eb80:	61fb      	str	r3, [r7, #28]
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eb88:	61fb      	str	r3, [r7, #28]
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	441a      	add	r2, r3
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb9e:	6013      	str	r3, [r2, #0]
 800eba0:	e197      	b.n	800eed2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	4413      	add	r3, r2
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	4b83      	ldr	r3, [pc, #524]	@ (800edbc <USB_ActivateEndpoint+0x58c>)
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	623b      	str	r3, [r7, #32]
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ebba:	623b      	str	r3, [r7, #32]
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	441a      	add	r2, r3
 800ebc6:	6a3b      	ldr	r3, [r7, #32]
 800ebc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ebcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebd0:	6013      	str	r3, [r2, #0]
 800ebd2:	e17e      	b.n	800eed2 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	78db      	ldrb	r3, [r3, #3]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d114      	bne.n	800ec06 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	4413      	add	r3, r2
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	4b73      	ldr	r3, [pc, #460]	@ (800edb8 <USB_ActivateEndpoint+0x588>)
 800ebea:	4013      	ands	r3, r2
 800ebec:	663b      	str	r3, [r7, #96]	@ 0x60
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	441a      	add	r2, r3
 800ebf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebfa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ebfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec02:	6013      	str	r3, [r2, #0]
 800ec04:	e013      	b.n	800ec2e <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	4413      	add	r3, r2
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	4b6b      	ldr	r3, [pc, #428]	@ (800edc0 <USB_ActivateEndpoint+0x590>)
 800ec14:	4013      	ands	r3, r2
 800ec16:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	441a      	add	r2, r3
 800ec22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ec28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec2c:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	00db      	lsls	r3, r3, #3
 800ec34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec4c:	0c12      	lsrs	r2, r2, #16
 800ec4e:	0412      	lsls	r2, r2, #16
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec60:	6819      	ldr	r1, [r3, #0]
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	891b      	ldrh	r3, [r3, #8]
 800ec66:	089b      	lsrs	r3, r3, #2
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	009a      	lsls	r2, r3, #2
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	00db      	lsls	r3, r3, #3
 800ec72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec7a:	430a      	orrs	r2, r1
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec8c:	685a      	ldr	r2, [r3, #4]
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec9c:	0c12      	lsrs	r2, r2, #16
 800ec9e:	0412      	lsls	r2, r2, #16
 800eca0:	605a      	str	r2, [r3, #4]
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	00db      	lsls	r3, r3, #3
 800eca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecb0:	6859      	ldr	r1, [r3, #4]
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	895b      	ldrh	r3, [r3, #10]
 800ecb6:	089b      	lsrs	r3, r3, #2
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	009a      	lsls	r2, r3, #2
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	00db      	lsls	r3, r3, #3
 800ecc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecca:	430a      	orrs	r2, r1
 800eccc:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	785b      	ldrb	r3, [r3, #1]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d178      	bne.n	800edc8 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4413      	add	r3, r2
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ece4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ece6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d013      	beq.n	800ed16 <USB_ActivateEndpoint+0x4e6>
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4413      	add	r3, r2
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	4b2f      	ldr	r3, [pc, #188]	@ (800edb8 <USB_ActivateEndpoint+0x588>)
 800ecfc:	4013      	ands	r3, r2
 800ecfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	441a      	add	r2, r3
 800ed0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ed10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed14:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	4413      	add	r3, r2
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d013      	beq.n	800ed56 <USB_ActivateEndpoint+0x526>
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4413      	add	r3, r2
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	4b1f      	ldr	r3, [pc, #124]	@ (800edb8 <USB_ActivateEndpoint+0x588>)
 800ed3c:	4013      	ands	r3, r2
 800ed3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	441a      	add	r2, r3
 800ed4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ed54:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4413      	add	r3, r2
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	4b16      	ldr	r3, [pc, #88]	@ (800edbc <USB_ActivateEndpoint+0x58c>)
 800ed64:	4013      	ands	r3, r2
 800ed66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ed6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ed76:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	441a      	add	r2, r3
 800ed82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed8c:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	4413      	add	r3, r2
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	4b0a      	ldr	r3, [pc, #40]	@ (800edc4 <USB_ActivateEndpoint+0x594>)
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	009b      	lsls	r3, r3, #2
 800eda8:	441a      	add	r2, r3
 800edaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800edb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edb4:	6013      	str	r3, [r2, #0]
 800edb6:	e08c      	b.n	800eed2 <USB_ActivateEndpoint+0x6a2>
 800edb8:	07ff8f8f 	.word	0x07ff8f8f
 800edbc:	07ffbf8f 	.word	0x07ffbf8f
 800edc0:	07ff8e8f 	.word	0x07ff8e8f
 800edc4:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	4413      	add	r3, r2
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800edd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d013      	beq.n	800ee08 <USB_ActivateEndpoint+0x5d8>
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	4b3d      	ldr	r3, [pc, #244]	@ (800eee4 <USB_ActivateEndpoint+0x6b4>)
 800edee:	4013      	ands	r3, r2
 800edf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	441a      	add	r2, r3
 800edfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800edfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ee02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee06:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	4413      	add	r3, r2
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	657b      	str	r3, [r7, #84]	@ 0x54
 800ee16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d013      	beq.n	800ee48 <USB_ActivateEndpoint+0x618>
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4413      	add	r3, r2
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	4b2d      	ldr	r3, [pc, #180]	@ (800eee4 <USB_ActivateEndpoint+0x6b4>)
 800ee2e:	4013      	ands	r3, r2
 800ee30:	653b      	str	r3, [r7, #80]	@ 0x50
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	441a      	add	r2, r3
 800ee3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ee46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	78db      	ldrb	r3, [r3, #3]
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d018      	beq.n	800ee82 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4413      	add	r3, r2
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	4b22      	ldr	r3, [pc, #136]	@ (800eee8 <USB_ActivateEndpoint+0x6b8>)
 800ee5e:	4013      	ands	r3, r2
 800ee60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee64:	f083 0320 	eor.w	r3, r3, #32
 800ee68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	441a      	add	r2, r3
 800ee74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee7e:	6013      	str	r3, [r2, #0]
 800ee80:	e013      	b.n	800eeaa <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	4b16      	ldr	r3, [pc, #88]	@ (800eee8 <USB_ActivateEndpoint+0x6b8>)
 800ee90:	4013      	ands	r3, r2
 800ee92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	441a      	add	r2, r3
 800ee9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eea8:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4413      	add	r3, r2
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	4b0d      	ldr	r3, [pc, #52]	@ (800eeec <USB_ActivateEndpoint+0x6bc>)
 800eeb8:	4013      	ands	r3, r2
 800eeba:	647b      	str	r3, [r7, #68]	@ 0x44
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	441a      	add	r2, r3
 800eec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eed0:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800eed2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	377c      	adds	r7, #124	@ 0x7c
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	07ff8f8f 	.word	0x07ff8f8f
 800eee8:	07ff8fbf 	.word	0x07ff8fbf
 800eeec:	07ffbf8f 	.word	0x07ffbf8f

0800eef0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b097      	sub	sp, #92	@ 0x5c
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	7b1b      	ldrb	r3, [r3, #12]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d16d      	bne.n	800efde <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	785b      	ldrb	r3, [r3, #1]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d034      	beq.n	800ef74 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	4413      	add	r3, r2
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	613b      	str	r3, [r7, #16]
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d013      	beq.n	800ef4a <USB_DeactivateEndpoint+0x5a>
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	4413      	add	r3, r2
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	4b6d      	ldr	r3, [pc, #436]	@ (800f0e4 <USB_DeactivateEndpoint+0x1f4>)
 800ef30:	4013      	ands	r3, r2
 800ef32:	60fb      	str	r3, [r7, #12]
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	441a      	add	r2, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ef48:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	4413      	add	r3, r2
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	4b64      	ldr	r3, [pc, #400]	@ (800f0e8 <USB_DeactivateEndpoint+0x1f8>)
 800ef58:	4013      	ands	r3, r2
 800ef5a:	60bb      	str	r3, [r7, #8]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	441a      	add	r2, r3
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef70:	6013      	str	r3, [r2, #0]
 800ef72:	e139      	b.n	800f1e8 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	61fb      	str	r3, [r7, #28]
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d013      	beq.n	800efb4 <USB_DeactivateEndpoint+0xc4>
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	4b52      	ldr	r3, [pc, #328]	@ (800f0e4 <USB_DeactivateEndpoint+0x1f4>)
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	61bb      	str	r3, [r7, #24]
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	441a      	add	r2, r3
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800efae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efb2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4413      	add	r3, r2
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	4b4a      	ldr	r3, [pc, #296]	@ (800f0ec <USB_DeactivateEndpoint+0x1fc>)
 800efc2:	4013      	ands	r3, r2
 800efc4:	617b      	str	r3, [r7, #20]
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	009b      	lsls	r3, r3, #2
 800efce:	441a      	add	r2, r3
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800efd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	e104      	b.n	800f1e8 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	785b      	ldrb	r3, [r3, #1]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f040 8084 	bne.w	800f0f0 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	4413      	add	r3, r2
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800effc:	2b00      	cmp	r3, #0
 800effe:	d013      	beq.n	800f028 <USB_DeactivateEndpoint+0x138>
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	4413      	add	r3, r2
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	4b35      	ldr	r3, [pc, #212]	@ (800f0e4 <USB_DeactivateEndpoint+0x1f4>)
 800f00e:	4013      	ands	r3, r2
 800f010:	637b      	str	r3, [r7, #52]	@ 0x34
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	441a      	add	r2, r3
 800f01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f01e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f026:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	4413      	add	r3, r2
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	633b      	str	r3, [r7, #48]	@ 0x30
 800f036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d013      	beq.n	800f068 <USB_DeactivateEndpoint+0x178>
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4413      	add	r3, r2
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	4b25      	ldr	r3, [pc, #148]	@ (800f0e4 <USB_DeactivateEndpoint+0x1f4>)
 800f04e:	4013      	ands	r3, r2
 800f050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	009b      	lsls	r3, r3, #2
 800f05a:	441a      	add	r2, r3
 800f05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f062:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f066:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4413      	add	r3, r2
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	4b1b      	ldr	r3, [pc, #108]	@ (800f0e4 <USB_DeactivateEndpoint+0x1f4>)
 800f076:	4013      	ands	r3, r2
 800f078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	441a      	add	r2, r3
 800f084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f08a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f08e:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	4b13      	ldr	r3, [pc, #76]	@ (800f0ec <USB_DeactivateEndpoint+0x1fc>)
 800f09e:	4013      	ands	r3, r2
 800f0a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	009b      	lsls	r3, r3, #2
 800f0aa:	441a      	add	r2, r3
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0b6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	4413      	add	r3, r2
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	4b08      	ldr	r3, [pc, #32]	@ (800f0e8 <USB_DeactivateEndpoint+0x1f8>)
 800f0c6:	4013      	ands	r3, r2
 800f0c8:	623b      	str	r3, [r7, #32]
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	441a      	add	r2, r3
 800f0d4:	6a3b      	ldr	r3, [r7, #32]
 800f0d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0de:	6013      	str	r3, [r2, #0]
 800f0e0:	e082      	b.n	800f1e8 <USB_DeactivateEndpoint+0x2f8>
 800f0e2:	bf00      	nop
 800f0e4:	07ff8f8f 	.word	0x07ff8f8f
 800f0e8:	07ff8fbf 	.word	0x07ff8fbf
 800f0ec:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4413      	add	r3, r2
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800f0fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f104:	2b00      	cmp	r3, #0
 800f106:	d013      	beq.n	800f130 <USB_DeactivateEndpoint+0x240>
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	4413      	add	r3, r2
 800f112:	681a      	ldr	r2, [r3, #0]
 800f114:	4b38      	ldr	r3, [pc, #224]	@ (800f1f8 <USB_DeactivateEndpoint+0x308>)
 800f116:	4013      	ands	r3, r2
 800f118:	653b      	str	r3, [r7, #80]	@ 0x50
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	441a      	add	r2, r3
 800f124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f126:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f12e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	4413      	add	r3, r2
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f13e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f144:	2b00      	cmp	r3, #0
 800f146:	d013      	beq.n	800f170 <USB_DeactivateEndpoint+0x280>
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	4413      	add	r3, r2
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	4b28      	ldr	r3, [pc, #160]	@ (800f1f8 <USB_DeactivateEndpoint+0x308>)
 800f156:	4013      	ands	r3, r2
 800f158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	441a      	add	r2, r3
 800f164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f16a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f16e:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	4413      	add	r3, r2
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	4b1e      	ldr	r3, [pc, #120]	@ (800f1f8 <USB_DeactivateEndpoint+0x308>)
 800f17e:	4013      	ands	r3, r2
 800f180:	647b      	str	r3, [r7, #68]	@ 0x44
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	441a      	add	r2, r3
 800f18c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f18e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f196:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	009b      	lsls	r3, r3, #2
 800f1a0:	4413      	add	r3, r2
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	4b15      	ldr	r3, [pc, #84]	@ (800f1fc <USB_DeactivateEndpoint+0x30c>)
 800f1a6:	4013      	ands	r3, r2
 800f1a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	441a      	add	r2, r3
 800f1b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f1ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1be:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	4413      	add	r3, r2
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800f200 <USB_DeactivateEndpoint+0x310>)
 800f1ce:	4013      	ands	r3, r2
 800f1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	009b      	lsls	r3, r3, #2
 800f1da:	441a      	add	r2, r3
 800f1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1e6:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	375c      	adds	r7, #92	@ 0x5c
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	07ff8f8f 	.word	0x07ff8f8f
 800f1fc:	07ff8fbf 	.word	0x07ff8fbf
 800f200:	07ffbf8f 	.word	0x07ffbf8f

0800f204 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b096      	sub	sp, #88	@ 0x58
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	785b      	ldrb	r3, [r3, #1]
 800f212:	2b01      	cmp	r3, #1
 800f214:	f040 84ed 	bne.w	800fbf2 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	699a      	ldr	r2, [r3, #24]
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	691b      	ldr	r3, [r3, #16]
 800f220:	429a      	cmp	r2, r3
 800f222:	d903      	bls.n	800f22c <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	657b      	str	r3, [r7, #84]	@ 0x54
 800f22a:	e002      	b.n	800f232 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	699b      	ldr	r3, [r3, #24]
 800f230:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	7b1b      	ldrb	r3, [r3, #12]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d12e      	bne.n	800f298 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	6959      	ldr	r1, [r3, #20]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	88da      	ldrh	r2, [r3, #6]
 800f242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f244:	b29b      	uxth	r3, r3
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f001 f941 	bl	80104ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	00db      	lsls	r3, r3, #3
 800f252:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f256:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	00db      	lsls	r3, r3, #3
 800f262:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f266:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f26a:	b292      	uxth	r2, r2
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	00db      	lsls	r3, r3, #3
 800f274:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f278:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f27c:	6819      	ldr	r1, [r3, #0]
 800f27e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f280:	041a      	lsls	r2, r3, #16
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	00db      	lsls	r3, r3, #3
 800f288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f28c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f290:	430a      	orrs	r2, r1
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	f000 bc90 	b.w	800fbb8 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	78db      	ldrb	r3, [r3, #3]
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	f040 8332 	bne.w	800f906 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	6a1a      	ldr	r2, [r3, #32]
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	691b      	ldr	r3, [r3, #16]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	f240 82e4 	bls.w	800f878 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	4413      	add	r3, r2
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	4ba4      	ldr	r3, [pc, #656]	@ (800f550 <USB_EPStartXfer+0x34c>)
 800f2be:	4013      	ands	r3, r2
 800f2c0:	613b      	str	r3, [r7, #16]
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	441a      	add	r2, r3
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800f2d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2d6:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	6a1a      	ldr	r2, [r3, #32]
 800f2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2de:	1ad2      	subs	r2, r2, r3
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	f000 8161 	beq.w	800f5bc <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	785b      	ldrb	r3, [r3, #1]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d16a      	bne.n	800f3d8 <USB_EPStartXfer+0x1d4>
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f30c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f310:	685a      	ldr	r2, [r3, #4]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f31c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f320:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f324:	605a      	str	r2, [r3, #4]
 800f326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d112      	bne.n	800f352 <USB_EPStartXfer+0x14e>
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	00db      	lsls	r3, r3, #3
 800f332:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f336:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f33a:	685a      	ldr	r2, [r3, #4]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f346:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f34a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f34e:	605a      	str	r2, [r3, #4]
 800f350:	e06a      	b.n	800f428 <USB_EPStartXfer+0x224>
 800f352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f354:	2b3e      	cmp	r3, #62	@ 0x3e
 800f356:	d81e      	bhi.n	800f396 <USB_EPStartXfer+0x192>
 800f358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f35a:	085b      	lsrs	r3, r3, #1
 800f35c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f35e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f360:	f003 0301 	and.w	r3, r3, #1
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <USB_EPStartXfer+0x16a>
 800f368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f36a:	3301      	adds	r3, #1
 800f36c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f378:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f37c:	6859      	ldr	r1, [r3, #4]
 800f37e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f380:	069a      	lsls	r2, r3, #26
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	00db      	lsls	r3, r3, #3
 800f388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f38c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f390:	430a      	orrs	r2, r1
 800f392:	605a      	str	r2, [r3, #4]
 800f394:	e048      	b.n	800f428 <USB_EPStartXfer+0x224>
 800f396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f398:	095b      	lsrs	r3, r3, #5
 800f39a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f39c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f39e:	f003 031f 	and.w	r3, r3, #31
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d102      	bne.n	800f3ac <USB_EPStartXfer+0x1a8>
 800f3a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	00db      	lsls	r3, r3, #3
 800f3b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3ba:	685a      	ldr	r2, [r3, #4]
 800f3bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3be:	069b      	lsls	r3, r3, #26
 800f3c0:	431a      	orrs	r2, r3
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f3d4:	605a      	str	r2, [r3, #4]
 800f3d6:	e027      	b.n	800f428 <USB_EPStartXfer+0x224>
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	785b      	ldrb	r3, [r3, #1]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d123      	bne.n	800f428 <USB_EPStartXfer+0x224>
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3ee:	685a      	ldr	r2, [r3, #4]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	00db      	lsls	r3, r3, #3
 800f3f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3fe:	b292      	uxth	r2, r2
 800f400:	605a      	str	r2, [r3, #4]
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	00db      	lsls	r3, r3, #3
 800f408:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f40c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f410:	6859      	ldr	r1, [r3, #4]
 800f412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f414:	041a      	lsls	r2, r3, #16
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	00db      	lsls	r3, r3, #3
 800f41c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f420:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f424:	430a      	orrs	r2, r1
 800f426:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	895b      	ldrh	r3, [r3, #10]
 800f42c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	6959      	ldr	r1, [r3, #20]
 800f432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f434:	b29b      	uxth	r3, r3
 800f436:	8b7a      	ldrh	r2, [r7, #26]
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f001 f848 	bl	80104ce <USB_WritePMA>
            ep->xfer_buff += len;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	695a      	ldr	r2, [r3, #20]
 800f442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f444:	441a      	add	r2, r3
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	6a1a      	ldr	r2, [r3, #32]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	691b      	ldr	r3, [r3, #16]
 800f452:	429a      	cmp	r2, r3
 800f454:	d906      	bls.n	800f464 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	6a1a      	ldr	r2, [r3, #32]
 800f45a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f45c:	1ad2      	subs	r2, r2, r3
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	621a      	str	r2, [r3, #32]
 800f462:	e005      	b.n	800f470 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	6a1b      	ldr	r3, [r3, #32]
 800f468:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	2200      	movs	r2, #0
 800f46e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	785b      	ldrb	r3, [r3, #1]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d16d      	bne.n	800f554 <USB_EPStartXfer+0x350>
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	00db      	lsls	r3, r3, #3
 800f47e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f482:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	00db      	lsls	r3, r3, #3
 800f48e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f492:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f496:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f49a:	601a      	str	r2, [r3, #0]
 800f49c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d112      	bne.n	800f4c8 <USB_EPStartXfer+0x2c4>
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	00db      	lsls	r3, r3, #3
 800f4a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	00db      	lsls	r3, r3, #3
 800f4b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4c0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	e06d      	b.n	800f5a4 <USB_EPStartXfer+0x3a0>
 800f4c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800f4cc:	d81e      	bhi.n	800f50c <USB_EPStartXfer+0x308>
 800f4ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4d0:	085b      	lsrs	r3, r3, #1
 800f4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4d6:	f003 0301 	and.w	r3, r3, #1
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d002      	beq.n	800f4e4 <USB_EPStartXfer+0x2e0>
 800f4de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	00db      	lsls	r3, r3, #3
 800f4ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4f2:	6819      	ldr	r1, [r3, #0]
 800f4f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4f6:	069a      	lsls	r2, r3, #26
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	00db      	lsls	r3, r3, #3
 800f4fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f502:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f506:	430a      	orrs	r2, r1
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	e04b      	b.n	800f5a4 <USB_EPStartXfer+0x3a0>
 800f50c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f50e:	095b      	lsrs	r3, r3, #5
 800f510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f514:	f003 031f 	and.w	r3, r3, #31
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <USB_EPStartXfer+0x31e>
 800f51c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f51e:	3b01      	subs	r3, #1
 800f520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	00db      	lsls	r3, r3, #3
 800f528:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f52c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f534:	069b      	lsls	r3, r3, #26
 800f536:	431a      	orrs	r2, r3
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	00db      	lsls	r3, r3, #3
 800f53e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f542:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f546:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f54a:	601a      	str	r2, [r3, #0]
 800f54c:	e02a      	b.n	800f5a4 <USB_EPStartXfer+0x3a0>
 800f54e:	bf00      	nop
 800f550:	07ff8f8f 	.word	0x07ff8f8f
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	785b      	ldrb	r3, [r3, #1]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d123      	bne.n	800f5a4 <USB_EPStartXfer+0x3a0>
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	00db      	lsls	r3, r3, #3
 800f572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f576:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f57a:	b292      	uxth	r2, r2
 800f57c:	601a      	str	r2, [r3, #0]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	00db      	lsls	r3, r3, #3
 800f584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f58c:	6819      	ldr	r1, [r3, #0]
 800f58e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f590:	041a      	lsls	r2, r3, #16
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	00db      	lsls	r3, r3, #3
 800f598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f59c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5a0:	430a      	orrs	r2, r1
 800f5a2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	891b      	ldrh	r3, [r3, #8]
 800f5a8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	6959      	ldr	r1, [r3, #20]
 800f5ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	8b7a      	ldrh	r2, [r7, #26]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 ff8a 	bl	80104ce <USB_WritePMA>
 800f5ba:	e2fd      	b.n	800fbb8 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	785b      	ldrb	r3, [r3, #1]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d16a      	bne.n	800f69a <USB_EPStartXfer+0x496>
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	00db      	lsls	r3, r3, #3
 800f5ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	00db      	lsls	r3, r3, #3
 800f5da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5e2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f5e6:	601a      	str	r2, [r3, #0]
 800f5e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d112      	bne.n	800f614 <USB_EPStartXfer+0x410>
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	00db      	lsls	r3, r3, #3
 800f5f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	00db      	lsls	r3, r3, #3
 800f604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f608:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f60c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	e06a      	b.n	800f6ea <USB_EPStartXfer+0x4e6>
 800f614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f616:	2b3e      	cmp	r3, #62	@ 0x3e
 800f618:	d81e      	bhi.n	800f658 <USB_EPStartXfer+0x454>
 800f61a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f61c:	085b      	lsrs	r3, r3, #1
 800f61e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f622:	f003 0301 	and.w	r3, r3, #1
 800f626:	2b00      	cmp	r3, #0
 800f628:	d002      	beq.n	800f630 <USB_EPStartXfer+0x42c>
 800f62a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f62c:	3301      	adds	r3, #1
 800f62e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	00db      	lsls	r3, r3, #3
 800f636:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f63a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f63e:	6819      	ldr	r1, [r3, #0]
 800f640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f642:	069a      	lsls	r2, r3, #26
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	00db      	lsls	r3, r3, #3
 800f64a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f64e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f652:	430a      	orrs	r2, r1
 800f654:	601a      	str	r2, [r3, #0]
 800f656:	e048      	b.n	800f6ea <USB_EPStartXfer+0x4e6>
 800f658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f65a:	095b      	lsrs	r3, r3, #5
 800f65c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f660:	f003 031f 	and.w	r3, r3, #31
 800f664:	2b00      	cmp	r3, #0
 800f666:	d102      	bne.n	800f66e <USB_EPStartXfer+0x46a>
 800f668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f66a:	3b01      	subs	r3, #1
 800f66c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	00db      	lsls	r3, r3, #3
 800f674:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f678:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f680:	069b      	lsls	r3, r3, #26
 800f682:	431a      	orrs	r2, r3
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	00db      	lsls	r3, r3, #3
 800f68a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f68e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f692:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	e027      	b.n	800f6ea <USB_EPStartXfer+0x4e6>
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	785b      	ldrb	r3, [r3, #1]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d123      	bne.n	800f6ea <USB_EPStartXfer+0x4e6>
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	00db      	lsls	r3, r3, #3
 800f6a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	00db      	lsls	r3, r3, #3
 800f6b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6c0:	b292      	uxth	r2, r2
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	00db      	lsls	r3, r3, #3
 800f6ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6d2:	6819      	ldr	r1, [r3, #0]
 800f6d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6d6:	041a      	lsls	r2, r3, #16
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	00db      	lsls	r3, r3, #3
 800f6de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6e6:	430a      	orrs	r2, r1
 800f6e8:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	891b      	ldrh	r3, [r3, #8]
 800f6ee:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	6959      	ldr	r1, [r3, #20]
 800f6f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	8b7a      	ldrh	r2, [r7, #26]
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 fee7 	bl	80104ce <USB_WritePMA>
            ep->xfer_buff += len;
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	695a      	ldr	r2, [r3, #20]
 800f704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f706:	441a      	add	r2, r3
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	6a1a      	ldr	r2, [r3, #32]
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	429a      	cmp	r2, r3
 800f716:	d906      	bls.n	800f726 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	6a1a      	ldr	r2, [r3, #32]
 800f71c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f71e:	1ad2      	subs	r2, r2, r3
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	621a      	str	r2, [r3, #32]
 800f724:	e005      	b.n	800f732 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	2200      	movs	r2, #0
 800f730:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	785b      	ldrb	r3, [r3, #1]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d16a      	bne.n	800f810 <USB_EPStartXfer+0x60c>
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	00db      	lsls	r3, r3, #3
 800f740:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f744:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f748:	685a      	ldr	r2, [r3, #4]
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	00db      	lsls	r3, r3, #3
 800f750:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f754:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f758:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f75c:	605a      	str	r2, [r3, #4]
 800f75e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f760:	2b00      	cmp	r3, #0
 800f762:	d112      	bne.n	800f78a <USB_EPStartXfer+0x586>
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	00db      	lsls	r3, r3, #3
 800f76a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f76e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f772:	685a      	ldr	r2, [r3, #4]
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	00db      	lsls	r3, r3, #3
 800f77a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f77e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f782:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f786:	605a      	str	r2, [r3, #4]
 800f788:	e06a      	b.n	800f860 <USB_EPStartXfer+0x65c>
 800f78a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f78c:	2b3e      	cmp	r3, #62	@ 0x3e
 800f78e:	d81e      	bhi.n	800f7ce <USB_EPStartXfer+0x5ca>
 800f790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f792:	085b      	lsrs	r3, r3, #1
 800f794:	647b      	str	r3, [r7, #68]	@ 0x44
 800f796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f798:	f003 0301 	and.w	r3, r3, #1
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <USB_EPStartXfer+0x5a2>
 800f7a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	00db      	lsls	r3, r3, #3
 800f7ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7b4:	6859      	ldr	r1, [r3, #4]
 800f7b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7b8:	069a      	lsls	r2, r3, #26
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	00db      	lsls	r3, r3, #3
 800f7c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	605a      	str	r2, [r3, #4]
 800f7cc:	e048      	b.n	800f860 <USB_EPStartXfer+0x65c>
 800f7ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7d0:	095b      	lsrs	r3, r3, #5
 800f7d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7d6:	f003 031f 	and.w	r3, r3, #31
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d102      	bne.n	800f7e4 <USB_EPStartXfer+0x5e0>
 800f7de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	00db      	lsls	r3, r3, #3
 800f7ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7f2:	685a      	ldr	r2, [r3, #4]
 800f7f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7f6:	069b      	lsls	r3, r3, #26
 800f7f8:	431a      	orrs	r2, r3
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	00db      	lsls	r3, r3, #3
 800f800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f808:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f80c:	605a      	str	r2, [r3, #4]
 800f80e:	e027      	b.n	800f860 <USB_EPStartXfer+0x65c>
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	785b      	ldrb	r3, [r3, #1]
 800f814:	2b01      	cmp	r3, #1
 800f816:	d123      	bne.n	800f860 <USB_EPStartXfer+0x65c>
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	00db      	lsls	r3, r3, #3
 800f81e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f822:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f826:	685a      	ldr	r2, [r3, #4]
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	00db      	lsls	r3, r3, #3
 800f82e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f832:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f836:	b292      	uxth	r2, r2
 800f838:	605a      	str	r2, [r3, #4]
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	00db      	lsls	r3, r3, #3
 800f840:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f844:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f848:	6859      	ldr	r1, [r3, #4]
 800f84a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f84c:	041a      	lsls	r2, r3, #16
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	00db      	lsls	r3, r3, #3
 800f854:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f858:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f85c:	430a      	orrs	r2, r1
 800f85e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	895b      	ldrh	r3, [r3, #10]
 800f864:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	6959      	ldr	r1, [r3, #20]
 800f86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	8b7a      	ldrh	r2, [r7, #26]
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fe2c 	bl	80104ce <USB_WritePMA>
 800f876:	e19f      	b.n	800fbb8 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	6a1b      	ldr	r3, [r3, #32]
 800f87c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f87e:	687a      	ldr	r2, [r7, #4]
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	4413      	add	r3, r2
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	4ba0      	ldr	r3, [pc, #640]	@ (800fb0c <USB_EPStartXfer+0x908>)
 800f88c:	4013      	ands	r3, r2
 800f88e:	617b      	str	r3, [r7, #20]
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	009b      	lsls	r3, r3, #2
 800f898:	441a      	add	r2, r3
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8a4:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	00db      	lsls	r3, r3, #3
 800f8ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f8b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	00db      	lsls	r3, r3, #3
 800f8bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f8c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f8c4:	b292      	uxth	r2, r2
 800f8c6:	601a      	str	r2, [r3, #0]
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	00db      	lsls	r3, r3, #3
 800f8ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f8d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f8d6:	6819      	ldr	r1, [r3, #0]
 800f8d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8da:	041a      	lsls	r2, r3, #16
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f8e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f8ea:	430a      	orrs	r2, r1
 800f8ec:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	891b      	ldrh	r3, [r3, #8]
 800f8f2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	6959      	ldr	r1, [r3, #20]
 800f8f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	8b7a      	ldrh	r2, [r7, #26]
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 fde5 	bl	80104ce <USB_WritePMA>
 800f904:	e158      	b.n	800fbb8 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	6a1a      	ldr	r2, [r3, #32]
 800f90a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f90c:	1ad2      	subs	r2, r2, r3
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	009b      	lsls	r3, r3, #2
 800f91a:	4413      	add	r3, r2
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f922:	2b00      	cmp	r3, #0
 800f924:	f000 80a3 	beq.w	800fa6e <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	785b      	ldrb	r3, [r3, #1]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d16a      	bne.n	800fa06 <USB_EPStartXfer+0x802>
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	00db      	lsls	r3, r3, #3
 800f936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f93a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f93e:	685a      	ldr	r2, [r3, #4]
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	00db      	lsls	r3, r3, #3
 800f946:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f94a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f94e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f952:	605a      	str	r2, [r3, #4]
 800f954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f956:	2b00      	cmp	r3, #0
 800f958:	d112      	bne.n	800f980 <USB_EPStartXfer+0x77c>
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f964:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f968:	685a      	ldr	r2, [r3, #4]
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	00db      	lsls	r3, r3, #3
 800f970:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f974:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f978:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f97c:	605a      	str	r2, [r3, #4]
 800f97e:	e06a      	b.n	800fa56 <USB_EPStartXfer+0x852>
 800f980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f982:	2b3e      	cmp	r3, #62	@ 0x3e
 800f984:	d81e      	bhi.n	800f9c4 <USB_EPStartXfer+0x7c0>
 800f986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f988:	085b      	lsrs	r3, r3, #1
 800f98a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f98c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f98e:	f003 0301 	and.w	r3, r3, #1
 800f992:	2b00      	cmp	r3, #0
 800f994:	d002      	beq.n	800f99c <USB_EPStartXfer+0x798>
 800f996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f998:	3301      	adds	r3, #1
 800f99a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	00db      	lsls	r3, r3, #3
 800f9a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f9a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f9aa:	6859      	ldr	r1, [r3, #4]
 800f9ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9ae:	069a      	lsls	r2, r3, #26
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	00db      	lsls	r3, r3, #3
 800f9b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f9ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f9be:	430a      	orrs	r2, r1
 800f9c0:	605a      	str	r2, [r3, #4]
 800f9c2:	e048      	b.n	800fa56 <USB_EPStartXfer+0x852>
 800f9c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9c6:	095b      	lsrs	r3, r3, #5
 800f9c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9cc:	f003 031f 	and.w	r3, r3, #31
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d102      	bne.n	800f9da <USB_EPStartXfer+0x7d6>
 800f9d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9d6:	3b01      	subs	r3, #1
 800f9d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	00db      	lsls	r3, r3, #3
 800f9e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f9e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f9e8:	685a      	ldr	r2, [r3, #4]
 800f9ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9ec:	069b      	lsls	r3, r3, #26
 800f9ee:	431a      	orrs	r2, r3
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	00db      	lsls	r3, r3, #3
 800f9f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f9fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f9fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fa02:	605a      	str	r2, [r3, #4]
 800fa04:	e027      	b.n	800fa56 <USB_EPStartXfer+0x852>
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	785b      	ldrb	r3, [r3, #1]
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d123      	bne.n	800fa56 <USB_EPStartXfer+0x852>
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	00db      	lsls	r3, r3, #3
 800fa14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fa18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fa1c:	685a      	ldr	r2, [r3, #4]
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	00db      	lsls	r3, r3, #3
 800fa24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fa28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fa2c:	b292      	uxth	r2, r2
 800fa2e:	605a      	str	r2, [r3, #4]
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	00db      	lsls	r3, r3, #3
 800fa36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fa3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fa3e:	6859      	ldr	r1, [r3, #4]
 800fa40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa42:	041a      	lsls	r2, r3, #16
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	00db      	lsls	r3, r3, #3
 800fa4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fa4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fa52:	430a      	orrs	r2, r1
 800fa54:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	895b      	ldrh	r3, [r3, #10]
 800fa5a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	6959      	ldr	r1, [r3, #20]
 800fa60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	8b7a      	ldrh	r2, [r7, #26]
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 fd31 	bl	80104ce <USB_WritePMA>
 800fa6c:	e0a4      	b.n	800fbb8 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	785b      	ldrb	r3, [r3, #1]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d16d      	bne.n	800fb52 <USB_EPStartXfer+0x94e>
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	00db      	lsls	r3, r3, #3
 800fa7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fa80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fa90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fa94:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800fa98:	601a      	str	r2, [r3, #0]
 800fa9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d112      	bne.n	800fac6 <USB_EPStartXfer+0x8c2>
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	00db      	lsls	r3, r3, #3
 800faa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800faaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	00db      	lsls	r3, r3, #3
 800fab6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800faba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fabe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fac2:	601a      	str	r2, [r3, #0]
 800fac4:	e06d      	b.n	800fba2 <USB_EPStartXfer+0x99e>
 800fac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fac8:	2b3e      	cmp	r3, #62	@ 0x3e
 800faca:	d821      	bhi.n	800fb10 <USB_EPStartXfer+0x90c>
 800facc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800face:	085b      	lsrs	r3, r3, #1
 800fad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fad4:	f003 0301 	and.w	r3, r3, #1
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d002      	beq.n	800fae2 <USB_EPStartXfer+0x8de>
 800fadc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fade:	3301      	adds	r3, #1
 800fae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	00db      	lsls	r3, r3, #3
 800fae8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800faec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800faf0:	6819      	ldr	r1, [r3, #0]
 800faf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faf4:	069a      	lsls	r2, r3, #26
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	00db      	lsls	r3, r3, #3
 800fafc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb04:	430a      	orrs	r2, r1
 800fb06:	601a      	str	r2, [r3, #0]
 800fb08:	e04b      	b.n	800fba2 <USB_EPStartXfer+0x99e>
 800fb0a:	bf00      	nop
 800fb0c:	07ff8e8f 	.word	0x07ff8e8f
 800fb10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb12:	095b      	lsrs	r3, r3, #5
 800fb14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb18:	f003 031f 	and.w	r3, r3, #31
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d102      	bne.n	800fb26 <USB_EPStartXfer+0x922>
 800fb20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb22:	3b01      	subs	r3, #1
 800fb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	00db      	lsls	r3, r3, #3
 800fb2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb38:	069b      	lsls	r3, r3, #26
 800fb3a:	431a      	orrs	r2, r3
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	00db      	lsls	r3, r3, #3
 800fb42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fb4e:	601a      	str	r2, [r3, #0]
 800fb50:	e027      	b.n	800fba2 <USB_EPStartXfer+0x99e>
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	785b      	ldrb	r3, [r3, #1]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d123      	bne.n	800fba2 <USB_EPStartXfer+0x99e>
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	00db      	lsls	r3, r3, #3
 800fb60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb68:	681a      	ldr	r2, [r3, #0]
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb78:	b292      	uxth	r2, r2
 800fb7a:	601a      	str	r2, [r3, #0]
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	00db      	lsls	r3, r3, #3
 800fb82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb8a:	6819      	ldr	r1, [r3, #0]
 800fb8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb8e:	041a      	lsls	r2, r3, #16
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	00db      	lsls	r3, r3, #3
 800fb96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb9e:	430a      	orrs	r2, r1
 800fba0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	891b      	ldrh	r3, [r3, #8]
 800fba6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	6959      	ldr	r1, [r3, #20]
 800fbac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	8b7a      	ldrh	r2, [r7, #26]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fc8b 	bl	80104ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	4413      	add	r3, r2
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	4b8b      	ldr	r3, [pc, #556]	@ (800fdf4 <USB_EPStartXfer+0xbf0>)
 800fbc6:	4013      	ands	r3, r2
 800fbc8:	60fb      	str	r3, [r7, #12]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	f083 0310 	eor.w	r3, r3, #16
 800fbd0:	60fb      	str	r3, [r7, #12]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f083 0320 	eor.w	r3, r3, #32
 800fbd8:	60fb      	str	r3, [r7, #12]
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	441a      	add	r2, r3
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fbea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	e36b      	b.n	80102ca <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	7b1b      	ldrb	r3, [r3, #12]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f040 8081 	bne.w	800fcfe <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	699a      	ldr	r2, [r3, #24]
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	691b      	ldr	r3, [r3, #16]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d909      	bls.n	800fc1c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	699a      	ldr	r2, [r3, #24]
 800fc12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc14:	1ad2      	subs	r2, r2, r3
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	619a      	str	r2, [r3, #24]
 800fc1a:	e005      	b.n	800fc28 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	699b      	ldr	r3, [r3, #24]
 800fc20:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	2200      	movs	r2, #0
 800fc26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	00db      	lsls	r3, r3, #3
 800fc2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fc32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fc36:	685a      	ldr	r2, [r3, #4]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	00db      	lsls	r3, r3, #3
 800fc3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fc42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fc46:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800fc4a:	605a      	str	r2, [r3, #4]
 800fc4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d112      	bne.n	800fc78 <USB_EPStartXfer+0xa74>
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fc5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fc60:	685a      	ldr	r2, [r3, #4]
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	00db      	lsls	r3, r3, #3
 800fc68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fc6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fc70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fc74:	605a      	str	r2, [r3, #4]
 800fc76:	e30c      	b.n	8010292 <USB_EPStartXfer+0x108e>
 800fc78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc7a:	2b3e      	cmp	r3, #62	@ 0x3e
 800fc7c:	d81e      	bhi.n	800fcbc <USB_EPStartXfer+0xab8>
 800fc7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc80:	085b      	lsrs	r3, r3, #1
 800fc82:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fc84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc86:	f003 0301 	and.w	r3, r3, #1
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d002      	beq.n	800fc94 <USB_EPStartXfer+0xa90>
 800fc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc90:	3301      	adds	r3, #1
 800fc92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	00db      	lsls	r3, r3, #3
 800fc9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fc9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fca2:	6859      	ldr	r1, [r3, #4]
 800fca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca6:	069a      	lsls	r2, r3, #26
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	00db      	lsls	r3, r3, #3
 800fcae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fcb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fcb6:	430a      	orrs	r2, r1
 800fcb8:	605a      	str	r2, [r3, #4]
 800fcba:	e2ea      	b.n	8010292 <USB_EPStartXfer+0x108e>
 800fcbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcbe:	095b      	lsrs	r3, r3, #5
 800fcc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fcc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcc4:	f003 031f 	and.w	r3, r3, #31
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d102      	bne.n	800fcd2 <USB_EPStartXfer+0xace>
 800fccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	00db      	lsls	r3, r3, #3
 800fcd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fcdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fce0:	685a      	ldr	r2, [r3, #4]
 800fce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce4:	069b      	lsls	r3, r3, #26
 800fce6:	431a      	orrs	r2, r3
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	00db      	lsls	r3, r3, #3
 800fcee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fcf2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fcf6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fcfa:	605a      	str	r2, [r3, #4]
 800fcfc:	e2c9      	b.n	8010292 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	78db      	ldrb	r3, [r3, #3]
 800fd02:	2b02      	cmp	r3, #2
 800fd04:	f040 8176 	bne.w	800fff4 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	785b      	ldrb	r3, [r3, #1]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d173      	bne.n	800fdf8 <USB_EPStartXfer+0xbf4>
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	00db      	lsls	r3, r3, #3
 800fd16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fd1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	00db      	lsls	r3, r3, #3
 800fd26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fd2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fd2e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800fd32:	601a      	str	r2, [r3, #0]
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d112      	bne.n	800fd62 <USB_EPStartXfer+0xb5e>
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	00db      	lsls	r3, r3, #3
 800fd42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fd46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	00db      	lsls	r3, r3, #3
 800fd52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fd56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fd5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fd5e:	601a      	str	r2, [r3, #0]
 800fd60:	e073      	b.n	800fe4a <USB_EPStartXfer+0xc46>
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	2b3e      	cmp	r3, #62	@ 0x3e
 800fd68:	d820      	bhi.n	800fdac <USB_EPStartXfer+0xba8>
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	085b      	lsrs	r3, r3, #1
 800fd70:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	691b      	ldr	r3, [r3, #16]
 800fd76:	f003 0301 	and.w	r3, r3, #1
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d002      	beq.n	800fd84 <USB_EPStartXfer+0xb80>
 800fd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd80:	3301      	adds	r3, #1
 800fd82:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	00db      	lsls	r3, r3, #3
 800fd8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fd8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fd92:	6819      	ldr	r1, [r3, #0]
 800fd94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd96:	069a      	lsls	r2, r3, #26
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	00db      	lsls	r3, r3, #3
 800fd9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fda2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fda6:	430a      	orrs	r2, r1
 800fda8:	601a      	str	r2, [r3, #0]
 800fdaa:	e04e      	b.n	800fe4a <USB_EPStartXfer+0xc46>
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	095b      	lsrs	r3, r3, #5
 800fdb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	691b      	ldr	r3, [r3, #16]
 800fdb8:	f003 031f 	and.w	r3, r3, #31
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d102      	bne.n	800fdc6 <USB_EPStartXfer+0xbc2>
 800fdc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	00db      	lsls	r3, r3, #3
 800fdcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fdd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd8:	069b      	lsls	r3, r3, #26
 800fdda:	431a      	orrs	r2, r3
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fde6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fdea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fdee:	601a      	str	r2, [r3, #0]
 800fdf0:	e02b      	b.n	800fe4a <USB_EPStartXfer+0xc46>
 800fdf2:	bf00      	nop
 800fdf4:	07ff8fbf 	.word	0x07ff8fbf
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	785b      	ldrb	r3, [r3, #1]
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d124      	bne.n	800fe4a <USB_EPStartXfer+0xc46>
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	00db      	lsls	r3, r3, #3
 800fe06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fe0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	00db      	lsls	r3, r3, #3
 800fe16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fe1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fe1e:	b292      	uxth	r2, r2
 800fe20:	601a      	str	r2, [r3, #0]
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	00db      	lsls	r3, r3, #3
 800fe28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fe2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fe30:	6819      	ldr	r1, [r3, #0]
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	041a      	lsls	r2, r3, #16
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	00db      	lsls	r3, r3, #3
 800fe3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fe42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fe46:	430a      	orrs	r2, r1
 800fe48:	601a      	str	r2, [r3, #0]
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	785b      	ldrb	r3, [r3, #1]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d170      	bne.n	800ff34 <USB_EPStartXfer+0xd30>
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	00db      	lsls	r3, r3, #3
 800fe58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fe5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fe60:	685a      	ldr	r2, [r3, #4]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	00db      	lsls	r3, r3, #3
 800fe68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fe6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fe70:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800fe74:	605a      	str	r2, [r3, #4]
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d112      	bne.n	800fea4 <USB_EPStartXfer+0xca0>
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	00db      	lsls	r3, r3, #3
 800fe84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fe88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fe8c:	685a      	ldr	r2, [r3, #4]
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	00db      	lsls	r3, r3, #3
 800fe94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fe98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fe9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fea0:	605a      	str	r2, [r3, #4]
 800fea2:	e070      	b.n	800ff86 <USB_EPStartXfer+0xd82>
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	691b      	ldr	r3, [r3, #16]
 800fea8:	2b3e      	cmp	r3, #62	@ 0x3e
 800feaa:	d820      	bhi.n	800feee <USB_EPStartXfer+0xcea>
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	085b      	lsrs	r3, r3, #1
 800feb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	691b      	ldr	r3, [r3, #16]
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	2b00      	cmp	r3, #0
 800febe:	d002      	beq.n	800fec6 <USB_EPStartXfer+0xcc2>
 800fec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec2:	3301      	adds	r3, #1
 800fec4:	633b      	str	r3, [r7, #48]	@ 0x30
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	00db      	lsls	r3, r3, #3
 800fecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fed0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fed4:	6859      	ldr	r1, [r3, #4]
 800fed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed8:	069a      	lsls	r2, r3, #26
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	00db      	lsls	r3, r3, #3
 800fee0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fee4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fee8:	430a      	orrs	r2, r1
 800feea:	605a      	str	r2, [r3, #4]
 800feec:	e04b      	b.n	800ff86 <USB_EPStartXfer+0xd82>
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	095b      	lsrs	r3, r3, #5
 800fef4:	633b      	str	r3, [r7, #48]	@ 0x30
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	f003 031f 	and.w	r3, r3, #31
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d102      	bne.n	800ff08 <USB_EPStartXfer+0xd04>
 800ff02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff04:	3b01      	subs	r3, #1
 800ff06:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	00db      	lsls	r3, r3, #3
 800ff0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ff12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ff16:	685a      	ldr	r2, [r3, #4]
 800ff18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff1a:	069b      	lsls	r3, r3, #26
 800ff1c:	431a      	orrs	r2, r3
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	00db      	lsls	r3, r3, #3
 800ff24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ff28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ff2c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ff30:	605a      	str	r2, [r3, #4]
 800ff32:	e028      	b.n	800ff86 <USB_EPStartXfer+0xd82>
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	785b      	ldrb	r3, [r3, #1]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d124      	bne.n	800ff86 <USB_EPStartXfer+0xd82>
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	00db      	lsls	r3, r3, #3
 800ff42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ff46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ff4a:	685a      	ldr	r2, [r3, #4]
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	00db      	lsls	r3, r3, #3
 800ff52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ff56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ff5a:	b292      	uxth	r2, r2
 800ff5c:	605a      	str	r2, [r3, #4]
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ff68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ff6c:	6859      	ldr	r1, [r3, #4]
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	691b      	ldr	r3, [r3, #16]
 800ff72:	041a      	lsls	r2, r3, #16
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	00db      	lsls	r3, r3, #3
 800ff7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ff7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ff82:	430a      	orrs	r2, r1
 800ff84:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	69db      	ldr	r3, [r3, #28]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	f000 8181 	beq.w	8010292 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	4413      	add	r3, r2
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ff9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ffa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d004      	beq.n	800ffb2 <USB_EPStartXfer+0xdae>
 800ffa8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ffaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d10b      	bne.n	800ffca <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ffb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ffb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f040 816a 	bne.w	8010292 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ffbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ffc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f040 8164 	bne.w	8010292 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4413      	add	r3, r2
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	4b98      	ldr	r3, [pc, #608]	@ (8010238 <USB_EPStartXfer+0x1034>)
 800ffd8:	4013      	ands	r3, r2
 800ffda:	623b      	str	r3, [r7, #32]
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	441a      	add	r2, r3
 800ffe6:	6a3b      	ldr	r3, [r7, #32]
 800ffe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ffec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fff0:	6013      	str	r3, [r2, #0]
 800fff2:	e14e      	b.n	8010292 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	78db      	ldrb	r3, [r3, #3]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	f040 8148 	bne.w	801028e <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	699a      	ldr	r2, [r3, #24]
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	691b      	ldr	r3, [r3, #16]
 8010006:	429a      	cmp	r2, r3
 8010008:	d909      	bls.n	801001e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	699a      	ldr	r2, [r3, #24]
 8010014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010016:	1ad2      	subs	r2, r2, r3
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	619a      	str	r2, [r3, #24]
 801001c:	e005      	b.n	801002a <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	699b      	ldr	r3, [r3, #24]
 8010022:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	2200      	movs	r2, #0
 8010028:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	785b      	ldrb	r3, [r3, #1]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d16a      	bne.n	8010108 <USB_EPStartXfer+0xf04>
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	00db      	lsls	r3, r3, #3
 8010038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801003c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801004c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010050:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8010054:	601a      	str	r2, [r3, #0]
 8010056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010058:	2b00      	cmp	r3, #0
 801005a:	d112      	bne.n	8010082 <USB_EPStartXfer+0xe7e>
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	00db      	lsls	r3, r3, #3
 8010062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801006a:	681a      	ldr	r2, [r3, #0]
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	00db      	lsls	r3, r3, #3
 8010072:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010076:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801007a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	e06a      	b.n	8010158 <USB_EPStartXfer+0xf54>
 8010082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010084:	2b3e      	cmp	r3, #62	@ 0x3e
 8010086:	d81e      	bhi.n	80100c6 <USB_EPStartXfer+0xec2>
 8010088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801008a:	085b      	lsrs	r3, r3, #1
 801008c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801008e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010090:	f003 0301 	and.w	r3, r3, #1
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <USB_EPStartXfer+0xe9a>
 8010098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801009a:	3301      	adds	r3, #1
 801009c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	00db      	lsls	r3, r3, #3
 80100a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80100a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80100ac:	6819      	ldr	r1, [r3, #0]
 80100ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b0:	069a      	lsls	r2, r3, #26
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	00db      	lsls	r3, r3, #3
 80100b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80100bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80100c0:	430a      	orrs	r2, r1
 80100c2:	601a      	str	r2, [r3, #0]
 80100c4:	e048      	b.n	8010158 <USB_EPStartXfer+0xf54>
 80100c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100c8:	095b      	lsrs	r3, r3, #5
 80100ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80100cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100ce:	f003 031f 	and.w	r3, r3, #31
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d102      	bne.n	80100dc <USB_EPStartXfer+0xed8>
 80100d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100d8:	3b01      	subs	r3, #1
 80100da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	00db      	lsls	r3, r3, #3
 80100e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80100e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ee:	069b      	lsls	r3, r3, #26
 80100f0:	431a      	orrs	r2, r3
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	00db      	lsls	r3, r3, #3
 80100f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80100fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010100:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8010104:	601a      	str	r2, [r3, #0]
 8010106:	e027      	b.n	8010158 <USB_EPStartXfer+0xf54>
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	785b      	ldrb	r3, [r3, #1]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d123      	bne.n	8010158 <USB_EPStartXfer+0xf54>
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	00db      	lsls	r3, r3, #3
 8010116:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801011a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801012a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801012e:	b292      	uxth	r2, r2
 8010130:	601a      	str	r2, [r3, #0]
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	00db      	lsls	r3, r3, #3
 8010138:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801013c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010140:	6819      	ldr	r1, [r3, #0]
 8010142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010144:	041a      	lsls	r2, r3, #16
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	00db      	lsls	r3, r3, #3
 801014c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010150:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010154:	430a      	orrs	r2, r1
 8010156:	601a      	str	r2, [r3, #0]
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	785b      	ldrb	r3, [r3, #1]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d16d      	bne.n	801023c <USB_EPStartXfer+0x1038>
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	00db      	lsls	r3, r3, #3
 8010166:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801016a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801016e:	685a      	ldr	r2, [r3, #4]
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	00db      	lsls	r3, r3, #3
 8010176:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801017a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801017e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8010182:	605a      	str	r2, [r3, #4]
 8010184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010186:	2b00      	cmp	r3, #0
 8010188:	d112      	bne.n	80101b0 <USB_EPStartXfer+0xfac>
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	00db      	lsls	r3, r3, #3
 8010190:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010194:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010198:	685a      	ldr	r2, [r3, #4]
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	00db      	lsls	r3, r3, #3
 80101a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80101a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80101a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80101ac:	605a      	str	r2, [r3, #4]
 80101ae:	e070      	b.n	8010292 <USB_EPStartXfer+0x108e>
 80101b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80101b4:	d81e      	bhi.n	80101f4 <USB_EPStartXfer+0xff0>
 80101b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101b8:	085b      	lsrs	r3, r3, #1
 80101ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101be:	f003 0301 	and.w	r3, r3, #1
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d002      	beq.n	80101cc <USB_EPStartXfer+0xfc8>
 80101c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c8:	3301      	adds	r3, #1
 80101ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	00db      	lsls	r3, r3, #3
 80101d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80101d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80101da:	6859      	ldr	r1, [r3, #4]
 80101dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101de:	069a      	lsls	r2, r3, #26
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	00db      	lsls	r3, r3, #3
 80101e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80101ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80101ee:	430a      	orrs	r2, r1
 80101f0:	605a      	str	r2, [r3, #4]
 80101f2:	e04e      	b.n	8010292 <USB_EPStartXfer+0x108e>
 80101f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101f6:	095b      	lsrs	r3, r3, #5
 80101f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101fc:	f003 031f 	and.w	r3, r3, #31
 8010200:	2b00      	cmp	r3, #0
 8010202:	d102      	bne.n	801020a <USB_EPStartXfer+0x1006>
 8010204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010206:	3b01      	subs	r3, #1
 8010208:	62bb      	str	r3, [r7, #40]	@ 0x28
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	00db      	lsls	r3, r3, #3
 8010210:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010214:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010218:	685a      	ldr	r2, [r3, #4]
 801021a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801021c:	069b      	lsls	r3, r3, #26
 801021e:	431a      	orrs	r2, r3
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	00db      	lsls	r3, r3, #3
 8010226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801022a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801022e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8010232:	605a      	str	r2, [r3, #4]
 8010234:	e02d      	b.n	8010292 <USB_EPStartXfer+0x108e>
 8010236:	bf00      	nop
 8010238:	07ff8f8f 	.word	0x07ff8f8f
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	785b      	ldrb	r3, [r3, #1]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d126      	bne.n	8010292 <USB_EPStartXfer+0x108e>
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	00db      	lsls	r3, r3, #3
 801024a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801024e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010252:	685a      	ldr	r2, [r3, #4]
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	00db      	lsls	r3, r3, #3
 801025a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801025e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010262:	b292      	uxth	r2, r2
 8010264:	605a      	str	r2, [r3, #4]
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	00db      	lsls	r3, r3, #3
 801026c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010270:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010274:	6859      	ldr	r1, [r3, #4]
 8010276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010278:	041a      	lsls	r2, r3, #16
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	00db      	lsls	r3, r3, #3
 8010280:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010284:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8010288:	430a      	orrs	r2, r1
 801028a:	605a      	str	r2, [r3, #4]
 801028c:	e001      	b.n	8010292 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 801028e:	2301      	movs	r3, #1
 8010290:	e01c      	b.n	80102cc <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	4413      	add	r3, r2
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	4b0d      	ldr	r3, [pc, #52]	@ (80102d4 <USB_EPStartXfer+0x10d0>)
 80102a0:	4013      	ands	r3, r2
 80102a2:	61fb      	str	r3, [r7, #28]
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80102aa:	61fb      	str	r3, [r7, #28]
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80102b2:	61fb      	str	r3, [r7, #28]
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	441a      	add	r2, r3
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80102c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80102ca:	2300      	movs	r3, #0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3758      	adds	r7, #88	@ 0x58
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	07ffbf8f 	.word	0x07ffbf8f

080102d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	785b      	ldrb	r3, [r3, #1]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d018      	beq.n	801031c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4413      	add	r3, r2
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	4b19      	ldr	r3, [pc, #100]	@ (801035c <USB_EPSetStall+0x84>)
 80102f8:	4013      	ands	r3, r2
 80102fa:	60bb      	str	r3, [r7, #8]
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	f083 0310 	eor.w	r3, r3, #16
 8010302:	60bb      	str	r3, [r7, #8]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	441a      	add	r2, r3
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010318:	6013      	str	r3, [r2, #0]
 801031a:	e017      	b.n	801034c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	4413      	add	r3, r2
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	4b0d      	ldr	r3, [pc, #52]	@ (8010360 <USB_EPSetStall+0x88>)
 801032a:	4013      	ands	r3, r2
 801032c:	60fb      	str	r3, [r7, #12]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010334:	60fb      	str	r3, [r7, #12]
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	441a      	add	r2, r3
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801034a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3714      	adds	r7, #20
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop
 801035c:	07ff8fbf 	.word	0x07ff8fbf
 8010360:	07ffbf8f 	.word	0x07ffbf8f

08010364 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8010364:	b480      	push	{r7}
 8010366:	b089      	sub	sp, #36	@ 0x24
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	7b1b      	ldrb	r3, [r3, #12]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d17c      	bne.n	8010470 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	785b      	ldrb	r3, [r3, #1]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d03c      	beq.n	80103f8 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	4413      	add	r3, r2
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	613b      	str	r3, [r7, #16]
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010392:	2b00      	cmp	r3, #0
 8010394:	d013      	beq.n	80103be <USB_EPClearStall+0x5a>
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	4413      	add	r3, r2
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	4b37      	ldr	r3, [pc, #220]	@ (8010480 <USB_EPClearStall+0x11c>)
 80103a4:	4013      	ands	r3, r2
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	441a      	add	r2, r3
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80103b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80103bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	78db      	ldrb	r3, [r3, #3]
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	d054      	beq.n	8010470 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	4413      	add	r3, r2
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	4b2c      	ldr	r3, [pc, #176]	@ (8010484 <USB_EPClearStall+0x120>)
 80103d4:	4013      	ands	r3, r2
 80103d6:	60bb      	str	r3, [r7, #8]
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	f083 0320 	eor.w	r3, r3, #32
 80103de:	60bb      	str	r3, [r7, #8]
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	441a      	add	r2, r3
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80103f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103f4:	6013      	str	r3, [r2, #0]
 80103f6:	e03b      	b.n	8010470 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	4413      	add	r3, r2
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	61fb      	str	r3, [r7, #28]
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801040c:	2b00      	cmp	r3, #0
 801040e:	d013      	beq.n	8010438 <USB_EPClearStall+0xd4>
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	4413      	add	r3, r2
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	4b18      	ldr	r3, [pc, #96]	@ (8010480 <USB_EPClearStall+0x11c>)
 801041e:	4013      	ands	r3, r2
 8010420:	61bb      	str	r3, [r7, #24]
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	441a      	add	r2, r3
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010436:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	4413      	add	r3, r2
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	4b10      	ldr	r3, [pc, #64]	@ (8010488 <USB_EPClearStall+0x124>)
 8010446:	4013      	ands	r3, r2
 8010448:	617b      	str	r3, [r7, #20]
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010450:	617b      	str	r3, [r7, #20]
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010458:	617b      	str	r3, [r7, #20]
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	441a      	add	r2, r3
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801046a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801046e:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	3724      	adds	r7, #36	@ 0x24
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop
 8010480:	07ff8f8f 	.word	0x07ff8f8f
 8010484:	07ff8fbf 	.word	0x07ff8fbf
 8010488:	07ffbf8f 	.word	0x07ffbf8f

0801048c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d102      	bne.n	80104a4 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2280      	movs	r2, #128	@ 0x80
 80104a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80104a4:	2300      	movs	r3, #0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	370c      	adds	r7, #12
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr

080104b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 80104b2:	b480      	push	{r7}
 80104b4:	b085      	sub	sp, #20
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80104c0:	68fb      	ldr	r3, [r7, #12]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3714      	adds	r7, #20
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr

080104ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80104ce:	b480      	push	{r7}
 80104d0:	b08b      	sub	sp, #44	@ 0x2c
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	60f8      	str	r0, [r7, #12]
 80104d6:	60b9      	str	r1, [r7, #8]
 80104d8:	4611      	mov	r1, r2
 80104da:	461a      	mov	r2, r3
 80104dc:	460b      	mov	r3, r1
 80104de:	80fb      	strh	r3, [r7, #6]
 80104e0:	4613      	mov	r3, r2
 80104e2:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80104e4:	88bb      	ldrh	r3, [r7, #4]
 80104e6:	3303      	adds	r3, #3
 80104e8:	089b      	lsrs	r3, r3, #2
 80104ea:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80104ec:	88bb      	ldrh	r3, [r7, #4]
 80104ee:	f003 0303 	and.w	r3, r3, #3
 80104f2:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 80104f8:	8afb      	ldrh	r3, [r7, #22]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d002      	beq.n	8010504 <USB_WritePMA+0x36>
  {
    NbWords--;
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	3b01      	subs	r3, #1
 8010502:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8010504:	88fb      	ldrh	r3, [r7, #6]
 8010506:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801050a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801050e:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	623b      	str	r3, [r7, #32]
 8010514:	e015      	b.n	8010542 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	3304      	adds	r3, #4
 8010522:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	3301      	adds	r3, #1
 8010528:	613b      	str	r3, [r7, #16]
    pBuf++;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	3301      	adds	r3, #1
 801052e:	613b      	str	r3, [r7, #16]
    pBuf++;
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	3301      	adds	r3, #1
 8010534:	613b      	str	r3, [r7, #16]
    pBuf++;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	3301      	adds	r3, #1
 801053a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 801053c:	6a3b      	ldr	r3, [r7, #32]
 801053e:	3b01      	subs	r3, #1
 8010540:	623b      	str	r3, [r7, #32]
 8010542:	6a3b      	ldr	r3, [r7, #32]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d1e6      	bne.n	8010516 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8010548:	8afb      	ldrh	r3, [r7, #22]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d01a      	beq.n	8010584 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 801054e:	2300      	movs	r3, #0
 8010550:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	461a      	mov	r2, r3
 8010558:	6a3b      	ldr	r3, [r7, #32]
 801055a:	00db      	lsls	r3, r3, #3
 801055c:	fa02 f303 	lsl.w	r3, r2, r3
 8010560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010562:	4313      	orrs	r3, r2
 8010564:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8010566:	6a3b      	ldr	r3, [r7, #32]
 8010568:	3301      	adds	r3, #1
 801056a:	623b      	str	r3, [r7, #32]
      pBuf++;
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	3301      	adds	r3, #1
 8010570:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8010572:	8afb      	ldrh	r3, [r7, #22]
 8010574:	3b01      	subs	r3, #1
 8010576:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8010578:	8afb      	ldrh	r3, [r7, #22]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d1e9      	bne.n	8010552 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010582:	601a      	str	r2, [r3, #0]
  }
}
 8010584:	bf00      	nop
 8010586:	372c      	adds	r7, #44	@ 0x2c
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr

08010590 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010590:	b480      	push	{r7}
 8010592:	b08b      	sub	sp, #44	@ 0x2c
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4611      	mov	r1, r2
 801059c:	461a      	mov	r2, r3
 801059e:	460b      	mov	r3, r1
 80105a0:	80fb      	strh	r3, [r7, #6]
 80105a2:	4613      	mov	r3, r2
 80105a4:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80105a6:	88bb      	ldrh	r3, [r7, #4]
 80105a8:	3303      	adds	r3, #3
 80105aa:	089b      	lsrs	r3, r3, #2
 80105ac:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80105ae:	88bb      	ldrh	r3, [r7, #4]
 80105b0:	f003 0303 	and.w	r3, r3, #3
 80105b4:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80105ba:	88fb      	ldrh	r3, [r7, #6]
 80105bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80105c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80105c4:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80105c6:	8b7b      	ldrh	r3, [r7, #26]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d002      	beq.n	80105d2 <USB_ReadPMA+0x42>
  {
    NbWords--;
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	3b01      	subs	r3, #1
 80105d0:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80105d6:	e015      	b.n	8010604 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 80105d8:	6a3b      	ldr	r3, [r7, #32]
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	601a      	str	r2, [r3, #0]

    pdwVal++;
 80105e0:	6a3b      	ldr	r3, [r7, #32]
 80105e2:	3304      	adds	r3, #4
 80105e4:	623b      	str	r3, [r7, #32]
    pBuf++;
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	3301      	adds	r3, #1
 80105ea:	617b      	str	r3, [r7, #20]
    pBuf++;
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	3301      	adds	r3, #1
 80105f0:	617b      	str	r3, [r7, #20]
    pBuf++;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	3301      	adds	r3, #1
 80105f6:	617b      	str	r3, [r7, #20]
    pBuf++;
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	3301      	adds	r3, #1
 80105fc:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 80105fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010600:	3b01      	subs	r3, #1
 8010602:	627b      	str	r3, [r7, #36]	@ 0x24
 8010604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1e6      	bne.n	80105d8 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 801060a:	8b7b      	ldrh	r3, [r7, #26]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d017      	beq.n	8010640 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8010616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010618:	b2db      	uxtb	r3, r3
 801061a:	00db      	lsls	r3, r3, #3
 801061c:	693a      	ldr	r2, [r7, #16]
 801061e:	fa22 f303 	lsr.w	r3, r2, r3
 8010622:	b2da      	uxtb	r2, r3
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	701a      	strb	r2, [r3, #0]
      count++;
 8010628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801062a:	3301      	adds	r3, #1
 801062c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	3301      	adds	r3, #1
 8010632:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8010634:	8b7b      	ldrh	r3, [r7, #26]
 8010636:	3b01      	subs	r3, #1
 8010638:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 801063a:	8b7b      	ldrh	r3, [r7, #26]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1ea      	bne.n	8010616 <USB_ReadPMA+0x86>
  }
}
 8010640:	bf00      	nop
 8010642:	372c      	adds	r7, #44	@ 0x2c
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr

0801064c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8010656:	687a      	ldr	r2, [r7, #4]
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	fbb2 f3f3 	udiv	r3, r2, r3
 801065e:	4a07      	ldr	r2, [pc, #28]	@ (801067c <LL_InitTick+0x30>)
 8010660:	3b01      	subs	r3, #1
 8010662:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8010664:	4b05      	ldr	r3, [pc, #20]	@ (801067c <LL_InitTick+0x30>)
 8010666:	2200      	movs	r2, #0
 8010668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801066a:	4b04      	ldr	r3, [pc, #16]	@ (801067c <LL_InitTick+0x30>)
 801066c:	2205      	movs	r2, #5
 801066e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8010670:	bf00      	nop
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr
 801067c:	e000e010 	.word	0xe000e010

08010680 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8010688:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7ff ffdd 	bl	801064c <LL_InitTick>
}
 8010692:	bf00      	nop
 8010694:	3708      	adds	r7, #8
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
	...

0801069c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the minimum delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 801069c:	b480      	push	{r7}
 801069e:	b085      	sub	sp, #20
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80106a4:	4b10      	ldr	r3, [pc, #64]	@ (80106e8 <LL_mDelay+0x4c>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80106ae:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if (tmpDelay < LL_MAX_DELAY)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b6:	d00c      	beq.n	80106d2 <LL_mDelay+0x36>
  {
    tmpDelay++;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	3301      	adds	r3, #1
 80106bc:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80106be:	e008      	b.n	80106d2 <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80106c0:	4b09      	ldr	r3, [pc, #36]	@ (80106e8 <LL_mDelay+0x4c>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	3b01      	subs	r3, #1
 80106d0:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1f3      	bne.n	80106c0 <LL_mDelay+0x24>
    }
  }
}
 80106d8:	bf00      	nop
 80106da:	bf00      	nop
 80106dc:	3714      	adds	r7, #20
 80106de:	46bd      	mov	sp, r7
 80106e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop
 80106e8:	e000e010 	.word	0xe000e010

080106ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80106f4:	4a04      	ldr	r2, [pc, #16]	@ (8010708 <LL_SetSystemCoreClock+0x1c>)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6013      	str	r3, [r2, #0]
}
 80106fa:	bf00      	nop
 80106fc:	370c      	adds	r7, #12
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop
 8010708:	20000024 	.word	0x20000024

0801070c <__NVIC_SetPriority>:
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	4603      	mov	r3, r0
 8010714:	6039      	str	r1, [r7, #0]
 8010716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801071c:	2b00      	cmp	r3, #0
 801071e:	db0a      	blt.n	8010736 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	b2da      	uxtb	r2, r3
 8010724:	490c      	ldr	r1, [pc, #48]	@ (8010758 <__NVIC_SetPriority+0x4c>)
 8010726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801072a:	0112      	lsls	r2, r2, #4
 801072c:	b2d2      	uxtb	r2, r2
 801072e:	440b      	add	r3, r1
 8010730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010734:	e00a      	b.n	801074c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	b2da      	uxtb	r2, r3
 801073a:	4908      	ldr	r1, [pc, #32]	@ (801075c <__NVIC_SetPriority+0x50>)
 801073c:	88fb      	ldrh	r3, [r7, #6]
 801073e:	f003 030f 	and.w	r3, r3, #15
 8010742:	3b04      	subs	r3, #4
 8010744:	0112      	lsls	r2, r2, #4
 8010746:	b2d2      	uxtb	r2, r2
 8010748:	440b      	add	r3, r1
 801074a:	761a      	strb	r2, [r3, #24]
}
 801074c:	bf00      	nop
 801074e:	370c      	adds	r7, #12
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr
 8010758:	e000e100 	.word	0xe000e100
 801075c:	e000ed00 	.word	0xe000ed00

08010760 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010760:	b580      	push	{r7, lr}
 8010762:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8010764:	4b05      	ldr	r3, [pc, #20]	@ (801077c <SysTick_Handler+0x1c>)
 8010766:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010768:	f002 f930 	bl	80129cc <xTaskGetSchedulerState>
 801076c:	4603      	mov	r3, r0
 801076e:	2b01      	cmp	r3, #1
 8010770:	d001      	beq.n	8010776 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010772:	f000 fc25 	bl	8010fc0 <xPortSysTickHandler>
  }
}
 8010776:	bf00      	nop
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	e000e010 	.word	0xe000e010

08010780 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010780:	b580      	push	{r7, lr}
 8010782:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8010784:	2100      	movs	r1, #0
 8010786:	f06f 0004 	mvn.w	r0, #4
 801078a:	f7ff ffbf 	bl	801070c <__NVIC_SetPriority>
#endif
}
 801078e:	bf00      	nop
 8010790:	bd80      	pop	{r7, pc}

08010792 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8010792:	b580      	push	{r7, lr}
 8010794:	b086      	sub	sp, #24
 8010796:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8010798:	2300      	movs	r3, #0
 801079a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801079c:	f3ef 8305 	mrs	r3, IPSR
 80107a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80107a2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d002      	beq.n	80107ae <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 80107a8:	2301      	movs	r3, #1
 80107aa:	617b      	str	r3, [r7, #20]
 80107ac:	e013      	b.n	80107d6 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 80107ae:	f002 f90d 	bl	80129cc <xTaskGetSchedulerState>
 80107b2:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d00d      	beq.n	80107d6 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80107ba:	f3ef 8310 	mrs	r3, PRIMASK
 80107be:	60bb      	str	r3, [r7, #8]
  return(result);
 80107c0:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d105      	bne.n	80107d2 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107c6:	f3ef 8311 	mrs	r3, BASEPRI
 80107ca:	607b      	str	r3, [r7, #4]
  return(result);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 80107d2:	2301      	movs	r3, #1
 80107d4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 80107d6:	697b      	ldr	r3, [r7, #20]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3718      	adds	r7, #24
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 80107e6:	f7ff ffd4 	bl	8010792 <IRQ_Context>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d003      	beq.n	80107f8 <osKernelInitialize+0x18>
    stat = osErrorISR;
 80107f0:	f06f 0305 	mvn.w	r3, #5
 80107f4:	607b      	str	r3, [r7, #4]
 80107f6:	e012      	b.n	801081e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 80107f8:	f002 f8e8 	bl	80129cc <xTaskGetSchedulerState>
 80107fc:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d109      	bne.n	8010818 <osKernelInitialize+0x38>
 8010804:	4b08      	ldr	r3, [pc, #32]	@ (8010828 <osKernelInitialize+0x48>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d105      	bne.n	8010818 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801080c:	4b06      	ldr	r3, [pc, #24]	@ (8010828 <osKernelInitialize+0x48>)
 801080e:	2201      	movs	r2, #1
 8010810:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010812:	2300      	movs	r3, #0
 8010814:	607b      	str	r3, [r7, #4]
 8010816:	e002      	b.n	801081e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8010818:	f04f 33ff 	mov.w	r3, #4294967295
 801081c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 801081e:	687b      	ldr	r3, [r7, #4]
}
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	20026150 	.word	0x20026150

0801082c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8010832:	f7ff ffae 	bl	8010792 <IRQ_Context>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d003      	beq.n	8010844 <osKernelStart+0x18>
    stat = osErrorISR;
 801083c:	f06f 0305 	mvn.w	r3, #5
 8010840:	607b      	str	r3, [r7, #4]
 8010842:	e016      	b.n	8010872 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8010844:	f002 f8c2 	bl	80129cc <xTaskGetSchedulerState>
 8010848:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d10d      	bne.n	801086c <osKernelStart+0x40>
 8010850:	4b0a      	ldr	r3, [pc, #40]	@ (801087c <osKernelStart+0x50>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b01      	cmp	r3, #1
 8010856:	d109      	bne.n	801086c <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010858:	f7ff ff92 	bl	8010780 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 801085c:	4b07      	ldr	r3, [pc, #28]	@ (801087c <osKernelStart+0x50>)
 801085e:	2202      	movs	r2, #2
 8010860:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010862:	f001 fb81 	bl	8011f68 <vTaskStartScheduler>
      stat = osOK;
 8010866:	2300      	movs	r3, #0
 8010868:	607b      	str	r3, [r7, #4]
 801086a:	e002      	b.n	8010872 <osKernelStart+0x46>
    } else {
      stat = osError;
 801086c:	f04f 33ff 	mov.w	r3, #4294967295
 8010870:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8010872:	687b      	ldr	r3, [r7, #4]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	20026150 	.word	0x20026150

08010880 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010880:	b580      	push	{r7, lr}
 8010882:	b08e      	sub	sp, #56	@ 0x38
 8010884:	af04      	add	r7, sp, #16
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801088c:	2300      	movs	r3, #0
 801088e:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8010890:	f7ff ff7f 	bl	8010792 <IRQ_Context>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d17e      	bne.n	8010998 <osThreadNew+0x118>
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d07b      	beq.n	8010998 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 80108a0:	2380      	movs	r3, #128	@ 0x80
 80108a2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80108a4:	2318      	movs	r3, #24
 80108a6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80108a8:	2300      	movs	r3, #0
 80108aa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80108ac:	f04f 33ff 	mov.w	r3, #4294967295
 80108b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d045      	beq.n	8010944 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <osThreadNew+0x46>
        name = attr->name;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	699b      	ldr	r3, [r3, #24]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d002      	beq.n	80108d4 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	699b      	ldr	r3, [r3, #24]
 80108d2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d008      	beq.n	80108ec <osThreadNew+0x6c>
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	2b38      	cmp	r3, #56	@ 0x38
 80108de:	d805      	bhi.n	80108ec <osThreadNew+0x6c>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	f003 0301 	and.w	r3, r3, #1
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d001      	beq.n	80108f0 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 80108ec:	2300      	movs	r3, #0
 80108ee:	e054      	b.n	801099a <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	695b      	ldr	r3, [r3, #20]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d003      	beq.n	8010900 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	695b      	ldr	r3, [r3, #20]
 80108fc:	089b      	lsrs	r3, r3, #2
 80108fe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00e      	beq.n	8010926 <osThreadNew+0xa6>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	68db      	ldr	r3, [r3, #12]
 801090c:	2b5b      	cmp	r3, #91	@ 0x5b
 801090e:	d90a      	bls.n	8010926 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010914:	2b00      	cmp	r3, #0
 8010916:	d006      	beq.n	8010926 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	695b      	ldr	r3, [r3, #20]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8010920:	2301      	movs	r3, #1
 8010922:	61bb      	str	r3, [r7, #24]
 8010924:	e010      	b.n	8010948 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d10c      	bne.n	8010948 <osThreadNew+0xc8>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d108      	bne.n	8010948 <osThreadNew+0xc8>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d104      	bne.n	8010948 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 801093e:	2300      	movs	r3, #0
 8010940:	61bb      	str	r3, [r7, #24]
 8010942:	e001      	b.n	8010948 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	2b01      	cmp	r3, #1
 801094c:	d110      	bne.n	8010970 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010956:	9202      	str	r2, [sp, #8]
 8010958:	9301      	str	r3, [sp, #4]
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	9300      	str	r3, [sp, #0]
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	6a3a      	ldr	r2, [r7, #32]
 8010962:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f001 f92f 	bl	8011bc8 <xTaskCreateStatic>
 801096a:	4603      	mov	r3, r0
 801096c:	617b      	str	r3, [r7, #20]
 801096e:	e013      	b.n	8010998 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d110      	bne.n	8010998 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8010976:	6a3b      	ldr	r3, [r7, #32]
 8010978:	b29a      	uxth	r2, r3
 801097a:	f107 0314 	add.w	r3, r7, #20
 801097e:	9301      	str	r3, [sp, #4]
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f001 f96a 	bl	8011c62 <xTaskCreate>
 801098e:	4603      	mov	r3, r0
 8010990:	2b01      	cmp	r3, #1
 8010992:	d001      	beq.n	8010998 <osThreadNew+0x118>
            hTask = NULL;
 8010994:	2300      	movs	r3, #0
 8010996:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8010998:	697b      	ldr	r3, [r7, #20]
}
 801099a:	4618      	mov	r0, r3
 801099c:	3728      	adds	r7, #40	@ 0x28
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b084      	sub	sp, #16
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 80109aa:	f7ff fef2 	bl	8010792 <IRQ_Context>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d003      	beq.n	80109bc <osDelay+0x1a>
    stat = osErrorISR;
 80109b4:	f06f 0305 	mvn.w	r3, #5
 80109b8:	60fb      	str	r3, [r7, #12]
 80109ba:	e007      	b.n	80109cc <osDelay+0x2a>
  }
  else {
    stat = osOK;
 80109bc:	2300      	movs	r3, #0
 80109be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d002      	beq.n	80109cc <osDelay+0x2a>
      vTaskDelay(ticks);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f001 faa8 	bl	8011f1c <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 80109cc:	68fb      	ldr	r3, [r7, #12]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3710      	adds	r7, #16
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <TimerCallback>:

/* ==== Timer Management Functions ==== */

#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b084      	sub	sp, #16
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  /* Retrieve pointer to callback function and argument */
  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f002 fc30 	bl	8013244 <pvTimerGetTimerID>
 80109e4:	60f8      	str	r0, [r7, #12]

  /* Remove dynamic allocation flag */
  callb = (TimerCallback_t *)((uint32_t)callb & ~1U);
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f023 0301 	bic.w	r3, r3, #1
 80109ec:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d005      	beq.n	8010a00 <TimerCallback+0x2a>
    callb->func (callb->arg);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	68fa      	ldr	r2, [r7, #12]
 80109fa:	6852      	ldr	r2, [r2, #4]
 80109fc:	4610      	mov	r0, r2
 80109fe:	4798      	blx	r3
  }
}
 8010a00:	bf00      	nop
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <osTimerNew>:

/*
  Create and Initialize a timer.
*/
osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b08c      	sub	sp, #48	@ 0x30
 8010a0c:	af02      	add	r7, sp, #8
 8010a0e:	60f8      	str	r0, [r7, #12]
 8010a10:	607a      	str	r2, [r7, #4]
 8010a12:	603b      	str	r3, [r7, #0]
 8010a14:	460b      	mov	r3, r1
 8010a16:	72fb      	strb	r3, [r7, #11]
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;
  uint32_t callb_dyn;

  hTimer = NULL;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	623b      	str	r3, [r7, #32]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8010a1c:	f7ff feb9 	bl	8010792 <IRQ_Context>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	f040 808b 	bne.w	8010b3e <osTimerNew+0x136>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f000 8087 	beq.w	8010b3e <osTimerNew+0x136>
    callb     = NULL;
 8010a30:	2300      	movs	r3, #0
 8010a32:	61fb      	str	r3, [r7, #28]
    callb_dyn = 0U;
 8010a34:	2300      	movs	r3, #0
 8010a36:	613b      	str	r3, [r7, #16]

    #if (configSUPPORT_STATIC_ALLOCATION == 1)
      /* Static memory allocation is available: check if memory for control block */
      /* is provided and if it also contains space for callback and its argument  */
      if ((attr != NULL) && (attr->cb_mem != NULL)) {
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00b      	beq.n	8010a56 <osTimerNew+0x4e>
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	689b      	ldr	r3, [r3, #8]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d007      	beq.n	8010a56 <osTimerNew+0x4e>
        if (attr->cb_size >= (sizeof(StaticTimer_t) + sizeof(TimerCallback_t))) {
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	2b33      	cmp	r3, #51	@ 0x33
 8010a4c:	d903      	bls.n	8010a56 <osTimerNew+0x4e>
          callb = (TimerCallback_t *)((uint32_t)attr->cb_mem + sizeof(StaticTimer_t));
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	689b      	ldr	r3, [r3, #8]
 8010a52:	332c      	adds	r3, #44	@ 0x2c
 8010a54:	61fb      	str	r3, [r7, #28]
    #endif

    #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
      /* Dynamic memory allocation is available: if memory for callback and */
      /* its argument is not provided, allocate it from dynamic memory pool */
      if (callb == NULL) {
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d108      	bne.n	8010a6e <osTimerNew+0x66>
        callb = (TimerCallback_t *)pvPortMalloc (sizeof(TimerCallback_t));
 8010a5c:	2008      	movs	r0, #8
 8010a5e:	f002 fc0b 	bl	8013278 <pvPortMalloc>
 8010a62:	61f8      	str	r0, [r7, #28]

        if (callb != NULL) {
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d001      	beq.n	8010a6e <osTimerNew+0x66>
          /* Callback memory was allocated from dynamic pool, set flag */
          callb_dyn = 1U;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	613b      	str	r3, [r7, #16]
        }
      }
    #endif

    if (callb != NULL) {
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d064      	beq.n	8010b3e <osTimerNew+0x136>
      callb->func = func;
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	68fa      	ldr	r2, [r7, #12]
 8010a78:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8010a80:	7afb      	ldrb	r3, [r7, #11]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d102      	bne.n	8010a8c <osTimerNew+0x84>
        reload = pdFALSE;
 8010a86:	2300      	movs	r3, #0
 8010a88:	61bb      	str	r3, [r7, #24]
 8010a8a:	e001      	b.n	8010a90 <osTimerNew+0x88>
      } else {
        reload = pdTRUE;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	61bb      	str	r3, [r7, #24]
      }

      mem  = -1;
 8010a90:	f04f 33ff 	mov.w	r3, #4294967295
 8010a94:	617b      	str	r3, [r7, #20]
      name = NULL;
 8010a96:	2300      	movs	r3, #0
 8010a98:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d01c      	beq.n	8010ada <osTimerNew+0xd2>
        if (attr->name != NULL) {
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d002      	beq.n	8010aae <osTimerNew+0xa6>
          name = attr->name;
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	689b      	ldr	r3, [r3, #8]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d006      	beq.n	8010ac4 <osTimerNew+0xbc>
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	2b2b      	cmp	r3, #43	@ 0x2b
 8010abc:	d902      	bls.n	8010ac4 <osTimerNew+0xbc>
          /* The memory for control block is provided, use static object */
          mem = 1;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	617b      	str	r3, [r7, #20]
 8010ac2:	e00c      	b.n	8010ade <osTimerNew+0xd6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	689b      	ldr	r3, [r3, #8]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d108      	bne.n	8010ade <osTimerNew+0xd6>
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d104      	bne.n	8010ade <osTimerNew+0xd6>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	617b      	str	r3, [r7, #20]
 8010ad8:	e001      	b.n	8010ade <osTimerNew+0xd6>
          }
        }
      }
      else {
        mem = 0;
 8010ada:	2300      	movs	r3, #0
 8010adc:	617b      	str	r3, [r7, #20]
      }
      /* Store callback memory dynamic allocation flag */
      callb = (TimerCallback_t *)((uint32_t)callb | callb_dyn);
 8010ade:	69fa      	ldr	r2, [r7, #28]
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	4313      	orrs	r3, r2
 8010ae4:	61fb      	str	r3, [r7, #28]
      /*
        TimerCallback function is always provided as a callback and is used to call application
        specified function with its argument both stored in structure callb.
      */
      if (mem == 1) {
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d10c      	bne.n	8010b06 <osTimerNew+0xfe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8010aec:	69ba      	ldr	r2, [r7, #24]
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	689b      	ldr	r3, [r3, #8]
 8010af2:	9301      	str	r3, [sp, #4]
 8010af4:	4b14      	ldr	r3, [pc, #80]	@ (8010b48 <osTimerNew+0x140>)
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	2101      	movs	r1, #1
 8010afc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010afe:	f002 f8da 	bl	8012cb6 <xTimerCreateStatic>
 8010b02:	6238      	str	r0, [r7, #32]
 8010b04:	e00b      	b.n	8010b1e <osTimerNew+0x116>
        #endif
      }
      else {
        if (mem == 0) {
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d108      	bne.n	8010b1e <osTimerNew+0x116>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8010b0c:	69ba      	ldr	r2, [r7, #24]
 8010b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8010b48 <osTimerNew+0x140>)
 8010b10:	9300      	str	r3, [sp, #0]
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	2101      	movs	r1, #1
 8010b16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010b18:	f002 f8ac 	bl	8012c74 <xTimerCreate>
 8010b1c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
      if ((hTimer == NULL) && (callb != NULL) && (callb_dyn == 1U)) {
 8010b1e:	6a3b      	ldr	r3, [r7, #32]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d10c      	bne.n	8010b3e <osTimerNew+0x136>
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d009      	beq.n	8010b3e <osTimerNew+0x136>
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d106      	bne.n	8010b3e <osTimerNew+0x136>
        /* Failed to create a timer, release allocated resources */
        callb = (TimerCallback_t *)((uint32_t)callb & ~1U);
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	f023 0301 	bic.w	r3, r3, #1
 8010b36:	61fb      	str	r3, [r7, #28]

        vPortFree (callb);
 8010b38:	69f8      	ldr	r0, [r7, #28]
 8010b3a:	f002 fc49 	bl	80133d0 <vPortFree>
      #endif
    }
  }

  /* Return timer ID */
  return ((osTimerId_t)hTimer);
 8010b3e:	6a3b      	ldr	r3, [r7, #32]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3728      	adds	r7, #40	@ 0x28
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	080109d7 	.word	0x080109d7

08010b4c <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 8010b54:	2300      	movs	r3, #0
 8010b56:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 8010b58:	f7ff fe1b 	bl	8010792 <IRQ_Context>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d174      	bne.n	8010c4c <osMutexNew+0x100>
    if (attr != NULL) {
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d003      	beq.n	8010b70 <osMutexNew+0x24>
      type = attr->attr_bits;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	613b      	str	r3, [r7, #16]
 8010b6e:	e001      	b.n	8010b74 <osMutexNew+0x28>
    } else {
      type = 0U;
 8010b70:	2300      	movs	r3, #0
 8010b72:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	f003 0301 	and.w	r3, r3, #1
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d002      	beq.n	8010b84 <osMutexNew+0x38>
      rmtx = 1U;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	60fb      	str	r3, [r7, #12]
 8010b82:	e001      	b.n	8010b88 <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 8010b84:	2300      	movs	r3, #0
 8010b86:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	f003 0308 	and.w	r3, r3, #8
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d15c      	bne.n	8010c4c <osMutexNew+0x100>
      mem = -1;
 8010b92:	f04f 33ff 	mov.w	r3, #4294967295
 8010b96:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d015      	beq.n	8010bca <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	689b      	ldr	r3, [r3, #8]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d006      	beq.n	8010bb4 <osMutexNew+0x68>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	2b4f      	cmp	r3, #79	@ 0x4f
 8010bac:	d902      	bls.n	8010bb4 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	60bb      	str	r3, [r7, #8]
 8010bb2:	e00c      	b.n	8010bce <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d108      	bne.n	8010bce <osMutexNew+0x82>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d104      	bne.n	8010bce <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	60bb      	str	r3, [r7, #8]
 8010bc8:	e001      	b.n	8010bce <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d112      	bne.n	8010bfa <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d007      	beq.n	8010bea <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	4619      	mov	r1, r3
 8010be0:	2004      	movs	r0, #4
 8010be2:	f000 fcc3 	bl	801156c <xQueueCreateMutexStatic>
 8010be6:	6178      	str	r0, [r7, #20]
 8010be8:	e016      	b.n	8010c18 <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	689b      	ldr	r3, [r3, #8]
 8010bee:	4619      	mov	r1, r3
 8010bf0:	2001      	movs	r0, #1
 8010bf2:	f000 fcbb 	bl	801156c <xQueueCreateMutexStatic>
 8010bf6:	6178      	str	r0, [r7, #20]
 8010bf8:	e00e      	b.n	8010c18 <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d10b      	bne.n	8010c18 <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d004      	beq.n	8010c10 <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8010c06:	2004      	movs	r0, #4
 8010c08:	f000 fc98 	bl	801153c <xQueueCreateMutex>
 8010c0c:	6178      	str	r0, [r7, #20]
 8010c0e:	e003      	b.n	8010c18 <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8010c10:	2001      	movs	r0, #1
 8010c12:	f000 fc93 	bl	801153c <xQueueCreateMutex>
 8010c16:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d00c      	beq.n	8010c38 <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d009      	beq.n	8010c38 <osMutexNew+0xec>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d005      	beq.n	8010c38 <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4619      	mov	r1, r3
 8010c32:	6978      	ldr	r0, [r7, #20]
 8010c34:	f000 ff4e 	bl	8011ad4 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d006      	beq.n	8010c4c <osMutexNew+0x100>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d003      	beq.n	8010c4c <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	f043 0301 	orr.w	r3, r3, #1
 8010c4a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 8010c4c:	697b      	ldr	r3, [r7, #20]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3718      	adds	r7, #24
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b088      	sub	sp, #32
 8010c5a:	af02      	add	r7, sp, #8
 8010c5c:	60f8      	str	r0, [r7, #12]
 8010c5e:	60b9      	str	r1, [r7, #8]
 8010c60:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 8010c62:	2300      	movs	r3, #0
 8010c64:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 8010c66:	f7ff fd94 	bl	8010792 <IRQ_Context>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d15f      	bne.n	8010d30 <osMessageQueueNew+0xda>
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d05c      	beq.n	8010d30 <osMessageQueueNew+0xda>
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d059      	beq.n	8010d30 <osMessageQueueNew+0xda>
    mem = -1;
 8010c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c80:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d029      	beq.n	8010cdc <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d012      	beq.n	8010cb6 <osMessageQueueNew+0x60>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	2b4f      	cmp	r3, #79	@ 0x4f
 8010c96:	d90e      	bls.n	8010cb6 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00a      	beq.n	8010cb6 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	695a      	ldr	r2, [r3, #20]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	68b9      	ldr	r1, [r7, #8]
 8010ca8:	fb01 f303 	mul.w	r3, r1, r3
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d302      	bcc.n	8010cb6 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	613b      	str	r3, [r7, #16]
 8010cb4:	e014      	b.n	8010ce0 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	689b      	ldr	r3, [r3, #8]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d110      	bne.n	8010ce0 <osMessageQueueNew+0x8a>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d10c      	bne.n	8010ce0 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d108      	bne.n	8010ce0 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	695b      	ldr	r3, [r3, #20]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d104      	bne.n	8010ce0 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	613b      	str	r3, [r7, #16]
 8010cda:	e001      	b.n	8010ce0 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d10b      	bne.n	8010cfe <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	691a      	ldr	r2, [r3, #16]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	689b      	ldr	r3, [r3, #8]
 8010cee:	2100      	movs	r1, #0
 8010cf0:	9100      	str	r1, [sp, #0]
 8010cf2:	68b9      	ldr	r1, [r7, #8]
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	f000 fb50 	bl	801139a <xQueueGenericCreateStatic>
 8010cfa:	6178      	str	r0, [r7, #20]
 8010cfc:	e008      	b.n	8010d10 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d105      	bne.n	8010d10 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010d04:	2200      	movs	r2, #0
 8010d06:	68b9      	ldr	r1, [r7, #8]
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f000 fb8f 	bl	801142c <xQueueGenericCreate>
 8010d0e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d00c      	beq.n	8010d30 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d009      	beq.n	8010d30 <osMessageQueueNew+0xda>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d005      	beq.n	8010d30 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6978      	ldr	r0, [r7, #20]
 8010d2c:	f000 fed2 	bl	8011ad4 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 8010d30:	697b      	ldr	r3, [r7, #20]
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3718      	adds	r7, #24
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
	...

08010d3c <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010d3c:	b480      	push	{r7}
 8010d3e:	b085      	sub	sp, #20
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	4a07      	ldr	r2, [pc, #28]	@ (8010d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8010d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	4a06      	ldr	r2, [pc, #24]	@ (8010d6c <vApplicationGetIdleTaskMemory+0x30>)
 8010d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2280      	movs	r2, #128	@ 0x80
 8010d58:	601a      	str	r2, [r3, #0]
}
 8010d5a:	bf00      	nop
 8010d5c:	3714      	adds	r7, #20
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	20026154 	.word	0x20026154
 8010d6c:	200261b0 	.word	0x200261b0

08010d70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010d70:	b480      	push	{r7}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	4a07      	ldr	r2, [pc, #28]	@ (8010d9c <vApplicationGetTimerTaskMemory+0x2c>)
 8010d80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	4a06      	ldr	r2, [pc, #24]	@ (8010da0 <vApplicationGetTimerTaskMemory+0x30>)
 8010d86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2280      	movs	r2, #128	@ 0x80
 8010d8c:	601a      	str	r2, [r3, #0]
}
 8010d8e:	bf00      	nop
 8010d90:	3714      	adds	r7, #20
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	200263b0 	.word	0x200263b0
 8010da0:	2002640c 	.word	0x2002640c

08010da4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f103 0208 	add.w	r2, r3, #8
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f04f 32ff 	mov.w	r2, #4294967295
 8010dbc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f103 0208 	add.w	r2, r3, #8
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f103 0208 	add.w	r2, r3, #8
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010dd8:	bf00      	nop
 8010dda:	370c      	adds	r7, #12
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr

08010de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010df2:	bf00      	nop
 8010df4:	370c      	adds	r7, #12
 8010df6:	46bd      	mov	sp, r7
 8010df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfc:	4770      	bx	lr

08010dfe <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8010dfe:	b480      	push	{r7}
 8010e00:	b085      	sub	sp, #20
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
 8010e06:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e14:	d103      	bne.n	8010e1e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	691b      	ldr	r3, [r3, #16]
 8010e1a:	60fb      	str	r3, [r7, #12]
 8010e1c:	e00c      	b.n	8010e38 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	3308      	adds	r3, #8
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	e002      	b.n	8010e2c <vListInsert+0x2e>
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	60fb      	str	r3, [r7, #12]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d2f6      	bcs.n	8010e26 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	685a      	ldr	r2, [r3, #4]
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	683a      	ldr	r2, [r7, #0]
 8010e46:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	68fa      	ldr	r2, [r7, #12]
 8010e4c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	683a      	ldr	r2, [r7, #0]
 8010e52:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	1c5a      	adds	r2, r3, #1
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	601a      	str	r2, [r3, #0]
}
 8010e64:	bf00      	nop
 8010e66:	3714      	adds	r7, #20
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010e70:	b480      	push	{r7}
 8010e72:	b085      	sub	sp, #20
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	691b      	ldr	r3, [r3, #16]
 8010e7c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	6892      	ldr	r2, [r2, #8]
 8010e86:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	689b      	ldr	r3, [r3, #8]
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	6852      	ldr	r2, [r2, #4]
 8010e90:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d103      	bne.n	8010ea4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	689a      	ldr	r2, [r3, #8]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	1e5a      	subs	r2, r3, #1
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3714      	adds	r7, #20
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8010ef8 <vPortSetupTimerInterrupt+0x34>)
 8010eca:	2200      	movs	r2, #0
 8010ecc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010ece:	4b0b      	ldr	r3, [pc, #44]	@ (8010efc <vPortSetupTimerInterrupt+0x38>)
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8010f00 <vPortSetupTimerInterrupt+0x3c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8010f04 <vPortSetupTimerInterrupt+0x40>)
 8010eda:	fba2 2303 	umull	r2, r3, r2, r3
 8010ede:	099b      	lsrs	r3, r3, #6
 8010ee0:	4a09      	ldr	r2, [pc, #36]	@ (8010f08 <vPortSetupTimerInterrupt+0x44>)
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010ee6:	4b04      	ldr	r3, [pc, #16]	@ (8010ef8 <vPortSetupTimerInterrupt+0x34>)
 8010ee8:	2207      	movs	r2, #7
 8010eea:	601a      	str	r2, [r3, #0]
}
 8010eec:	bf00      	nop
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef4:	4770      	bx	lr
 8010ef6:	bf00      	nop
 8010ef8:	e000e010 	.word	0xe000e010
 8010efc:	e000e018 	.word	0xe000e018
 8010f00:	20000024 	.word	0x20000024
 8010f04:	10624dd3 	.word	0x10624dd3
 8010f08:	e000e014 	.word	0xe000e014

08010f0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8010f12:	2300      	movs	r3, #0
 8010f14:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8010f16:	4b0a      	ldr	r3, [pc, #40]	@ (8010f40 <prvTaskExitError+0x34>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f1e:	d003      	beq.n	8010f28 <prvTaskExitError+0x1c>
 8010f20:	f000 f962 	bl	80111e8 <ulSetInterruptMask>
 8010f24:	bf00      	nop
 8010f26:	e7fd      	b.n	8010f24 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8010f28:	f000 f95e 	bl	80111e8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8010f2c:	bf00      	nop
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d0fc      	beq.n	8010f2e <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8010f34:	bf00      	nop
 8010f36:	bf00      	nop
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	20000030 	.word	0x20000030

08010f44 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8010f44:	b480      	push	{r7}
 8010f46:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f48:	4b06      	ldr	r3, [pc, #24]	@ (8010f64 <vPortYield+0x20>)
 8010f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f4e:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8010f50:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8010f54:	f3bf 8f6f 	isb	sy
}
 8010f58:	bf00      	nop
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	e000ed04 	.word	0xe000ed04

08010f68 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8010f6c:	f000 f93c 	bl	80111e8 <ulSetInterruptMask>
    ulCriticalNesting++;
 8010f70:	4b05      	ldr	r3, [pc, #20]	@ (8010f88 <vPortEnterCritical+0x20>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	3301      	adds	r3, #1
 8010f76:	4a04      	ldr	r2, [pc, #16]	@ (8010f88 <vPortEnterCritical+0x20>)
 8010f78:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8010f7a:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8010f7e:	f3bf 8f6f 	isb	sy
}
 8010f82:	bf00      	nop
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	20000030 	.word	0x20000030

08010f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8010f90:	4b0a      	ldr	r3, [pc, #40]	@ (8010fbc <vPortExitCritical+0x30>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d103      	bne.n	8010fa0 <vPortExitCritical+0x14>
 8010f98:	f000 f926 	bl	80111e8 <ulSetInterruptMask>
 8010f9c:	bf00      	nop
 8010f9e:	e7fd      	b.n	8010f9c <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8010fa0:	4b06      	ldr	r3, [pc, #24]	@ (8010fbc <vPortExitCritical+0x30>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	3b01      	subs	r3, #1
 8010fa6:	4a05      	ldr	r2, [pc, #20]	@ (8010fbc <vPortExitCritical+0x30>)
 8010fa8:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8010faa:	4b04      	ldr	r3, [pc, #16]	@ (8010fbc <vPortExitCritical+0x30>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d102      	bne.n	8010fb8 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8010fb2:	2000      	movs	r0, #0
 8010fb4:	f000 f925 	bl	8011202 <vClearInterruptMask>
    }
}
 8010fb8:	bf00      	nop
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	20000030 	.word	0x20000030

08010fc0 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010fc6:	f000 f90f 	bl	80111e8 <ulSetInterruptMask>
 8010fca:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8010fcc:	f001 f934 	bl	8012238 <xTaskIncrementTick>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d003      	beq.n	8010fde <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010fd6:	4b05      	ldr	r3, [pc, #20]	@ (8010fec <xPortSysTickHandler+0x2c>)
 8010fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fdc:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f90f 	bl	8011202 <vClearInterruptMask>
}
 8010fe4:	bf00      	nop
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}
 8010fec:	e000ed04 	.word	0xe000ed04

08010ff0 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b084      	sub	sp, #16
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	699b      	ldr	r3, [r3, #24]
 8010ffc:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	3b02      	subs	r3, #2
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8011006:	7afb      	ldrb	r3, [r7, #11]
 8011008:	2b02      	cmp	r3, #2
 801100a:	d102      	bne.n	8011012 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 801100c:	f000 f8b8 	bl	8011180 <vRestoreContextOfFirstTask>
            break;
 8011010:	e003      	b.n	801101a <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8011012:	f000 f8e9 	bl	80111e8 <ulSetInterruptMask>
 8011016:	bf00      	nop
 8011018:	e7fd      	b.n	8011016 <vPortSVCHandler_C+0x26>
    }
}
 801101a:	bf00      	nop
 801101c:	3710      	adds	r7, #16
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
	...

08011024 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 8011024:	b480      	push	{r7}
 8011026:	b085      	sub	sp, #20
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
 8011030:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	3b04      	subs	r3, #4
 8011036:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801103e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	3b04      	subs	r3, #4
 8011044:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	3b04      	subs	r3, #4
 8011050:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8011052:	4a38      	ldr	r2, [pc, #224]	@ (8011134 <pxPortInitialiseStack+0x110>)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	3b04      	subs	r3, #4
 801105c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8011064:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	3b04      	subs	r3, #4
 801106a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8011072:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	3b04      	subs	r3, #4
 8011078:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8011080:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	3b04      	subs	r3, #4
 8011086:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 801108e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	3b04      	subs	r3, #4
 8011094:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8011096:	683a      	ldr	r2, [r7, #0]
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	3b04      	subs	r3, #4
 80110a0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 80110a8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	3b04      	subs	r3, #4
 80110ae:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 80110b6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	3b04      	subs	r3, #4
 80110bc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80110c4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3b04      	subs	r3, #4
 80110ca:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80110d2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	3b04      	subs	r3, #4
 80110d8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80110e0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3b04      	subs	r3, #4
 80110e6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80110ee:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	3b04      	subs	r3, #4
 80110f4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80110fc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	3b04      	subs	r3, #4
 8011102:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 801110a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	3b04      	subs	r3, #4
 8011110:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8011118:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	3b04      	subs	r3, #4
 801111e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8011120:	68ba      	ldr	r2, [r7, #8]
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8011126:	68fb      	ldr	r3, [r7, #12]
}
 8011128:	4618      	mov	r0, r3
 801112a:	3714      	adds	r7, #20
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	08010f0d 	.word	0x08010f0d

08011138 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8011138:	b580      	push	{r7, lr}
 801113a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 801113c:	4b0c      	ldr	r3, [pc, #48]	@ (8011170 <xPortStartScheduler+0x38>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a0b      	ldr	r2, [pc, #44]	@ (8011170 <xPortStartScheduler+0x38>)
 8011142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011146:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8011148:	4b09      	ldr	r3, [pc, #36]	@ (8011170 <xPortStartScheduler+0x38>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4a08      	ldr	r2, [pc, #32]	@ (8011170 <xPortStartScheduler+0x38>)
 801114e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011152:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8011154:	f7ff feb6 	bl	8010ec4 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8011158:	4b06      	ldr	r3, [pc, #24]	@ (8011174 <xPortStartScheduler+0x3c>)
 801115a:	2200      	movs	r2, #0
 801115c:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 801115e:	f000 f82f 	bl	80111c0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8011162:	f001 f979 	bl	8012458 <vTaskSwitchContext>
    prvTaskExitError();
 8011166:	f7ff fed1 	bl	8010f0c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 801116a:	2300      	movs	r3, #0
}
 801116c:	4618      	mov	r0, r3
 801116e:	bd80      	pop	{r7, pc}
 8011170:	e000ed20 	.word	0xe000ed20
 8011174:	20000030 	.word	0x20000030
	...

08011180 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8011180:	4a0b      	ldr	r2, [pc, #44]	@ (80111b0 <pxCurrentTCBConst2>)
 8011182:	6811      	ldr	r1, [r2, #0]
 8011184:	6808      	ldr	r0, [r1, #0]
 8011186:	c806      	ldmia	r0!, {r1, r2}
 8011188:	f381 880b 	msr	PSPLIM, r1
 801118c:	2102      	movs	r1, #2
 801118e:	f381 8814 	msr	CONTROL, r1
 8011192:	3020      	adds	r0, #32
 8011194:	f380 8809 	msr	PSP, r0
 8011198:	f3bf 8f6f 	isb	sy
 801119c:	f04f 0000 	mov.w	r0, #0
 80111a0:	f380 8811 	msr	BASEPRI, r0
 80111a4:	4710      	bx	r2
 80111a6:	bf00      	nop
 80111a8:	f3af 8000 	nop.w
 80111ac:	f3af 8000 	nop.w

080111b0 <pxCurrentTCBConst2>:
 80111b0:	2002664c 	.word	0x2002664c
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 80111b4:	bf00      	nop
 80111b6:	bf00      	nop
	...

080111c0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80111c0:	4807      	ldr	r0, [pc, #28]	@ (80111e0 <xVTORConst>)
 80111c2:	6800      	ldr	r0, [r0, #0]
 80111c4:	6800      	ldr	r0, [r0, #0]
 80111c6:	f380 8808 	msr	MSP, r0
 80111ca:	b662      	cpsie	i
 80111cc:	b661      	cpsie	f
 80111ce:	f3bf 8f4f 	dsb	sy
 80111d2:	f3bf 8f6f 	isb	sy
 80111d6:	df02      	svc	2
 80111d8:	bf00      	nop
 80111da:	bf00      	nop
 80111dc:	f3af 8000 	nop.w

080111e0 <xVTORConst>:
 80111e0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 80111e4:	bf00      	nop
 80111e6:	bf00      	nop

080111e8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80111e8:	f3ef 8011 	mrs	r0, BASEPRI
 80111ec:	f04f 0150 	mov.w	r1, #80	@ 0x50
 80111f0:	f381 8811 	msr	BASEPRI, r1
 80111f4:	f3bf 8f4f 	dsb	sy
 80111f8:	f3bf 8f6f 	isb	sy
 80111fc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80111fe:	bf00      	nop
 8011200:	4618      	mov	r0, r3

08011202 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8011202:	f380 8811 	msr	BASEPRI, r0
 8011206:	f3bf 8f4f 	dsb	sy
 801120a:	f3bf 8f6f 	isb	sy
 801120e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8011210:	bf00      	nop
	...

08011220 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8011220:	f3ef 8009 	mrs	r0, PSP
 8011224:	f3ef 820b 	mrs	r2, PSPLIM
 8011228:	4673      	mov	r3, lr
 801122a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801122e:	4a10      	ldr	r2, [pc, #64]	@ (8011270 <pxCurrentTCBConst>)
 8011230:	6811      	ldr	r1, [r2, #0]
 8011232:	6008      	str	r0, [r1, #0]
 8011234:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011238:	f380 8811 	msr	BASEPRI, r0
 801123c:	f3bf 8f4f 	dsb	sy
 8011240:	f3bf 8f6f 	isb	sy
 8011244:	f001 f908 	bl	8012458 <vTaskSwitchContext>
 8011248:	f04f 0000 	mov.w	r0, #0
 801124c:	f380 8811 	msr	BASEPRI, r0
 8011250:	4a07      	ldr	r2, [pc, #28]	@ (8011270 <pxCurrentTCBConst>)
 8011252:	6811      	ldr	r1, [r2, #0]
 8011254:	6808      	ldr	r0, [r1, #0]
 8011256:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801125a:	f382 880b 	msr	PSPLIM, r2
 801125e:	f380 8809 	msr	PSP, r0
 8011262:	4718      	bx	r3
 8011264:	f3af 8000 	nop.w
 8011268:	f3af 8000 	nop.w
 801126c:	f3af 8000 	nop.w

08011270 <pxCurrentTCBConst>:
 8011270:	2002664c 	.word	0x2002664c
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8011274:	bf00      	nop
 8011276:	bf00      	nop
	...

08011280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8011280:	f01e 0f04 	tst.w	lr, #4
 8011284:	bf0c      	ite	eq
 8011286:	f3ef 8008 	mrseq	r0, MSP
 801128a:	f3ef 8009 	mrsne	r0, PSP
 801128e:	4904      	ldr	r1, [pc, #16]	@ (80112a0 <svchandler_address_const>)
 8011290:	4708      	bx	r1
 8011292:	bf00      	nop
 8011294:	f3af 8000 	nop.w
 8011298:	f3af 8000 	nop.w
 801129c:	f3af 8000 	nop.w

080112a0 <svchandler_address_const>:
 80112a0:	08010ff1 	.word	0x08010ff1
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 80112a4:	bf00      	nop
 80112a6:	bf00      	nop

080112a8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80112b2:	2301      	movs	r3, #1
 80112b4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d103      	bne.n	80112c8 <xQueueGenericReset+0x20>
 80112c0:	f7ff ff92 	bl	80111e8 <ulSetInterruptMask>
 80112c4:	bf00      	nop
 80112c6:	e7fd      	b.n	80112c4 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d057      	beq.n	801137e <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d053      	beq.n	801137e <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112de:	2100      	movs	r1, #0
 80112e0:	fba3 2302 	umull	r2, r3, r3, r2
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d000      	beq.n	80112ea <xQueueGenericReset+0x42>
 80112e8:	2101      	movs	r1, #1
 80112ea:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d146      	bne.n	801137e <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 80112f0:	f7ff fe3a 	bl	8010f68 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112fc:	68b9      	ldr	r1, [r7, #8]
 80112fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011300:	fb01 f303 	mul.w	r3, r1, r3
 8011304:	441a      	add	r2, r3
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2200      	movs	r2, #0
 801130e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011320:	3b01      	subs	r3, #1
 8011322:	68b9      	ldr	r1, [r7, #8]
 8011324:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011326:	fb01 f303 	mul.w	r3, r1, r3
 801132a:	441a      	add	r2, r3
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	22ff      	movs	r2, #255	@ 0xff
 8011334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	22ff      	movs	r2, #255	@ 0xff
 801133c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10e      	bne.n	8011364 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	691b      	ldr	r3, [r3, #16]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d014      	beq.n	8011378 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	3310      	adds	r3, #16
 8011352:	4618      	mov	r0, r3
 8011354:	f001 f930 	bl	80125b8 <xTaskRemoveFromEventList>
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00c      	beq.n	8011378 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 801135e:	f7ff fdf1 	bl	8010f44 <vPortYield>
 8011362:	e009      	b.n	8011378 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	3310      	adds	r3, #16
 8011368:	4618      	mov	r0, r3
 801136a:	f7ff fd1b 	bl	8010da4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	3324      	adds	r3, #36	@ 0x24
 8011372:	4618      	mov	r0, r3
 8011374:	f7ff fd16 	bl	8010da4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8011378:	f7ff fe08 	bl	8010f8c <vPortExitCritical>
 801137c:	e001      	b.n	8011382 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 801137e:	2300      	movs	r3, #0
 8011380:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d103      	bne.n	8011390 <xQueueGenericReset+0xe8>
 8011388:	f7ff ff2e 	bl	80111e8 <ulSetInterruptMask>
 801138c:	bf00      	nop
 801138e:	e7fd      	b.n	801138c <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8011390:	68fb      	ldr	r3, [r7, #12]
}
 8011392:	4618      	mov	r0, r3
 8011394:	3710      	adds	r7, #16
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}

0801139a <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 801139a:	b580      	push	{r7, lr}
 801139c:	b088      	sub	sp, #32
 801139e:	af02      	add	r7, sp, #8
 80113a0:	60f8      	str	r0, [r7, #12]
 80113a2:	60b9      	str	r1, [r7, #8]
 80113a4:	607a      	str	r2, [r7, #4]
 80113a6:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80113a8:	2300      	movs	r3, #0
 80113aa:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d103      	bne.n	80113ba <xQueueGenericCreateStatic+0x20>
 80113b2:	f7ff ff19 	bl	80111e8 <ulSetInterruptMask>
 80113b6:	bf00      	nop
 80113b8:	e7fd      	b.n	80113b6 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d029      	beq.n	8011414 <xQueueGenericCreateStatic+0x7a>
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d026      	beq.n	8011414 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d002      	beq.n	80113d2 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d020      	beq.n	8011414 <xQueueGenericCreateStatic+0x7a>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d11a      	bne.n	8011414 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80113de:	2350      	movs	r3, #80	@ 0x50
 80113e0:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	2b50      	cmp	r3, #80	@ 0x50
 80113e6:	d003      	beq.n	80113f0 <xQueueGenericCreateStatic+0x56>
 80113e8:	f7ff fefe 	bl	80111e8 <ulSetInterruptMask>
 80113ec:	bf00      	nop
 80113ee:	e7fd      	b.n	80113ec <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80113f0:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	2201      	movs	r2, #1
 80113fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80113fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	4613      	mov	r3, r2
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	68b9      	ldr	r1, [r7, #8]
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	f000 f858 	bl	80114c2 <prvInitialiseNewQueue>
 8011412:	e006      	b.n	8011422 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d103      	bne.n	8011422 <xQueueGenericCreateStatic+0x88>
 801141a:	f7ff fee5 	bl	80111e8 <ulSetInterruptMask>
 801141e:	bf00      	nop
 8011420:	e7fd      	b.n	801141e <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8011422:	697b      	ldr	r3, [r7, #20]
    }
 8011424:	4618      	mov	r0, r3
 8011426:	3718      	adds	r7, #24
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 801142c:	b580      	push	{r7, lr}
 801142e:	b08a      	sub	sp, #40	@ 0x28
 8011430:	af02      	add	r7, sp, #8
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	4613      	mov	r3, r2
 8011438:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 801143a:	2300      	movs	r3, #0
 801143c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d032      	beq.n	80114aa <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011444:	2100      	movs	r1, #0
 8011446:	68ba      	ldr	r2, [r7, #8]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	fba3 2302 	umull	r2, r3, r3, r2
 801144e:	2b00      	cmp	r3, #0
 8011450:	d000      	beq.n	8011454 <xQueueGenericCreate+0x28>
 8011452:	2101      	movs	r1, #1
 8011454:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011456:	2b00      	cmp	r3, #0
 8011458:	d127      	bne.n	80114aa <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	68ba      	ldr	r2, [r7, #8]
 801145e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011462:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8011466:	d820      	bhi.n	80114aa <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	68ba      	ldr	r2, [r7, #8]
 801146c:	fb02 f303 	mul.w	r3, r2, r3
 8011470:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	3350      	adds	r3, #80	@ 0x50
 8011476:	4618      	mov	r0, r3
 8011478:	f001 fefe 	bl	8013278 <pvPortMalloc>
 801147c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d019      	beq.n	80114b8 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	3350      	adds	r3, #80	@ 0x50
 801148c:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	2200      	movs	r2, #0
 8011492:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011496:	79fa      	ldrb	r2, [r7, #7]
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	4613      	mov	r3, r2
 801149e:	697a      	ldr	r2, [r7, #20]
 80114a0:	68b9      	ldr	r1, [r7, #8]
 80114a2:	68f8      	ldr	r0, [r7, #12]
 80114a4:	f000 f80d 	bl	80114c2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80114a8:	e006      	b.n	80114b8 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d103      	bne.n	80114b8 <xQueueGenericCreate+0x8c>
 80114b0:	f7ff fe9a 	bl	80111e8 <ulSetInterruptMask>
 80114b4:	bf00      	nop
 80114b6:	e7fd      	b.n	80114b4 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80114b8:	69fb      	ldr	r3, [r7, #28]
    }
 80114ba:	4618      	mov	r0, r3
 80114bc:	3720      	adds	r7, #32
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b084      	sub	sp, #16
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	60f8      	str	r0, [r7, #12]
 80114ca:	60b9      	str	r1, [r7, #8]
 80114cc:	607a      	str	r2, [r7, #4]
 80114ce:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d103      	bne.n	80114de <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	69ba      	ldr	r2, [r7, #24]
 80114da:	601a      	str	r2, [r3, #0]
 80114dc:	e002      	b.n	80114e4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	68ba      	ldr	r2, [r7, #8]
 80114ee:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80114f0:	2101      	movs	r1, #1
 80114f2:	69b8      	ldr	r0, [r7, #24]
 80114f4:	f7ff fed8 	bl	80112a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	78fa      	ldrb	r2, [r7, #3]
 80114fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8011500:	bf00      	nop
 8011502:	3710      	adds	r7, #16
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d00e      	beq.n	8011534 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2200      	movs	r2, #0
 801151a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2200      	movs	r2, #0
 8011526:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011528:	2300      	movs	r3, #0
 801152a:	2200      	movs	r2, #0
 801152c:	2100      	movs	r1, #0
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 f837 	bl	80115a2 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8011534:	bf00      	nop
 8011536:	3708      	adds	r7, #8
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 801153c:	b580      	push	{r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	4603      	mov	r3, r0
 8011544:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011546:	2301      	movs	r3, #1
 8011548:	617b      	str	r3, [r7, #20]
 801154a:	2300      	movs	r3, #0
 801154c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801154e:	79fb      	ldrb	r3, [r7, #7]
 8011550:	461a      	mov	r2, r3
 8011552:	6939      	ldr	r1, [r7, #16]
 8011554:	6978      	ldr	r0, [r7, #20]
 8011556:	f7ff ff69 	bl	801142c <xQueueGenericCreate>
 801155a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801155c:	68f8      	ldr	r0, [r7, #12]
 801155e:	f7ff ffd3 	bl	8011508 <prvInitialiseMutex>

        return xNewQueue;
 8011562:	68fb      	ldr	r3, [r7, #12]
    }
 8011564:	4618      	mov	r0, r3
 8011566:	3718      	adds	r7, #24
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 801156c:	b580      	push	{r7, lr}
 801156e:	b088      	sub	sp, #32
 8011570:	af02      	add	r7, sp, #8
 8011572:	4603      	mov	r3, r0
 8011574:	6039      	str	r1, [r7, #0]
 8011576:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011578:	2301      	movs	r3, #1
 801157a:	617b      	str	r3, [r7, #20]
 801157c:	2300      	movs	r3, #0
 801157e:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011580:	79fb      	ldrb	r3, [r7, #7]
 8011582:	9300      	str	r3, [sp, #0]
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	2200      	movs	r2, #0
 8011588:	6939      	ldr	r1, [r7, #16]
 801158a:	6978      	ldr	r0, [r7, #20]
 801158c:	f7ff ff05 	bl	801139a <xQueueGenericCreateStatic>
 8011590:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f7ff ffb8 	bl	8011508 <prvInitialiseMutex>

        return xNewQueue;
 8011598:	68fb      	ldr	r3, [r7, #12]
    }
 801159a:	4618      	mov	r0, r3
 801159c:	3718      	adds	r7, #24
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b08a      	sub	sp, #40	@ 0x28
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	60f8      	str	r0, [r7, #12]
 80115aa:	60b9      	str	r1, [r7, #8]
 80115ac:	607a      	str	r2, [r7, #4]
 80115ae:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80115b0:	2300      	movs	r3, #0
 80115b2:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80115b8:	6a3b      	ldr	r3, [r7, #32]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d103      	bne.n	80115c6 <xQueueGenericSend+0x24>
 80115be:	f7ff fe13 	bl	80111e8 <ulSetInterruptMask>
 80115c2:	bf00      	nop
 80115c4:	e7fd      	b.n	80115c2 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d103      	bne.n	80115d4 <xQueueGenericSend+0x32>
 80115cc:	6a3b      	ldr	r3, [r7, #32]
 80115ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d101      	bne.n	80115d8 <xQueueGenericSend+0x36>
 80115d4:	2301      	movs	r3, #1
 80115d6:	e000      	b.n	80115da <xQueueGenericSend+0x38>
 80115d8:	2300      	movs	r3, #0
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d103      	bne.n	80115e6 <xQueueGenericSend+0x44>
 80115de:	f7ff fe03 	bl	80111e8 <ulSetInterruptMask>
 80115e2:	bf00      	nop
 80115e4:	e7fd      	b.n	80115e2 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	2b02      	cmp	r3, #2
 80115ea:	d103      	bne.n	80115f4 <xQueueGenericSend+0x52>
 80115ec:	6a3b      	ldr	r3, [r7, #32]
 80115ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	d101      	bne.n	80115f8 <xQueueGenericSend+0x56>
 80115f4:	2301      	movs	r3, #1
 80115f6:	e000      	b.n	80115fa <xQueueGenericSend+0x58>
 80115f8:	2300      	movs	r3, #0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d103      	bne.n	8011606 <xQueueGenericSend+0x64>
 80115fe:	f7ff fdf3 	bl	80111e8 <ulSetInterruptMask>
 8011602:	bf00      	nop
 8011604:	e7fd      	b.n	8011602 <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011606:	f001 f9e1 	bl	80129cc <xTaskGetSchedulerState>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d102      	bne.n	8011616 <xQueueGenericSend+0x74>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d101      	bne.n	801161a <xQueueGenericSend+0x78>
 8011616:	2301      	movs	r3, #1
 8011618:	e000      	b.n	801161c <xQueueGenericSend+0x7a>
 801161a:	2300      	movs	r3, #0
 801161c:	2b00      	cmp	r3, #0
 801161e:	d103      	bne.n	8011628 <xQueueGenericSend+0x86>
 8011620:	f7ff fde2 	bl	80111e8 <ulSetInterruptMask>
 8011624:	bf00      	nop
 8011626:	e7fd      	b.n	8011624 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011628:	f7ff fc9e 	bl	8010f68 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801162c:	6a3b      	ldr	r3, [r7, #32]
 801162e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011630:	6a3b      	ldr	r3, [r7, #32]
 8011632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011634:	429a      	cmp	r2, r3
 8011636:	d302      	bcc.n	801163e <xQueueGenericSend+0x9c>
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	2b02      	cmp	r3, #2
 801163c:	d11d      	bne.n	801167a <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801163e:	683a      	ldr	r2, [r7, #0]
 8011640:	68b9      	ldr	r1, [r7, #8]
 8011642:	6a38      	ldr	r0, [r7, #32]
 8011644:	f000 f936 	bl	80118b4 <prvCopyDataToQueue>
 8011648:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801164a:	6a3b      	ldr	r3, [r7, #32]
 801164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801164e:	2b00      	cmp	r3, #0
 8011650:	d00a      	beq.n	8011668 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011652:	6a3b      	ldr	r3, [r7, #32]
 8011654:	3324      	adds	r3, #36	@ 0x24
 8011656:	4618      	mov	r0, r3
 8011658:	f000 ffae 	bl	80125b8 <xTaskRemoveFromEventList>
 801165c:	4603      	mov	r3, r0
 801165e:	2b00      	cmp	r3, #0
 8011660:	d007      	beq.n	8011672 <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8011662:	f7ff fc6f 	bl	8010f44 <vPortYield>
 8011666:	e004      	b.n	8011672 <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d001      	beq.n	8011672 <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 801166e:	f7ff fc69 	bl	8010f44 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8011672:	f7ff fc8b 	bl	8010f8c <vPortExitCritical>
                return pdPASS;
 8011676:	2301      	movs	r3, #1
 8011678:	e05c      	b.n	8011734 <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d103      	bne.n	8011688 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8011680:	f7ff fc84 	bl	8010f8c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8011684:	2300      	movs	r3, #0
 8011686:	e055      	b.n	8011734 <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 8011688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168a:	2b00      	cmp	r3, #0
 801168c:	d106      	bne.n	801169c <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 801168e:	f107 0314 	add.w	r3, r7, #20
 8011692:	4618      	mov	r0, r3
 8011694:	f001 f85e 	bl	8012754 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011698:	2301      	movs	r3, #1
 801169a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 801169c:	f7ff fc76 	bl	8010f8c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80116a0:	f000 fcbe 	bl	8012020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80116a4:	f7ff fc60 	bl	8010f68 <vPortEnterCritical>
 80116a8:	6a3b      	ldr	r3, [r7, #32]
 80116aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80116ae:	b25b      	sxtb	r3, r3
 80116b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116b4:	d103      	bne.n	80116be <xQueueGenericSend+0x11c>
 80116b6:	6a3b      	ldr	r3, [r7, #32]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80116be:	6a3b      	ldr	r3, [r7, #32]
 80116c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ca:	d103      	bne.n	80116d4 <xQueueGenericSend+0x132>
 80116cc:	6a3b      	ldr	r3, [r7, #32]
 80116ce:	2200      	movs	r2, #0
 80116d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80116d4:	f7ff fc5a 	bl	8010f8c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116d8:	1d3a      	adds	r2, r7, #4
 80116da:	f107 0314 	add.w	r3, r7, #20
 80116de:	4611      	mov	r1, r2
 80116e0:	4618      	mov	r0, r3
 80116e2:	f001 f84d 	bl	8012780 <xTaskCheckForTimeOut>
 80116e6:	4603      	mov	r3, r0
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d11d      	bne.n	8011728 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80116ec:	6a38      	ldr	r0, [r7, #32]
 80116ee:	f000 f9d9 	bl	8011aa4 <prvIsQueueFull>
 80116f2:	4603      	mov	r3, r0
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d011      	beq.n	801171c <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80116f8:	6a3b      	ldr	r3, [r7, #32]
 80116fa:	3310      	adds	r3, #16
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	4611      	mov	r1, r2
 8011700:	4618      	mov	r0, r3
 8011702:	f000 fefd 	bl	8012500 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8011706:	6a38      	ldr	r0, [r7, #32]
 8011708:	f000 f964 	bl	80119d4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 801170c:	f000 fc96 	bl	801203c <xTaskResumeAll>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d188      	bne.n	8011628 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 8011716:	f7ff fc15 	bl	8010f44 <vPortYield>
 801171a:	e785      	b.n	8011628 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 801171c:	6a38      	ldr	r0, [r7, #32]
 801171e:	f000 f959 	bl	80119d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8011722:	f000 fc8b 	bl	801203c <xTaskResumeAll>
 8011726:	e77f      	b.n	8011628 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8011728:	6a38      	ldr	r0, [r7, #32]
 801172a:	f000 f953 	bl	80119d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 801172e:	f000 fc85 	bl	801203c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8011732:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8011734:	4618      	mov	r0, r3
 8011736:	3728      	adds	r7, #40	@ 0x28
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b08a      	sub	sp, #40	@ 0x28
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8011748:	2300      	movs	r3, #0
 801174a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8011750:	6a3b      	ldr	r3, [r7, #32]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d103      	bne.n	801175e <xQueueReceive+0x22>
 8011756:	f7ff fd47 	bl	80111e8 <ulSetInterruptMask>
 801175a:	bf00      	nop
 801175c:	e7fd      	b.n	801175a <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d103      	bne.n	801176c <xQueueReceive+0x30>
 8011764:	6a3b      	ldr	r3, [r7, #32]
 8011766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011768:	2b00      	cmp	r3, #0
 801176a:	d101      	bne.n	8011770 <xQueueReceive+0x34>
 801176c:	2301      	movs	r3, #1
 801176e:	e000      	b.n	8011772 <xQueueReceive+0x36>
 8011770:	2300      	movs	r3, #0
 8011772:	2b00      	cmp	r3, #0
 8011774:	d103      	bne.n	801177e <xQueueReceive+0x42>
 8011776:	f7ff fd37 	bl	80111e8 <ulSetInterruptMask>
 801177a:	bf00      	nop
 801177c:	e7fd      	b.n	801177a <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801177e:	f001 f925 	bl	80129cc <xTaskGetSchedulerState>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d102      	bne.n	801178e <xQueueReceive+0x52>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d101      	bne.n	8011792 <xQueueReceive+0x56>
 801178e:	2301      	movs	r3, #1
 8011790:	e000      	b.n	8011794 <xQueueReceive+0x58>
 8011792:	2300      	movs	r3, #0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d103      	bne.n	80117a0 <xQueueReceive+0x64>
 8011798:	f7ff fd26 	bl	80111e8 <ulSetInterruptMask>
 801179c:	bf00      	nop
 801179e:	e7fd      	b.n	801179c <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80117a0:	f7ff fbe2 	bl	8010f68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117a4:	6a3b      	ldr	r3, [r7, #32]
 80117a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117a8:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117aa:	69fb      	ldr	r3, [r7, #28]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d019      	beq.n	80117e4 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80117b0:	68b9      	ldr	r1, [r7, #8]
 80117b2:	6a38      	ldr	r0, [r7, #32]
 80117b4:	f000 f8e8 	bl	8011988 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	1e5a      	subs	r2, r3, #1
 80117bc:	6a3b      	ldr	r3, [r7, #32]
 80117be:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117c0:	6a3b      	ldr	r3, [r7, #32]
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d009      	beq.n	80117dc <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117c8:	6a3b      	ldr	r3, [r7, #32]
 80117ca:	3310      	adds	r3, #16
 80117cc:	4618      	mov	r0, r3
 80117ce:	f000 fef3 	bl	80125b8 <xTaskRemoveFromEventList>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d001      	beq.n	80117dc <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80117d8:	f7ff fbb4 	bl	8010f44 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80117dc:	f7ff fbd6 	bl	8010f8c <vPortExitCritical>
                return pdPASS;
 80117e0:	2301      	movs	r3, #1
 80117e2:	e063      	b.n	80118ac <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d103      	bne.n	80117f2 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80117ea:	f7ff fbcf 	bl	8010f8c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80117ee:	2300      	movs	r3, #0
 80117f0:	e05c      	b.n	80118ac <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 80117f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d106      	bne.n	8011806 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80117f8:	f107 0314 	add.w	r3, r7, #20
 80117fc:	4618      	mov	r0, r3
 80117fe:	f000 ffa9 	bl	8012754 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011802:	2301      	movs	r3, #1
 8011804:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8011806:	f7ff fbc1 	bl	8010f8c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801180a:	f000 fc09 	bl	8012020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 801180e:	f7ff fbab 	bl	8010f68 <vPortEnterCritical>
 8011812:	6a3b      	ldr	r3, [r7, #32]
 8011814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011818:	b25b      	sxtb	r3, r3
 801181a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801181e:	d103      	bne.n	8011828 <xQueueReceive+0xec>
 8011820:	6a3b      	ldr	r3, [r7, #32]
 8011822:	2200      	movs	r2, #0
 8011824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011828:	6a3b      	ldr	r3, [r7, #32]
 801182a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801182e:	b25b      	sxtb	r3, r3
 8011830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011834:	d103      	bne.n	801183e <xQueueReceive+0x102>
 8011836:	6a3b      	ldr	r3, [r7, #32]
 8011838:	2200      	movs	r2, #0
 801183a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801183e:	f7ff fba5 	bl	8010f8c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011842:	1d3a      	adds	r2, r7, #4
 8011844:	f107 0314 	add.w	r3, r7, #20
 8011848:	4611      	mov	r1, r2
 801184a:	4618      	mov	r0, r3
 801184c:	f000 ff98 	bl	8012780 <xTaskCheckForTimeOut>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d11d      	bne.n	8011892 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011856:	6a38      	ldr	r0, [r7, #32]
 8011858:	f000 f90e 	bl	8011a78 <prvIsQueueEmpty>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d011      	beq.n	8011886 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011862:	6a3b      	ldr	r3, [r7, #32]
 8011864:	3324      	adds	r3, #36	@ 0x24
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	4611      	mov	r1, r2
 801186a:	4618      	mov	r0, r3
 801186c:	f000 fe48 	bl	8012500 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8011870:	6a38      	ldr	r0, [r7, #32]
 8011872:	f000 f8af 	bl	80119d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8011876:	f000 fbe1 	bl	801203c <xTaskResumeAll>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d18f      	bne.n	80117a0 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 8011880:	f7ff fb60 	bl	8010f44 <vPortYield>
 8011884:	e78c      	b.n	80117a0 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8011886:	6a38      	ldr	r0, [r7, #32]
 8011888:	f000 f8a4 	bl	80119d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801188c:	f000 fbd6 	bl	801203c <xTaskResumeAll>
 8011890:	e786      	b.n	80117a0 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8011892:	6a38      	ldr	r0, [r7, #32]
 8011894:	f000 f89e 	bl	80119d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8011898:	f000 fbd0 	bl	801203c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801189c:	6a38      	ldr	r0, [r7, #32]
 801189e:	f000 f8eb 	bl	8011a78 <prvIsQueueEmpty>
 80118a2:	4603      	mov	r3, r0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f43f af7b 	beq.w	80117a0 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80118aa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3728      	adds	r7, #40	@ 0x28
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b086      	sub	sp, #24
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80118c0:	2300      	movs	r3, #0
 80118c2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118c8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d10d      	bne.n	80118ee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d14d      	bne.n	8011976 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	689b      	ldr	r3, [r3, #8]
 80118de:	4618      	mov	r0, r3
 80118e0:	f001 f892 	bl	8012a08 <xTaskPriorityDisinherit>
 80118e4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2200      	movs	r2, #0
 80118ea:	609a      	str	r2, [r3, #8]
 80118ec:	e043      	b.n	8011976 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d119      	bne.n	8011928 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	6858      	ldr	r0, [r3, #4]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118fc:	461a      	mov	r2, r3
 80118fe:	68b9      	ldr	r1, [r7, #8]
 8011900:	f005 f80f 	bl	8016922 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	685a      	ldr	r2, [r3, #4]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801190c:	441a      	add	r2, r3
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	685a      	ldr	r2, [r3, #4]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	689b      	ldr	r3, [r3, #8]
 801191a:	429a      	cmp	r2, r3
 801191c:	d32b      	bcc.n	8011976 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	605a      	str	r2, [r3, #4]
 8011926:	e026      	b.n	8011976 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	68d8      	ldr	r0, [r3, #12]
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011930:	461a      	mov	r2, r3
 8011932:	68b9      	ldr	r1, [r7, #8]
 8011934:	f004 fff5 	bl	8016922 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	68da      	ldr	r2, [r3, #12]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011940:	425b      	negs	r3, r3
 8011942:	441a      	add	r2, r3
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	68da      	ldr	r2, [r3, #12]
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	429a      	cmp	r2, r3
 8011952:	d207      	bcs.n	8011964 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	689a      	ldr	r2, [r3, #8]
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801195c:	425b      	negs	r3, r3
 801195e:	441a      	add	r2, r3
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b02      	cmp	r3, #2
 8011968:	d105      	bne.n	8011976 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d002      	beq.n	8011976 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	3b01      	subs	r3, #1
 8011974:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 801197e:	697b      	ldr	r3, [r7, #20]
}
 8011980:	4618      	mov	r0, r3
 8011982:	3718      	adds	r7, #24
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}

08011988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011996:	2b00      	cmp	r3, #0
 8011998:	d018      	beq.n	80119cc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	68da      	ldr	r2, [r3, #12]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119a2:	441a      	add	r2, r3
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	68da      	ldr	r2, [r3, #12]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	689b      	ldr	r3, [r3, #8]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d303      	bcc.n	80119bc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	68d9      	ldr	r1, [r3, #12]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119c4:	461a      	mov	r2, r3
 80119c6:	6838      	ldr	r0, [r7, #0]
 80119c8:	f004 ffab 	bl	8016922 <memcpy>
    }
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80119dc:	f7ff fac4 	bl	8010f68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80119e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80119e8:	e011      	b.n	8011a0e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d012      	beq.n	8011a18 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	3324      	adds	r3, #36	@ 0x24
 80119f6:	4618      	mov	r0, r3
 80119f8:	f000 fdde 	bl	80125b8 <xTaskRemoveFromEventList>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d001      	beq.n	8011a06 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8011a02:	f000 ff15 	bl	8012830 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8011a06:	7bfb      	ldrb	r3, [r7, #15]
 8011a08:	3b01      	subs	r3, #1
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	dce9      	bgt.n	80119ea <prvUnlockQueue+0x16>
 8011a16:	e000      	b.n	8011a1a <prvUnlockQueue+0x46>
                    break;
 8011a18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	22ff      	movs	r2, #255	@ 0xff
 8011a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8011a22:	f7ff fab3 	bl	8010f8c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8011a26:	f7ff fa9f 	bl	8010f68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011a30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a32:	e011      	b.n	8011a58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	691b      	ldr	r3, [r3, #16]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d012      	beq.n	8011a62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	3310      	adds	r3, #16
 8011a40:	4618      	mov	r0, r3
 8011a42:	f000 fdb9 	bl	80125b8 <xTaskRemoveFromEventList>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d001      	beq.n	8011a50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8011a4c:	f000 fef0 	bl	8012830 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8011a50:	7bbb      	ldrb	r3, [r7, #14]
 8011a52:	3b01      	subs	r3, #1
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	dce9      	bgt.n	8011a34 <prvUnlockQueue+0x60>
 8011a60:	e000      	b.n	8011a64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8011a62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	22ff      	movs	r2, #255	@ 0xff
 8011a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8011a6c:	f7ff fa8e 	bl	8010f8c <vPortExitCritical>
}
 8011a70:	bf00      	nop
 8011a72:	3710      	adds	r7, #16
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8011a80:	f7ff fa72 	bl	8010f68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d102      	bne.n	8011a92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	60fb      	str	r3, [r7, #12]
 8011a90:	e001      	b.n	8011a96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8011a92:	2300      	movs	r3, #0
 8011a94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8011a96:	f7ff fa79 	bl	8010f8c <vPortExitCritical>

    return xReturn;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3710      	adds	r7, #16
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8011aac:	f7ff fa5c 	bl	8010f68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d102      	bne.n	8011ac2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8011abc:	2301      	movs	r3, #1
 8011abe:	60fb      	str	r3, [r7, #12]
 8011ac0:	e001      	b.n	8011ac6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8011ac6:	f7ff fa61 	bl	8010f8c <vPortExitCritical>

    return xReturn;
 8011aca:	68fb      	ldr	r3, [r7, #12]
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3710      	adds	r7, #16
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d103      	bne.n	8011af0 <vQueueAddToRegistry+0x1c>
 8011ae8:	f7ff fb7e 	bl	80111e8 <ulSetInterruptMask>
 8011aec:	bf00      	nop
 8011aee:	e7fd      	b.n	8011aec <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d024      	beq.n	8011b40 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011af6:	2300      	movs	r3, #0
 8011af8:	60fb      	str	r3, [r7, #12]
 8011afa:	e01e      	b.n	8011b3a <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8011afc:	4a17      	ldr	r2, [pc, #92]	@ (8011b5c <vQueueAddToRegistry+0x88>)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	00db      	lsls	r3, r3, #3
 8011b02:	4413      	add	r3, r2
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d105      	bne.n	8011b18 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	00db      	lsls	r3, r3, #3
 8011b10:	4a12      	ldr	r2, [pc, #72]	@ (8011b5c <vQueueAddToRegistry+0x88>)
 8011b12:	4413      	add	r3, r2
 8011b14:	60bb      	str	r3, [r7, #8]
                    break;
 8011b16:	e013      	b.n	8011b40 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d10a      	bne.n	8011b34 <vQueueAddToRegistry+0x60>
 8011b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8011b5c <vQueueAddToRegistry+0x88>)
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d104      	bne.n	8011b34 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	00db      	lsls	r3, r3, #3
 8011b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8011b5c <vQueueAddToRegistry+0x88>)
 8011b30:	4413      	add	r3, r2
 8011b32:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	3301      	adds	r3, #1
 8011b38:	60fb      	str	r3, [r7, #12]
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2b07      	cmp	r3, #7
 8011b3e:	d9dd      	bls.n	8011afc <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d005      	beq.n	8011b52 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	683a      	ldr	r2, [r7, #0]
 8011b4a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8011b52:	bf00      	nop
 8011b54:	3710      	adds	r7, #16
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	2002660c 	.word	0x2002660c

08011b60 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b086      	sub	sp, #24
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8011b70:	f7ff f9fa 	bl	8010f68 <vPortEnterCritical>
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011b7a:	b25b      	sxtb	r3, r3
 8011b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b80:	d103      	bne.n	8011b8a <vQueueWaitForMessageRestricted+0x2a>
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	2200      	movs	r2, #0
 8011b86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011b90:	b25b      	sxtb	r3, r3
 8011b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b96:	d103      	bne.n	8011ba0 <vQueueWaitForMessageRestricted+0x40>
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011ba0:	f7ff f9f4 	bl	8010f8c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d106      	bne.n	8011bba <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	3324      	adds	r3, #36	@ 0x24
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	68b9      	ldr	r1, [r7, #8]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f000 fcc1 	bl	801253c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8011bba:	6978      	ldr	r0, [r7, #20]
 8011bbc:	f7ff ff0a 	bl	80119d4 <prvUnlockQueue>
    }
 8011bc0:	bf00      	nop
 8011bc2:	3718      	adds	r7, #24
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b08c      	sub	sp, #48	@ 0x30
 8011bcc:	af04      	add	r7, sp, #16
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
 8011bd4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8011bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d103      	bne.n	8011be4 <xTaskCreateStatic+0x1c>
 8011bdc:	f7ff fb04 	bl	80111e8 <ulSetInterruptMask>
 8011be0:	bf00      	nop
 8011be2:	e7fd      	b.n	8011be0 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8011be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d103      	bne.n	8011bf2 <xTaskCreateStatic+0x2a>
 8011bea:	f7ff fafd 	bl	80111e8 <ulSetInterruptMask>
 8011bee:	bf00      	nop
 8011bf0:	e7fd      	b.n	8011bee <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8011bf2:	235c      	movs	r3, #92	@ 0x5c
 8011bf4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	2b5c      	cmp	r3, #92	@ 0x5c
 8011bfa:	d003      	beq.n	8011c04 <xTaskCreateStatic+0x3c>
 8011bfc:	f7ff faf4 	bl	80111e8 <ulSetInterruptMask>
 8011c00:	bf00      	nop
 8011c02:	e7fd      	b.n	8011c00 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011c04:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d023      	beq.n	8011c54 <xTaskCreateStatic+0x8c>
 8011c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d020      	beq.n	8011c54 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c14:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8011c16:	225c      	movs	r2, #92	@ 0x5c
 8011c18:	2100      	movs	r1, #0
 8011c1a:	69f8      	ldr	r0, [r7, #28]
 8011c1c:	f004 fdf3 	bl	8016806 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c24:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011c26:	69fb      	ldr	r3, [r7, #28]
 8011c28:	2202      	movs	r2, #2
 8011c2a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011c2e:	2300      	movs	r3, #0
 8011c30:	9303      	str	r3, [sp, #12]
 8011c32:	69fb      	ldr	r3, [r7, #28]
 8011c34:	9302      	str	r3, [sp, #8]
 8011c36:	f107 0318 	add.w	r3, r7, #24
 8011c3a:	9301      	str	r3, [sp, #4]
 8011c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c3e:	9300      	str	r3, [sp, #0]
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	68b9      	ldr	r1, [r7, #8]
 8011c46:	68f8      	ldr	r0, [r7, #12]
 8011c48:	f000 f855 	bl	8011cf6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8011c4c:	69f8      	ldr	r0, [r7, #28]
 8011c4e:	f000 f8d5 	bl	8011dfc <prvAddNewTaskToReadyList>
 8011c52:	e001      	b.n	8011c58 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8011c54:	2300      	movs	r3, #0
 8011c56:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8011c58:	69bb      	ldr	r3, [r7, #24]
    }
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3720      	adds	r7, #32
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}

08011c62 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8011c62:	b580      	push	{r7, lr}
 8011c64:	b08c      	sub	sp, #48	@ 0x30
 8011c66:	af04      	add	r7, sp, #16
 8011c68:	60f8      	str	r0, [r7, #12]
 8011c6a:	60b9      	str	r1, [r7, #8]
 8011c6c:	603b      	str	r3, [r7, #0]
 8011c6e:	4613      	mov	r3, r2
 8011c70:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011c72:	88fb      	ldrh	r3, [r7, #6]
 8011c74:	009b      	lsls	r3, r3, #2
 8011c76:	4618      	mov	r0, r3
 8011c78:	f001 fafe 	bl	8013278 <pvPortMalloc>
 8011c7c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d013      	beq.n	8011cac <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011c84:	205c      	movs	r0, #92	@ 0x5c
 8011c86:	f001 faf7 	bl	8013278 <pvPortMalloc>
 8011c8a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8011c8c:	69fb      	ldr	r3, [r7, #28]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d008      	beq.n	8011ca4 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8011c92:	225c      	movs	r2, #92	@ 0x5c
 8011c94:	2100      	movs	r1, #0
 8011c96:	69f8      	ldr	r0, [r7, #28]
 8011c98:	f004 fdb5 	bl	8016806 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	697a      	ldr	r2, [r7, #20]
 8011ca0:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ca2:	e005      	b.n	8011cb0 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8011ca4:	6978      	ldr	r0, [r7, #20]
 8011ca6:	f001 fb93 	bl	80133d0 <vPortFree>
 8011caa:	e001      	b.n	8011cb0 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8011cac:	2300      	movs	r3, #0
 8011cae:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d017      	beq.n	8011ce6 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011cbe:	88fa      	ldrh	r2, [r7, #6]
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	9303      	str	r3, [sp, #12]
 8011cc4:	69fb      	ldr	r3, [r7, #28]
 8011cc6:	9302      	str	r3, [sp, #8]
 8011cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cca:	9301      	str	r3, [sp, #4]
 8011ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cce:	9300      	str	r3, [sp, #0]
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	68b9      	ldr	r1, [r7, #8]
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f000 f80e 	bl	8011cf6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8011cda:	69f8      	ldr	r0, [r7, #28]
 8011cdc:	f000 f88e 	bl	8011dfc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	61bb      	str	r3, [r7, #24]
 8011ce4:	e002      	b.n	8011cec <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8011cea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8011cec:	69bb      	ldr	r3, [r7, #24]
    }
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3720      	adds	r7, #32
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}

08011cf6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8011cf6:	b580      	push	{r7, lr}
 8011cf8:	b086      	sub	sp, #24
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	60f8      	str	r0, [r7, #12]
 8011cfe:	60b9      	str	r1, [r7, #8]
 8011d00:	607a      	str	r2, [r7, #4]
 8011d02:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d06:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	21a5      	movs	r1, #165	@ 0xa5
 8011d10:	f004 fd79 	bl	8016806 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011d1e:	3b01      	subs	r3, #1
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	4413      	add	r3, r2
 8011d24:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	f023 0307 	bic.w	r3, r3, #7
 8011d2c:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	f003 0307 	and.w	r3, r3, #7
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d003      	beq.n	8011d40 <prvInitialiseNewTask+0x4a>
 8011d38:	f7ff fa56 	bl	80111e8 <ulSetInterruptMask>
 8011d3c:	bf00      	nop
 8011d3e:	e7fd      	b.n	8011d3c <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d01e      	beq.n	8011d84 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d46:	2300      	movs	r3, #0
 8011d48:	617b      	str	r3, [r7, #20]
 8011d4a:	e012      	b.n	8011d72 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	4413      	add	r3, r2
 8011d52:	7819      	ldrb	r1, [r3, #0]
 8011d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	4413      	add	r3, r2
 8011d5a:	3334      	adds	r3, #52	@ 0x34
 8011d5c:	460a      	mov	r2, r1
 8011d5e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	4413      	add	r3, r2
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d006      	beq.n	8011d7a <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	3301      	adds	r3, #1
 8011d70:	617b      	str	r3, [r7, #20]
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	2b0f      	cmp	r3, #15
 8011d76:	d9e9      	bls.n	8011d4c <prvInitialiseNewTask+0x56>
 8011d78:	e000      	b.n	8011d7c <prvInitialiseNewTask+0x86>
            {
                break;
 8011d7a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	2b37      	cmp	r3, #55	@ 0x37
 8011d88:	d903      	bls.n	8011d92 <prvInitialiseNewTask+0x9c>
 8011d8a:	f7ff fa2d 	bl	80111e8 <ulSetInterruptMask>
 8011d8e:	bf00      	nop
 8011d90:	e7fd      	b.n	8011d8e <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011d92:	6a3b      	ldr	r3, [r7, #32]
 8011d94:	2b37      	cmp	r3, #55	@ 0x37
 8011d96:	d901      	bls.n	8011d9c <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011d98:	2337      	movs	r3, #55	@ 0x37
 8011d9a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8011d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d9e:	6a3a      	ldr	r2, [r7, #32]
 8011da0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8011da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011da4:	6a3a      	ldr	r2, [r7, #32]
 8011da6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011daa:	3304      	adds	r3, #4
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7ff f819 	bl	8010de4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db4:	3318      	adds	r3, #24
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7ff f814 	bl	8010de4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dc0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dc2:	6a3b      	ldr	r3, [r7, #32]
 8011dc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dd0:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8011dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	6938      	ldr	r0, [r7, #16]
 8011ddc:	f7ff f922 	bl	8011024 <pxPortInitialiseStack>
 8011de0:	4602      	mov	r2, r0
 8011de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8011de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d002      	beq.n	8011df2 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011df0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8011df2:	bf00      	nop
 8011df4:	3718      	adds	r7, #24
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
	...

08011dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8011e04:	f7ff f8b0 	bl	8010f68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8011e08:	4b3e      	ldr	r3, [pc, #248]	@ (8011f04 <prvAddNewTaskToReadyList+0x108>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8011f04 <prvAddNewTaskToReadyList+0x108>)
 8011e10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8011e12:	4b3d      	ldr	r3, [pc, #244]	@ (8011f08 <prvAddNewTaskToReadyList+0x10c>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d109      	bne.n	8011e2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8011e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8011f08 <prvAddNewTaskToReadyList+0x10c>)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011e20:	4b38      	ldr	r3, [pc, #224]	@ (8011f04 <prvAddNewTaskToReadyList+0x108>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d110      	bne.n	8011e4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8011e28:	f000 fd1e 	bl	8012868 <prvInitialiseTaskLists>
 8011e2c:	e00d      	b.n	8011e4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8011e2e:	4b37      	ldr	r3, [pc, #220]	@ (8011f0c <prvAddNewTaskToReadyList+0x110>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d109      	bne.n	8011e4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011e36:	4b34      	ldr	r3, [pc, #208]	@ (8011f08 <prvAddNewTaskToReadyList+0x10c>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d802      	bhi.n	8011e4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8011e44:	4a30      	ldr	r2, [pc, #192]	@ (8011f08 <prvAddNewTaskToReadyList+0x10c>)
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8011e4a:	4b31      	ldr	r3, [pc, #196]	@ (8011f10 <prvAddNewTaskToReadyList+0x114>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	4a2f      	ldr	r2, [pc, #188]	@ (8011f10 <prvAddNewTaskToReadyList+0x114>)
 8011e52:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011e54:	4b2e      	ldr	r3, [pc, #184]	@ (8011f10 <prvAddNewTaskToReadyList+0x114>)
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e60:	4b2c      	ldr	r3, [pc, #176]	@ (8011f14 <prvAddNewTaskToReadyList+0x118>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d903      	bls.n	8011e70 <prvAddNewTaskToReadyList+0x74>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e6c:	4a29      	ldr	r2, [pc, #164]	@ (8011f14 <prvAddNewTaskToReadyList+0x118>)
 8011e6e:	6013      	str	r3, [r2, #0]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e74:	4928      	ldr	r1, [pc, #160]	@ (8011f18 <prvAddNewTaskToReadyList+0x11c>)
 8011e76:	4613      	mov	r3, r2
 8011e78:	009b      	lsls	r3, r3, #2
 8011e7a:	4413      	add	r3, r2
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	440b      	add	r3, r1
 8011e80:	3304      	adds	r3, #4
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	60fb      	str	r3, [r7, #12]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	609a      	str	r2, [r3, #8]
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	689a      	ldr	r2, [r3, #8]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	60da      	str	r2, [r3, #12]
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	3204      	adds	r2, #4
 8011e9c:	605a      	str	r2, [r3, #4]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	1d1a      	adds	r2, r3, #4
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	609a      	str	r2, [r3, #8]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011eaa:	4613      	mov	r3, r2
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	4413      	add	r3, r2
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	4a19      	ldr	r2, [pc, #100]	@ (8011f18 <prvAddNewTaskToReadyList+0x11c>)
 8011eb4:	441a      	add	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	615a      	str	r2, [r3, #20]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ebe:	4916      	ldr	r1, [pc, #88]	@ (8011f18 <prvAddNewTaskToReadyList+0x11c>)
 8011ec0:	4613      	mov	r3, r2
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	4413      	add	r3, r2
 8011ec6:	009b      	lsls	r3, r3, #2
 8011ec8:	440b      	add	r3, r1
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	1c59      	adds	r1, r3, #1
 8011ece:	4812      	ldr	r0, [pc, #72]	@ (8011f18 <prvAddNewTaskToReadyList+0x11c>)
 8011ed0:	4613      	mov	r3, r2
 8011ed2:	009b      	lsls	r3, r3, #2
 8011ed4:	4413      	add	r3, r2
 8011ed6:	009b      	lsls	r3, r3, #2
 8011ed8:	4403      	add	r3, r0
 8011eda:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8011edc:	f7ff f856 	bl	8010f8c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8011ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8011f0c <prvAddNewTaskToReadyList+0x110>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d008      	beq.n	8011efa <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011ee8:	4b07      	ldr	r3, [pc, #28]	@ (8011f08 <prvAddNewTaskToReadyList+0x10c>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d201      	bcs.n	8011efa <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8011ef6:	f7ff f825 	bl	8010f44 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8011efa:	bf00      	nop
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop
 8011f04:	20026b20 	.word	0x20026b20
 8011f08:	2002664c 	.word	0x2002664c
 8011f0c:	20026b2c 	.word	0x20026b2c
 8011f10:	20026b3c 	.word	0x20026b3c
 8011f14:	20026b28 	.word	0x20026b28
 8011f18:	20026650 	.word	0x20026650

08011f1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8011f24:	2300      	movs	r3, #0
 8011f26:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d010      	beq.n	8011f50 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8011f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011f64 <vTaskDelay+0x48>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d003      	beq.n	8011f3e <vTaskDelay+0x22>
 8011f36:	f7ff f957 	bl	80111e8 <ulSetInterruptMask>
 8011f3a:	bf00      	nop
 8011f3c:	e7fd      	b.n	8011f3a <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8011f3e:	f000 f86f 	bl	8012020 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011f42:	2100      	movs	r1, #0
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f000 fde7 	bl	8012b18 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8011f4a:	f000 f877 	bl	801203c <xTaskResumeAll>
 8011f4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d101      	bne.n	8011f5a <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8011f56:	f7fe fff5 	bl	8010f44 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8011f5a:	bf00      	nop
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	20026b48 	.word	0x20026b48

08011f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b088      	sub	sp, #32
 8011f6c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8011f72:	2300      	movs	r3, #0
 8011f74:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011f76:	463a      	mov	r2, r7
 8011f78:	1d39      	adds	r1, r7, #4
 8011f7a:	f107 0308 	add.w	r3, r7, #8
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fe fedc 	bl	8010d3c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8011f84:	6839      	ldr	r1, [r7, #0]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	9202      	str	r2, [sp, #8]
 8011f8c:	9301      	str	r3, [sp, #4]
 8011f8e:	2300      	movs	r3, #0
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	2300      	movs	r3, #0
 8011f94:	460a      	mov	r2, r1
 8011f96:	491b      	ldr	r1, [pc, #108]	@ (8012004 <vTaskStartScheduler+0x9c>)
 8011f98:	481b      	ldr	r0, [pc, #108]	@ (8012008 <vTaskStartScheduler+0xa0>)
 8011f9a:	f7ff fe15 	bl	8011bc8 <xTaskCreateStatic>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	4a1a      	ldr	r2, [pc, #104]	@ (801200c <vTaskStartScheduler+0xa4>)
 8011fa2:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8011fa4:	4b19      	ldr	r3, [pc, #100]	@ (801200c <vTaskStartScheduler+0xa4>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d002      	beq.n	8011fb2 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8011fac:	2301      	movs	r3, #1
 8011fae:	60fb      	str	r3, [r7, #12]
 8011fb0:	e001      	b.n	8011fb6 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2b01      	cmp	r3, #1
 8011fba:	d102      	bne.n	8011fc2 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8011fbc:	f000 fe1a 	bl	8012bf4 <xTimerCreateTimerTask>
 8011fc0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d10e      	bne.n	8011fe6 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8011fc8:	f7ff f90e 	bl	80111e8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8011fcc:	4b10      	ldr	r3, [pc, #64]	@ (8012010 <vTaskStartScheduler+0xa8>)
 8011fce:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8011fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8012014 <vTaskStartScheduler+0xac>)
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011fda:	4b0f      	ldr	r3, [pc, #60]	@ (8012018 <vTaskStartScheduler+0xb0>)
 8011fdc:	2200      	movs	r2, #0
 8011fde:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8011fe0:	f7ff f8aa 	bl	8011138 <xPortStartScheduler>
 8011fe4:	e007      	b.n	8011ff6 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fec:	d103      	bne.n	8011ff6 <vTaskStartScheduler+0x8e>
 8011fee:	f7ff f8fb 	bl	80111e8 <ulSetInterruptMask>
 8011ff2:	bf00      	nop
 8011ff4:	e7fd      	b.n	8011ff2 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8011ff6:	4b09      	ldr	r3, [pc, #36]	@ (801201c <vTaskStartScheduler+0xb4>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
}
 8011ffa:	bf00      	nop
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	08018b78 	.word	0x08018b78
 8012008:	08012849 	.word	0x08012849
 801200c:	20026b44 	.word	0x20026b44
 8012010:	20026b40 	.word	0x20026b40
 8012014:	20026b2c 	.word	0x20026b2c
 8012018:	20026b24 	.word	0x20026b24
 801201c:	20000034 	.word	0x20000034

08012020 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012020:	b480      	push	{r7}
 8012022:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8012024:	4b04      	ldr	r3, [pc, #16]	@ (8012038 <vTaskSuspendAll+0x18>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	3301      	adds	r3, #1
 801202a:	4a03      	ldr	r2, [pc, #12]	@ (8012038 <vTaskSuspendAll+0x18>)
 801202c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 801202e:	bf00      	nop
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr
 8012038:	20026b48 	.word	0x20026b48

0801203c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8012042:	2300      	movs	r3, #0
 8012044:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8012046:	2300      	movs	r3, #0
 8012048:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 801204a:	4b6b      	ldr	r3, [pc, #428]	@ (80121f8 <xTaskResumeAll+0x1bc>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d103      	bne.n	801205a <xTaskResumeAll+0x1e>
 8012052:	f7ff f8c9 	bl	80111e8 <ulSetInterruptMask>
 8012056:	bf00      	nop
 8012058:	e7fd      	b.n	8012056 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 801205a:	f7fe ff85 	bl	8010f68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 801205e:	4b66      	ldr	r3, [pc, #408]	@ (80121f8 <xTaskResumeAll+0x1bc>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	3b01      	subs	r3, #1
 8012064:	4a64      	ldr	r2, [pc, #400]	@ (80121f8 <xTaskResumeAll+0x1bc>)
 8012066:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012068:	4b63      	ldr	r3, [pc, #396]	@ (80121f8 <xTaskResumeAll+0x1bc>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	f040 80bb 	bne.w	80121e8 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012072:	4b62      	ldr	r3, [pc, #392]	@ (80121fc <xTaskResumeAll+0x1c0>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	f000 80b6 	beq.w	80121e8 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801207c:	e08b      	b.n	8012196 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801207e:	4b60      	ldr	r3, [pc, #384]	@ (8012200 <xTaskResumeAll+0x1c4>)
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	68db      	ldr	r3, [r3, #12]
 8012084:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801208a:	60bb      	str	r3, [r7, #8]
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	69db      	ldr	r3, [r3, #28]
 8012090:	697a      	ldr	r2, [r7, #20]
 8012092:	6a12      	ldr	r2, [r2, #32]
 8012094:	609a      	str	r2, [r3, #8]
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	6a1b      	ldr	r3, [r3, #32]
 801209a:	697a      	ldr	r2, [r7, #20]
 801209c:	69d2      	ldr	r2, [r2, #28]
 801209e:	605a      	str	r2, [r3, #4]
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	685a      	ldr	r2, [r3, #4]
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	3318      	adds	r3, #24
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d103      	bne.n	80120b4 <xTaskResumeAll+0x78>
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	6a1a      	ldr	r2, [r3, #32]
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	605a      	str	r2, [r3, #4]
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	2200      	movs	r2, #0
 80120b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	1e5a      	subs	r2, r3, #1
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	695b      	ldr	r3, [r3, #20]
 80120c8:	607b      	str	r3, [r7, #4]
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	689b      	ldr	r3, [r3, #8]
 80120ce:	697a      	ldr	r2, [r7, #20]
 80120d0:	68d2      	ldr	r2, [r2, #12]
 80120d2:	609a      	str	r2, [r3, #8]
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	697a      	ldr	r2, [r7, #20]
 80120da:	6892      	ldr	r2, [r2, #8]
 80120dc:	605a      	str	r2, [r3, #4]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	685a      	ldr	r2, [r3, #4]
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	3304      	adds	r3, #4
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d103      	bne.n	80120f2 <xTaskResumeAll+0xb6>
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	68da      	ldr	r2, [r3, #12]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	605a      	str	r2, [r3, #4]
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	2200      	movs	r2, #0
 80120f6:	615a      	str	r2, [r3, #20]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	1e5a      	subs	r2, r3, #1
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012106:	4b3f      	ldr	r3, [pc, #252]	@ (8012204 <xTaskResumeAll+0x1c8>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	429a      	cmp	r2, r3
 801210c:	d903      	bls.n	8012116 <xTaskResumeAll+0xda>
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012112:	4a3c      	ldr	r2, [pc, #240]	@ (8012204 <xTaskResumeAll+0x1c8>)
 8012114:	6013      	str	r3, [r2, #0]
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801211a:	493b      	ldr	r1, [pc, #236]	@ (8012208 <xTaskResumeAll+0x1cc>)
 801211c:	4613      	mov	r3, r2
 801211e:	009b      	lsls	r3, r3, #2
 8012120:	4413      	add	r3, r2
 8012122:	009b      	lsls	r3, r3, #2
 8012124:	440b      	add	r3, r1
 8012126:	3304      	adds	r3, #4
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	603b      	str	r3, [r7, #0]
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	683a      	ldr	r2, [r7, #0]
 8012130:	609a      	str	r2, [r3, #8]
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	689a      	ldr	r2, [r3, #8]
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	60da      	str	r2, [r3, #12]
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	697a      	ldr	r2, [r7, #20]
 8012140:	3204      	adds	r2, #4
 8012142:	605a      	str	r2, [r3, #4]
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	1d1a      	adds	r2, r3, #4
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	609a      	str	r2, [r3, #8]
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012150:	4613      	mov	r3, r2
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	4413      	add	r3, r2
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	4a2b      	ldr	r2, [pc, #172]	@ (8012208 <xTaskResumeAll+0x1cc>)
 801215a:	441a      	add	r2, r3
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	615a      	str	r2, [r3, #20]
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012164:	4928      	ldr	r1, [pc, #160]	@ (8012208 <xTaskResumeAll+0x1cc>)
 8012166:	4613      	mov	r3, r2
 8012168:	009b      	lsls	r3, r3, #2
 801216a:	4413      	add	r3, r2
 801216c:	009b      	lsls	r3, r3, #2
 801216e:	440b      	add	r3, r1
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	1c59      	adds	r1, r3, #1
 8012174:	4824      	ldr	r0, [pc, #144]	@ (8012208 <xTaskResumeAll+0x1cc>)
 8012176:	4613      	mov	r3, r2
 8012178:	009b      	lsls	r3, r3, #2
 801217a:	4413      	add	r3, r2
 801217c:	009b      	lsls	r3, r3, #2
 801217e:	4403      	add	r3, r0
 8012180:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012186:	4b21      	ldr	r3, [pc, #132]	@ (801220c <xTaskResumeAll+0x1d0>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801218c:	429a      	cmp	r2, r3
 801218e:	d302      	bcc.n	8012196 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8012190:	4b1f      	ldr	r3, [pc, #124]	@ (8012210 <xTaskResumeAll+0x1d4>)
 8012192:	2201      	movs	r2, #1
 8012194:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012196:	4b1a      	ldr	r3, [pc, #104]	@ (8012200 <xTaskResumeAll+0x1c4>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	2b00      	cmp	r3, #0
 801219c:	f47f af6f 	bne.w	801207e <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d001      	beq.n	80121aa <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80121a6:	f000 fbf5 	bl	8012994 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80121aa:	4b1a      	ldr	r3, [pc, #104]	@ (8012214 <xTaskResumeAll+0x1d8>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d010      	beq.n	80121d8 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80121b6:	f000 f83f 	bl	8012238 <xTaskIncrementTick>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d002      	beq.n	80121c6 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 80121c0:	4b13      	ldr	r3, [pc, #76]	@ (8012210 <xTaskResumeAll+0x1d4>)
 80121c2:	2201      	movs	r2, #1
 80121c4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	3b01      	subs	r3, #1
 80121ca:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d1f1      	bne.n	80121b6 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 80121d2:	4b10      	ldr	r3, [pc, #64]	@ (8012214 <xTaskResumeAll+0x1d8>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80121d8:	4b0d      	ldr	r3, [pc, #52]	@ (8012210 <xTaskResumeAll+0x1d4>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d003      	beq.n	80121e8 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80121e0:	2301      	movs	r3, #1
 80121e2:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80121e4:	f7fe feae 	bl	8010f44 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80121e8:	f7fe fed0 	bl	8010f8c <vPortExitCritical>

    return xAlreadyYielded;
 80121ec:	693b      	ldr	r3, [r7, #16]
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3718      	adds	r7, #24
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	20026b48 	.word	0x20026b48
 80121fc:	20026b20 	.word	0x20026b20
 8012200:	20026ae0 	.word	0x20026ae0
 8012204:	20026b28 	.word	0x20026b28
 8012208:	20026650 	.word	0x20026650
 801220c:	2002664c 	.word	0x2002664c
 8012210:	20026b34 	.word	0x20026b34
 8012214:	20026b30 	.word	0x20026b30

08012218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012218:	b480      	push	{r7}
 801221a:	b083      	sub	sp, #12
 801221c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 801221e:	4b05      	ldr	r3, [pc, #20]	@ (8012234 <xTaskGetTickCount+0x1c>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8012224:	687b      	ldr	r3, [r7, #4]
}
 8012226:	4618      	mov	r0, r3
 8012228:	370c      	adds	r7, #12
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	20026b24 	.word	0x20026b24

08012238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b088      	sub	sp, #32
 801223c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 801223e:	2300      	movs	r3, #0
 8012240:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012242:	4b7a      	ldr	r3, [pc, #488]	@ (801242c <xTaskIncrementTick+0x1f4>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	f040 80e6 	bne.w	8012418 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801224c:	4b78      	ldr	r3, [pc, #480]	@ (8012430 <xTaskIncrementTick+0x1f8>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	3301      	adds	r3, #1
 8012252:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8012254:	4a76      	ldr	r2, [pc, #472]	@ (8012430 <xTaskIncrementTick+0x1f8>)
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801225a:	69bb      	ldr	r3, [r7, #24]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d119      	bne.n	8012294 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8012260:	4b74      	ldr	r3, [pc, #464]	@ (8012434 <xTaskIncrementTick+0x1fc>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d003      	beq.n	8012272 <xTaskIncrementTick+0x3a>
 801226a:	f7fe ffbd 	bl	80111e8 <ulSetInterruptMask>
 801226e:	bf00      	nop
 8012270:	e7fd      	b.n	801226e <xTaskIncrementTick+0x36>
 8012272:	4b70      	ldr	r3, [pc, #448]	@ (8012434 <xTaskIncrementTick+0x1fc>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	617b      	str	r3, [r7, #20]
 8012278:	4b6f      	ldr	r3, [pc, #444]	@ (8012438 <xTaskIncrementTick+0x200>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	4a6d      	ldr	r2, [pc, #436]	@ (8012434 <xTaskIncrementTick+0x1fc>)
 801227e:	6013      	str	r3, [r2, #0]
 8012280:	4a6d      	ldr	r2, [pc, #436]	@ (8012438 <xTaskIncrementTick+0x200>)
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	6013      	str	r3, [r2, #0]
 8012286:	4b6d      	ldr	r3, [pc, #436]	@ (801243c <xTaskIncrementTick+0x204>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	3301      	adds	r3, #1
 801228c:	4a6b      	ldr	r2, [pc, #428]	@ (801243c <xTaskIncrementTick+0x204>)
 801228e:	6013      	str	r3, [r2, #0]
 8012290:	f000 fb80 	bl	8012994 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8012294:	4b6a      	ldr	r3, [pc, #424]	@ (8012440 <xTaskIncrementTick+0x208>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	69ba      	ldr	r2, [r7, #24]
 801229a:	429a      	cmp	r2, r3
 801229c:	f0c0 80a7 	bcc.w	80123ee <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80122a0:	4b64      	ldr	r3, [pc, #400]	@ (8012434 <xTaskIncrementTick+0x1fc>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d104      	bne.n	80122b4 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122aa:	4b65      	ldr	r3, [pc, #404]	@ (8012440 <xTaskIncrementTick+0x208>)
 80122ac:	f04f 32ff 	mov.w	r2, #4294967295
 80122b0:	601a      	str	r2, [r3, #0]
                    break;
 80122b2:	e09c      	b.n	80123ee <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122b4:	4b5f      	ldr	r3, [pc, #380]	@ (8012434 <xTaskIncrementTick+0x1fc>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	68db      	ldr	r3, [r3, #12]
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80122c4:	69ba      	ldr	r2, [r7, #24]
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d203      	bcs.n	80122d4 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80122cc:	4a5c      	ldr	r2, [pc, #368]	@ (8012440 <xTaskIncrementTick+0x208>)
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80122d2:	e08c      	b.n	80123ee <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	695b      	ldr	r3, [r3, #20]
 80122d8:	60bb      	str	r3, [r7, #8]
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	689b      	ldr	r3, [r3, #8]
 80122de:	693a      	ldr	r2, [r7, #16]
 80122e0:	68d2      	ldr	r2, [r2, #12]
 80122e2:	609a      	str	r2, [r3, #8]
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	68db      	ldr	r3, [r3, #12]
 80122e8:	693a      	ldr	r2, [r7, #16]
 80122ea:	6892      	ldr	r2, [r2, #8]
 80122ec:	605a      	str	r2, [r3, #4]
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	685a      	ldr	r2, [r3, #4]
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	3304      	adds	r3, #4
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d103      	bne.n	8012302 <xTaskIncrementTick+0xca>
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	68da      	ldr	r2, [r3, #12]
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	605a      	str	r2, [r3, #4]
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	2200      	movs	r2, #0
 8012306:	615a      	str	r2, [r3, #20]
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	1e5a      	subs	r2, r3, #1
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012316:	2b00      	cmp	r3, #0
 8012318:	d01e      	beq.n	8012358 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801231e:	607b      	str	r3, [r7, #4]
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	69db      	ldr	r3, [r3, #28]
 8012324:	693a      	ldr	r2, [r7, #16]
 8012326:	6a12      	ldr	r2, [r2, #32]
 8012328:	609a      	str	r2, [r3, #8]
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	6a1b      	ldr	r3, [r3, #32]
 801232e:	693a      	ldr	r2, [r7, #16]
 8012330:	69d2      	ldr	r2, [r2, #28]
 8012332:	605a      	str	r2, [r3, #4]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	685a      	ldr	r2, [r3, #4]
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	3318      	adds	r3, #24
 801233c:	429a      	cmp	r2, r3
 801233e:	d103      	bne.n	8012348 <xTaskIncrementTick+0x110>
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	6a1a      	ldr	r2, [r3, #32]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	605a      	str	r2, [r3, #4]
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	2200      	movs	r2, #0
 801234c:	629a      	str	r2, [r3, #40]	@ 0x28
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	1e5a      	subs	r2, r3, #1
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801235c:	4b39      	ldr	r3, [pc, #228]	@ (8012444 <xTaskIncrementTick+0x20c>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	429a      	cmp	r2, r3
 8012362:	d903      	bls.n	801236c <xTaskIncrementTick+0x134>
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012368:	4a36      	ldr	r2, [pc, #216]	@ (8012444 <xTaskIncrementTick+0x20c>)
 801236a:	6013      	str	r3, [r2, #0]
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012370:	4935      	ldr	r1, [pc, #212]	@ (8012448 <xTaskIncrementTick+0x210>)
 8012372:	4613      	mov	r3, r2
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	4413      	add	r3, r2
 8012378:	009b      	lsls	r3, r3, #2
 801237a:	440b      	add	r3, r1
 801237c:	3304      	adds	r3, #4
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	603b      	str	r3, [r7, #0]
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	683a      	ldr	r2, [r7, #0]
 8012386:	609a      	str	r2, [r3, #8]
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	689a      	ldr	r2, [r3, #8]
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	60da      	str	r2, [r3, #12]
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	689b      	ldr	r3, [r3, #8]
 8012394:	693a      	ldr	r2, [r7, #16]
 8012396:	3204      	adds	r2, #4
 8012398:	605a      	str	r2, [r3, #4]
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	1d1a      	adds	r2, r3, #4
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	609a      	str	r2, [r3, #8]
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123a6:	4613      	mov	r3, r2
 80123a8:	009b      	lsls	r3, r3, #2
 80123aa:	4413      	add	r3, r2
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4a26      	ldr	r2, [pc, #152]	@ (8012448 <xTaskIncrementTick+0x210>)
 80123b0:	441a      	add	r2, r3
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	615a      	str	r2, [r3, #20]
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123ba:	4923      	ldr	r1, [pc, #140]	@ (8012448 <xTaskIncrementTick+0x210>)
 80123bc:	4613      	mov	r3, r2
 80123be:	009b      	lsls	r3, r3, #2
 80123c0:	4413      	add	r3, r2
 80123c2:	009b      	lsls	r3, r3, #2
 80123c4:	440b      	add	r3, r1
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	1c59      	adds	r1, r3, #1
 80123ca:	481f      	ldr	r0, [pc, #124]	@ (8012448 <xTaskIncrementTick+0x210>)
 80123cc:	4613      	mov	r3, r2
 80123ce:	009b      	lsls	r3, r3, #2
 80123d0:	4413      	add	r3, r2
 80123d2:	009b      	lsls	r3, r3, #2
 80123d4:	4403      	add	r3, r0
 80123d6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123dc:	4b1b      	ldr	r3, [pc, #108]	@ (801244c <xTaskIncrementTick+0x214>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123e2:	429a      	cmp	r2, r3
 80123e4:	f67f af5c 	bls.w	80122a0 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 80123e8:	2301      	movs	r3, #1
 80123ea:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123ec:	e758      	b.n	80122a0 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80123ee:	4b17      	ldr	r3, [pc, #92]	@ (801244c <xTaskIncrementTick+0x214>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123f4:	4914      	ldr	r1, [pc, #80]	@ (8012448 <xTaskIncrementTick+0x210>)
 80123f6:	4613      	mov	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	4413      	add	r3, r2
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	440b      	add	r3, r1
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2b01      	cmp	r3, #1
 8012404:	d901      	bls.n	801240a <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8012406:	2301      	movs	r3, #1
 8012408:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 801240a:	4b11      	ldr	r3, [pc, #68]	@ (8012450 <xTaskIncrementTick+0x218>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d007      	beq.n	8012422 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8012412:	2301      	movs	r3, #1
 8012414:	61fb      	str	r3, [r7, #28]
 8012416:	e004      	b.n	8012422 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8012418:	4b0e      	ldr	r3, [pc, #56]	@ (8012454 <xTaskIncrementTick+0x21c>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	3301      	adds	r3, #1
 801241e:	4a0d      	ldr	r2, [pc, #52]	@ (8012454 <xTaskIncrementTick+0x21c>)
 8012420:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8012422:	69fb      	ldr	r3, [r7, #28]
}
 8012424:	4618      	mov	r0, r3
 8012426:	3720      	adds	r7, #32
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	20026b48 	.word	0x20026b48
 8012430:	20026b24 	.word	0x20026b24
 8012434:	20026ad8 	.word	0x20026ad8
 8012438:	20026adc 	.word	0x20026adc
 801243c:	20026b38 	.word	0x20026b38
 8012440:	20026b40 	.word	0x20026b40
 8012444:	20026b28 	.word	0x20026b28
 8012448:	20026650 	.word	0x20026650
 801244c:	2002664c 	.word	0x2002664c
 8012450:	20026b34 	.word	0x20026b34
 8012454:	20026b30 	.word	0x20026b30

08012458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801245e:	4b23      	ldr	r3, [pc, #140]	@ (80124ec <vTaskSwitchContext+0x94>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d003      	beq.n	801246e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8012466:	4b22      	ldr	r3, [pc, #136]	@ (80124f0 <vTaskSwitchContext+0x98>)
 8012468:	2201      	movs	r2, #1
 801246a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 801246c:	e03a      	b.n	80124e4 <vTaskSwitchContext+0x8c>
        xYieldPending = pdFALSE;
 801246e:	4b20      	ldr	r3, [pc, #128]	@ (80124f0 <vTaskSwitchContext+0x98>)
 8012470:	2200      	movs	r2, #0
 8012472:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012474:	4b1f      	ldr	r3, [pc, #124]	@ (80124f4 <vTaskSwitchContext+0x9c>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	607b      	str	r3, [r7, #4]
 801247a:	e009      	b.n	8012490 <vTaskSwitchContext+0x38>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d103      	bne.n	801248a <vTaskSwitchContext+0x32>
 8012482:	f7fe feb1 	bl	80111e8 <ulSetInterruptMask>
 8012486:	bf00      	nop
 8012488:	e7fd      	b.n	8012486 <vTaskSwitchContext+0x2e>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	3b01      	subs	r3, #1
 801248e:	607b      	str	r3, [r7, #4]
 8012490:	4919      	ldr	r1, [pc, #100]	@ (80124f8 <vTaskSwitchContext+0xa0>)
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	4613      	mov	r3, r2
 8012496:	009b      	lsls	r3, r3, #2
 8012498:	4413      	add	r3, r2
 801249a:	009b      	lsls	r3, r3, #2
 801249c:	440b      	add	r3, r1
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d0eb      	beq.n	801247c <vTaskSwitchContext+0x24>
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	4613      	mov	r3, r2
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	4413      	add	r3, r2
 80124ac:	009b      	lsls	r3, r3, #2
 80124ae:	4a12      	ldr	r2, [pc, #72]	@ (80124f8 <vTaskSwitchContext+0xa0>)
 80124b0:	4413      	add	r3, r2
 80124b2:	603b      	str	r3, [r7, #0]
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	685a      	ldr	r2, [r3, #4]
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	605a      	str	r2, [r3, #4]
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	685a      	ldr	r2, [r3, #4]
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	3308      	adds	r3, #8
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d104      	bne.n	80124d4 <vTaskSwitchContext+0x7c>
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	685b      	ldr	r3, [r3, #4]
 80124ce:	685a      	ldr	r2, [r3, #4]
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	605a      	str	r2, [r3, #4]
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	4a08      	ldr	r2, [pc, #32]	@ (80124fc <vTaskSwitchContext+0xa4>)
 80124dc:	6013      	str	r3, [r2, #0]
 80124de:	4a05      	ldr	r2, [pc, #20]	@ (80124f4 <vTaskSwitchContext+0x9c>)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6013      	str	r3, [r2, #0]
}
 80124e4:	bf00      	nop
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	20026b48 	.word	0x20026b48
 80124f0:	20026b34 	.word	0x20026b34
 80124f4:	20026b28 	.word	0x20026b28
 80124f8:	20026650 	.word	0x20026650
 80124fc:	2002664c 	.word	0x2002664c

08012500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d103      	bne.n	8012518 <vTaskPlaceOnEventList+0x18>
 8012510:	f7fe fe6a 	bl	80111e8 <ulSetInterruptMask>
 8012514:	bf00      	nop
 8012516:	e7fd      	b.n	8012514 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012518:	4b07      	ldr	r3, [pc, #28]	@ (8012538 <vTaskPlaceOnEventList+0x38>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	3318      	adds	r3, #24
 801251e:	4619      	mov	r1, r3
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f7fe fc6c 	bl	8010dfe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012526:	2101      	movs	r1, #1
 8012528:	6838      	ldr	r0, [r7, #0]
 801252a:	f000 faf5 	bl	8012b18 <prvAddCurrentTaskToDelayedList>
}
 801252e:	bf00      	nop
 8012530:	3708      	adds	r7, #8
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	2002664c 	.word	0x2002664c

0801253c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 801253c:	b580      	push	{r7, lr}
 801253e:	b086      	sub	sp, #24
 8012540:	af00      	add	r7, sp, #0
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	60b9      	str	r1, [r7, #8]
 8012546:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d103      	bne.n	8012556 <vTaskPlaceOnEventListRestricted+0x1a>
 801254e:	f7fe fe4b 	bl	80111e8 <ulSetInterruptMask>
 8012552:	bf00      	nop
 8012554:	e7fd      	b.n	8012552 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	617b      	str	r3, [r7, #20]
 801255c:	4b15      	ldr	r3, [pc, #84]	@ (80125b4 <vTaskPlaceOnEventListRestricted+0x78>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	697a      	ldr	r2, [r7, #20]
 8012562:	61da      	str	r2, [r3, #28]
 8012564:	4b13      	ldr	r3, [pc, #76]	@ (80125b4 <vTaskPlaceOnEventListRestricted+0x78>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	697a      	ldr	r2, [r7, #20]
 801256a:	6892      	ldr	r2, [r2, #8]
 801256c:	621a      	str	r2, [r3, #32]
 801256e:	4b11      	ldr	r3, [pc, #68]	@ (80125b4 <vTaskPlaceOnEventListRestricted+0x78>)
 8012570:	681a      	ldr	r2, [r3, #0]
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	689b      	ldr	r3, [r3, #8]
 8012576:	3218      	adds	r2, #24
 8012578:	605a      	str	r2, [r3, #4]
 801257a:	4b0e      	ldr	r3, [pc, #56]	@ (80125b4 <vTaskPlaceOnEventListRestricted+0x78>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f103 0218 	add.w	r2, r3, #24
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	609a      	str	r2, [r3, #8]
 8012586:	4b0b      	ldr	r3, [pc, #44]	@ (80125b4 <vTaskPlaceOnEventListRestricted+0x78>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	68fa      	ldr	r2, [r7, #12]
 801258c:	629a      	str	r2, [r3, #40]	@ 0x28
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	1c5a      	adds	r2, r3, #1
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d002      	beq.n	80125a4 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 801259e:	f04f 33ff 	mov.w	r3, #4294967295
 80125a2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80125a4:	6879      	ldr	r1, [r7, #4]
 80125a6:	68b8      	ldr	r0, [r7, #8]
 80125a8:	f000 fab6 	bl	8012b18 <prvAddCurrentTaskToDelayedList>
    }
 80125ac:	bf00      	nop
 80125ae:	3718      	adds	r7, #24
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	2002664c 	.word	0x2002664c

080125b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b088      	sub	sp, #32
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	68db      	ldr	r3, [r3, #12]
 80125c6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80125c8:	69bb      	ldr	r3, [r7, #24]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d103      	bne.n	80125d6 <xTaskRemoveFromEventList+0x1e>
 80125ce:	f7fe fe0b 	bl	80111e8 <ulSetInterruptMask>
 80125d2:	bf00      	nop
 80125d4:	e7fd      	b.n	80125d2 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80125d6:	69bb      	ldr	r3, [r7, #24]
 80125d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125da:	617b      	str	r3, [r7, #20]
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	69db      	ldr	r3, [r3, #28]
 80125e0:	69ba      	ldr	r2, [r7, #24]
 80125e2:	6a12      	ldr	r2, [r2, #32]
 80125e4:	609a      	str	r2, [r3, #8]
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	6a1b      	ldr	r3, [r3, #32]
 80125ea:	69ba      	ldr	r2, [r7, #24]
 80125ec:	69d2      	ldr	r2, [r2, #28]
 80125ee:	605a      	str	r2, [r3, #4]
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	685a      	ldr	r2, [r3, #4]
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	3318      	adds	r3, #24
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d103      	bne.n	8012604 <xTaskRemoveFromEventList+0x4c>
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	6a1a      	ldr	r2, [r3, #32]
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	605a      	str	r2, [r3, #4]
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	2200      	movs	r2, #0
 8012608:	629a      	str	r2, [r3, #40]	@ 0x28
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	1e5a      	subs	r2, r3, #1
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012614:	4b49      	ldr	r3, [pc, #292]	@ (801273c <xTaskRemoveFromEventList+0x184>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d15f      	bne.n	80126dc <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	695b      	ldr	r3, [r3, #20]
 8012620:	60fb      	str	r3, [r7, #12]
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	689b      	ldr	r3, [r3, #8]
 8012626:	69ba      	ldr	r2, [r7, #24]
 8012628:	68d2      	ldr	r2, [r2, #12]
 801262a:	609a      	str	r2, [r3, #8]
 801262c:	69bb      	ldr	r3, [r7, #24]
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	69ba      	ldr	r2, [r7, #24]
 8012632:	6892      	ldr	r2, [r2, #8]
 8012634:	605a      	str	r2, [r3, #4]
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	685a      	ldr	r2, [r3, #4]
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	3304      	adds	r3, #4
 801263e:	429a      	cmp	r2, r3
 8012640:	d103      	bne.n	801264a <xTaskRemoveFromEventList+0x92>
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	68da      	ldr	r2, [r3, #12]
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	605a      	str	r2, [r3, #4]
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	2200      	movs	r2, #0
 801264e:	615a      	str	r2, [r3, #20]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	1e5a      	subs	r2, r3, #1
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 801265a:	69bb      	ldr	r3, [r7, #24]
 801265c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801265e:	4b38      	ldr	r3, [pc, #224]	@ (8012740 <xTaskRemoveFromEventList+0x188>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	429a      	cmp	r2, r3
 8012664:	d903      	bls.n	801266e <xTaskRemoveFromEventList+0xb6>
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801266a:	4a35      	ldr	r2, [pc, #212]	@ (8012740 <xTaskRemoveFromEventList+0x188>)
 801266c:	6013      	str	r3, [r2, #0]
 801266e:	69bb      	ldr	r3, [r7, #24]
 8012670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012672:	4934      	ldr	r1, [pc, #208]	@ (8012744 <xTaskRemoveFromEventList+0x18c>)
 8012674:	4613      	mov	r3, r2
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	4413      	add	r3, r2
 801267a:	009b      	lsls	r3, r3, #2
 801267c:	440b      	add	r3, r1
 801267e:	3304      	adds	r3, #4
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	60bb      	str	r3, [r7, #8]
 8012684:	69bb      	ldr	r3, [r7, #24]
 8012686:	68ba      	ldr	r2, [r7, #8]
 8012688:	609a      	str	r2, [r3, #8]
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	689a      	ldr	r2, [r3, #8]
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	60da      	str	r2, [r3, #12]
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	689b      	ldr	r3, [r3, #8]
 8012696:	69ba      	ldr	r2, [r7, #24]
 8012698:	3204      	adds	r2, #4
 801269a:	605a      	str	r2, [r3, #4]
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	1d1a      	adds	r2, r3, #4
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	609a      	str	r2, [r3, #8]
 80126a4:	69bb      	ldr	r3, [r7, #24]
 80126a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126a8:	4613      	mov	r3, r2
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	4413      	add	r3, r2
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	4a24      	ldr	r2, [pc, #144]	@ (8012744 <xTaskRemoveFromEventList+0x18c>)
 80126b2:	441a      	add	r2, r3
 80126b4:	69bb      	ldr	r3, [r7, #24]
 80126b6:	615a      	str	r2, [r3, #20]
 80126b8:	69bb      	ldr	r3, [r7, #24]
 80126ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126bc:	4921      	ldr	r1, [pc, #132]	@ (8012744 <xTaskRemoveFromEventList+0x18c>)
 80126be:	4613      	mov	r3, r2
 80126c0:	009b      	lsls	r3, r3, #2
 80126c2:	4413      	add	r3, r2
 80126c4:	009b      	lsls	r3, r3, #2
 80126c6:	440b      	add	r3, r1
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	1c59      	adds	r1, r3, #1
 80126cc:	481d      	ldr	r0, [pc, #116]	@ (8012744 <xTaskRemoveFromEventList+0x18c>)
 80126ce:	4613      	mov	r3, r2
 80126d0:	009b      	lsls	r3, r3, #2
 80126d2:	4413      	add	r3, r2
 80126d4:	009b      	lsls	r3, r3, #2
 80126d6:	4403      	add	r3, r0
 80126d8:	6019      	str	r1, [r3, #0]
 80126da:	e01b      	b.n	8012714 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80126dc:	4b1a      	ldr	r3, [pc, #104]	@ (8012748 <xTaskRemoveFromEventList+0x190>)
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	613b      	str	r3, [r7, #16]
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	693a      	ldr	r2, [r7, #16]
 80126e6:	61da      	str	r2, [r3, #28]
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	689a      	ldr	r2, [r3, #8]
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	621a      	str	r2, [r3, #32]
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	689b      	ldr	r3, [r3, #8]
 80126f4:	69ba      	ldr	r2, [r7, #24]
 80126f6:	3218      	adds	r2, #24
 80126f8:	605a      	str	r2, [r3, #4]
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	f103 0218 	add.w	r2, r3, #24
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	609a      	str	r2, [r3, #8]
 8012704:	69bb      	ldr	r3, [r7, #24]
 8012706:	4a10      	ldr	r2, [pc, #64]	@ (8012748 <xTaskRemoveFromEventList+0x190>)
 8012708:	629a      	str	r2, [r3, #40]	@ 0x28
 801270a:	4b0f      	ldr	r3, [pc, #60]	@ (8012748 <xTaskRemoveFromEventList+0x190>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	3301      	adds	r3, #1
 8012710:	4a0d      	ldr	r2, [pc, #52]	@ (8012748 <xTaskRemoveFromEventList+0x190>)
 8012712:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012718:	4b0c      	ldr	r3, [pc, #48]	@ (801274c <xTaskRemoveFromEventList+0x194>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801271e:	429a      	cmp	r2, r3
 8012720:	d905      	bls.n	801272e <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8012722:	2301      	movs	r3, #1
 8012724:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8012726:	4b0a      	ldr	r3, [pc, #40]	@ (8012750 <xTaskRemoveFromEventList+0x198>)
 8012728:	2201      	movs	r2, #1
 801272a:	601a      	str	r2, [r3, #0]
 801272c:	e001      	b.n	8012732 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 801272e:	2300      	movs	r3, #0
 8012730:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8012732:	69fb      	ldr	r3, [r7, #28]
}
 8012734:	4618      	mov	r0, r3
 8012736:	3720      	adds	r7, #32
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	20026b48 	.word	0x20026b48
 8012740:	20026b28 	.word	0x20026b28
 8012744:	20026650 	.word	0x20026650
 8012748:	20026ae0 	.word	0x20026ae0
 801274c:	2002664c 	.word	0x2002664c
 8012750:	20026b34 	.word	0x20026b34

08012754 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 801275c:	4b06      	ldr	r3, [pc, #24]	@ (8012778 <vTaskInternalSetTimeOutState+0x24>)
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8012764:	4b05      	ldr	r3, [pc, #20]	@ (801277c <vTaskInternalSetTimeOutState+0x28>)
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	605a      	str	r2, [r3, #4]
}
 801276c:	bf00      	nop
 801276e:	370c      	adds	r7, #12
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr
 8012778:	20026b38 	.word	0x20026b38
 801277c:	20026b24 	.word	0x20026b24

08012780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d103      	bne.n	8012798 <xTaskCheckForTimeOut+0x18>
 8012790:	f7fe fd2a 	bl	80111e8 <ulSetInterruptMask>
 8012794:	bf00      	nop
 8012796:	e7fd      	b.n	8012794 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d103      	bne.n	80127a6 <xTaskCheckForTimeOut+0x26>
 801279e:	f7fe fd23 	bl	80111e8 <ulSetInterruptMask>
 80127a2:	bf00      	nop
 80127a4:	e7fd      	b.n	80127a2 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 80127a6:	f7fe fbdf 	bl	8010f68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80127aa:	4b1f      	ldr	r3, [pc, #124]	@ (8012828 <xTaskCheckForTimeOut+0xa8>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	693a      	ldr	r2, [r7, #16]
 80127b6:	1ad3      	subs	r3, r2, r3
 80127b8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c2:	d102      	bne.n	80127ca <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80127c4:	2300      	movs	r3, #0
 80127c6:	617b      	str	r3, [r7, #20]
 80127c8:	e026      	b.n	8012818 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	4b17      	ldr	r3, [pc, #92]	@ (801282c <xTaskCheckForTimeOut+0xac>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d00a      	beq.n	80127ec <xTaskCheckForTimeOut+0x6c>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	693a      	ldr	r2, [r7, #16]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d305      	bcc.n	80127ec <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80127e0:	2301      	movs	r3, #1
 80127e2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	2200      	movs	r2, #0
 80127e8:	601a      	str	r2, [r3, #0]
 80127ea:	e015      	b.n	8012818 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d20b      	bcs.n	801280e <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	1ad2      	subs	r2, r2, r3
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7ff ffa6 	bl	8012754 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8012808:	2300      	movs	r3, #0
 801280a:	617b      	str	r3, [r7, #20]
 801280c:	e004      	b.n	8012818 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	2200      	movs	r2, #0
 8012812:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8012814:	2301      	movs	r3, #1
 8012816:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8012818:	f7fe fbb8 	bl	8010f8c <vPortExitCritical>

    return xReturn;
 801281c:	697b      	ldr	r3, [r7, #20]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3718      	adds	r7, #24
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	20026b24 	.word	0x20026b24
 801282c:	20026b38 	.word	0x20026b38

08012830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012830:	b480      	push	{r7}
 8012832:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8012834:	4b03      	ldr	r3, [pc, #12]	@ (8012844 <vTaskMissedYield+0x14>)
 8012836:	2201      	movs	r2, #1
 8012838:	601a      	str	r2, [r3, #0]
}
 801283a:	bf00      	nop
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr
 8012844:	20026b34 	.word	0x20026b34

08012848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8012850:	f000 f84a 	bl	80128e8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012854:	4b03      	ldr	r3, [pc, #12]	@ (8012864 <prvIdleTask+0x1c>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2b01      	cmp	r3, #1
 801285a:	d9f9      	bls.n	8012850 <prvIdleTask+0x8>
            {
                taskYIELD();
 801285c:	f7fe fb72 	bl	8010f44 <vPortYield>
        prvCheckTasksWaitingTermination();
 8012860:	e7f6      	b.n	8012850 <prvIdleTask+0x8>
 8012862:	bf00      	nop
 8012864:	20026650 	.word	0x20026650

08012868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801286e:	2300      	movs	r3, #0
 8012870:	607b      	str	r3, [r7, #4]
 8012872:	e00c      	b.n	801288e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	4613      	mov	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	4413      	add	r3, r2
 801287c:	009b      	lsls	r3, r3, #2
 801287e:	4a12      	ldr	r2, [pc, #72]	@ (80128c8 <prvInitialiseTaskLists+0x60>)
 8012880:	4413      	add	r3, r2
 8012882:	4618      	mov	r0, r3
 8012884:	f7fe fa8e 	bl	8010da4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	3301      	adds	r3, #1
 801288c:	607b      	str	r3, [r7, #4]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2b37      	cmp	r3, #55	@ 0x37
 8012892:	d9ef      	bls.n	8012874 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8012894:	480d      	ldr	r0, [pc, #52]	@ (80128cc <prvInitialiseTaskLists+0x64>)
 8012896:	f7fe fa85 	bl	8010da4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 801289a:	480d      	ldr	r0, [pc, #52]	@ (80128d0 <prvInitialiseTaskLists+0x68>)
 801289c:	f7fe fa82 	bl	8010da4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80128a0:	480c      	ldr	r0, [pc, #48]	@ (80128d4 <prvInitialiseTaskLists+0x6c>)
 80128a2:	f7fe fa7f 	bl	8010da4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80128a6:	480c      	ldr	r0, [pc, #48]	@ (80128d8 <prvInitialiseTaskLists+0x70>)
 80128a8:	f7fe fa7c 	bl	8010da4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80128ac:	480b      	ldr	r0, [pc, #44]	@ (80128dc <prvInitialiseTaskLists+0x74>)
 80128ae:	f7fe fa79 	bl	8010da4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80128b2:	4b0b      	ldr	r3, [pc, #44]	@ (80128e0 <prvInitialiseTaskLists+0x78>)
 80128b4:	4a05      	ldr	r2, [pc, #20]	@ (80128cc <prvInitialiseTaskLists+0x64>)
 80128b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80128b8:	4b0a      	ldr	r3, [pc, #40]	@ (80128e4 <prvInitialiseTaskLists+0x7c>)
 80128ba:	4a05      	ldr	r2, [pc, #20]	@ (80128d0 <prvInitialiseTaskLists+0x68>)
 80128bc:	601a      	str	r2, [r3, #0]
}
 80128be:	bf00      	nop
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	20026650 	.word	0x20026650
 80128cc:	20026ab0 	.word	0x20026ab0
 80128d0:	20026ac4 	.word	0x20026ac4
 80128d4:	20026ae0 	.word	0x20026ae0
 80128d8:	20026af4 	.word	0x20026af4
 80128dc:	20026b0c 	.word	0x20026b0c
 80128e0:	20026ad8 	.word	0x20026ad8
 80128e4:	20026adc 	.word	0x20026adc

080128e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80128ee:	e019      	b.n	8012924 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80128f0:	f7fe fb3a 	bl	8010f68 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128f4:	4b10      	ldr	r3, [pc, #64]	@ (8012938 <prvCheckTasksWaitingTermination+0x50>)
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	3304      	adds	r3, #4
 8012900:	4618      	mov	r0, r3
 8012902:	f7fe fab5 	bl	8010e70 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8012906:	4b0d      	ldr	r3, [pc, #52]	@ (801293c <prvCheckTasksWaitingTermination+0x54>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	3b01      	subs	r3, #1
 801290c:	4a0b      	ldr	r2, [pc, #44]	@ (801293c <prvCheckTasksWaitingTermination+0x54>)
 801290e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8012910:	4b0b      	ldr	r3, [pc, #44]	@ (8012940 <prvCheckTasksWaitingTermination+0x58>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	3b01      	subs	r3, #1
 8012916:	4a0a      	ldr	r2, [pc, #40]	@ (8012940 <prvCheckTasksWaitingTermination+0x58>)
 8012918:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 801291a:	f7fe fb37 	bl	8010f8c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 f810 	bl	8012944 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012924:	4b06      	ldr	r3, [pc, #24]	@ (8012940 <prvCheckTasksWaitingTermination+0x58>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d1e1      	bne.n	80128f0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 801292c:	bf00      	nop
 801292e:	bf00      	nop
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	20026af4 	.word	0x20026af4
 801293c:	20026b20 	.word	0x20026b20
 8012940:	20026b08 	.word	0x20026b08

08012944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8012952:	2b00      	cmp	r3, #0
 8012954:	d108      	bne.n	8012968 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801295a:	4618      	mov	r0, r3
 801295c:	f000 fd38 	bl	80133d0 <vPortFree>
                vPortFree( pxTCB );
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 fd35 	bl	80133d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8012966:	e011      	b.n	801298c <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 801296e:	2b01      	cmp	r3, #1
 8012970:	d103      	bne.n	801297a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f000 fd2c 	bl	80133d0 <vPortFree>
    }
 8012978:	e008      	b.n	801298c <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8012980:	2b02      	cmp	r3, #2
 8012982:	d003      	beq.n	801298c <prvDeleteTCB+0x48>
 8012984:	f7fe fc30 	bl	80111e8 <ulSetInterruptMask>
 8012988:	bf00      	nop
 801298a:	e7fd      	b.n	8012988 <prvDeleteTCB+0x44>
    }
 801298c:	bf00      	nop
 801298e:	3708      	adds	r7, #8
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}

08012994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012994:	b480      	push	{r7}
 8012996:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012998:	4b0a      	ldr	r3, [pc, #40]	@ (80129c4 <prvResetNextTaskUnblockTime+0x30>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d104      	bne.n	80129ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80129a2:	4b09      	ldr	r3, [pc, #36]	@ (80129c8 <prvResetNextTaskUnblockTime+0x34>)
 80129a4:	f04f 32ff 	mov.w	r2, #4294967295
 80129a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80129aa:	e005      	b.n	80129b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80129ac:	4b05      	ldr	r3, [pc, #20]	@ (80129c4 <prvResetNextTaskUnblockTime+0x30>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	4a04      	ldr	r2, [pc, #16]	@ (80129c8 <prvResetNextTaskUnblockTime+0x34>)
 80129b6:	6013      	str	r3, [r2, #0]
}
 80129b8:	bf00      	nop
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop
 80129c4:	20026ad8 	.word	0x20026ad8
 80129c8:	20026b40 	.word	0x20026b40

080129cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80129cc:	b480      	push	{r7}
 80129ce:	b083      	sub	sp, #12
 80129d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80129d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012a00 <xTaskGetSchedulerState+0x34>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d102      	bne.n	80129e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80129da:	2301      	movs	r3, #1
 80129dc:	607b      	str	r3, [r7, #4]
 80129de:	e008      	b.n	80129f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129e0:	4b08      	ldr	r3, [pc, #32]	@ (8012a04 <xTaskGetSchedulerState+0x38>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d102      	bne.n	80129ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80129e8:	2302      	movs	r3, #2
 80129ea:	607b      	str	r3, [r7, #4]
 80129ec:	e001      	b.n	80129f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80129ee:	2300      	movs	r3, #0
 80129f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80129f2:	687b      	ldr	r3, [r7, #4]
    }
 80129f4:	4618      	mov	r0, r3
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr
 8012a00:	20026b2c 	.word	0x20026b2c
 8012a04:	20026b48 	.word	0x20026b48

08012a08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8012a14:	2300      	movs	r3, #0
 8012a16:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d070      	beq.n	8012b00 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8012a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8012b0c <xTaskPriorityDisinherit+0x104>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	693a      	ldr	r2, [r7, #16]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d003      	beq.n	8012a30 <xTaskPriorityDisinherit+0x28>
 8012a28:	f7fe fbde 	bl	80111e8 <ulSetInterruptMask>
 8012a2c:	bf00      	nop
 8012a2e:	e7fd      	b.n	8012a2c <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d103      	bne.n	8012a40 <xTaskPriorityDisinherit+0x38>
 8012a38:	f7fe fbd6 	bl	80111e8 <ulSetInterruptMask>
 8012a3c:	bf00      	nop
 8012a3e:	e7fd      	b.n	8012a3c <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a44:	1e5a      	subs	r2, r3, #1
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d054      	beq.n	8012b00 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d150      	bne.n	8012b00 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	3304      	adds	r3, #4
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fe fa04 	bl	8010e70 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a80:	4b23      	ldr	r3, [pc, #140]	@ (8012b10 <xTaskPriorityDisinherit+0x108>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d903      	bls.n	8012a90 <xTaskPriorityDisinherit+0x88>
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a8c:	4a20      	ldr	r2, [pc, #128]	@ (8012b10 <xTaskPriorityDisinherit+0x108>)
 8012a8e:	6013      	str	r3, [r2, #0]
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a94:	491f      	ldr	r1, [pc, #124]	@ (8012b14 <xTaskPriorityDisinherit+0x10c>)
 8012a96:	4613      	mov	r3, r2
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	4413      	add	r3, r2
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	440b      	add	r3, r1
 8012aa0:	3304      	adds	r3, #4
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	60fb      	str	r3, [r7, #12]
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	609a      	str	r2, [r3, #8]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	689a      	ldr	r2, [r3, #8]
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	60da      	str	r2, [r3, #12]
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	689b      	ldr	r3, [r3, #8]
 8012ab8:	693a      	ldr	r2, [r7, #16]
 8012aba:	3204      	adds	r2, #4
 8012abc:	605a      	str	r2, [r3, #4]
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	1d1a      	adds	r2, r3, #4
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	609a      	str	r2, [r3, #8]
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012aca:	4613      	mov	r3, r2
 8012acc:	009b      	lsls	r3, r3, #2
 8012ace:	4413      	add	r3, r2
 8012ad0:	009b      	lsls	r3, r3, #2
 8012ad2:	4a10      	ldr	r2, [pc, #64]	@ (8012b14 <xTaskPriorityDisinherit+0x10c>)
 8012ad4:	441a      	add	r2, r3
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	615a      	str	r2, [r3, #20]
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ade:	490d      	ldr	r1, [pc, #52]	@ (8012b14 <xTaskPriorityDisinherit+0x10c>)
 8012ae0:	4613      	mov	r3, r2
 8012ae2:	009b      	lsls	r3, r3, #2
 8012ae4:	4413      	add	r3, r2
 8012ae6:	009b      	lsls	r3, r3, #2
 8012ae8:	440b      	add	r3, r1
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	1c59      	adds	r1, r3, #1
 8012aee:	4809      	ldr	r0, [pc, #36]	@ (8012b14 <xTaskPriorityDisinherit+0x10c>)
 8012af0:	4613      	mov	r3, r2
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	4413      	add	r3, r2
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	4403      	add	r3, r0
 8012afa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8012afc:	2301      	movs	r3, #1
 8012afe:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8012b00:	697b      	ldr	r3, [r7, #20]
    }
 8012b02:	4618      	mov	r0, r3
 8012b04:	3718      	adds	r7, #24
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	2002664c 	.word	0x2002664c
 8012b10:	20026b28 	.word	0x20026b28
 8012b14:	20026650 	.word	0x20026650

08012b18 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b086      	sub	sp, #24
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8012b22:	4b2e      	ldr	r3, [pc, #184]	@ (8012bdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b28:	4b2d      	ldr	r3, [pc, #180]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	3304      	adds	r3, #4
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7fe f99e 	bl	8010e70 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b3a:	d124      	bne.n	8012b86 <prvAddCurrentTaskToDelayedList+0x6e>
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d021      	beq.n	8012b86 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b42:	4b28      	ldr	r3, [pc, #160]	@ (8012be4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	613b      	str	r3, [r7, #16]
 8012b48:	4b25      	ldr	r3, [pc, #148]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	693a      	ldr	r2, [r7, #16]
 8012b4e:	609a      	str	r2, [r3, #8]
 8012b50:	4b23      	ldr	r3, [pc, #140]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	693a      	ldr	r2, [r7, #16]
 8012b56:	6892      	ldr	r2, [r2, #8]
 8012b58:	60da      	str	r2, [r3, #12]
 8012b5a:	4b21      	ldr	r3, [pc, #132]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	689b      	ldr	r3, [r3, #8]
 8012b62:	3204      	adds	r2, #4
 8012b64:	605a      	str	r2, [r3, #4]
 8012b66:	4b1e      	ldr	r3, [pc, #120]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	1d1a      	adds	r2, r3, #4
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	609a      	str	r2, [r3, #8]
 8012b70:	4b1b      	ldr	r3, [pc, #108]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	4a1b      	ldr	r2, [pc, #108]	@ (8012be4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8012b76:	615a      	str	r2, [r3, #20]
 8012b78:	4b1a      	ldr	r3, [pc, #104]	@ (8012be4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	4a19      	ldr	r2, [pc, #100]	@ (8012be4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8012b80:	6013      	str	r3, [r2, #0]
 8012b82:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8012b84:	e026      	b.n	8012bd4 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8012b86:	697a      	ldr	r2, [r7, #20]
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012b8e:	4b14      	ldr	r3, [pc, #80]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	68fa      	ldr	r2, [r7, #12]
 8012b94:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8012b96:	68fa      	ldr	r2, [r7, #12]
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d209      	bcs.n	8012bb2 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b9e:	4b12      	ldr	r3, [pc, #72]	@ (8012be8 <prvAddCurrentTaskToDelayedList+0xd0>)
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	3304      	adds	r3, #4
 8012ba8:	4619      	mov	r1, r3
 8012baa:	4610      	mov	r0, r2
 8012bac:	f7fe f927 	bl	8010dfe <vListInsert>
}
 8012bb0:	e010      	b.n	8012bd4 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8012bec <prvAddCurrentTaskToDelayedList+0xd4>)
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8012be0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	3304      	adds	r3, #4
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	4610      	mov	r0, r2
 8012bc0:	f7fe f91d 	bl	8010dfe <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8012bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8012bf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	68fa      	ldr	r2, [r7, #12]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d202      	bcs.n	8012bd4 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8012bce:	4a08      	ldr	r2, [pc, #32]	@ (8012bf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	6013      	str	r3, [r2, #0]
}
 8012bd4:	bf00      	nop
 8012bd6:	3718      	adds	r7, #24
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	20026b24 	.word	0x20026b24
 8012be0:	2002664c 	.word	0x2002664c
 8012be4:	20026b0c 	.word	0x20026b0c
 8012be8:	20026adc 	.word	0x20026adc
 8012bec:	20026ad8 	.word	0x20026ad8
 8012bf0:	20026b40 	.word	0x20026b40

08012bf4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b088      	sub	sp, #32
 8012bf8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8012bfe:	f000 fae1 	bl	80131c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8012c02:	4b18      	ldr	r3, [pc, #96]	@ (8012c64 <xTimerCreateTimerTask+0x70>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d020      	beq.n	8012c4c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012c12:	463a      	mov	r2, r7
 8012c14:	1d39      	adds	r1, r7, #4
 8012c16:	f107 0308 	add.w	r3, r7, #8
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7fe f8a8 	bl	8010d70 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8012c20:	6839      	ldr	r1, [r7, #0]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	68ba      	ldr	r2, [r7, #8]
 8012c26:	9202      	str	r2, [sp, #8]
 8012c28:	9301      	str	r3, [sp, #4]
 8012c2a:	2337      	movs	r3, #55	@ 0x37
 8012c2c:	9300      	str	r3, [sp, #0]
 8012c2e:	2300      	movs	r3, #0
 8012c30:	460a      	mov	r2, r1
 8012c32:	490d      	ldr	r1, [pc, #52]	@ (8012c68 <xTimerCreateTimerTask+0x74>)
 8012c34:	480d      	ldr	r0, [pc, #52]	@ (8012c6c <xTimerCreateTimerTask+0x78>)
 8012c36:	f7fe ffc7 	bl	8011bc8 <xTaskCreateStatic>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8012c70 <xTimerCreateTimerTask+0x7c>)
 8012c3e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8012c40:	4b0b      	ldr	r3, [pc, #44]	@ (8012c70 <xTimerCreateTimerTask+0x7c>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d001      	beq.n	8012c4c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d103      	bne.n	8012c5a <xTimerCreateTimerTask+0x66>
 8012c52:	f7fe fac9 	bl	80111e8 <ulSetInterruptMask>
 8012c56:	bf00      	nop
 8012c58:	e7fd      	b.n	8012c56 <xTimerCreateTimerTask+0x62>
        return xReturn;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
    }
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	20026b7c 	.word	0x20026b7c
 8012c68:	08018b80 	.word	0x08018b80
 8012c6c:	08012e1d 	.word	0x08012e1d
 8012c70:	20026b80 	.word	0x20026b80

08012c74 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b088      	sub	sp, #32
 8012c78:	af02      	add	r7, sp, #8
 8012c7a:	60f8      	str	r0, [r7, #12]
 8012c7c:	60b9      	str	r1, [r7, #8]
 8012c7e:	607a      	str	r2, [r7, #4]
 8012c80:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012c82:	202c      	movs	r0, #44	@ 0x2c
 8012c84:	f000 faf8 	bl	8013278 <pvPortMalloc>
 8012c88:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00d      	beq.n	8012cac <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	2200      	movs	r2, #0
 8012c94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	9301      	str	r3, [sp, #4]
 8012c9c:	6a3b      	ldr	r3, [r7, #32]
 8012c9e:	9300      	str	r3, [sp, #0]
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	687a      	ldr	r2, [r7, #4]
 8012ca4:	68b9      	ldr	r1, [r7, #8]
 8012ca6:	68f8      	ldr	r0, [r7, #12]
 8012ca8:	f000 f835 	bl	8012d16 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8012cac:	697b      	ldr	r3, [r7, #20]
        }
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3718      	adds	r7, #24
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}

08012cb6 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b088      	sub	sp, #32
 8012cba:	af02      	add	r7, sp, #8
 8012cbc:	60f8      	str	r0, [r7, #12]
 8012cbe:	60b9      	str	r1, [r7, #8]
 8012cc0:	607a      	str	r2, [r7, #4]
 8012cc2:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTimer_t equals the size of the real timer
                 * structure. */
                volatile size_t xSize = sizeof( StaticTimer_t );
 8012cc4:	232c      	movs	r3, #44	@ 0x2c
 8012cc6:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Timer_t ) );
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	2b2c      	cmp	r3, #44	@ 0x2c
 8012ccc:	d003      	beq.n	8012cd6 <xTimerCreateStatic+0x20>
 8012cce:	f7fe fa8b 	bl	80111e8 <ulSetInterruptMask>
 8012cd2:	bf00      	nop
 8012cd4:	e7fd      	b.n	8012cd2 <xTimerCreateStatic+0x1c>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012cd6:	693b      	ldr	r3, [r7, #16]
            }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 8012cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d103      	bne.n	8012ce6 <xTimerCreateStatic+0x30>
 8012cde:	f7fe fa83 	bl	80111e8 <ulSetInterruptMask>
 8012ce2:	bf00      	nop
 8012ce4:	e7fd      	b.n	8012ce2 <xTimerCreateStatic+0x2c>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8012ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ce8:	617b      	str	r3, [r7, #20]

            if( pxNewTimer != NULL )
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00d      	beq.n	8012d0c <xTimerCreateStatic+0x56>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	2202      	movs	r2, #2
 8012cf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	9301      	str	r3, [sp, #4]
 8012cfc:	6a3b      	ldr	r3, [r7, #32]
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	68b9      	ldr	r1, [r7, #8]
 8012d06:	68f8      	ldr	r0, [r7, #12]
 8012d08:	f000 f805 	bl	8012d16 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8012d0c:	697b      	ldr	r3, [r7, #20]
        }
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3718      	adds	r7, #24
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}

08012d16 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8012d16:	b580      	push	{r7, lr}
 8012d18:	b084      	sub	sp, #16
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	60f8      	str	r0, [r7, #12]
 8012d1e:	60b9      	str	r1, [r7, #8]
 8012d20:	607a      	str	r2, [r7, #4]
 8012d22:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d103      	bne.n	8012d32 <prvInitialiseNewTimer+0x1c>
 8012d2a:	f7fe fa5d 	bl	80111e8 <ulSetInterruptMask>
 8012d2e:	bf00      	nop
 8012d30:	e7fd      	b.n	8012d2e <prvInitialiseNewTimer+0x18>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8012d32:	f000 fa47 	bl	80131c4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	68fa      	ldr	r2, [r7, #12]
 8012d3a:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012d3c:	69fb      	ldr	r3, [r7, #28]
 8012d3e:	68ba      	ldr	r2, [r7, #8]
 8012d40:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	683a      	ldr	r2, [r7, #0]
 8012d46:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	69ba      	ldr	r2, [r7, #24]
 8012d4c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	3304      	adds	r3, #4
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7fe f846 	bl	8010de4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d008      	beq.n	8012d70 <prvInitialiseNewTimer+0x5a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012d64:	f043 0304 	orr.w	r3, r3, #4
 8012d68:	b2da      	uxtb	r2, r3
 8012d6a:	69fb      	ldr	r3, [r7, #28]
 8012d6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8012d70:	bf00      	nop
 8012d72:	3710      	adds	r7, #16
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8012d84:	e008      	b.n	8012d98 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	699b      	ldr	r3, [r3, #24]
 8012d8a:	68ba      	ldr	r2, [r7, #8]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	6a1b      	ldr	r3, [r3, #32]
 8012d94:	68f8      	ldr	r0, [r7, #12]
 8012d96:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	699a      	ldr	r2, [r3, #24]
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	18d1      	adds	r1, r2, r3
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	687a      	ldr	r2, [r7, #4]
 8012da4:	68f8      	ldr	r0, [r7, #12]
 8012da6:	f000 f8d7 	bl	8012f58 <prvInsertTimerInActiveList>
 8012daa:	4603      	mov	r3, r0
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d1ea      	bne.n	8012d86 <prvReloadTimer+0xe>
        }
    }
 8012db0:	bf00      	nop
 8012db2:	bf00      	nop
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
	...

08012dbc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dc6:	4b14      	ldr	r3, [pc, #80]	@ (8012e18 <prvProcessExpiredTimer+0x5c>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	68db      	ldr	r3, [r3, #12]
 8012dce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	3304      	adds	r3, #4
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fe f84b 	bl	8010e70 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012de0:	f003 0304 	and.w	r3, r3, #4
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d005      	beq.n	8012df4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8012de8:	683a      	ldr	r2, [r7, #0]
 8012dea:	6879      	ldr	r1, [r7, #4]
 8012dec:	68f8      	ldr	r0, [r7, #12]
 8012dee:	f7ff ffc3 	bl	8012d78 <prvReloadTimer>
 8012df2:	e008      	b.n	8012e06 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012dfa:	f023 0301 	bic.w	r3, r3, #1
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	6a1b      	ldr	r3, [r3, #32]
 8012e0a:	68f8      	ldr	r0, [r7, #12]
 8012e0c:	4798      	blx	r3
    }
 8012e0e:	bf00      	nop
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	20026b74 	.word	0x20026b74

08012e1c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b084      	sub	sp, #16
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e24:	f107 0308 	add.w	r3, r7, #8
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f000 f851 	bl	8012ed0 <prvGetNextExpireTime>
 8012e2e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	4619      	mov	r1, r3
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f000 f805 	bl	8012e44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8012e3a:	f000 f8cf 	bl	8012fdc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e3e:	bf00      	nop
 8012e40:	e7f0      	b.n	8012e24 <prvTimerTask+0x8>
	...

08012e44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8012e4e:	f7ff f8e7 	bl	8012020 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012e52:	f107 0308 	add.w	r3, r7, #8
 8012e56:	4618      	mov	r0, r3
 8012e58:	f000 f85e 	bl	8012f18 <prvSampleTimeNow>
 8012e5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d12a      	bne.n	8012eba <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d10a      	bne.n	8012e80 <prvProcessTimerOrBlockTask+0x3c>
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d806      	bhi.n	8012e80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8012e72:	f7ff f8e3 	bl	801203c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012e76:	68f9      	ldr	r1, [r7, #12]
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff ff9f 	bl	8012dbc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8012e7e:	e01e      	b.n	8012ebe <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d008      	beq.n	8012e98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012e86:	4b10      	ldr	r3, [pc, #64]	@ (8012ec8 <prvProcessTimerOrBlockTask+0x84>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d101      	bne.n	8012e94 <prvProcessTimerOrBlockTask+0x50>
 8012e90:	2301      	movs	r3, #1
 8012e92:	e000      	b.n	8012e96 <prvProcessTimerOrBlockTask+0x52>
 8012e94:	2300      	movs	r3, #0
 8012e96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012e98:	4b0c      	ldr	r3, [pc, #48]	@ (8012ecc <prvProcessTimerOrBlockTask+0x88>)
 8012e9a:	6818      	ldr	r0, [r3, #0]
 8012e9c:	687a      	ldr	r2, [r7, #4]
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	1ad3      	subs	r3, r2, r3
 8012ea2:	683a      	ldr	r2, [r7, #0]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	f7fe fe5b 	bl	8011b60 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8012eaa:	f7ff f8c7 	bl	801203c <xTaskResumeAll>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d104      	bne.n	8012ebe <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8012eb4:	f7fe f846 	bl	8010f44 <vPortYield>
    }
 8012eb8:	e001      	b.n	8012ebe <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8012eba:	f7ff f8bf 	bl	801203c <xTaskResumeAll>
    }
 8012ebe:	bf00      	nop
 8012ec0:	3710      	adds	r7, #16
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	20026b78 	.word	0x20026b78
 8012ecc:	20026b7c 	.word	0x20026b7c

08012ed0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8012ed0:	b480      	push	{r7}
 8012ed2:	b085      	sub	sp, #20
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8012f14 <prvGetNextExpireTime+0x44>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d101      	bne.n	8012ee6 <prvGetNextExpireTime+0x16>
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	e000      	b.n	8012ee8 <prvGetNextExpireTime+0x18>
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d105      	bne.n	8012f00 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ef4:	4b07      	ldr	r3, [pc, #28]	@ (8012f14 <prvGetNextExpireTime+0x44>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	60fb      	str	r3, [r7, #12]
 8012efe:	e001      	b.n	8012f04 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8012f00:	2300      	movs	r3, #0
 8012f02:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8012f04:	68fb      	ldr	r3, [r7, #12]
    }
 8012f06:	4618      	mov	r0, r3
 8012f08:	3714      	adds	r7, #20
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop
 8012f14:	20026b74 	.word	0x20026b74

08012f18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8012f20:	f7ff f97a 	bl	8012218 <xTaskGetTickCount>
 8012f24:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8012f26:	4b0b      	ldr	r3, [pc, #44]	@ (8012f54 <prvSampleTimeNow+0x3c>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	68fa      	ldr	r2, [r7, #12]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d205      	bcs.n	8012f3c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8012f30:	f000 f922 	bl	8013178 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2201      	movs	r2, #1
 8012f38:	601a      	str	r2, [r3, #0]
 8012f3a:	e002      	b.n	8012f42 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8012f42:	4a04      	ldr	r2, [pc, #16]	@ (8012f54 <prvSampleTimeNow+0x3c>)
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8012f48:	68fb      	ldr	r3, [r7, #12]
    }
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	20026b84 	.word	0x20026b84

08012f58 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
 8012f64:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8012f66:	2300      	movs	r3, #0
 8012f68:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	68ba      	ldr	r2, [r7, #8]
 8012f6e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	68fa      	ldr	r2, [r7, #12]
 8012f74:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8012f76:	68ba      	ldr	r2, [r7, #8]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d812      	bhi.n	8012fa4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	1ad2      	subs	r2, r2, r3
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	699b      	ldr	r3, [r3, #24]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d302      	bcc.n	8012f92 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	617b      	str	r3, [r7, #20]
 8012f90:	e01b      	b.n	8012fca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012f92:	4b10      	ldr	r3, [pc, #64]	@ (8012fd4 <prvInsertTimerInActiveList+0x7c>)
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	3304      	adds	r3, #4
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	4610      	mov	r0, r2
 8012f9e:	f7fd ff2e 	bl	8010dfe <vListInsert>
 8012fa2:	e012      	b.n	8012fca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d206      	bcs.n	8012fba <prvInsertTimerInActiveList+0x62>
 8012fac:	68ba      	ldr	r2, [r7, #8]
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d302      	bcc.n	8012fba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	617b      	str	r3, [r7, #20]
 8012fb8:	e007      	b.n	8012fca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012fba:	4b07      	ldr	r3, [pc, #28]	@ (8012fd8 <prvInsertTimerInActiveList+0x80>)
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	3304      	adds	r3, #4
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	4610      	mov	r0, r2
 8012fc6:	f7fd ff1a 	bl	8010dfe <vListInsert>
            }
        }

        return xProcessTimerNow;
 8012fca:	697b      	ldr	r3, [r7, #20]
    }
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3718      	adds	r7, #24
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}
 8012fd4:	20026b78 	.word	0x20026b78
 8012fd8:	20026b74 	.word	0x20026b74

08012fdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b088      	sub	sp, #32
 8012fe0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012fe2:	e0b7      	b.n	8013154 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	da11      	bge.n	801300e <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012fea:	1d3b      	adds	r3, r7, #4
 8012fec:	3304      	adds	r3, #4
 8012fee:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8012ff0:	69fb      	ldr	r3, [r7, #28]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d103      	bne.n	8012ffe <prvProcessReceivedCommands+0x22>
 8012ff6:	f7fe f8f7 	bl	80111e8 <ulSetInterruptMask>
 8012ffa:	bf00      	nop
 8012ffc:	e7fd      	b.n	8012ffa <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	69fa      	ldr	r2, [r7, #28]
 8013004:	6850      	ldr	r0, [r2, #4]
 8013006:	69fa      	ldr	r2, [r7, #28]
 8013008:	6892      	ldr	r2, [r2, #8]
 801300a:	4611      	mov	r1, r2
 801300c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2b00      	cmp	r3, #0
 8013012:	f2c0 809f 	blt.w	8013154 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	695b      	ldr	r3, [r3, #20]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d004      	beq.n	801302c <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	3304      	adds	r3, #4
 8013026:	4618      	mov	r0, r3
 8013028:	f7fd ff22 	bl	8010e70 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801302c:	463b      	mov	r3, r7
 801302e:	4618      	mov	r0, r3
 8013030:	f7ff ff72 	bl	8012f18 <prvSampleTimeNow>
 8013034:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	3b01      	subs	r3, #1
 801303a:	2b08      	cmp	r3, #8
 801303c:	f200 8087 	bhi.w	801314e <prvProcessReceivedCommands+0x172>
 8013040:	a201      	add	r2, pc, #4	@ (adr r2, 8013048 <prvProcessReceivedCommands+0x6c>)
 8013042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013046:	bf00      	nop
 8013048:	0801306d 	.word	0x0801306d
 801304c:	0801306d 	.word	0x0801306d
 8013050:	080130d5 	.word	0x080130d5
 8013054:	080130e9 	.word	0x080130e9
 8013058:	08013125 	.word	0x08013125
 801305c:	0801306d 	.word	0x0801306d
 8013060:	0801306d 	.word	0x0801306d
 8013064:	080130d5 	.word	0x080130d5
 8013068:	080130e9 	.word	0x080130e9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013072:	f043 0301 	orr.w	r3, r3, #1
 8013076:	b2da      	uxtb	r2, r3
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801307e:	68ba      	ldr	r2, [r7, #8]
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	699b      	ldr	r3, [r3, #24]
 8013084:	18d1      	adds	r1, r2, r3
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	697a      	ldr	r2, [r7, #20]
 801308a:	69b8      	ldr	r0, [r7, #24]
 801308c:	f7ff ff64 	bl	8012f58 <prvInsertTimerInActiveList>
 8013090:	4603      	mov	r3, r0
 8013092:	2b00      	cmp	r3, #0
 8013094:	d05d      	beq.n	8013152 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013096:	69bb      	ldr	r3, [r7, #24]
 8013098:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801309c:	f003 0304 	and.w	r3, r3, #4
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d009      	beq.n	80130b8 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80130a4:	68ba      	ldr	r2, [r7, #8]
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	699b      	ldr	r3, [r3, #24]
 80130aa:	4413      	add	r3, r2
 80130ac:	697a      	ldr	r2, [r7, #20]
 80130ae:	4619      	mov	r1, r3
 80130b0:	69b8      	ldr	r0, [r7, #24]
 80130b2:	f7ff fe61 	bl	8012d78 <prvReloadTimer>
 80130b6:	e008      	b.n	80130ca <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80130be:	f023 0301 	bic.w	r3, r3, #1
 80130c2:	b2da      	uxtb	r2, r3
 80130c4:	69bb      	ldr	r3, [r7, #24]
 80130c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	6a1b      	ldr	r3, [r3, #32]
 80130ce:	69b8      	ldr	r0, [r7, #24]
 80130d0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80130d2:	e03e      	b.n	8013152 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80130d4:	69bb      	ldr	r3, [r7, #24]
 80130d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80130da:	f023 0301 	bic.w	r3, r3, #1
 80130de:	b2da      	uxtb	r2, r3
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80130e6:	e035      	b.n	8013154 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80130ee:	f043 0301 	orr.w	r3, r3, #1
 80130f2:	b2da      	uxtb	r2, r3
 80130f4:	69bb      	ldr	r3, [r7, #24]
 80130f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80130fa:	68ba      	ldr	r2, [r7, #8]
 80130fc:	69bb      	ldr	r3, [r7, #24]
 80130fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013100:	69bb      	ldr	r3, [r7, #24]
 8013102:	699b      	ldr	r3, [r3, #24]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d103      	bne.n	8013110 <prvProcessReceivedCommands+0x134>
 8013108:	f7fe f86e 	bl	80111e8 <ulSetInterruptMask>
 801310c:	bf00      	nop
 801310e:	e7fd      	b.n	801310c <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013110:	69bb      	ldr	r3, [r7, #24]
 8013112:	699a      	ldr	r2, [r3, #24]
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	18d1      	adds	r1, r2, r3
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	697a      	ldr	r2, [r7, #20]
 801311c:	69b8      	ldr	r0, [r7, #24]
 801311e:	f7ff ff1b 	bl	8012f58 <prvInsertTimerInActiveList>
                        break;
 8013122:	e017      	b.n	8013154 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013124:	69bb      	ldr	r3, [r7, #24]
 8013126:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801312a:	f003 0302 	and.w	r3, r3, #2
 801312e:	2b00      	cmp	r3, #0
 8013130:	d103      	bne.n	801313a <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8013132:	69b8      	ldr	r0, [r7, #24]
 8013134:	f000 f94c 	bl	80133d0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8013138:	e00c      	b.n	8013154 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 801313a:	69bb      	ldr	r3, [r7, #24]
 801313c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013140:	f023 0301 	bic.w	r3, r3, #1
 8013144:	b2da      	uxtb	r2, r3
 8013146:	69bb      	ldr	r3, [r7, #24]
 8013148:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 801314c:	e002      	b.n	8013154 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 801314e:	bf00      	nop
 8013150:	e000      	b.n	8013154 <prvProcessReceivedCommands+0x178>
                        break;
 8013152:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013154:	4b07      	ldr	r3, [pc, #28]	@ (8013174 <prvProcessReceivedCommands+0x198>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	1d39      	adds	r1, r7, #4
 801315a:	2200      	movs	r2, #0
 801315c:	4618      	mov	r0, r3
 801315e:	f7fe faed 	bl	801173c <xQueueReceive>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	f47f af3d 	bne.w	8012fe4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 801316a:	bf00      	nop
 801316c:	bf00      	nop
 801316e:	3720      	adds	r7, #32
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}
 8013174:	20026b7c 	.word	0x20026b7c

08013178 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801317e:	e009      	b.n	8013194 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013180:	4b0e      	ldr	r3, [pc, #56]	@ (80131bc <prvSwitchTimerLists+0x44>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	68db      	ldr	r3, [r3, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 801318a:	f04f 31ff 	mov.w	r1, #4294967295
 801318e:	6838      	ldr	r0, [r7, #0]
 8013190:	f7ff fe14 	bl	8012dbc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013194:	4b09      	ldr	r3, [pc, #36]	@ (80131bc <prvSwitchTimerLists+0x44>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d1f0      	bne.n	8013180 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 801319e:	4b07      	ldr	r3, [pc, #28]	@ (80131bc <prvSwitchTimerLists+0x44>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80131a4:	4b06      	ldr	r3, [pc, #24]	@ (80131c0 <prvSwitchTimerLists+0x48>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	4a04      	ldr	r2, [pc, #16]	@ (80131bc <prvSwitchTimerLists+0x44>)
 80131aa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80131ac:	4a04      	ldr	r2, [pc, #16]	@ (80131c0 <prvSwitchTimerLists+0x48>)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6013      	str	r3, [r2, #0]
    }
 80131b2:	bf00      	nop
 80131b4:	3708      	adds	r7, #8
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	20026b74 	.word	0x20026b74
 80131c0:	20026b78 	.word	0x20026b78

080131c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80131ca:	f7fd fecd 	bl	8010f68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80131ce:	4b15      	ldr	r3, [pc, #84]	@ (8013224 <prvCheckForValidListAndQueue+0x60>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d120      	bne.n	8013218 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80131d6:	4814      	ldr	r0, [pc, #80]	@ (8013228 <prvCheckForValidListAndQueue+0x64>)
 80131d8:	f7fd fde4 	bl	8010da4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80131dc:	4813      	ldr	r0, [pc, #76]	@ (801322c <prvCheckForValidListAndQueue+0x68>)
 80131de:	f7fd fde1 	bl	8010da4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80131e2:	4b13      	ldr	r3, [pc, #76]	@ (8013230 <prvCheckForValidListAndQueue+0x6c>)
 80131e4:	4a10      	ldr	r2, [pc, #64]	@ (8013228 <prvCheckForValidListAndQueue+0x64>)
 80131e6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80131e8:	4b12      	ldr	r3, [pc, #72]	@ (8013234 <prvCheckForValidListAndQueue+0x70>)
 80131ea:	4a10      	ldr	r2, [pc, #64]	@ (801322c <prvCheckForValidListAndQueue+0x68>)
 80131ec:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80131ee:	2300      	movs	r3, #0
 80131f0:	9300      	str	r3, [sp, #0]
 80131f2:	4b11      	ldr	r3, [pc, #68]	@ (8013238 <prvCheckForValidListAndQueue+0x74>)
 80131f4:	4a11      	ldr	r2, [pc, #68]	@ (801323c <prvCheckForValidListAndQueue+0x78>)
 80131f6:	2110      	movs	r1, #16
 80131f8:	200a      	movs	r0, #10
 80131fa:	f7fe f8ce 	bl	801139a <xQueueGenericCreateStatic>
 80131fe:	4603      	mov	r3, r0
 8013200:	4a08      	ldr	r2, [pc, #32]	@ (8013224 <prvCheckForValidListAndQueue+0x60>)
 8013202:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8013204:	4b07      	ldr	r3, [pc, #28]	@ (8013224 <prvCheckForValidListAndQueue+0x60>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d005      	beq.n	8013218 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801320c:	4b05      	ldr	r3, [pc, #20]	@ (8013224 <prvCheckForValidListAndQueue+0x60>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	490b      	ldr	r1, [pc, #44]	@ (8013240 <prvCheckForValidListAndQueue+0x7c>)
 8013212:	4618      	mov	r0, r3
 8013214:	f7fe fc5e 	bl	8011ad4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8013218:	f7fd feb8 	bl	8010f8c <vPortExitCritical>
    }
 801321c:	bf00      	nop
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}
 8013222:	bf00      	nop
 8013224:	20026b7c 	.word	0x20026b7c
 8013228:	20026b4c 	.word	0x20026b4c
 801322c:	20026b60 	.word	0x20026b60
 8013230:	20026b74 	.word	0x20026b74
 8013234:	20026b78 	.word	0x20026b78
 8013238:	20026c28 	.word	0x20026c28
 801323c:	20026b88 	.word	0x20026b88
 8013240:	08018b88 	.word	0x08018b88

08013244 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8013244:	b580      	push	{r7, lr}
 8013246:	b084      	sub	sp, #16
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	60fb      	str	r3, [r7, #12]
        void * pvReturn;

        configASSERT( xTimer );
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d103      	bne.n	801325e <pvTimerGetTimerID+0x1a>
 8013256:	f7fd ffc7 	bl	80111e8 <ulSetInterruptMask>
 801325a:	bf00      	nop
 801325c:	e7fd      	b.n	801325a <pvTimerGetTimerID+0x16>

        taskENTER_CRITICAL();
 801325e:	f7fd fe83 	bl	8010f68 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	69db      	ldr	r3, [r3, #28]
 8013266:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8013268:	f7fd fe90 	bl	8010f8c <vPortExitCritical>

        return pvReturn;
 801326c:	68bb      	ldr	r3, [r7, #8]
    }
 801326e:	4618      	mov	r0, r3
 8013270:	3710      	adds	r7, #16
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
	...

08013278 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b088      	sub	sp, #32
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8013280:	2300      	movs	r3, #0
 8013282:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8013284:	f7fe fecc 	bl	8012020 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8013288:	4b4c      	ldr	r3, [pc, #304]	@ (80133bc <pvPortMalloc+0x144>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d101      	bne.n	8013294 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8013290:	f000 f8ec 	bl	801346c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d012      	beq.n	80132c0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 801329a:	2208      	movs	r2, #8
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f003 0307 	and.w	r3, r3, #7
 80132a2:	1ad3      	subs	r3, r2, r3
 80132a4:	3308      	adds	r3, #8
 80132a6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	43db      	mvns	r3, r3
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d804      	bhi.n	80132bc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80132b2:	687a      	ldr	r2, [r7, #4]
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	4413      	add	r3, r2
 80132b8:	607b      	str	r3, [r7, #4]
 80132ba:	e001      	b.n	80132c0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80132bc:	2300      	movs	r3, #0
 80132be:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	db69      	blt.n	801339a <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d066      	beq.n	801339a <pvPortMalloc+0x122>
 80132cc:	4b3c      	ldr	r3, [pc, #240]	@ (80133c0 <pvPortMalloc+0x148>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	687a      	ldr	r2, [r7, #4]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d861      	bhi.n	801339a <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80132d6:	4b3b      	ldr	r3, [pc, #236]	@ (80133c4 <pvPortMalloc+0x14c>)
 80132d8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80132da:	4b3a      	ldr	r3, [pc, #232]	@ (80133c4 <pvPortMalloc+0x14c>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80132e0:	e004      	b.n	80132ec <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d903      	bls.n	80132fe <pvPortMalloc+0x86>
 80132f6:	69fb      	ldr	r3, [r7, #28]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1f1      	bne.n	80132e2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80132fe:	4b2f      	ldr	r3, [pc, #188]	@ (80133bc <pvPortMalloc+0x144>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	69fa      	ldr	r2, [r7, #28]
 8013304:	429a      	cmp	r2, r3
 8013306:	d048      	beq.n	801339a <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	2208      	movs	r2, #8
 801330e:	4413      	add	r3, r2
 8013310:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013312:	69fb      	ldr	r3, [r7, #28]
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	685a      	ldr	r2, [r3, #4]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	1ad2      	subs	r2, r2, r3
 8013322:	2308      	movs	r3, #8
 8013324:	005b      	lsls	r3, r3, #1
 8013326:	429a      	cmp	r2, r3
 8013328:	d918      	bls.n	801335c <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801332a:	69fa      	ldr	r2, [r7, #28]
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	4413      	add	r3, r2
 8013330:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	f003 0307 	and.w	r3, r3, #7
 8013338:	2b00      	cmp	r3, #0
 801333a:	d003      	beq.n	8013344 <pvPortMalloc+0xcc>
 801333c:	f7fd ff54 	bl	80111e8 <ulSetInterruptMask>
 8013340:	bf00      	nop
 8013342:	e7fd      	b.n	8013340 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	685a      	ldr	r2, [r3, #4]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	1ad2      	subs	r2, r2, r3
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8013350:	69fb      	ldr	r3, [r7, #28]
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	f000 f8e4 	bl	8013524 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801335c:	4b18      	ldr	r3, [pc, #96]	@ (80133c0 <pvPortMalloc+0x148>)
 801335e:	681a      	ldr	r2, [r3, #0]
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	1ad3      	subs	r3, r2, r3
 8013366:	4a16      	ldr	r2, [pc, #88]	@ (80133c0 <pvPortMalloc+0x148>)
 8013368:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801336a:	4b15      	ldr	r3, [pc, #84]	@ (80133c0 <pvPortMalloc+0x148>)
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	4b16      	ldr	r3, [pc, #88]	@ (80133c8 <pvPortMalloc+0x150>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	429a      	cmp	r2, r3
 8013374:	d203      	bcs.n	801337e <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013376:	4b12      	ldr	r3, [pc, #72]	@ (80133c0 <pvPortMalloc+0x148>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	4a13      	ldr	r2, [pc, #76]	@ (80133c8 <pvPortMalloc+0x150>)
 801337c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 801337e:	69fb      	ldr	r3, [r7, #28]
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	2200      	movs	r2, #0
 801338e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8013390:	4b0e      	ldr	r3, [pc, #56]	@ (80133cc <pvPortMalloc+0x154>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	3301      	adds	r3, #1
 8013396:	4a0d      	ldr	r2, [pc, #52]	@ (80133cc <pvPortMalloc+0x154>)
 8013398:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 801339a:	f7fe fe4f 	bl	801203c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	f003 0307 	and.w	r3, r3, #7
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d003      	beq.n	80133b0 <pvPortMalloc+0x138>
 80133a8:	f7fd ff1e 	bl	80111e8 <ulSetInterruptMask>
 80133ac:	bf00      	nop
 80133ae:	e7fd      	b.n	80133ac <pvPortMalloc+0x134>
    return pvReturn;
 80133b0:	697b      	ldr	r3, [r7, #20]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3720      	adds	r7, #32
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	20028c80 	.word	0x20028c80
 80133c0:	20028c84 	.word	0x20028c84
 80133c4:	20028c78 	.word	0x20028c78
 80133c8:	20028c88 	.word	0x20028c88
 80133cc:	20028c8c 	.word	0x20028c8c

080133d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b084      	sub	sp, #16
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d03b      	beq.n	801345a <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80133e2:	2308      	movs	r3, #8
 80133e4:	425b      	negs	r3, r3
 80133e6:	68fa      	ldr	r2, [r7, #12]
 80133e8:	4413      	add	r3, r2
 80133ea:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	db03      	blt.n	8013400 <vPortFree+0x30>
 80133f8:	f7fd fef6 	bl	80111e8 <ulSetInterruptMask>
 80133fc:	bf00      	nop
 80133fe:	e7fd      	b.n	80133fc <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d003      	beq.n	8013410 <vPortFree+0x40>
 8013408:	f7fd feee 	bl	80111e8 <ulSetInterruptMask>
 801340c:	bf00      	nop
 801340e:	e7fd      	b.n	801340c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	0fdb      	lsrs	r3, r3, #31
 8013416:	f003 0301 	and.w	r3, r3, #1
 801341a:	b2db      	uxtb	r3, r3
 801341c:	2b00      	cmp	r3, #0
 801341e:	d01c      	beq.n	801345a <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d118      	bne.n	801345a <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	685b      	ldr	r3, [r3, #4]
 801342c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8013434:	f7fe fdf4 	bl	8012020 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	685a      	ldr	r2, [r3, #4]
 801343c:	4b09      	ldr	r3, [pc, #36]	@ (8013464 <vPortFree+0x94>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4413      	add	r3, r2
 8013442:	4a08      	ldr	r2, [pc, #32]	@ (8013464 <vPortFree+0x94>)
 8013444:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013446:	68b8      	ldr	r0, [r7, #8]
 8013448:	f000 f86c 	bl	8013524 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 801344c:	4b06      	ldr	r3, [pc, #24]	@ (8013468 <vPortFree+0x98>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	3301      	adds	r3, #1
 8013452:	4a05      	ldr	r2, [pc, #20]	@ (8013468 <vPortFree+0x98>)
 8013454:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8013456:	f7fe fdf1 	bl	801203c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 801345a:	bf00      	nop
 801345c:	3710      	adds	r7, #16
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	20028c84 	.word	0x20028c84
 8013468:	20028c90 	.word	0x20028c90

0801346c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 801346c:	b480      	push	{r7}
 801346e:	b085      	sub	sp, #20
 8013470:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013472:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013476:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8013478:	4b25      	ldr	r3, [pc, #148]	@ (8013510 <prvHeapInit+0xa4>)
 801347a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f003 0307 	and.w	r3, r3, #7
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00c      	beq.n	80134a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	3307      	adds	r3, #7
 801348a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f023 0307 	bic.w	r3, r3, #7
 8013492:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8013494:	68ba      	ldr	r2, [r7, #8]
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	1ad3      	subs	r3, r2, r3
 801349a:	4a1d      	ldr	r2, [pc, #116]	@ (8013510 <prvHeapInit+0xa4>)
 801349c:	4413      	add	r3, r2
 801349e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80134a4:	4a1b      	ldr	r2, [pc, #108]	@ (8013514 <prvHeapInit+0xa8>)
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80134aa:	4b1a      	ldr	r3, [pc, #104]	@ (8013514 <prvHeapInit+0xa8>)
 80134ac:	2200      	movs	r2, #0
 80134ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	68ba      	ldr	r2, [r7, #8]
 80134b4:	4413      	add	r3, r2
 80134b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80134b8:	2208      	movs	r2, #8
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	1a9b      	subs	r3, r3, r2
 80134be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	f023 0307 	bic.w	r3, r3, #7
 80134c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	4a13      	ldr	r2, [pc, #76]	@ (8013518 <prvHeapInit+0xac>)
 80134cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80134ce:	4b12      	ldr	r3, [pc, #72]	@ (8013518 <prvHeapInit+0xac>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	2200      	movs	r2, #0
 80134d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80134d6:	4b10      	ldr	r3, [pc, #64]	@ (8013518 <prvHeapInit+0xac>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	2200      	movs	r2, #0
 80134dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	68fa      	ldr	r2, [r7, #12]
 80134e6:	1ad2      	subs	r2, r2, r3
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80134ec:	4b0a      	ldr	r3, [pc, #40]	@ (8013518 <prvHeapInit+0xac>)
 80134ee:	681a      	ldr	r2, [r3, #0]
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	4a08      	ldr	r2, [pc, #32]	@ (801351c <prvHeapInit+0xb0>)
 80134fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	4a07      	ldr	r2, [pc, #28]	@ (8013520 <prvHeapInit+0xb4>)
 8013502:	6013      	str	r3, [r2, #0]
}
 8013504:	bf00      	nop
 8013506:	3714      	adds	r7, #20
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr
 8013510:	20026c78 	.word	0x20026c78
 8013514:	20028c78 	.word	0x20028c78
 8013518:	20028c80 	.word	0x20028c80
 801351c:	20028c88 	.word	0x20028c88
 8013520:	20028c84 	.word	0x20028c84

08013524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8013524:	b480      	push	{r7}
 8013526:	b085      	sub	sp, #20
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801352c:	4b28      	ldr	r3, [pc, #160]	@ (80135d0 <prvInsertBlockIntoFreeList+0xac>)
 801352e:	60fb      	str	r3, [r7, #12]
 8013530:	e002      	b.n	8013538 <prvInsertBlockIntoFreeList+0x14>
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	60fb      	str	r3, [r7, #12]
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	429a      	cmp	r2, r3
 8013540:	d8f7      	bhi.n	8013532 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	68ba      	ldr	r2, [r7, #8]
 801354c:	4413      	add	r3, r2
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	429a      	cmp	r2, r3
 8013552:	d108      	bne.n	8013566 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	685a      	ldr	r2, [r3, #4]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	441a      	add	r2, r3
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	685b      	ldr	r3, [r3, #4]
 801356e:	68ba      	ldr	r2, [r7, #8]
 8013570:	441a      	add	r2, r3
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	429a      	cmp	r2, r3
 8013578:	d118      	bne.n	80135ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	4b15      	ldr	r3, [pc, #84]	@ (80135d4 <prvInsertBlockIntoFreeList+0xb0>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	429a      	cmp	r2, r3
 8013584:	d00d      	beq.n	80135a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	685a      	ldr	r2, [r3, #4]
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	441a      	add	r2, r3
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	601a      	str	r2, [r3, #0]
 80135a0:	e008      	b.n	80135b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80135a2:	4b0c      	ldr	r3, [pc, #48]	@ (80135d4 <prvInsertBlockIntoFreeList+0xb0>)
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	601a      	str	r2, [r3, #0]
 80135aa:	e003      	b.n	80135b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80135b4:	68fa      	ldr	r2, [r7, #12]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d002      	beq.n	80135c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80135c2:	bf00      	nop
 80135c4:	3714      	adds	r7, #20
 80135c6:	46bd      	mov	sp, r7
 80135c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop
 80135d0:	20028c78 	.word	0x20028c78
 80135d4:	20028c80 	.word	0x20028c80

080135d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	460b      	mov	r3, r1
 80135e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80135e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80135e8:	f000 ffd8 	bl	801459c <USBD_static_malloc>
 80135ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d109      	bne.n	8013608 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	32b0      	adds	r2, #176	@ 0xb0
 80135fe:	2100      	movs	r1, #0
 8013600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013604:	2302      	movs	r3, #2
 8013606:	e0d4      	b.n	80137b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013608:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801360c:	2100      	movs	r1, #0
 801360e:	68f8      	ldr	r0, [r7, #12]
 8013610:	f003 f8f9 	bl	8016806 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	32b0      	adds	r2, #176	@ 0xb0
 801361e:	68f9      	ldr	r1, [r7, #12]
 8013620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	32b0      	adds	r2, #176	@ 0xb0
 801362e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	7c1b      	ldrb	r3, [r3, #16]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d138      	bne.n	80136b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013640:	4b5e      	ldr	r3, [pc, #376]	@ (80137bc <USBD_CDC_Init+0x1e4>)
 8013642:	7819      	ldrb	r1, [r3, #0]
 8013644:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013648:	2202      	movs	r2, #2
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f000 fe82 	bl	8014354 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013650:	4b5a      	ldr	r3, [pc, #360]	@ (80137bc <USBD_CDC_Init+0x1e4>)
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	f003 020f 	and.w	r2, r3, #15
 8013658:	6879      	ldr	r1, [r7, #4]
 801365a:	4613      	mov	r3, r2
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	4413      	add	r3, r2
 8013660:	009b      	lsls	r3, r3, #2
 8013662:	440b      	add	r3, r1
 8013664:	3324      	adds	r3, #36	@ 0x24
 8013666:	2201      	movs	r2, #1
 8013668:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801366a:	4b55      	ldr	r3, [pc, #340]	@ (80137c0 <USBD_CDC_Init+0x1e8>)
 801366c:	7819      	ldrb	r1, [r3, #0]
 801366e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013672:	2202      	movs	r2, #2
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f000 fe6d 	bl	8014354 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801367a:	4b51      	ldr	r3, [pc, #324]	@ (80137c0 <USBD_CDC_Init+0x1e8>)
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	f003 020f 	and.w	r2, r3, #15
 8013682:	6879      	ldr	r1, [r7, #4]
 8013684:	4613      	mov	r3, r2
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	4413      	add	r3, r2
 801368a:	009b      	lsls	r3, r3, #2
 801368c:	440b      	add	r3, r1
 801368e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013692:	2201      	movs	r2, #1
 8013694:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013696:	4b4b      	ldr	r3, [pc, #300]	@ (80137c4 <USBD_CDC_Init+0x1ec>)
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	f003 020f 	and.w	r2, r3, #15
 801369e:	6879      	ldr	r1, [r7, #4]
 80136a0:	4613      	mov	r3, r2
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	4413      	add	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	440b      	add	r3, r1
 80136aa:	3326      	adds	r3, #38	@ 0x26
 80136ac:	2210      	movs	r2, #16
 80136ae:	801a      	strh	r2, [r3, #0]
 80136b0:	e035      	b.n	801371e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80136b2:	4b42      	ldr	r3, [pc, #264]	@ (80137bc <USBD_CDC_Init+0x1e4>)
 80136b4:	7819      	ldrb	r1, [r3, #0]
 80136b6:	2340      	movs	r3, #64	@ 0x40
 80136b8:	2202      	movs	r2, #2
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f000 fe4a 	bl	8014354 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80136c0:	4b3e      	ldr	r3, [pc, #248]	@ (80137bc <USBD_CDC_Init+0x1e4>)
 80136c2:	781b      	ldrb	r3, [r3, #0]
 80136c4:	f003 020f 	and.w	r2, r3, #15
 80136c8:	6879      	ldr	r1, [r7, #4]
 80136ca:	4613      	mov	r3, r2
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	4413      	add	r3, r2
 80136d0:	009b      	lsls	r3, r3, #2
 80136d2:	440b      	add	r3, r1
 80136d4:	3324      	adds	r3, #36	@ 0x24
 80136d6:	2201      	movs	r2, #1
 80136d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80136da:	4b39      	ldr	r3, [pc, #228]	@ (80137c0 <USBD_CDC_Init+0x1e8>)
 80136dc:	7819      	ldrb	r1, [r3, #0]
 80136de:	2340      	movs	r3, #64	@ 0x40
 80136e0:	2202      	movs	r2, #2
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 fe36 	bl	8014354 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80136e8:	4b35      	ldr	r3, [pc, #212]	@ (80137c0 <USBD_CDC_Init+0x1e8>)
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	f003 020f 	and.w	r2, r3, #15
 80136f0:	6879      	ldr	r1, [r7, #4]
 80136f2:	4613      	mov	r3, r2
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	4413      	add	r3, r2
 80136f8:	009b      	lsls	r3, r3, #2
 80136fa:	440b      	add	r3, r1
 80136fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013700:	2201      	movs	r2, #1
 8013702:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013704:	4b2f      	ldr	r3, [pc, #188]	@ (80137c4 <USBD_CDC_Init+0x1ec>)
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	f003 020f 	and.w	r2, r3, #15
 801370c:	6879      	ldr	r1, [r7, #4]
 801370e:	4613      	mov	r3, r2
 8013710:	009b      	lsls	r3, r3, #2
 8013712:	4413      	add	r3, r2
 8013714:	009b      	lsls	r3, r3, #2
 8013716:	440b      	add	r3, r1
 8013718:	3326      	adds	r3, #38	@ 0x26
 801371a:	2210      	movs	r2, #16
 801371c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801371e:	4b29      	ldr	r3, [pc, #164]	@ (80137c4 <USBD_CDC_Init+0x1ec>)
 8013720:	7819      	ldrb	r1, [r3, #0]
 8013722:	2308      	movs	r3, #8
 8013724:	2203      	movs	r2, #3
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f000 fe14 	bl	8014354 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801372c:	4b25      	ldr	r3, [pc, #148]	@ (80137c4 <USBD_CDC_Init+0x1ec>)
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	f003 020f 	and.w	r2, r3, #15
 8013734:	6879      	ldr	r1, [r7, #4]
 8013736:	4613      	mov	r3, r2
 8013738:	009b      	lsls	r3, r3, #2
 801373a:	4413      	add	r3, r2
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	440b      	add	r3, r1
 8013740:	3324      	adds	r3, #36	@ 0x24
 8013742:	2201      	movs	r2, #1
 8013744:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2200      	movs	r2, #0
 801374a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	33b0      	adds	r3, #176	@ 0xb0
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	4413      	add	r3, r2
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	2200      	movs	r2, #0
 8013766:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	2200      	movs	r2, #0
 801376e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013778:	2b00      	cmp	r3, #0
 801377a:	d101      	bne.n	8013780 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801377c:	2302      	movs	r3, #2
 801377e:	e018      	b.n	80137b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	7c1b      	ldrb	r3, [r3, #16]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d10a      	bne.n	801379e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013788:	4b0d      	ldr	r3, [pc, #52]	@ (80137c0 <USBD_CDC_Init+0x1e8>)
 801378a:	7819      	ldrb	r1, [r3, #0]
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013792:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f000 fecb 	bl	8014532 <USBD_LL_PrepareReceive>
 801379c:	e008      	b.n	80137b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801379e:	4b08      	ldr	r3, [pc, #32]	@ (80137c0 <USBD_CDC_Init+0x1e8>)
 80137a0:	7819      	ldrb	r1, [r3, #0]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80137a8:	2340      	movs	r3, #64	@ 0x40
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 fec1 	bl	8014532 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80137b0:	2300      	movs	r3, #0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3710      	adds	r7, #16
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	200000bf 	.word	0x200000bf
 80137c0:	200000c0 	.word	0x200000c0
 80137c4:	200000c1 	.word	0x200000c1

080137c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b082      	sub	sp, #8
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	460b      	mov	r3, r1
 80137d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80137d4:	4b3a      	ldr	r3, [pc, #232]	@ (80138c0 <USBD_CDC_DeInit+0xf8>)
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	4619      	mov	r1, r3
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f000 fde0 	bl	80143a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80137e0:	4b37      	ldr	r3, [pc, #220]	@ (80138c0 <USBD_CDC_DeInit+0xf8>)
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	f003 020f 	and.w	r2, r3, #15
 80137e8:	6879      	ldr	r1, [r7, #4]
 80137ea:	4613      	mov	r3, r2
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	4413      	add	r3, r2
 80137f0:	009b      	lsls	r3, r3, #2
 80137f2:	440b      	add	r3, r1
 80137f4:	3324      	adds	r3, #36	@ 0x24
 80137f6:	2200      	movs	r2, #0
 80137f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80137fa:	4b32      	ldr	r3, [pc, #200]	@ (80138c4 <USBD_CDC_DeInit+0xfc>)
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	4619      	mov	r1, r3
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f000 fdcd 	bl	80143a0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013806:	4b2f      	ldr	r3, [pc, #188]	@ (80138c4 <USBD_CDC_DeInit+0xfc>)
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	f003 020f 	and.w	r2, r3, #15
 801380e:	6879      	ldr	r1, [r7, #4]
 8013810:	4613      	mov	r3, r2
 8013812:	009b      	lsls	r3, r3, #2
 8013814:	4413      	add	r3, r2
 8013816:	009b      	lsls	r3, r3, #2
 8013818:	440b      	add	r3, r1
 801381a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801381e:	2200      	movs	r2, #0
 8013820:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013822:	4b29      	ldr	r3, [pc, #164]	@ (80138c8 <USBD_CDC_DeInit+0x100>)
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	4619      	mov	r1, r3
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f000 fdb9 	bl	80143a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801382e:	4b26      	ldr	r3, [pc, #152]	@ (80138c8 <USBD_CDC_DeInit+0x100>)
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	f003 020f 	and.w	r2, r3, #15
 8013836:	6879      	ldr	r1, [r7, #4]
 8013838:	4613      	mov	r3, r2
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	4413      	add	r3, r2
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	440b      	add	r3, r1
 8013842:	3324      	adds	r3, #36	@ 0x24
 8013844:	2200      	movs	r2, #0
 8013846:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013848:	4b1f      	ldr	r3, [pc, #124]	@ (80138c8 <USBD_CDC_DeInit+0x100>)
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	f003 020f 	and.w	r2, r3, #15
 8013850:	6879      	ldr	r1, [r7, #4]
 8013852:	4613      	mov	r3, r2
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	4413      	add	r3, r2
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	440b      	add	r3, r1
 801385c:	3326      	adds	r3, #38	@ 0x26
 801385e:	2200      	movs	r2, #0
 8013860:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	32b0      	adds	r2, #176	@ 0xb0
 801386c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d01f      	beq.n	80138b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	33b0      	adds	r3, #176	@ 0xb0
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	4413      	add	r3, r2
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	32b0      	adds	r2, #176	@ 0xb0
 8013892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013896:	4618      	mov	r0, r3
 8013898:	f000 fe8e 	bl	80145b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	32b0      	adds	r2, #176	@ 0xb0
 80138a6:	2100      	movs	r1, #0
 80138a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80138b4:	2300      	movs	r3, #0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3708      	adds	r7, #8
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	bf00      	nop
 80138c0:	200000bf 	.word	0x200000bf
 80138c4:	200000c0 	.word	0x200000c0
 80138c8:	200000c1 	.word	0x200000c1

080138cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b086      	sub	sp, #24
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	32b0      	adds	r2, #176	@ 0xb0
 80138e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80138e6:	2300      	movs	r3, #0
 80138e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80138ea:	2300      	movs	r3, #0
 80138ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80138ee:	2300      	movs	r3, #0
 80138f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d101      	bne.n	80138fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80138f8:	2303      	movs	r3, #3
 80138fa:	e0bf      	b.n	8013a7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013904:	2b00      	cmp	r3, #0
 8013906:	d050      	beq.n	80139aa <USBD_CDC_Setup+0xde>
 8013908:	2b20      	cmp	r3, #32
 801390a:	f040 80af 	bne.w	8013a6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	88db      	ldrh	r3, [r3, #6]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d03a      	beq.n	801398c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	b25b      	sxtb	r3, r3
 801391c:	2b00      	cmp	r3, #0
 801391e:	da1b      	bge.n	8013958 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	33b0      	adds	r3, #176	@ 0xb0
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	4413      	add	r3, r2
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	689b      	ldr	r3, [r3, #8]
 8013932:	683a      	ldr	r2, [r7, #0]
 8013934:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013936:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013938:	683a      	ldr	r2, [r7, #0]
 801393a:	88d2      	ldrh	r2, [r2, #6]
 801393c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	88db      	ldrh	r3, [r3, #6]
 8013942:	2b07      	cmp	r3, #7
 8013944:	bf28      	it	cs
 8013946:	2307      	movcs	r3, #7
 8013948:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	89fa      	ldrh	r2, [r7, #14]
 801394e:	4619      	mov	r1, r3
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f002 f958 	bl	8015c06 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013956:	e090      	b.n	8013a7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	785a      	ldrb	r2, [r3, #1]
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	88db      	ldrh	r3, [r3, #6]
 8013966:	2b3f      	cmp	r3, #63	@ 0x3f
 8013968:	d803      	bhi.n	8013972 <USBD_CDC_Setup+0xa6>
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	88db      	ldrh	r3, [r3, #6]
 801396e:	b2da      	uxtb	r2, r3
 8013970:	e000      	b.n	8013974 <USBD_CDC_Setup+0xa8>
 8013972:	2240      	movs	r2, #64	@ 0x40
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801397a:	6939      	ldr	r1, [r7, #16]
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013982:	461a      	mov	r2, r3
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f002 f96a 	bl	8015c5e <USBD_CtlPrepareRx>
      break;
 801398a:	e076      	b.n	8013a7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013992:	687a      	ldr	r2, [r7, #4]
 8013994:	33b0      	adds	r3, #176	@ 0xb0
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	4413      	add	r3, r2
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	689b      	ldr	r3, [r3, #8]
 801399e:	683a      	ldr	r2, [r7, #0]
 80139a0:	7850      	ldrb	r0, [r2, #1]
 80139a2:	2200      	movs	r2, #0
 80139a4:	6839      	ldr	r1, [r7, #0]
 80139a6:	4798      	blx	r3
      break;
 80139a8:	e067      	b.n	8013a7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	785b      	ldrb	r3, [r3, #1]
 80139ae:	2b0b      	cmp	r3, #11
 80139b0:	d851      	bhi.n	8013a56 <USBD_CDC_Setup+0x18a>
 80139b2:	a201      	add	r2, pc, #4	@ (adr r2, 80139b8 <USBD_CDC_Setup+0xec>)
 80139b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139b8:	080139e9 	.word	0x080139e9
 80139bc:	08013a65 	.word	0x08013a65
 80139c0:	08013a57 	.word	0x08013a57
 80139c4:	08013a57 	.word	0x08013a57
 80139c8:	08013a57 	.word	0x08013a57
 80139cc:	08013a57 	.word	0x08013a57
 80139d0:	08013a57 	.word	0x08013a57
 80139d4:	08013a57 	.word	0x08013a57
 80139d8:	08013a57 	.word	0x08013a57
 80139dc:	08013a57 	.word	0x08013a57
 80139e0:	08013a13 	.word	0x08013a13
 80139e4:	08013a3d 	.word	0x08013a3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139ee:	b2db      	uxtb	r3, r3
 80139f0:	2b03      	cmp	r3, #3
 80139f2:	d107      	bne.n	8013a04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80139f4:	f107 030a 	add.w	r3, r7, #10
 80139f8:	2202      	movs	r2, #2
 80139fa:	4619      	mov	r1, r3
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f002 f902 	bl	8015c06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013a02:	e032      	b.n	8013a6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013a04:	6839      	ldr	r1, [r7, #0]
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f001 ff73 	bl	80158f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8013a0c:	2303      	movs	r3, #3
 8013a0e:	75fb      	strb	r3, [r7, #23]
          break;
 8013a10:	e02b      	b.n	8013a6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	2b03      	cmp	r3, #3
 8013a1c:	d107      	bne.n	8013a2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013a1e:	f107 030d 	add.w	r3, r7, #13
 8013a22:	2201      	movs	r2, #1
 8013a24:	4619      	mov	r1, r3
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f002 f8ed 	bl	8015c06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013a2c:	e01d      	b.n	8013a6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013a2e:	6839      	ldr	r1, [r7, #0]
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f001 ff5e 	bl	80158f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8013a36:	2303      	movs	r3, #3
 8013a38:	75fb      	strb	r3, [r7, #23]
          break;
 8013a3a:	e016      	b.n	8013a6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	2b03      	cmp	r3, #3
 8013a46:	d00f      	beq.n	8013a68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013a48:	6839      	ldr	r1, [r7, #0]
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f001 ff51 	bl	80158f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8013a50:	2303      	movs	r3, #3
 8013a52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013a54:	e008      	b.n	8013a68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013a56:	6839      	ldr	r1, [r7, #0]
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f001 ff4a 	bl	80158f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8013a5e:	2303      	movs	r3, #3
 8013a60:	75fb      	strb	r3, [r7, #23]
          break;
 8013a62:	e002      	b.n	8013a6a <USBD_CDC_Setup+0x19e>
          break;
 8013a64:	bf00      	nop
 8013a66:	e008      	b.n	8013a7a <USBD_CDC_Setup+0x1ae>
          break;
 8013a68:	bf00      	nop
      }
      break;
 8013a6a:	e006      	b.n	8013a7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013a6c:	6839      	ldr	r1, [r7, #0]
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f001 ff3f 	bl	80158f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8013a74:	2303      	movs	r3, #3
 8013a76:	75fb      	strb	r3, [r7, #23]
      break;
 8013a78:	bf00      	nop
  }

  return (uint8_t)ret;
 8013a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3718      	adds	r7, #24
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}

08013a84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b084      	sub	sp, #16
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	460b      	mov	r3, r1
 8013a8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013a96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	32b0      	adds	r2, #176	@ 0xb0
 8013aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d101      	bne.n	8013aae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013aaa:	2303      	movs	r3, #3
 8013aac:	e065      	b.n	8013b7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	32b0      	adds	r2, #176	@ 0xb0
 8013ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013abc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013abe:	78fb      	ldrb	r3, [r7, #3]
 8013ac0:	f003 020f 	and.w	r2, r3, #15
 8013ac4:	6879      	ldr	r1, [r7, #4]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	4413      	add	r3, r2
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	440b      	add	r3, r1
 8013ad0:	3318      	adds	r3, #24
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d02f      	beq.n	8013b38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013ad8:	78fb      	ldrb	r3, [r7, #3]
 8013ada:	f003 020f 	and.w	r2, r3, #15
 8013ade:	6879      	ldr	r1, [r7, #4]
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	4413      	add	r3, r2
 8013ae6:	009b      	lsls	r3, r3, #2
 8013ae8:	440b      	add	r3, r1
 8013aea:	3318      	adds	r3, #24
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	78fb      	ldrb	r3, [r7, #3]
 8013af0:	f003 010f 	and.w	r1, r3, #15
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	460b      	mov	r3, r1
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	440b      	add	r3, r1
 8013afc:	00db      	lsls	r3, r3, #3
 8013afe:	4403      	add	r3, r0
 8013b00:	3324      	adds	r3, #36	@ 0x24
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	fbb2 f1f3 	udiv	r1, r2, r3
 8013b08:	fb01 f303 	mul.w	r3, r1, r3
 8013b0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d112      	bne.n	8013b38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013b12:	78fb      	ldrb	r3, [r7, #3]
 8013b14:	f003 020f 	and.w	r2, r3, #15
 8013b18:	6879      	ldr	r1, [r7, #4]
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	009b      	lsls	r3, r3, #2
 8013b1e:	4413      	add	r3, r2
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	440b      	add	r3, r1
 8013b24:	3318      	adds	r3, #24
 8013b26:	2200      	movs	r2, #0
 8013b28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013b2a:	78f9      	ldrb	r1, [r7, #3]
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	2200      	movs	r2, #0
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f000 fcdd 	bl	80144f0 <USBD_LL_Transmit>
 8013b36:	e01f      	b.n	8013b78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	33b0      	adds	r3, #176	@ 0xb0
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	4413      	add	r3, r2
 8013b4e:	685b      	ldr	r3, [r3, #4]
 8013b50:	691b      	ldr	r3, [r3, #16]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d010      	beq.n	8013b78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	33b0      	adds	r3, #176	@ 0xb0
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	4413      	add	r3, r2
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	691b      	ldr	r3, [r3, #16]
 8013b68:	68ba      	ldr	r2, [r7, #8]
 8013b6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8013b6e:	68ba      	ldr	r2, [r7, #8]
 8013b70:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013b74:	78fa      	ldrb	r2, [r7, #3]
 8013b76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013b78:	2300      	movs	r3, #0
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3710      	adds	r7, #16
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}

08013b82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b82:	b580      	push	{r7, lr}
 8013b84:	b084      	sub	sp, #16
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
 8013b8a:	460b      	mov	r3, r1
 8013b8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	32b0      	adds	r2, #176	@ 0xb0
 8013b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	32b0      	adds	r2, #176	@ 0xb0
 8013ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d101      	bne.n	8013bb4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013bb0:	2303      	movs	r3, #3
 8013bb2:	e01a      	b.n	8013bea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013bb4:	78fb      	ldrb	r3, [r7, #3]
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f000 fcdb 	bl	8014574 <USBD_LL_GetRxDataSize>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	33b0      	adds	r3, #176	@ 0xb0
 8013bd0:	009b      	lsls	r3, r3, #2
 8013bd2:	4413      	add	r3, r2
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	68db      	ldr	r3, [r3, #12]
 8013bd8:	68fa      	ldr	r2, [r7, #12]
 8013bda:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8013bde:	68fa      	ldr	r2, [r7, #12]
 8013be0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013be4:	4611      	mov	r1, r2
 8013be6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013be8:	2300      	movs	r3, #0
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}

08013bf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b084      	sub	sp, #16
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	32b0      	adds	r2, #176	@ 0xb0
 8013c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d101      	bne.n	8013c14 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013c10:	2303      	movs	r3, #3
 8013c12:	e024      	b.n	8013c5e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	33b0      	adds	r3, #176	@ 0xb0
 8013c1e:	009b      	lsls	r3, r3, #2
 8013c20:	4413      	add	r3, r2
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d019      	beq.n	8013c5c <USBD_CDC_EP0_RxReady+0x6a>
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8013c2e:	2bff      	cmp	r3, #255	@ 0xff
 8013c30:	d014      	beq.n	8013c5c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	33b0      	adds	r3, #176	@ 0xb0
 8013c3c:	009b      	lsls	r3, r3, #2
 8013c3e:	4413      	add	r3, r2
 8013c40:	685b      	ldr	r3, [r3, #4]
 8013c42:	689b      	ldr	r3, [r3, #8]
 8013c44:	68fa      	ldr	r2, [r7, #12]
 8013c46:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8013c4a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013c4c:	68fa      	ldr	r2, [r7, #12]
 8013c4e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013c52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	22ff      	movs	r2, #255	@ 0xff
 8013c58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8013c5c:	2300      	movs	r3, #0
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3710      	adds	r7, #16
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
	...

08013c68 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b086      	sub	sp, #24
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013c70:	2182      	movs	r1, #130	@ 0x82
 8013c72:	4818      	ldr	r0, [pc, #96]	@ (8013cd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013c74:	f001 f807 	bl	8014c86 <USBD_GetEpDesc>
 8013c78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013c7a:	2101      	movs	r1, #1
 8013c7c:	4815      	ldr	r0, [pc, #84]	@ (8013cd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013c7e:	f001 f802 	bl	8014c86 <USBD_GetEpDesc>
 8013c82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013c84:	2181      	movs	r1, #129	@ 0x81
 8013c86:	4813      	ldr	r0, [pc, #76]	@ (8013cd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013c88:	f000 fffd 	bl	8014c86 <USBD_GetEpDesc>
 8013c8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d002      	beq.n	8013c9a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	2210      	movs	r2, #16
 8013c98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d006      	beq.n	8013cae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013ca8:	711a      	strb	r2, [r3, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d006      	beq.n	8013cc2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013cbc:	711a      	strb	r2, [r3, #4]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2243      	movs	r2, #67	@ 0x43
 8013cc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013cc8:	4b02      	ldr	r3, [pc, #8]	@ (8013cd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3718      	adds	r7, #24
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	2000007c 	.word	0x2000007c

08013cd8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b086      	sub	sp, #24
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013ce0:	2182      	movs	r1, #130	@ 0x82
 8013ce2:	4818      	ldr	r0, [pc, #96]	@ (8013d44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013ce4:	f000 ffcf 	bl	8014c86 <USBD_GetEpDesc>
 8013ce8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013cea:	2101      	movs	r1, #1
 8013cec:	4815      	ldr	r0, [pc, #84]	@ (8013d44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013cee:	f000 ffca 	bl	8014c86 <USBD_GetEpDesc>
 8013cf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013cf4:	2181      	movs	r1, #129	@ 0x81
 8013cf6:	4813      	ldr	r0, [pc, #76]	@ (8013d44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013cf8:	f000 ffc5 	bl	8014c86 <USBD_GetEpDesc>
 8013cfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d002      	beq.n	8013d0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	2210      	movs	r2, #16
 8013d08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d006      	beq.n	8013d1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	2200      	movs	r2, #0
 8013d14:	711a      	strb	r2, [r3, #4]
 8013d16:	2200      	movs	r2, #0
 8013d18:	f042 0202 	orr.w	r2, r2, #2
 8013d1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d006      	beq.n	8013d32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	2200      	movs	r2, #0
 8013d28:	711a      	strb	r2, [r3, #4]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	f042 0202 	orr.w	r2, r2, #2
 8013d30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2243      	movs	r2, #67	@ 0x43
 8013d36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013d38:	4b02      	ldr	r3, [pc, #8]	@ (8013d44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3718      	adds	r7, #24
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	2000007c 	.word	0x2000007c

08013d48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b086      	sub	sp, #24
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013d50:	2182      	movs	r1, #130	@ 0x82
 8013d52:	4818      	ldr	r0, [pc, #96]	@ (8013db4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013d54:	f000 ff97 	bl	8014c86 <USBD_GetEpDesc>
 8013d58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013d5a:	2101      	movs	r1, #1
 8013d5c:	4815      	ldr	r0, [pc, #84]	@ (8013db4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013d5e:	f000 ff92 	bl	8014c86 <USBD_GetEpDesc>
 8013d62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013d64:	2181      	movs	r1, #129	@ 0x81
 8013d66:	4813      	ldr	r0, [pc, #76]	@ (8013db4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013d68:	f000 ff8d 	bl	8014c86 <USBD_GetEpDesc>
 8013d6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d002      	beq.n	8013d7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	2210      	movs	r2, #16
 8013d78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d006      	beq.n	8013d8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	2200      	movs	r2, #0
 8013d84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013d88:	711a      	strb	r2, [r3, #4]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d006      	beq.n	8013da2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	2200      	movs	r2, #0
 8013d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013d9c:	711a      	strb	r2, [r3, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2243      	movs	r2, #67	@ 0x43
 8013da6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013da8:	4b02      	ldr	r3, [pc, #8]	@ (8013db4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3718      	adds	r7, #24
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	2000007c 	.word	0x2000007c

08013db8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	220a      	movs	r2, #10
 8013dc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013dc6:	4b03      	ldr	r3, [pc, #12]	@ (8013dd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	370c      	adds	r7, #12
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd2:	4770      	bx	lr
 8013dd4:	20000038 	.word	0x20000038

08013dd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b083      	sub	sp, #12
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d101      	bne.n	8013dec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013de8:	2303      	movs	r3, #3
 8013dea:	e009      	b.n	8013e00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	33b0      	adds	r3, #176	@ 0xb0
 8013df6:	009b      	lsls	r3, r3, #2
 8013df8:	4413      	add	r3, r2
 8013dfa:	683a      	ldr	r2, [r7, #0]
 8013dfc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013dfe:	2300      	movs	r3, #0
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	370c      	adds	r7, #12
 8013e04:	46bd      	mov	sp, r7
 8013e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0a:	4770      	bx	lr

08013e0c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013e0c:	b480      	push	{r7}
 8013e0e:	b087      	sub	sp, #28
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	60f8      	str	r0, [r7, #12]
 8013e14:	60b9      	str	r1, [r7, #8]
 8013e16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	32b0      	adds	r2, #176	@ 0xb0
 8013e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e26:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d101      	bne.n	8013e32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013e2e:	2303      	movs	r3, #3
 8013e30:	e008      	b.n	8013e44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	68ba      	ldr	r2, [r7, #8]
 8013e36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013e42:	2300      	movs	r3, #0
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	371c      	adds	r7, #28
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4e:	4770      	bx	lr

08013e50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013e50:	b480      	push	{r7}
 8013e52:	b085      	sub	sp, #20
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	32b0      	adds	r2, #176	@ 0xb0
 8013e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d101      	bne.n	8013e74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013e70:	2303      	movs	r3, #3
 8013e72:	e004      	b.n	8013e7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	683a      	ldr	r2, [r7, #0]
 8013e78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013e7c:	2300      	movs	r3, #0
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3714      	adds	r7, #20
 8013e82:	46bd      	mov	sp, r7
 8013e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e88:	4770      	bx	lr
	...

08013e8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	af00      	add	r7, sp, #0
	///////////////////////////////////Error_Handler();
	///////////////////////////////////}

	///////////////////////////////////TIM_Config();

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013e90:	2200      	movs	r2, #0
 8013e92:	4905      	ldr	r1, [pc, #20]	@ (8013ea8 <CDC_Init_FS+0x1c>)
 8013e94:	4805      	ldr	r0, [pc, #20]	@ (8013eac <CDC_Init_FS+0x20>)
 8013e96:	f7ff ffb9 	bl	8013e0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013e9a:	4905      	ldr	r1, [pc, #20]	@ (8013eb0 <CDC_Init_FS+0x24>)
 8013e9c:	4803      	ldr	r0, [pc, #12]	@ (8013eac <CDC_Init_FS+0x20>)
 8013e9e:	f7ff ffd7 	bl	8013e50 <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
 8013ea2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	20029494 	.word	0x20029494
 8013eac:	20025e28 	.word	0x20025e28
 8013eb0:	20028c94 	.word	0x20028c94

08013eb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	af00      	add	r7, sp, #0
	///////////////////////////////////if(HAL_UART_DeInit(&huart3) != HAL_OK)
	///////////////////////////////////{
    /* Initialization Error */
	///////////////////////////////////Error_Handler();
	///////////////////////////////////}
  return (USBD_OK);
 8013eb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec2:	4770      	bx	lr

08013ec4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	4603      	mov	r3, r0
 8013ecc:	6039      	str	r1, [r7, #0]
 8013ece:	71fb      	strb	r3, [r7, #7]
 8013ed0:	4613      	mov	r3, r2
 8013ed2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8013ed4:	79fb      	ldrb	r3, [r7, #7]
 8013ed6:	2b23      	cmp	r3, #35	@ 0x23
 8013ed8:	f200 809a 	bhi.w	8014010 <CDC_Control_FS+0x14c>
 8013edc:	a201      	add	r2, pc, #4	@ (adr r2, 8013ee4 <CDC_Control_FS+0x20>)
 8013ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ee2:	bf00      	nop
 8013ee4:	08014011 	.word	0x08014011
 8013ee8:	08014011 	.word	0x08014011
 8013eec:	08014011 	.word	0x08014011
 8013ef0:	08014011 	.word	0x08014011
 8013ef4:	08014011 	.word	0x08014011
 8013ef8:	08014011 	.word	0x08014011
 8013efc:	08014011 	.word	0x08014011
 8013f00:	08014011 	.word	0x08014011
 8013f04:	08014011 	.word	0x08014011
 8013f08:	08014011 	.word	0x08014011
 8013f0c:	08014011 	.word	0x08014011
 8013f10:	08014011 	.word	0x08014011
 8013f14:	08014011 	.word	0x08014011
 8013f18:	08014011 	.word	0x08014011
 8013f1c:	08014011 	.word	0x08014011
 8013f20:	08014011 	.word	0x08014011
 8013f24:	08014011 	.word	0x08014011
 8013f28:	08014011 	.word	0x08014011
 8013f2c:	08014011 	.word	0x08014011
 8013f30:	08014011 	.word	0x08014011
 8013f34:	08014011 	.word	0x08014011
 8013f38:	08014011 	.word	0x08014011
 8013f3c:	08014011 	.word	0x08014011
 8013f40:	08014011 	.word	0x08014011
 8013f44:	08014011 	.word	0x08014011
 8013f48:	08014011 	.word	0x08014011
 8013f4c:	08014011 	.word	0x08014011
 8013f50:	08014011 	.word	0x08014011
 8013f54:	08014011 	.word	0x08014011
 8013f58:	08014011 	.word	0x08014011
 8013f5c:	08014011 	.word	0x08014011
 8013f60:	08014011 	.word	0x08014011
 8013f64:	08013f75 	.word	0x08013f75
 8013f68:	08013fbd 	.word	0x08013fbd
 8013f6c:	08014011 	.word	0x08014011
 8013f70:	08014011 	.word	0x08014011
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	781b      	ldrb	r3, [r3, #0]
 8013f78:	461a      	mov	r2, r3
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	3301      	adds	r3, #1
 8013f7e:	781b      	ldrb	r3, [r3, #0]
 8013f80:	021b      	lsls	r3, r3, #8
 8013f82:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	3302      	adds	r3, #2
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	041b      	lsls	r3, r3, #16
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8013f8c:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	3303      	adds	r3, #3
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	061b      	lsls	r3, r3, #24
 8013f96:	4313      	orrs	r3, r2
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8013f98:	461a      	mov	r2, r3
 8013f9a:	4b20      	ldr	r3, [pc, #128]	@ (801401c <CDC_Control_FS+0x158>)
 8013f9c:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	791a      	ldrb	r2, [r3, #4]
 8013fa2:	4b1e      	ldr	r3, [pc, #120]	@ (801401c <CDC_Control_FS+0x158>)
 8013fa4:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	795a      	ldrb	r2, [r3, #5]
 8013faa:	4b1c      	ldr	r3, [pc, #112]	@ (801401c <CDC_Control_FS+0x158>)
 8013fac:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	799a      	ldrb	r2, [r3, #6]
 8013fb2:	4b1a      	ldr	r3, [pc, #104]	@ (801401c <CDC_Control_FS+0x158>)
 8013fb4:	719a      	strb	r2, [r3, #6]

    /* Set the new configuration */
    ComPort_Config();
 8013fb6:	f000 f850 	bl	801405a <ComPort_Config>
    break;
 8013fba:	e02a      	b.n	8014012 <CDC_Control_FS+0x14e>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8013fbc:	4b17      	ldr	r3, [pc, #92]	@ (801401c <CDC_Control_FS+0x158>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	b2da      	uxtb	r2, r3
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8013fc6:	4b15      	ldr	r3, [pc, #84]	@ (801401c <CDC_Control_FS+0x158>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	0a1a      	lsrs	r2, r3, #8
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	b2d2      	uxtb	r2, r2
 8013fd2:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8013fd4:	4b11      	ldr	r3, [pc, #68]	@ (801401c <CDC_Control_FS+0x158>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	0c1a      	lsrs	r2, r3, #16
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	3302      	adds	r3, #2
 8013fde:	b2d2      	uxtb	r2, r2
 8013fe0:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8013fe2:	4b0e      	ldr	r3, [pc, #56]	@ (801401c <CDC_Control_FS+0x158>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	0e1a      	lsrs	r2, r3, #24
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	3303      	adds	r3, #3
 8013fec:	b2d2      	uxtb	r2, r2
 8013fee:	701a      	strb	r2, [r3, #0]
    pbuf[4] = LineCoding.format;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	3304      	adds	r3, #4
 8013ff4:	4a09      	ldr	r2, [pc, #36]	@ (801401c <CDC_Control_FS+0x158>)
 8013ff6:	7912      	ldrb	r2, [r2, #4]
 8013ff8:	701a      	strb	r2, [r3, #0]
    pbuf[5] = LineCoding.paritytype;
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	3305      	adds	r3, #5
 8013ffe:	4a07      	ldr	r2, [pc, #28]	@ (801401c <CDC_Control_FS+0x158>)
 8014000:	7952      	ldrb	r2, [r2, #5]
 8014002:	701a      	strb	r2, [r3, #0]
    pbuf[6] = LineCoding.datatype;
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	3306      	adds	r3, #6
 8014008:	4a04      	ldr	r2, [pc, #16]	@ (801401c <CDC_Control_FS+0x158>)
 801400a:	7992      	ldrb	r2, [r2, #6]
 801400c:	701a      	strb	r2, [r3, #0]
    break;
 801400e:	e000      	b.n	8014012 <CDC_Control_FS+0x14e>
  case CDC_SEND_BREAK:
     /* Add your code here */
    break;

  default:
    break;
 8014010:	bf00      	nop
  }

  return (USBD_OK);
 8014012:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014014:	4618      	mov	r0, r3
 8014016:	3708      	adds	r7, #8
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	200000c4 	.word	0x200000c4

08014020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014020:	b480      	push	{r7}
 8014022:	b083      	sub	sp, #12
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	///////////////////////////////////HAL_UART_Transmit_DMA(&huart3, Buf, *Len);
  return (USBD_OK);
 801402a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801402c:	4618      	mov	r0, r3
 801402e:	370c      	adds	r7, #12
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr

08014038 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014038:	b480      	push	{r7}
 801403a:	b087      	sub	sp, #28
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	4613      	mov	r3, r2
 8014044:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014046:	2300      	movs	r3, #0
 8014048:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801404a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801404e:	4618      	mov	r0, r3
 8014050:	371c      	adds	r7, #28
 8014052:	46bd      	mov	sp, r7
 8014054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014058:	4770      	bx	lr

0801405a <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{ return;
 801405a:	b480      	push	{r7}
 801405c:	af00      	add	r7, sp, #0
 801405e:	bf00      	nop
//    Error_Handler();
//  }
//
//  /* Start reception: provide the buffer pointer with offset and the buffer size */
//  HAL_UART_Receive_IT(&huart3, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
}
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b0c6      	sub	sp, #280	@ 0x118
 801406c:	af00      	add	r7, sp, #0
 801406e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014072:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014076:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014078:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801407c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014080:	4618      	mov	r0, r3
 8014082:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8014086:	461a      	mov	r2, r3
 8014088:	2100      	movs	r1, #0
 801408a:	f002 fbbc 	bl	8016806 <memset>

  if(hpcd->Instance==USB_DRD_FS)
 801408e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014092:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	4a22      	ldr	r2, [pc, #136]	@ (8014124 <HAL_PCD_MspInit+0xbc>)
 801409c:	4293      	cmp	r3, r2
 801409e:	d13b      	bne.n	8014118 <HAL_PCD_MspInit+0xb0>
    /* USER CODE BEGIN USB_DRD_FS_MspInit 0 */

    /* USER CODE END USB_DRD_FS_MspInit 0 */
    /** Initializes the peripherals clock
    */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80140a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80140a4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80140a8:	f04f 0200 	mov.w	r2, #0
 80140ac:	f04f 0310 	mov.w	r3, #16
 80140b0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80140b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80140b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80140bc:	2230      	movs	r2, #48	@ 0x30
 80140be:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80140c2:	f107 0310 	add.w	r3, r7, #16
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7f5 fcdc 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d001      	beq.n	80140d6 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80140d2:	f7f0 fed3 	bl	8004e7c <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80140d6:	f7f5 fcc5 	bl	8009a64 <HAL_PWREx_EnableVddUSB>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80140da:	4b13      	ldr	r3, [pc, #76]	@ (8014128 <HAL_PCD_MspInit+0xc0>)
 80140dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80140e0:	4a11      	ldr	r2, [pc, #68]	@ (8014128 <HAL_PCD_MspInit+0xc0>)
 80140e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80140e6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80140ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014128 <HAL_PCD_MspInit+0xc0>)
 80140ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80140f0:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80140f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80140f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80140fc:	601a      	str	r2, [r3, #0]
 80140fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014102:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014106:	681b      	ldr	r3, [r3, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 3, 0);
 8014108:	2200      	movs	r2, #0
 801410a:	2103      	movs	r1, #3
 801410c:	204a      	movs	r0, #74	@ 0x4a
 801410e:	f7f3 ff9a 	bl	8008046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8014112:	204a      	movs	r0, #74	@ 0x4a
 8014114:	f7f3 ffb1 	bl	800807a <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

    /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8014118:	bf00      	nop
 801411a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	40016000 	.word	0x40016000
 8014128:	44020c00 	.word	0x44020c00

0801412c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8014140:	4619      	mov	r1, r3
 8014142:	4610      	mov	r0, r2
 8014144:	f000 fb15 	bl	8014772 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014148:	bf00      	nop
 801414a:	3708      	adds	r7, #8
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	460b      	mov	r3, r1
 801415a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8014162:	78fa      	ldrb	r2, [r7, #3]
 8014164:	6879      	ldr	r1, [r7, #4]
 8014166:	4613      	mov	r3, r2
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	4413      	add	r3, r2
 801416c:	00db      	lsls	r3, r3, #3
 801416e:	440b      	add	r3, r1
 8014170:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8014174:	681a      	ldr	r2, [r3, #0]
 8014176:	78fb      	ldrb	r3, [r7, #3]
 8014178:	4619      	mov	r1, r3
 801417a:	f000 fb4f 	bl	801481c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801417e:	bf00      	nop
 8014180:	3708      	adds	r7, #8
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}

08014186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014186:	b580      	push	{r7, lr}
 8014188:	b082      	sub	sp, #8
 801418a:	af00      	add	r7, sp, #0
 801418c:	6078      	str	r0, [r7, #4]
 801418e:	460b      	mov	r3, r1
 8014190:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8014198:	78fa      	ldrb	r2, [r7, #3]
 801419a:	6879      	ldr	r1, [r7, #4]
 801419c:	4613      	mov	r3, r2
 801419e:	009b      	lsls	r3, r3, #2
 80141a0:	4413      	add	r3, r2
 80141a2:	00db      	lsls	r3, r3, #3
 80141a4:	440b      	add	r3, r1
 80141a6:	3328      	adds	r3, #40	@ 0x28
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	78fb      	ldrb	r3, [r7, #3]
 80141ac:	4619      	mov	r1, r3
 80141ae:	f000 fbe8 	bl	8014982 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80141b2:	bf00      	nop
 80141b4:	3708      	adds	r7, #8
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}

080141ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141ba:	b580      	push	{r7, lr}
 80141bc:	b082      	sub	sp, #8
 80141be:	af00      	add	r7, sp, #0
 80141c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80141c8:	4618      	mov	r0, r3
 80141ca:	f000 fd22 	bl	8014c12 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80141ce:	bf00      	nop
 80141d0:	3708      	adds	r7, #8
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}

080141d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141d6:	b580      	push	{r7, lr}
 80141d8:	b084      	sub	sp, #16
 80141da:	af00      	add	r7, sp, #0
 80141dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80141de:	2301      	movs	r3, #1
 80141e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	79db      	ldrb	r3, [r3, #7]
 80141e6:	2b02      	cmp	r3, #2
 80141e8:	d001      	beq.n	80141ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80141ea:	f7f0 fe47 	bl	8004e7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80141f4:	7bfa      	ldrb	r2, [r7, #15]
 80141f6:	4611      	mov	r1, r2
 80141f8:	4618      	mov	r0, r3
 80141fa:	f000 fcc6 	bl	8014b8a <USBD_LL_SetSpeed>

  /* Reset Device */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8014204:	4618      	mov	r0, r3
 8014206:	f000 fc6e 	bl	8014ae6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801420a:	bf00      	nop
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
	...

08014214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8014222:	4618      	mov	r0, r3
 8014224:	f000 fcc1 	bl	8014baa <USBD_LL_Suspend>

  /*Enter in SLEEP mode */
  /* USER CODE BEGIN 2 */
  if ((hpcd->Init.low_power_enable) &&
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	7adb      	ldrb	r3, [r3, #11]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d013      	beq.n	8014258 <HAL_PCD_SuspendCallback+0x44>
      (((USBD_HandleTypeDef*)hpcd->pData)->dev_old_state == USBD_STATE_CONFIGURED))
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8014236:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801423a:	b2db      	uxtb	r3, r3
  if ((hpcd->Init.low_power_enable) &&
 801423c:	2b03      	cmp	r3, #3
 801423e:	d10b      	bne.n	8014258 <HAL_PCD_SuspendCallback+0x44>
  {
      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8014240:	4b07      	ldr	r3, [pc, #28]	@ (8014260 <HAL_PCD_SuspendCallback+0x4c>)
 8014242:	691b      	ldr	r3, [r3, #16]
 8014244:	4a06      	ldr	r2, [pc, #24]	@ (8014260 <HAL_PCD_SuspendCallback+0x4c>)
 8014246:	f023 0304 	bic.w	r3, r3, #4
 801424a:	6113      	str	r3, [r2, #16]
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
      SCB->SCR |= (uint32_t)((uint32_t)( SCB_SCR_SLEEPONEXIT_Msk));
 801424c:	4b04      	ldr	r3, [pc, #16]	@ (8014260 <HAL_PCD_SuspendCallback+0x4c>)
 801424e:	691b      	ldr	r3, [r3, #16]
 8014250:	4a03      	ldr	r2, [pc, #12]	@ (8014260 <HAL_PCD_SuspendCallback+0x4c>)
 8014252:	f043 0302 	orr.w	r3, r3, #2
 8014256:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014258:	bf00      	nop
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	e000ed00 	.word	0xe000ed00

08014264 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	7adb      	ldrb	r3, [r3, #11]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d005      	beq.n	8014280 <HAL_PCD_ResumeCallback+0x1c>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014274:	4b07      	ldr	r3, [pc, #28]	@ (8014294 <HAL_PCD_ResumeCallback+0x30>)
 8014276:	691b      	ldr	r3, [r3, #16]
 8014278:	4a06      	ldr	r2, [pc, #24]	@ (8014294 <HAL_PCD_ResumeCallback+0x30>)
 801427a:	f023 0306 	bic.w	r3, r3, #6
 801427e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef *) hpcd->pData);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8014286:	4618      	mov	r0, r3
 8014288:	f000 fcab 	bl	8014be2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}
 8014294:	e000ed00 	.word	0xe000ed00

08014298 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 80142a0:	4a2a      	ldr	r2, [pc, #168]	@ (801434c <USBD_LL_Init+0xb4>)
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	4a28      	ldr	r2, [pc, #160]	@ (801434c <USBD_LL_Init+0xb4>)
 80142ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80142b0:	4b26      	ldr	r3, [pc, #152]	@ (801434c <USBD_LL_Init+0xb4>)
 80142b2:	4a27      	ldr	r2, [pc, #156]	@ (8014350 <USBD_LL_Init+0xb8>)
 80142b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80142b6:	4b25      	ldr	r3, [pc, #148]	@ (801434c <USBD_LL_Init+0xb4>)
 80142b8:	2208      	movs	r2, #8
 80142ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80142bc:	4b23      	ldr	r3, [pc, #140]	@ (801434c <USBD_LL_Init+0xb4>)
 80142be:	2202      	movs	r2, #2
 80142c0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80142c2:	4b22      	ldr	r3, [pc, #136]	@ (801434c <USBD_LL_Init+0xb4>)
 80142c4:	2202      	movs	r2, #2
 80142c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80142c8:	4b20      	ldr	r3, [pc, #128]	@ (801434c <USBD_LL_Init+0xb4>)
 80142ca:	2200      	movs	r2, #0
 80142cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80142ce:	4b1f      	ldr	r3, [pc, #124]	@ (801434c <USBD_LL_Init+0xb4>)
 80142d0:	2200      	movs	r2, #0
 80142d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80142d4:	4b1d      	ldr	r3, [pc, #116]	@ (801434c <USBD_LL_Init+0xb4>)
 80142d6:	2200      	movs	r2, #0
 80142d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80142da:	4b1c      	ldr	r3, [pc, #112]	@ (801434c <USBD_LL_Init+0xb4>)
 80142dc:	2200      	movs	r2, #0
 80142de:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80142e0:	4b1a      	ldr	r3, [pc, #104]	@ (801434c <USBD_LL_Init+0xb4>)
 80142e2:	2200      	movs	r2, #0
 80142e4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80142e6:	4b19      	ldr	r3, [pc, #100]	@ (801434c <USBD_LL_Init+0xb4>)
 80142e8:	2200      	movs	r2, #0
 80142ea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80142ec:	4b17      	ldr	r3, [pc, #92]	@ (801434c <USBD_LL_Init+0xb4>)
 80142ee:	2200      	movs	r2, #0
 80142f0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80142f2:	4816      	ldr	r0, [pc, #88]	@ (801434c <USBD_LL_Init+0xb4>)
 80142f4:	f7f3 ff8b 	bl	800820e <HAL_PCD_Init>
 80142f8:	4603      	mov	r3, r0
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d001      	beq.n	8014302 <USBD_LL_Init+0x6a>
  {
    Error_Handler();
 80142fe:	f7f0 fdbd 	bl	8004e7c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00 , PCD_SNG_BUF, 0x14);
 8014302:	2314      	movs	r3, #20
 8014304:	2200      	movs	r2, #0
 8014306:	2100      	movs	r1, #0
 8014308:	4810      	ldr	r0, [pc, #64]	@ (801434c <USBD_LL_Init+0xb4>)
 801430a:	f7f5 fb37 	bl	800997c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80 , PCD_SNG_BUF, 0x54);
 801430e:	2354      	movs	r3, #84	@ 0x54
 8014310:	2200      	movs	r2, #0
 8014312:	2180      	movs	r1, #128	@ 0x80
 8014314:	480d      	ldr	r0, [pc, #52]	@ (801434c <USBD_LL_Init+0xb4>)
 8014316:	f7f5 fb31 	bl	800997c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, CDC_IN_EP, PCD_SNG_BUF, 0x94);
 801431a:	2394      	movs	r3, #148	@ 0x94
 801431c:	2200      	movs	r2, #0
 801431e:	2181      	movs	r1, #129	@ 0x81
 8014320:	480a      	ldr	r0, [pc, #40]	@ (801434c <USBD_LL_Init+0xb4>)
 8014322:	f7f5 fb2b 	bl	800997c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, CDC_OUT_EP, PCD_SNG_BUF, 0xD4);
 8014326:	23d4      	movs	r3, #212	@ 0xd4
 8014328:	2200      	movs	r2, #0
 801432a:	2101      	movs	r1, #1
 801432c:	4807      	ldr	r0, [pc, #28]	@ (801434c <USBD_LL_Init+0xb4>)
 801432e:	f7f5 fb25 	bl	800997c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, CDC_CMD_EP, PCD_SNG_BUF, 0x114);
 8014332:	f44f 738a 	mov.w	r3, #276	@ 0x114
 8014336:	2200      	movs	r2, #0
 8014338:	2182      	movs	r1, #130	@ 0x82
 801433a:	4804      	ldr	r0, [pc, #16]	@ (801434c <USBD_LL_Init+0xb4>)
 801433c:	f7f5 fb1e 	bl	800997c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 8014340:	2300      	movs	r3, #0
}
 8014342:	4618      	mov	r0, r3
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}
 801434a:	bf00      	nop
 801434c:	20029c94 	.word	0x20029c94
 8014350:	40016000 	.word	0x40016000

08014354 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b084      	sub	sp, #16
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	4608      	mov	r0, r1
 801435e:	4611      	mov	r1, r2
 8014360:	461a      	mov	r2, r3
 8014362:	4603      	mov	r3, r0
 8014364:	70fb      	strb	r3, [r7, #3]
 8014366:	460b      	mov	r3, r1
 8014368:	70bb      	strb	r3, [r7, #2]
 801436a:	4613      	mov	r3, r2
 801436c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801436e:	2300      	movs	r3, #0
 8014370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014372:	2300      	movs	r3, #0
 8014374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801437c:	78bb      	ldrb	r3, [r7, #2]
 801437e:	883a      	ldrh	r2, [r7, #0]
 8014380:	78f9      	ldrb	r1, [r7, #3]
 8014382:	f7f4 f92e 	bl	80085e2 <HAL_PCD_EP_Open>
 8014386:	4603      	mov	r3, r0
 8014388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801438a:	7bfb      	ldrb	r3, [r7, #15]
 801438c:	4618      	mov	r0, r3
 801438e:	f000 f91d 	bl	80145cc <USBD_Get_USB_Status>
 8014392:	4603      	mov	r3, r0
 8014394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014396:	7bbb      	ldrb	r3, [r7, #14]
}
 8014398:	4618      	mov	r0, r3
 801439a:	3710      	adds	r7, #16
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	460b      	mov	r3, r1
 80143aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143ac:	2300      	movs	r3, #0
 80143ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143b0:	2300      	movs	r3, #0
 80143b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80143ba:	78fa      	ldrb	r2, [r7, #3]
 80143bc:	4611      	mov	r1, r2
 80143be:	4618      	mov	r0, r3
 80143c0:	f7f4 f970 	bl	80086a4 <HAL_PCD_EP_Close>
 80143c4:	4603      	mov	r3, r0
 80143c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80143c8:	7bfb      	ldrb	r3, [r7, #15]
 80143ca:	4618      	mov	r0, r3
 80143cc:	f000 f8fe 	bl	80145cc <USBD_Get_USB_Status>
 80143d0:	4603      	mov	r3, r0
 80143d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3710      	adds	r7, #16
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}

080143de <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143de:	b580      	push	{r7, lr}
 80143e0:	b084      	sub	sp, #16
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
 80143e6:	460b      	mov	r3, r1
 80143e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143ea:	2300      	movs	r3, #0
 80143ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143ee:	2300      	movs	r3, #0
 80143f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80143f8:	78fa      	ldrb	r2, [r7, #3]
 80143fa:	4611      	mov	r1, r2
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7f4 fa1d 	bl	800883c <HAL_PCD_EP_SetStall>
 8014402:	4603      	mov	r3, r0
 8014404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014406:	7bfb      	ldrb	r3, [r7, #15]
 8014408:	4618      	mov	r0, r3
 801440a:	f000 f8df 	bl	80145cc <USBD_Get_USB_Status>
 801440e:	4603      	mov	r3, r0
 8014410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014412:	7bbb      	ldrb	r3, [r7, #14]
}
 8014414:	4618      	mov	r0, r3
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b084      	sub	sp, #16
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	460b      	mov	r3, r1
 8014426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014428:	2300      	movs	r3, #0
 801442a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801442c:	2300      	movs	r3, #0
 801442e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014436:	78fa      	ldrb	r2, [r7, #3]
 8014438:	4611      	mov	r1, r2
 801443a:	4618      	mov	r0, r3
 801443c:	f7f4 fa52 	bl	80088e4 <HAL_PCD_EP_ClrStall>
 8014440:	4603      	mov	r3, r0
 8014442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014444:	7bfb      	ldrb	r3, [r7, #15]
 8014446:	4618      	mov	r0, r3
 8014448:	f000 f8c0 	bl	80145cc <USBD_Get_USB_Status>
 801444c:	4603      	mov	r3, r0
 801444e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014450:	7bbb      	ldrb	r3, [r7, #14]
}
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801445a:	b480      	push	{r7}
 801445c:	b085      	sub	sp, #20
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
 8014462:	460b      	mov	r3, r1
 8014464:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801446c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801446e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014472:	2b00      	cmp	r3, #0
 8014474:	da0b      	bge.n	801448e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014476:	78fb      	ldrb	r3, [r7, #3]
 8014478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801447c:	68f9      	ldr	r1, [r7, #12]
 801447e:	4613      	mov	r3, r2
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	4413      	add	r3, r2
 8014484:	00db      	lsls	r3, r3, #3
 8014486:	440b      	add	r3, r1
 8014488:	3316      	adds	r3, #22
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	e00b      	b.n	80144a6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801448e:	78fb      	ldrb	r3, [r7, #3]
 8014490:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014494:	68f9      	ldr	r1, [r7, #12]
 8014496:	4613      	mov	r3, r2
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	4413      	add	r3, r2
 801449c:	00db      	lsls	r3, r3, #3
 801449e:	440b      	add	r3, r1
 80144a0:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 80144a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3714      	adds	r7, #20
 80144aa:	46bd      	mov	sp, r7
 80144ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b0:	4770      	bx	lr

080144b2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80144b2:	b580      	push	{r7, lr}
 80144b4:	b084      	sub	sp, #16
 80144b6:	af00      	add	r7, sp, #0
 80144b8:	6078      	str	r0, [r7, #4]
 80144ba:	460b      	mov	r3, r1
 80144bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144be:	2300      	movs	r3, #0
 80144c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80144c2:	2300      	movs	r3, #0
 80144c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80144cc:	78fa      	ldrb	r2, [r7, #3]
 80144ce:	4611      	mov	r1, r2
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7f4 f862 	bl	800859a <HAL_PCD_SetAddress>
 80144d6:	4603      	mov	r3, r0
 80144d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80144da:	7bfb      	ldrb	r3, [r7, #15]
 80144dc:	4618      	mov	r0, r3
 80144de:	f000 f875 	bl	80145cc <USBD_Get_USB_Status>
 80144e2:	4603      	mov	r3, r0
 80144e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80144e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3710      	adds	r7, #16
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b086      	sub	sp, #24
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	607a      	str	r2, [r7, #4]
 80144fa:	603b      	str	r3, [r7, #0]
 80144fc:	460b      	mov	r3, r1
 80144fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014500:	2300      	movs	r3, #0
 8014502:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014504:	2300      	movs	r3, #0
 8014506:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801450e:	7af9      	ldrb	r1, [r7, #11]
 8014510:	683b      	ldr	r3, [r7, #0]
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	f7f4 f95a 	bl	80087cc <HAL_PCD_EP_Transmit>
 8014518:	4603      	mov	r3, r0
 801451a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801451c:	7dfb      	ldrb	r3, [r7, #23]
 801451e:	4618      	mov	r0, r3
 8014520:	f000 f854 	bl	80145cc <USBD_Get_USB_Status>
 8014524:	4603      	mov	r3, r0
 8014526:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014528:	7dbb      	ldrb	r3, [r7, #22]
}
 801452a:	4618      	mov	r0, r3
 801452c:	3718      	adds	r7, #24
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}

08014532 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014532:	b580      	push	{r7, lr}
 8014534:	b086      	sub	sp, #24
 8014536:	af00      	add	r7, sp, #0
 8014538:	60f8      	str	r0, [r7, #12]
 801453a:	607a      	str	r2, [r7, #4]
 801453c:	603b      	str	r3, [r7, #0]
 801453e:	460b      	mov	r3, r1
 8014540:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014542:	2300      	movs	r3, #0
 8014544:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014546:	2300      	movs	r3, #0
 8014548:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014550:	7af9      	ldrb	r1, [r7, #11]
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	f7f4 f8ef 	bl	8008738 <HAL_PCD_EP_Receive>
 801455a:	4603      	mov	r3, r0
 801455c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801455e:	7dfb      	ldrb	r3, [r7, #23]
 8014560:	4618      	mov	r0, r3
 8014562:	f000 f833 	bl	80145cc <USBD_Get_USB_Status>
 8014566:	4603      	mov	r3, r0
 8014568:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801456a:	7dbb      	ldrb	r3, [r7, #22]
}
 801456c:	4618      	mov	r0, r3
 801456e:	3718      	adds	r7, #24
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	460b      	mov	r3, r1
 801457e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014586:	78fa      	ldrb	r2, [r7, #3]
 8014588:	4611      	mov	r1, r2
 801458a:	4618      	mov	r0, r3
 801458c:	f7f4 f906 	bl	800879c <HAL_PCD_EP_GetRxCount>
 8014590:	4603      	mov	r3, r0
}
 8014592:	4618      	mov	r0, r3
 8014594:	3708      	adds	r7, #8
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}
	...

0801459c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801459c:	b480      	push	{r7}
 801459e:	b083      	sub	sp, #12
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80145a4:	4b03      	ldr	r3, [pc, #12]	@ (80145b4 <USBD_static_malloc+0x18>)
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	370c      	adds	r7, #12
 80145aa:	46bd      	mov	sp, r7
 80145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b0:	4770      	bx	lr
 80145b2:	bf00      	nop
 80145b4:	20029f74 	.word	0x20029f74

080145b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80145b8:	b480      	push	{r7}
 80145ba:	b083      	sub	sp, #12
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]

}
 80145c0:	bf00      	nop
 80145c2:	370c      	adds	r7, #12
 80145c4:	46bd      	mov	sp, r7
 80145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ca:	4770      	bx	lr

080145cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80145cc:	b480      	push	{r7}
 80145ce:	b085      	sub	sp, #20
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	4603      	mov	r3, r0
 80145d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145d6:	2300      	movs	r3, #0
 80145d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80145da:	79fb      	ldrb	r3, [r7, #7]
 80145dc:	2b03      	cmp	r3, #3
 80145de:	d817      	bhi.n	8014610 <USBD_Get_USB_Status+0x44>
 80145e0:	a201      	add	r2, pc, #4	@ (adr r2, 80145e8 <USBD_Get_USB_Status+0x1c>)
 80145e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145e6:	bf00      	nop
 80145e8:	080145f9 	.word	0x080145f9
 80145ec:	080145ff 	.word	0x080145ff
 80145f0:	08014605 	.word	0x08014605
 80145f4:	0801460b 	.word	0x0801460b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80145f8:	2300      	movs	r3, #0
 80145fa:	73fb      	strb	r3, [r7, #15]
    break;
 80145fc:	e00b      	b.n	8014616 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145fe:	2303      	movs	r3, #3
 8014600:	73fb      	strb	r3, [r7, #15]
    break;
 8014602:	e008      	b.n	8014616 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014604:	2301      	movs	r3, #1
 8014606:	73fb      	strb	r3, [r7, #15]
    break;
 8014608:	e005      	b.n	8014616 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801460a:	2303      	movs	r3, #3
 801460c:	73fb      	strb	r3, [r7, #15]
    break;
 801460e:	e002      	b.n	8014616 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014610:	2303      	movs	r3, #3
 8014612:	73fb      	strb	r3, [r7, #15]
    break;
 8014614:	bf00      	nop
  }
  return usb_status;
 8014616:	7bfb      	ldrb	r3, [r7, #15]
}
 8014618:	4618      	mov	r0, r3
 801461a:	3714      	adds	r7, #20
 801461c:	46bd      	mov	sp, r7
 801461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014622:	4770      	bx	lr

08014624 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b086      	sub	sp, #24
 8014628:	af00      	add	r7, sp, #0
 801462a:	60f8      	str	r0, [r7, #12]
 801462c:	60b9      	str	r1, [r7, #8]
 801462e:	4613      	mov	r3, r2
 8014630:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d101      	bne.n	801463c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014638:	2303      	movs	r3, #3
 801463a:	e01f      	b.n	801467c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2200      	movs	r2, #0
 8014640:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	2200      	movs	r2, #0
 8014648:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	2200      	movs	r2, #0
 8014650:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d003      	beq.n	8014662 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	68ba      	ldr	r2, [r7, #8]
 801465e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2201      	movs	r2, #1
 8014666:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	79fa      	ldrb	r2, [r7, #7]
 801466e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014670:	68f8      	ldr	r0, [r7, #12]
 8014672:	f7ff fe11 	bl	8014298 <USBD_LL_Init>
 8014676:	4603      	mov	r3, r0
 8014678:	75fb      	strb	r3, [r7, #23]

  return ret;
 801467a:	7dfb      	ldrb	r3, [r7, #23]
}
 801467c:	4618      	mov	r0, r3
 801467e:	3718      	adds	r7, #24
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801468e:	2300      	movs	r3, #0
 8014690:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d101      	bne.n	801469c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014698:	2303      	movs	r3, #3
 801469a:	e025      	b.n	80146e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	683a      	ldr	r2, [r7, #0]
 80146a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	32ae      	adds	r2, #174	@ 0xae
 80146ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d00f      	beq.n	80146d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	32ae      	adds	r2, #174	@ 0xae
 80146c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146c8:	f107 020e 	add.w	r2, r7, #14
 80146cc:	4610      	mov	r0, r2
 80146ce:	4798      	blx	r3
 80146d0:	4602      	mov	r2, r0
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80146de:	1c5a      	adds	r2, r3, #1
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80146e6:	2300      	movs	r3, #0
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3710      	adds	r7, #16
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80146f0:	b480      	push	{r7}
 80146f2:	b083      	sub	sp, #12
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80146f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	370c      	adds	r7, #12
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr

08014706 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014706:	b580      	push	{r7, lr}
 8014708:	b084      	sub	sp, #16
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
 801470e:	460b      	mov	r3, r1
 8014710:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014712:	2300      	movs	r3, #0
 8014714:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801471c:	2b00      	cmp	r3, #0
 801471e:	d009      	beq.n	8014734 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	78fa      	ldrb	r2, [r7, #3]
 801472a:	4611      	mov	r1, r2
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	4798      	blx	r3
 8014730:	4603      	mov	r3, r0
 8014732:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014734:	7bfb      	ldrb	r3, [r7, #15]
}
 8014736:	4618      	mov	r0, r3
 8014738:	3710      	adds	r7, #16
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}

0801473e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801473e:	b580      	push	{r7, lr}
 8014740:	b084      	sub	sp, #16
 8014742:	af00      	add	r7, sp, #0
 8014744:	6078      	str	r0, [r7, #4]
 8014746:	460b      	mov	r3, r1
 8014748:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801474a:	2300      	movs	r3, #0
 801474c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014754:	685b      	ldr	r3, [r3, #4]
 8014756:	78fa      	ldrb	r2, [r7, #3]
 8014758:	4611      	mov	r1, r2
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	4798      	blx	r3
 801475e:	4603      	mov	r3, r0
 8014760:	2b00      	cmp	r3, #0
 8014762:	d001      	beq.n	8014768 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014764:	2303      	movs	r3, #3
 8014766:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014768:	7bfb      	ldrb	r3, [r7, #15]
}
 801476a:	4618      	mov	r0, r3
 801476c:	3710      	adds	r7, #16
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}

08014772 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014772:	b580      	push	{r7, lr}
 8014774:	b084      	sub	sp, #16
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014782:	6839      	ldr	r1, [r7, #0]
 8014784:	4618      	mov	r0, r3
 8014786:	f001 f87a 	bl	801587e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2201      	movs	r2, #1
 801478e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014798:	461a      	mov	r2, r3
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80147a6:	f003 031f 	and.w	r3, r3, #31
 80147aa:	2b02      	cmp	r3, #2
 80147ac:	d01a      	beq.n	80147e4 <USBD_LL_SetupStage+0x72>
 80147ae:	2b02      	cmp	r3, #2
 80147b0:	d822      	bhi.n	80147f8 <USBD_LL_SetupStage+0x86>
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d002      	beq.n	80147bc <USBD_LL_SetupStage+0x4a>
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d00a      	beq.n	80147d0 <USBD_LL_SetupStage+0x5e>
 80147ba:	e01d      	b.n	80147f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80147c2:	4619      	mov	r1, r3
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f000 fad1 	bl	8014d6c <USBD_StdDevReq>
 80147ca:	4603      	mov	r3, r0
 80147cc:	73fb      	strb	r3, [r7, #15]
      break;
 80147ce:	e020      	b.n	8014812 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80147d6:	4619      	mov	r1, r3
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f000 fb39 	bl	8014e50 <USBD_StdItfReq>
 80147de:	4603      	mov	r3, r0
 80147e0:	73fb      	strb	r3, [r7, #15]
      break;
 80147e2:	e016      	b.n	8014812 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80147ea:	4619      	mov	r1, r3
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f000 fb9b 	bl	8014f28 <USBD_StdEPReq>
 80147f2:	4603      	mov	r3, r0
 80147f4:	73fb      	strb	r3, [r7, #15]
      break;
 80147f6:	e00c      	b.n	8014812 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80147fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014802:	b2db      	uxtb	r3, r3
 8014804:	4619      	mov	r1, r3
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f7ff fde9 	bl	80143de <USBD_LL_StallEP>
 801480c:	4603      	mov	r3, r0
 801480e:	73fb      	strb	r3, [r7, #15]
      break;
 8014810:	bf00      	nop
  }

  return ret;
 8014812:	7bfb      	ldrb	r3, [r7, #15]
}
 8014814:	4618      	mov	r0, r3
 8014816:	3710      	adds	r7, #16
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}

0801481c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b086      	sub	sp, #24
 8014820:	af00      	add	r7, sp, #0
 8014822:	60f8      	str	r0, [r7, #12]
 8014824:	460b      	mov	r3, r1
 8014826:	607a      	str	r2, [r7, #4]
 8014828:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801482a:	2300      	movs	r3, #0
 801482c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801482e:	7afb      	ldrb	r3, [r7, #11]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d16e      	bne.n	8014912 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801483a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014842:	2b03      	cmp	r3, #3
 8014844:	f040 8098 	bne.w	8014978 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	689a      	ldr	r2, [r3, #8]
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	68db      	ldr	r3, [r3, #12]
 8014850:	429a      	cmp	r2, r3
 8014852:	d913      	bls.n	801487c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	689a      	ldr	r2, [r3, #8]
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	68db      	ldr	r3, [r3, #12]
 801485c:	1ad2      	subs	r2, r2, r3
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	68da      	ldr	r2, [r3, #12]
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	689b      	ldr	r3, [r3, #8]
 801486a:	4293      	cmp	r3, r2
 801486c:	bf28      	it	cs
 801486e:	4613      	movcs	r3, r2
 8014870:	461a      	mov	r2, r3
 8014872:	6879      	ldr	r1, [r7, #4]
 8014874:	68f8      	ldr	r0, [r7, #12]
 8014876:	f001 fa0f 	bl	8015c98 <USBD_CtlContinueRx>
 801487a:	e07d      	b.n	8014978 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014882:	f003 031f 	and.w	r3, r3, #31
 8014886:	2b02      	cmp	r3, #2
 8014888:	d014      	beq.n	80148b4 <USBD_LL_DataOutStage+0x98>
 801488a:	2b02      	cmp	r3, #2
 801488c:	d81d      	bhi.n	80148ca <USBD_LL_DataOutStage+0xae>
 801488e:	2b00      	cmp	r3, #0
 8014890:	d002      	beq.n	8014898 <USBD_LL_DataOutStage+0x7c>
 8014892:	2b01      	cmp	r3, #1
 8014894:	d003      	beq.n	801489e <USBD_LL_DataOutStage+0x82>
 8014896:	e018      	b.n	80148ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014898:	2300      	movs	r3, #0
 801489a:	75bb      	strb	r3, [r7, #22]
            break;
 801489c:	e018      	b.n	80148d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	4619      	mov	r1, r3
 80148a8:	68f8      	ldr	r0, [r7, #12]
 80148aa:	f000 f9d2 	bl	8014c52 <USBD_CoreFindIF>
 80148ae:	4603      	mov	r3, r0
 80148b0:	75bb      	strb	r3, [r7, #22]
            break;
 80148b2:	e00d      	b.n	80148d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	4619      	mov	r1, r3
 80148be:	68f8      	ldr	r0, [r7, #12]
 80148c0:	f000 f9d4 	bl	8014c6c <USBD_CoreFindEP>
 80148c4:	4603      	mov	r3, r0
 80148c6:	75bb      	strb	r3, [r7, #22]
            break;
 80148c8:	e002      	b.n	80148d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80148ca:	2300      	movs	r3, #0
 80148cc:	75bb      	strb	r3, [r7, #22]
            break;
 80148ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80148d0:	7dbb      	ldrb	r3, [r7, #22]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d119      	bne.n	801490a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	2b03      	cmp	r3, #3
 80148e0:	d113      	bne.n	801490a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80148e2:	7dba      	ldrb	r2, [r7, #22]
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	32ae      	adds	r2, #174	@ 0xae
 80148e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ec:	691b      	ldr	r3, [r3, #16]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d00b      	beq.n	801490a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80148f2:	7dba      	ldrb	r2, [r7, #22]
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80148fa:	7dba      	ldrb	r2, [r7, #22]
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	32ae      	adds	r2, #174	@ 0xae
 8014900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	68f8      	ldr	r0, [r7, #12]
 8014908:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801490a:	68f8      	ldr	r0, [r7, #12]
 801490c:	f001 f9d5 	bl	8015cba <USBD_CtlSendStatus>
 8014910:	e032      	b.n	8014978 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014912:	7afb      	ldrb	r3, [r7, #11]
 8014914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014918:	b2db      	uxtb	r3, r3
 801491a:	4619      	mov	r1, r3
 801491c:	68f8      	ldr	r0, [r7, #12]
 801491e:	f000 f9a5 	bl	8014c6c <USBD_CoreFindEP>
 8014922:	4603      	mov	r3, r0
 8014924:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014926:	7dbb      	ldrb	r3, [r7, #22]
 8014928:	2bff      	cmp	r3, #255	@ 0xff
 801492a:	d025      	beq.n	8014978 <USBD_LL_DataOutStage+0x15c>
 801492c:	7dbb      	ldrb	r3, [r7, #22]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d122      	bne.n	8014978 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014938:	b2db      	uxtb	r3, r3
 801493a:	2b03      	cmp	r3, #3
 801493c:	d117      	bne.n	801496e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801493e:	7dba      	ldrb	r2, [r7, #22]
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	32ae      	adds	r2, #174	@ 0xae
 8014944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014948:	699b      	ldr	r3, [r3, #24]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d00f      	beq.n	801496e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801494e:	7dba      	ldrb	r2, [r7, #22]
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014956:	7dba      	ldrb	r2, [r7, #22]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	32ae      	adds	r2, #174	@ 0xae
 801495c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014960:	699b      	ldr	r3, [r3, #24]
 8014962:	7afa      	ldrb	r2, [r7, #11]
 8014964:	4611      	mov	r1, r2
 8014966:	68f8      	ldr	r0, [r7, #12]
 8014968:	4798      	blx	r3
 801496a:	4603      	mov	r3, r0
 801496c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801496e:	7dfb      	ldrb	r3, [r7, #23]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d001      	beq.n	8014978 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014974:	7dfb      	ldrb	r3, [r7, #23]
 8014976:	e000      	b.n	801497a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014978:	2300      	movs	r3, #0
}
 801497a:	4618      	mov	r0, r3
 801497c:	3718      	adds	r7, #24
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}

08014982 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014982:	b580      	push	{r7, lr}
 8014984:	b086      	sub	sp, #24
 8014986:	af00      	add	r7, sp, #0
 8014988:	60f8      	str	r0, [r7, #12]
 801498a:	460b      	mov	r3, r1
 801498c:	607a      	str	r2, [r7, #4]
 801498e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014990:	7afb      	ldrb	r3, [r7, #11]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d16f      	bne.n	8014a76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	3314      	adds	r3, #20
 801499a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80149a2:	2b02      	cmp	r3, #2
 80149a4:	d15a      	bne.n	8014a5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	689a      	ldr	r2, [r3, #8]
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d914      	bls.n	80149dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80149b2:	693b      	ldr	r3, [r7, #16]
 80149b4:	689a      	ldr	r2, [r3, #8]
 80149b6:	693b      	ldr	r3, [r7, #16]
 80149b8:	68db      	ldr	r3, [r3, #12]
 80149ba:	1ad2      	subs	r2, r2, r3
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	689b      	ldr	r3, [r3, #8]
 80149c4:	461a      	mov	r2, r3
 80149c6:	6879      	ldr	r1, [r7, #4]
 80149c8:	68f8      	ldr	r0, [r7, #12]
 80149ca:	f001 f937 	bl	8015c3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80149ce:	2300      	movs	r3, #0
 80149d0:	2200      	movs	r2, #0
 80149d2:	2100      	movs	r1, #0
 80149d4:	68f8      	ldr	r0, [r7, #12]
 80149d6:	f7ff fdac 	bl	8014532 <USBD_LL_PrepareReceive>
 80149da:	e03f      	b.n	8014a5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	68da      	ldr	r2, [r3, #12]
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	689b      	ldr	r3, [r3, #8]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d11c      	bne.n	8014a22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80149e8:	693b      	ldr	r3, [r7, #16]
 80149ea:	685a      	ldr	r2, [r3, #4]
 80149ec:	693b      	ldr	r3, [r7, #16]
 80149ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d316      	bcc.n	8014a22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	685a      	ldr	r2, [r3, #4]
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d20f      	bcs.n	8014a22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014a02:	2200      	movs	r2, #0
 8014a04:	2100      	movs	r1, #0
 8014a06:	68f8      	ldr	r0, [r7, #12]
 8014a08:	f001 f918 	bl	8015c3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014a14:	2300      	movs	r3, #0
 8014a16:	2200      	movs	r2, #0
 8014a18:	2100      	movs	r1, #0
 8014a1a:	68f8      	ldr	r0, [r7, #12]
 8014a1c:	f7ff fd89 	bl	8014532 <USBD_LL_PrepareReceive>
 8014a20:	e01c      	b.n	8014a5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a28:	b2db      	uxtb	r3, r3
 8014a2a:	2b03      	cmp	r3, #3
 8014a2c:	d10f      	bne.n	8014a4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a34:	68db      	ldr	r3, [r3, #12]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d009      	beq.n	8014a4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a4e:	2180      	movs	r1, #128	@ 0x80
 8014a50:	68f8      	ldr	r0, [r7, #12]
 8014a52:	f7ff fcc4 	bl	80143de <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014a56:	68f8      	ldr	r0, [r7, #12]
 8014a58:	f001 f942 	bl	8015ce0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d03a      	beq.n	8014adc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014a66:	68f8      	ldr	r0, [r7, #12]
 8014a68:	f7ff fe42 	bl	80146f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2200      	movs	r2, #0
 8014a70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8014a74:	e032      	b.n	8014adc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014a76:	7afb      	ldrb	r3, [r7, #11]
 8014a78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	4619      	mov	r1, r3
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	f000 f8f3 	bl	8014c6c <USBD_CoreFindEP>
 8014a86:	4603      	mov	r3, r0
 8014a88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014a8a:	7dfb      	ldrb	r3, [r7, #23]
 8014a8c:	2bff      	cmp	r3, #255	@ 0xff
 8014a8e:	d025      	beq.n	8014adc <USBD_LL_DataInStage+0x15a>
 8014a90:	7dfb      	ldrb	r3, [r7, #23]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d122      	bne.n	8014adc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a9c:	b2db      	uxtb	r3, r3
 8014a9e:	2b03      	cmp	r3, #3
 8014aa0:	d11c      	bne.n	8014adc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014aa2:	7dfa      	ldrb	r2, [r7, #23]
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	32ae      	adds	r2, #174	@ 0xae
 8014aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aac:	695b      	ldr	r3, [r3, #20]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d014      	beq.n	8014adc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014ab2:	7dfa      	ldrb	r2, [r7, #23]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014aba:	7dfa      	ldrb	r2, [r7, #23]
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	32ae      	adds	r2, #174	@ 0xae
 8014ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ac4:	695b      	ldr	r3, [r3, #20]
 8014ac6:	7afa      	ldrb	r2, [r7, #11]
 8014ac8:	4611      	mov	r1, r2
 8014aca:	68f8      	ldr	r0, [r7, #12]
 8014acc:	4798      	blx	r3
 8014ace:	4603      	mov	r3, r0
 8014ad0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014ad2:	7dbb      	ldrb	r3, [r7, #22]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d001      	beq.n	8014adc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014ad8:	7dbb      	ldrb	r3, [r7, #22]
 8014ada:	e000      	b.n	8014ade <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014adc:	2300      	movs	r3, #0
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3718      	adds	r7, #24
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}

08014ae6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014ae6:	b580      	push	{r7, lr}
 8014ae8:	b084      	sub	sp, #16
 8014aea:	af00      	add	r7, sp, #0
 8014aec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014aee:	2300      	movs	r3, #0
 8014af0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2201      	movs	r2, #1
 8014af6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2200      	movs	r2, #0
 8014afe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2200      	movs	r2, #0
 8014b06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d014      	beq.n	8014b4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d00e      	beq.n	8014b4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	687a      	ldr	r2, [r7, #4]
 8014b38:	6852      	ldr	r2, [r2, #4]
 8014b3a:	b2d2      	uxtb	r2, r2
 8014b3c:	4611      	mov	r1, r2
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	4798      	blx	r3
 8014b42:	4603      	mov	r3, r0
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d001      	beq.n	8014b4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014b48:	2303      	movs	r3, #3
 8014b4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014b4c:	2340      	movs	r3, #64	@ 0x40
 8014b4e:	2200      	movs	r2, #0
 8014b50:	2100      	movs	r1, #0
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f7ff fbfe 	bl	8014354 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2201      	movs	r2, #1
 8014b5c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2240      	movs	r2, #64	@ 0x40
 8014b64:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014b68:	2340      	movs	r3, #64	@ 0x40
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	2180      	movs	r1, #128	@ 0x80
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f7ff fbf0 	bl	8014354 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2201      	movs	r2, #1
 8014b78:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	2240      	movs	r2, #64	@ 0x40
 8014b7e:	621a      	str	r2, [r3, #32]

  return ret;
 8014b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014b8a:	b480      	push	{r7}
 8014b8c:	b083      	sub	sp, #12
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	460b      	mov	r3, r1
 8014b94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	78fa      	ldrb	r2, [r7, #3]
 8014b9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014b9c:	2300      	movs	r3, #0
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	370c      	adds	r7, #12
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr

08014baa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014baa:	b480      	push	{r7}
 8014bac:	b083      	sub	sp, #12
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014bb8:	b2db      	uxtb	r3, r3
 8014bba:	2b04      	cmp	r3, #4
 8014bbc:	d006      	beq.n	8014bcc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014bc4:	b2da      	uxtb	r2, r3
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2204      	movs	r2, #4
 8014bd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	370c      	adds	r7, #12
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr

08014be2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014be2:	b480      	push	{r7}
 8014be4:	b083      	sub	sp, #12
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	2b04      	cmp	r3, #4
 8014bf4:	d106      	bne.n	8014c04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8014bfc:	b2da      	uxtb	r2, r3
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8014c04:	2300      	movs	r3, #0
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	370c      	adds	r7, #12
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr

08014c12 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014c12:	b580      	push	{r7, lr}
 8014c14:	b082      	sub	sp, #8
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	2b03      	cmp	r3, #3
 8014c24:	d110      	bne.n	8014c48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d00b      	beq.n	8014c48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c36:	69db      	ldr	r3, [r3, #28]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d005      	beq.n	8014c48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c42:	69db      	ldr	r3, [r3, #28]
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014c48:	2300      	movs	r3, #0
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3708      	adds	r7, #8
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}

08014c52 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014c52:	b480      	push	{r7}
 8014c54:	b083      	sub	sp, #12
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	6078      	str	r0, [r7, #4]
 8014c5a:	460b      	mov	r3, r1
 8014c5c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014c5e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	370c      	adds	r7, #12
 8014c64:	46bd      	mov	sp, r7
 8014c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6a:	4770      	bx	lr

08014c6c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014c6c:	b480      	push	{r7}
 8014c6e:	b083      	sub	sp, #12
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	460b      	mov	r3, r1
 8014c76:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014c78:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	370c      	adds	r7, #12
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c84:	4770      	bx	lr

08014c86 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b086      	sub	sp, #24
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	6078      	str	r0, [r7, #4]
 8014c8e:	460b      	mov	r3, r1
 8014c90:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	885b      	ldrh	r3, [r3, #2]
 8014ca2:	b29b      	uxth	r3, r3
 8014ca4:	68fa      	ldr	r2, [r7, #12]
 8014ca6:	7812      	ldrb	r2, [r2, #0]
 8014ca8:	4293      	cmp	r3, r2
 8014caa:	d91f      	bls.n	8014cec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	781b      	ldrb	r3, [r3, #0]
 8014cb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014cb2:	e013      	b.n	8014cdc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014cb4:	f107 030a 	add.w	r3, r7, #10
 8014cb8:	4619      	mov	r1, r3
 8014cba:	6978      	ldr	r0, [r7, #20]
 8014cbc:	f000 f81b 	bl	8014cf6 <USBD_GetNextDesc>
 8014cc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	785b      	ldrb	r3, [r3, #1]
 8014cc6:	2b05      	cmp	r3, #5
 8014cc8:	d108      	bne.n	8014cdc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	789b      	ldrb	r3, [r3, #2]
 8014cd2:	78fa      	ldrb	r2, [r7, #3]
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d008      	beq.n	8014cea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	885b      	ldrh	r3, [r3, #2]
 8014ce0:	b29a      	uxth	r2, r3
 8014ce2:	897b      	ldrh	r3, [r7, #10]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d8e5      	bhi.n	8014cb4 <USBD_GetEpDesc+0x2e>
 8014ce8:	e000      	b.n	8014cec <USBD_GetEpDesc+0x66>
          break;
 8014cea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014cec:	693b      	ldr	r3, [r7, #16]
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3718      	adds	r7, #24
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}

08014cf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014cf6:	b480      	push	{r7}
 8014cf8:	b085      	sub	sp, #20
 8014cfa:	af00      	add	r7, sp, #0
 8014cfc:	6078      	str	r0, [r7, #4]
 8014cfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	881b      	ldrh	r3, [r3, #0]
 8014d08:	68fa      	ldr	r2, [r7, #12]
 8014d0a:	7812      	ldrb	r2, [r2, #0]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	b29a      	uxth	r2, r3
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	461a      	mov	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014d20:	68fb      	ldr	r3, [r7, #12]
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3714      	adds	r7, #20
 8014d26:	46bd      	mov	sp, r7
 8014d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2c:	4770      	bx	lr

08014d2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014d2e:	b480      	push	{r7}
 8014d30:	b087      	sub	sp, #28
 8014d32:	af00      	add	r7, sp, #0
 8014d34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	3301      	adds	r3, #1
 8014d44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014d46:	697b      	ldr	r3, [r7, #20]
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014d4c:	8a3b      	ldrh	r3, [r7, #16]
 8014d4e:	021b      	lsls	r3, r3, #8
 8014d50:	b21a      	sxth	r2, r3
 8014d52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014d56:	4313      	orrs	r3, r2
 8014d58:	b21b      	sxth	r3, r3
 8014d5a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014d5c:	89fb      	ldrh	r3, [r7, #14]
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	371c      	adds	r7, #28
 8014d62:	46bd      	mov	sp, r7
 8014d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d68:	4770      	bx	lr
	...

08014d6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	781b      	ldrb	r3, [r3, #0]
 8014d7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014d82:	2b40      	cmp	r3, #64	@ 0x40
 8014d84:	d005      	beq.n	8014d92 <USBD_StdDevReq+0x26>
 8014d86:	2b40      	cmp	r3, #64	@ 0x40
 8014d88:	d857      	bhi.n	8014e3a <USBD_StdDevReq+0xce>
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d00f      	beq.n	8014dae <USBD_StdDevReq+0x42>
 8014d8e:	2b20      	cmp	r3, #32
 8014d90:	d153      	bne.n	8014e3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	32ae      	adds	r2, #174	@ 0xae
 8014d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014da0:	689b      	ldr	r3, [r3, #8]
 8014da2:	6839      	ldr	r1, [r7, #0]
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	4798      	blx	r3
 8014da8:	4603      	mov	r3, r0
 8014daa:	73fb      	strb	r3, [r7, #15]
      break;
 8014dac:	e04a      	b.n	8014e44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	785b      	ldrb	r3, [r3, #1]
 8014db2:	2b09      	cmp	r3, #9
 8014db4:	d83b      	bhi.n	8014e2e <USBD_StdDevReq+0xc2>
 8014db6:	a201      	add	r2, pc, #4	@ (adr r2, 8014dbc <USBD_StdDevReq+0x50>)
 8014db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dbc:	08014e11 	.word	0x08014e11
 8014dc0:	08014e25 	.word	0x08014e25
 8014dc4:	08014e2f 	.word	0x08014e2f
 8014dc8:	08014e1b 	.word	0x08014e1b
 8014dcc:	08014e2f 	.word	0x08014e2f
 8014dd0:	08014def 	.word	0x08014def
 8014dd4:	08014de5 	.word	0x08014de5
 8014dd8:	08014e2f 	.word	0x08014e2f
 8014ddc:	08014e07 	.word	0x08014e07
 8014de0:	08014df9 	.word	0x08014df9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014de4:	6839      	ldr	r1, [r7, #0]
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f000 fa3c 	bl	8015264 <USBD_GetDescriptor>
          break;
 8014dec:	e024      	b.n	8014e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014dee:	6839      	ldr	r1, [r7, #0]
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f000 fba1 	bl	8015538 <USBD_SetAddress>
          break;
 8014df6:	e01f      	b.n	8014e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014df8:	6839      	ldr	r1, [r7, #0]
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f000 fbe0 	bl	80155c0 <USBD_SetConfig>
 8014e00:	4603      	mov	r3, r0
 8014e02:	73fb      	strb	r3, [r7, #15]
          break;
 8014e04:	e018      	b.n	8014e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014e06:	6839      	ldr	r1, [r7, #0]
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f000 fc83 	bl	8015714 <USBD_GetConfig>
          break;
 8014e0e:	e013      	b.n	8014e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014e10:	6839      	ldr	r1, [r7, #0]
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f000 fcb4 	bl	8015780 <USBD_GetStatus>
          break;
 8014e18:	e00e      	b.n	8014e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014e1a:	6839      	ldr	r1, [r7, #0]
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f000 fce3 	bl	80157e8 <USBD_SetFeature>
          break;
 8014e22:	e009      	b.n	8014e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014e24:	6839      	ldr	r1, [r7, #0]
 8014e26:	6878      	ldr	r0, [r7, #4]
 8014e28:	f000 fd07 	bl	801583a <USBD_ClrFeature>
          break;
 8014e2c:	e004      	b.n	8014e38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014e2e:	6839      	ldr	r1, [r7, #0]
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f000 fd5e 	bl	80158f2 <USBD_CtlError>
          break;
 8014e36:	bf00      	nop
      }
      break;
 8014e38:	e004      	b.n	8014e44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014e3a:	6839      	ldr	r1, [r7, #0]
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f000 fd58 	bl	80158f2 <USBD_CtlError>
      break;
 8014e42:	bf00      	nop
  }

  return ret;
 8014e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	3710      	adds	r7, #16
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop

08014e50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
 8014e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014e66:	2b40      	cmp	r3, #64	@ 0x40
 8014e68:	d005      	beq.n	8014e76 <USBD_StdItfReq+0x26>
 8014e6a:	2b40      	cmp	r3, #64	@ 0x40
 8014e6c:	d852      	bhi.n	8014f14 <USBD_StdItfReq+0xc4>
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d001      	beq.n	8014e76 <USBD_StdItfReq+0x26>
 8014e72:	2b20      	cmp	r3, #32
 8014e74:	d14e      	bne.n	8014f14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	3b01      	subs	r3, #1
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d840      	bhi.n	8014f06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	889b      	ldrh	r3, [r3, #4]
 8014e88:	b2db      	uxtb	r3, r3
 8014e8a:	2b01      	cmp	r3, #1
 8014e8c:	d836      	bhi.n	8014efc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	889b      	ldrh	r3, [r3, #4]
 8014e92:	b2db      	uxtb	r3, r3
 8014e94:	4619      	mov	r1, r3
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f7ff fedb 	bl	8014c52 <USBD_CoreFindIF>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014ea0:	7bbb      	ldrb	r3, [r7, #14]
 8014ea2:	2bff      	cmp	r3, #255	@ 0xff
 8014ea4:	d01d      	beq.n	8014ee2 <USBD_StdItfReq+0x92>
 8014ea6:	7bbb      	ldrb	r3, [r7, #14]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d11a      	bne.n	8014ee2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014eac:	7bba      	ldrb	r2, [r7, #14]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	32ae      	adds	r2, #174	@ 0xae
 8014eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eb6:	689b      	ldr	r3, [r3, #8]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d00f      	beq.n	8014edc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014ebc:	7bba      	ldrb	r2, [r7, #14]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014ec4:	7bba      	ldrb	r2, [r7, #14]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	32ae      	adds	r2, #174	@ 0xae
 8014eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ece:	689b      	ldr	r3, [r3, #8]
 8014ed0:	6839      	ldr	r1, [r7, #0]
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	4798      	blx	r3
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014eda:	e004      	b.n	8014ee6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014edc:	2303      	movs	r3, #3
 8014ede:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014ee0:	e001      	b.n	8014ee6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014ee2:	2303      	movs	r3, #3
 8014ee4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	88db      	ldrh	r3, [r3, #6]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d110      	bne.n	8014f10 <USBD_StdItfReq+0xc0>
 8014eee:	7bfb      	ldrb	r3, [r7, #15]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d10d      	bne.n	8014f10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f000 fee0 	bl	8015cba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014efa:	e009      	b.n	8014f10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014efc:	6839      	ldr	r1, [r7, #0]
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f000 fcf7 	bl	80158f2 <USBD_CtlError>
          break;
 8014f04:	e004      	b.n	8014f10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014f06:	6839      	ldr	r1, [r7, #0]
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 fcf2 	bl	80158f2 <USBD_CtlError>
          break;
 8014f0e:	e000      	b.n	8014f12 <USBD_StdItfReq+0xc2>
          break;
 8014f10:	bf00      	nop
      }
      break;
 8014f12:	e004      	b.n	8014f1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014f14:	6839      	ldr	r1, [r7, #0]
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f000 fceb 	bl	80158f2 <USBD_CtlError>
      break;
 8014f1c:	bf00      	nop
  }

  return ret;
 8014f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3710      	adds	r7, #16
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}

08014f28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b084      	sub	sp, #16
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
 8014f30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014f32:	2300      	movs	r3, #0
 8014f34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	889b      	ldrh	r3, [r3, #4]
 8014f3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014f44:	2b40      	cmp	r3, #64	@ 0x40
 8014f46:	d007      	beq.n	8014f58 <USBD_StdEPReq+0x30>
 8014f48:	2b40      	cmp	r3, #64	@ 0x40
 8014f4a:	f200 817f 	bhi.w	801524c <USBD_StdEPReq+0x324>
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d02a      	beq.n	8014fa8 <USBD_StdEPReq+0x80>
 8014f52:	2b20      	cmp	r3, #32
 8014f54:	f040 817a 	bne.w	801524c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014f58:	7bbb      	ldrb	r3, [r7, #14]
 8014f5a:	4619      	mov	r1, r3
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f7ff fe85 	bl	8014c6c <USBD_CoreFindEP>
 8014f62:	4603      	mov	r3, r0
 8014f64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014f66:	7b7b      	ldrb	r3, [r7, #13]
 8014f68:	2bff      	cmp	r3, #255	@ 0xff
 8014f6a:	f000 8174 	beq.w	8015256 <USBD_StdEPReq+0x32e>
 8014f6e:	7b7b      	ldrb	r3, [r7, #13]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	f040 8170 	bne.w	8015256 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014f76:	7b7a      	ldrb	r2, [r7, #13]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014f7e:	7b7a      	ldrb	r2, [r7, #13]
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	32ae      	adds	r2, #174	@ 0xae
 8014f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f88:	689b      	ldr	r3, [r3, #8]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	f000 8163 	beq.w	8015256 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014f90:	7b7a      	ldrb	r2, [r7, #13]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	32ae      	adds	r2, #174	@ 0xae
 8014f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f9a:	689b      	ldr	r3, [r3, #8]
 8014f9c:	6839      	ldr	r1, [r7, #0]
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	4798      	blx	r3
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014fa6:	e156      	b.n	8015256 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	785b      	ldrb	r3, [r3, #1]
 8014fac:	2b03      	cmp	r3, #3
 8014fae:	d008      	beq.n	8014fc2 <USBD_StdEPReq+0x9a>
 8014fb0:	2b03      	cmp	r3, #3
 8014fb2:	f300 8145 	bgt.w	8015240 <USBD_StdEPReq+0x318>
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f000 809b 	beq.w	80150f2 <USBD_StdEPReq+0x1ca>
 8014fbc:	2b01      	cmp	r3, #1
 8014fbe:	d03c      	beq.n	801503a <USBD_StdEPReq+0x112>
 8014fc0:	e13e      	b.n	8015240 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fc8:	b2db      	uxtb	r3, r3
 8014fca:	2b02      	cmp	r3, #2
 8014fcc:	d002      	beq.n	8014fd4 <USBD_StdEPReq+0xac>
 8014fce:	2b03      	cmp	r3, #3
 8014fd0:	d016      	beq.n	8015000 <USBD_StdEPReq+0xd8>
 8014fd2:	e02c      	b.n	801502e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014fd4:	7bbb      	ldrb	r3, [r7, #14]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d00d      	beq.n	8014ff6 <USBD_StdEPReq+0xce>
 8014fda:	7bbb      	ldrb	r3, [r7, #14]
 8014fdc:	2b80      	cmp	r3, #128	@ 0x80
 8014fde:	d00a      	beq.n	8014ff6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014fe0:	7bbb      	ldrb	r3, [r7, #14]
 8014fe2:	4619      	mov	r1, r3
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f7ff f9fa 	bl	80143de <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014fea:	2180      	movs	r1, #128	@ 0x80
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f7ff f9f6 	bl	80143de <USBD_LL_StallEP>
 8014ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014ff4:	e020      	b.n	8015038 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014ff6:	6839      	ldr	r1, [r7, #0]
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f000 fc7a 	bl	80158f2 <USBD_CtlError>
              break;
 8014ffe:	e01b      	b.n	8015038 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	885b      	ldrh	r3, [r3, #2]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d10e      	bne.n	8015026 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015008:	7bbb      	ldrb	r3, [r7, #14]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d00b      	beq.n	8015026 <USBD_StdEPReq+0xfe>
 801500e:	7bbb      	ldrb	r3, [r7, #14]
 8015010:	2b80      	cmp	r3, #128	@ 0x80
 8015012:	d008      	beq.n	8015026 <USBD_StdEPReq+0xfe>
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	88db      	ldrh	r3, [r3, #6]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d104      	bne.n	8015026 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801501c:	7bbb      	ldrb	r3, [r7, #14]
 801501e:	4619      	mov	r1, r3
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7ff f9dc 	bl	80143de <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f000 fe47 	bl	8015cba <USBD_CtlSendStatus>

              break;
 801502c:	e004      	b.n	8015038 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801502e:	6839      	ldr	r1, [r7, #0]
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f000 fc5e 	bl	80158f2 <USBD_CtlError>
              break;
 8015036:	bf00      	nop
          }
          break;
 8015038:	e107      	b.n	801524a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015040:	b2db      	uxtb	r3, r3
 8015042:	2b02      	cmp	r3, #2
 8015044:	d002      	beq.n	801504c <USBD_StdEPReq+0x124>
 8015046:	2b03      	cmp	r3, #3
 8015048:	d016      	beq.n	8015078 <USBD_StdEPReq+0x150>
 801504a:	e04b      	b.n	80150e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801504c:	7bbb      	ldrb	r3, [r7, #14]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00d      	beq.n	801506e <USBD_StdEPReq+0x146>
 8015052:	7bbb      	ldrb	r3, [r7, #14]
 8015054:	2b80      	cmp	r3, #128	@ 0x80
 8015056:	d00a      	beq.n	801506e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015058:	7bbb      	ldrb	r3, [r7, #14]
 801505a:	4619      	mov	r1, r3
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7ff f9be 	bl	80143de <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015062:	2180      	movs	r1, #128	@ 0x80
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7ff f9ba 	bl	80143de <USBD_LL_StallEP>
 801506a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801506c:	e040      	b.n	80150f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801506e:	6839      	ldr	r1, [r7, #0]
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 fc3e 	bl	80158f2 <USBD_CtlError>
              break;
 8015076:	e03b      	b.n	80150f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	885b      	ldrh	r3, [r3, #2]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d136      	bne.n	80150ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015080:	7bbb      	ldrb	r3, [r7, #14]
 8015082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015086:	2b00      	cmp	r3, #0
 8015088:	d004      	beq.n	8015094 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801508a:	7bbb      	ldrb	r3, [r7, #14]
 801508c:	4619      	mov	r1, r3
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7ff f9c4 	bl	801441c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f000 fe10 	bl	8015cba <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801509a:	7bbb      	ldrb	r3, [r7, #14]
 801509c:	4619      	mov	r1, r3
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f7ff fde4 	bl	8014c6c <USBD_CoreFindEP>
 80150a4:	4603      	mov	r3, r0
 80150a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80150a8:	7b7b      	ldrb	r3, [r7, #13]
 80150aa:	2bff      	cmp	r3, #255	@ 0xff
 80150ac:	d01f      	beq.n	80150ee <USBD_StdEPReq+0x1c6>
 80150ae:	7b7b      	ldrb	r3, [r7, #13]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d11c      	bne.n	80150ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80150b4:	7b7a      	ldrb	r2, [r7, #13]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80150bc:	7b7a      	ldrb	r2, [r7, #13]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	32ae      	adds	r2, #174	@ 0xae
 80150c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c6:	689b      	ldr	r3, [r3, #8]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d010      	beq.n	80150ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80150cc:	7b7a      	ldrb	r2, [r7, #13]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	32ae      	adds	r2, #174	@ 0xae
 80150d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150d6:	689b      	ldr	r3, [r3, #8]
 80150d8:	6839      	ldr	r1, [r7, #0]
 80150da:	6878      	ldr	r0, [r7, #4]
 80150dc:	4798      	blx	r3
 80150de:	4603      	mov	r3, r0
 80150e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80150e2:	e004      	b.n	80150ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80150e4:	6839      	ldr	r1, [r7, #0]
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f000 fc03 	bl	80158f2 <USBD_CtlError>
              break;
 80150ec:	e000      	b.n	80150f0 <USBD_StdEPReq+0x1c8>
              break;
 80150ee:	bf00      	nop
          }
          break;
 80150f0:	e0ab      	b.n	801524a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150f8:	b2db      	uxtb	r3, r3
 80150fa:	2b02      	cmp	r3, #2
 80150fc:	d002      	beq.n	8015104 <USBD_StdEPReq+0x1dc>
 80150fe:	2b03      	cmp	r3, #3
 8015100:	d032      	beq.n	8015168 <USBD_StdEPReq+0x240>
 8015102:	e097      	b.n	8015234 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015104:	7bbb      	ldrb	r3, [r7, #14]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d007      	beq.n	801511a <USBD_StdEPReq+0x1f2>
 801510a:	7bbb      	ldrb	r3, [r7, #14]
 801510c:	2b80      	cmp	r3, #128	@ 0x80
 801510e:	d004      	beq.n	801511a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015110:	6839      	ldr	r1, [r7, #0]
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f000 fbed 	bl	80158f2 <USBD_CtlError>
                break;
 8015118:	e091      	b.n	801523e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801511a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801511e:	2b00      	cmp	r3, #0
 8015120:	da0b      	bge.n	801513a <USBD_StdEPReq+0x212>
 8015122:	7bbb      	ldrb	r3, [r7, #14]
 8015124:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015128:	4613      	mov	r3, r2
 801512a:	009b      	lsls	r3, r3, #2
 801512c:	4413      	add	r3, r2
 801512e:	009b      	lsls	r3, r3, #2
 8015130:	3310      	adds	r3, #16
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	4413      	add	r3, r2
 8015136:	3304      	adds	r3, #4
 8015138:	e00b      	b.n	8015152 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801513a:	7bbb      	ldrb	r3, [r7, #14]
 801513c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015140:	4613      	mov	r3, r2
 8015142:	009b      	lsls	r3, r3, #2
 8015144:	4413      	add	r3, r2
 8015146:	009b      	lsls	r3, r3, #2
 8015148:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801514c:	687a      	ldr	r2, [r7, #4]
 801514e:	4413      	add	r3, r2
 8015150:	3304      	adds	r3, #4
 8015152:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	2200      	movs	r2, #0
 8015158:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	2202      	movs	r2, #2
 801515e:	4619      	mov	r1, r3
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f000 fd50 	bl	8015c06 <USBD_CtlSendData>
              break;
 8015166:	e06a      	b.n	801523e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801516c:	2b00      	cmp	r3, #0
 801516e:	da11      	bge.n	8015194 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015170:	7bbb      	ldrb	r3, [r7, #14]
 8015172:	f003 020f 	and.w	r2, r3, #15
 8015176:	6879      	ldr	r1, [r7, #4]
 8015178:	4613      	mov	r3, r2
 801517a:	009b      	lsls	r3, r3, #2
 801517c:	4413      	add	r3, r2
 801517e:	009b      	lsls	r3, r3, #2
 8015180:	440b      	add	r3, r1
 8015182:	3324      	adds	r3, #36	@ 0x24
 8015184:	881b      	ldrh	r3, [r3, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d117      	bne.n	80151ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801518a:	6839      	ldr	r1, [r7, #0]
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f000 fbb0 	bl	80158f2 <USBD_CtlError>
                  break;
 8015192:	e054      	b.n	801523e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015194:	7bbb      	ldrb	r3, [r7, #14]
 8015196:	f003 020f 	and.w	r2, r3, #15
 801519a:	6879      	ldr	r1, [r7, #4]
 801519c:	4613      	mov	r3, r2
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	4413      	add	r3, r2
 80151a2:	009b      	lsls	r3, r3, #2
 80151a4:	440b      	add	r3, r1
 80151a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80151aa:	881b      	ldrh	r3, [r3, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d104      	bne.n	80151ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80151b0:	6839      	ldr	r1, [r7, #0]
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f000 fb9d 	bl	80158f2 <USBD_CtlError>
                  break;
 80151b8:	e041      	b.n	801523e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80151ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	da0b      	bge.n	80151da <USBD_StdEPReq+0x2b2>
 80151c2:	7bbb      	ldrb	r3, [r7, #14]
 80151c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80151c8:	4613      	mov	r3, r2
 80151ca:	009b      	lsls	r3, r3, #2
 80151cc:	4413      	add	r3, r2
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	3310      	adds	r3, #16
 80151d2:	687a      	ldr	r2, [r7, #4]
 80151d4:	4413      	add	r3, r2
 80151d6:	3304      	adds	r3, #4
 80151d8:	e00b      	b.n	80151f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80151da:	7bbb      	ldrb	r3, [r7, #14]
 80151dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80151e0:	4613      	mov	r3, r2
 80151e2:	009b      	lsls	r3, r3, #2
 80151e4:	4413      	add	r3, r2
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80151ec:	687a      	ldr	r2, [r7, #4]
 80151ee:	4413      	add	r3, r2
 80151f0:	3304      	adds	r3, #4
 80151f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80151f4:	7bbb      	ldrb	r3, [r7, #14]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d002      	beq.n	8015200 <USBD_StdEPReq+0x2d8>
 80151fa:	7bbb      	ldrb	r3, [r7, #14]
 80151fc:	2b80      	cmp	r3, #128	@ 0x80
 80151fe:	d103      	bne.n	8015208 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	2200      	movs	r2, #0
 8015204:	601a      	str	r2, [r3, #0]
 8015206:	e00e      	b.n	8015226 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015208:	7bbb      	ldrb	r3, [r7, #14]
 801520a:	4619      	mov	r1, r3
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f7ff f924 	bl	801445a <USBD_LL_IsStallEP>
 8015212:	4603      	mov	r3, r0
 8015214:	2b00      	cmp	r3, #0
 8015216:	d003      	beq.n	8015220 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	2201      	movs	r2, #1
 801521c:	601a      	str	r2, [r3, #0]
 801521e:	e002      	b.n	8015226 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	2200      	movs	r2, #0
 8015224:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	2202      	movs	r2, #2
 801522a:	4619      	mov	r1, r3
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f000 fcea 	bl	8015c06 <USBD_CtlSendData>
              break;
 8015232:	e004      	b.n	801523e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015234:	6839      	ldr	r1, [r7, #0]
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f000 fb5b 	bl	80158f2 <USBD_CtlError>
              break;
 801523c:	bf00      	nop
          }
          break;
 801523e:	e004      	b.n	801524a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015240:	6839      	ldr	r1, [r7, #0]
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f000 fb55 	bl	80158f2 <USBD_CtlError>
          break;
 8015248:	bf00      	nop
      }
      break;
 801524a:	e005      	b.n	8015258 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801524c:	6839      	ldr	r1, [r7, #0]
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f000 fb4f 	bl	80158f2 <USBD_CtlError>
      break;
 8015254:	e000      	b.n	8015258 <USBD_StdEPReq+0x330>
      break;
 8015256:	bf00      	nop
  }

  return ret;
 8015258:	7bfb      	ldrb	r3, [r7, #15]
}
 801525a:	4618      	mov	r0, r3
 801525c:	3710      	adds	r7, #16
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
	...

08015264 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b084      	sub	sp, #16
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801526e:	2300      	movs	r3, #0
 8015270:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015272:	2300      	movs	r3, #0
 8015274:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015276:	2300      	movs	r3, #0
 8015278:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	885b      	ldrh	r3, [r3, #2]
 801527e:	0a1b      	lsrs	r3, r3, #8
 8015280:	b29b      	uxth	r3, r3
 8015282:	3b01      	subs	r3, #1
 8015284:	2b06      	cmp	r3, #6
 8015286:	f200 8128 	bhi.w	80154da <USBD_GetDescriptor+0x276>
 801528a:	a201      	add	r2, pc, #4	@ (adr r2, 8015290 <USBD_GetDescriptor+0x2c>)
 801528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015290:	080152ad 	.word	0x080152ad
 8015294:	080152c5 	.word	0x080152c5
 8015298:	08015305 	.word	0x08015305
 801529c:	080154db 	.word	0x080154db
 80152a0:	080154db 	.word	0x080154db
 80152a4:	0801547b 	.word	0x0801547b
 80152a8:	080154a7 	.word	0x080154a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	687a      	ldr	r2, [r7, #4]
 80152b6:	7c12      	ldrb	r2, [r2, #16]
 80152b8:	f107 0108 	add.w	r1, r7, #8
 80152bc:	4610      	mov	r0, r2
 80152be:	4798      	blx	r3
 80152c0:	60f8      	str	r0, [r7, #12]
      break;
 80152c2:	e112      	b.n	80154ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	7c1b      	ldrb	r3, [r3, #16]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d10d      	bne.n	80152e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152d4:	f107 0208 	add.w	r2, r7, #8
 80152d8:	4610      	mov	r0, r2
 80152da:	4798      	blx	r3
 80152dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	3301      	adds	r3, #1
 80152e2:	2202      	movs	r2, #2
 80152e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80152e6:	e100      	b.n	80154ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152f0:	f107 0208 	add.w	r2, r7, #8
 80152f4:	4610      	mov	r0, r2
 80152f6:	4798      	blx	r3
 80152f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	3301      	adds	r3, #1
 80152fe:	2202      	movs	r2, #2
 8015300:	701a      	strb	r2, [r3, #0]
      break;
 8015302:	e0f2      	b.n	80154ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	885b      	ldrh	r3, [r3, #2]
 8015308:	b2db      	uxtb	r3, r3
 801530a:	2b05      	cmp	r3, #5
 801530c:	f200 80ac 	bhi.w	8015468 <USBD_GetDescriptor+0x204>
 8015310:	a201      	add	r2, pc, #4	@ (adr r2, 8015318 <USBD_GetDescriptor+0xb4>)
 8015312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015316:	bf00      	nop
 8015318:	08015331 	.word	0x08015331
 801531c:	08015365 	.word	0x08015365
 8015320:	08015399 	.word	0x08015399
 8015324:	080153cd 	.word	0x080153cd
 8015328:	08015401 	.word	0x08015401
 801532c:	08015435 	.word	0x08015435
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015336:	685b      	ldr	r3, [r3, #4]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d00b      	beq.n	8015354 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	687a      	ldr	r2, [r7, #4]
 8015346:	7c12      	ldrb	r2, [r2, #16]
 8015348:	f107 0108 	add.w	r1, r7, #8
 801534c:	4610      	mov	r0, r2
 801534e:	4798      	blx	r3
 8015350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015352:	e091      	b.n	8015478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015354:	6839      	ldr	r1, [r7, #0]
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f000 facb 	bl	80158f2 <USBD_CtlError>
            err++;
 801535c:	7afb      	ldrb	r3, [r7, #11]
 801535e:	3301      	adds	r3, #1
 8015360:	72fb      	strb	r3, [r7, #11]
          break;
 8015362:	e089      	b.n	8015478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801536a:	689b      	ldr	r3, [r3, #8]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d00b      	beq.n	8015388 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015376:	689b      	ldr	r3, [r3, #8]
 8015378:	687a      	ldr	r2, [r7, #4]
 801537a:	7c12      	ldrb	r2, [r2, #16]
 801537c:	f107 0108 	add.w	r1, r7, #8
 8015380:	4610      	mov	r0, r2
 8015382:	4798      	blx	r3
 8015384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015386:	e077      	b.n	8015478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015388:	6839      	ldr	r1, [r7, #0]
 801538a:	6878      	ldr	r0, [r7, #4]
 801538c:	f000 fab1 	bl	80158f2 <USBD_CtlError>
            err++;
 8015390:	7afb      	ldrb	r3, [r7, #11]
 8015392:	3301      	adds	r3, #1
 8015394:	72fb      	strb	r3, [r7, #11]
          break;
 8015396:	e06f      	b.n	8015478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801539e:	68db      	ldr	r3, [r3, #12]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d00b      	beq.n	80153bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80153aa:	68db      	ldr	r3, [r3, #12]
 80153ac:	687a      	ldr	r2, [r7, #4]
 80153ae:	7c12      	ldrb	r2, [r2, #16]
 80153b0:	f107 0108 	add.w	r1, r7, #8
 80153b4:	4610      	mov	r0, r2
 80153b6:	4798      	blx	r3
 80153b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80153ba:	e05d      	b.n	8015478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80153bc:	6839      	ldr	r1, [r7, #0]
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f000 fa97 	bl	80158f2 <USBD_CtlError>
            err++;
 80153c4:	7afb      	ldrb	r3, [r7, #11]
 80153c6:	3301      	adds	r3, #1
 80153c8:	72fb      	strb	r3, [r7, #11]
          break;
 80153ca:	e055      	b.n	8015478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80153d2:	691b      	ldr	r3, [r3, #16]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d00b      	beq.n	80153f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80153de:	691b      	ldr	r3, [r3, #16]
 80153e0:	687a      	ldr	r2, [r7, #4]
 80153e2:	7c12      	ldrb	r2, [r2, #16]
 80153e4:	f107 0108 	add.w	r1, r7, #8
 80153e8:	4610      	mov	r0, r2
 80153ea:	4798      	blx	r3
 80153ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80153ee:	e043      	b.n	8015478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80153f0:	6839      	ldr	r1, [r7, #0]
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f000 fa7d 	bl	80158f2 <USBD_CtlError>
            err++;
 80153f8:	7afb      	ldrb	r3, [r7, #11]
 80153fa:	3301      	adds	r3, #1
 80153fc:	72fb      	strb	r3, [r7, #11]
          break;
 80153fe:	e03b      	b.n	8015478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015406:	695b      	ldr	r3, [r3, #20]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d00b      	beq.n	8015424 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015412:	695b      	ldr	r3, [r3, #20]
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	7c12      	ldrb	r2, [r2, #16]
 8015418:	f107 0108 	add.w	r1, r7, #8
 801541c:	4610      	mov	r0, r2
 801541e:	4798      	blx	r3
 8015420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015422:	e029      	b.n	8015478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015424:	6839      	ldr	r1, [r7, #0]
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f000 fa63 	bl	80158f2 <USBD_CtlError>
            err++;
 801542c:	7afb      	ldrb	r3, [r7, #11]
 801542e:	3301      	adds	r3, #1
 8015430:	72fb      	strb	r3, [r7, #11]
          break;
 8015432:	e021      	b.n	8015478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801543a:	699b      	ldr	r3, [r3, #24]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d00b      	beq.n	8015458 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015446:	699b      	ldr	r3, [r3, #24]
 8015448:	687a      	ldr	r2, [r7, #4]
 801544a:	7c12      	ldrb	r2, [r2, #16]
 801544c:	f107 0108 	add.w	r1, r7, #8
 8015450:	4610      	mov	r0, r2
 8015452:	4798      	blx	r3
 8015454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015456:	e00f      	b.n	8015478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015458:	6839      	ldr	r1, [r7, #0]
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	f000 fa49 	bl	80158f2 <USBD_CtlError>
            err++;
 8015460:	7afb      	ldrb	r3, [r7, #11]
 8015462:	3301      	adds	r3, #1
 8015464:	72fb      	strb	r3, [r7, #11]
          break;
 8015466:	e007      	b.n	8015478 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015468:	6839      	ldr	r1, [r7, #0]
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f000 fa41 	bl	80158f2 <USBD_CtlError>
          err++;
 8015470:	7afb      	ldrb	r3, [r7, #11]
 8015472:	3301      	adds	r3, #1
 8015474:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015476:	bf00      	nop
      }
      break;
 8015478:	e037      	b.n	80154ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	7c1b      	ldrb	r3, [r3, #16]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d109      	bne.n	8015496 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801548a:	f107 0208 	add.w	r2, r7, #8
 801548e:	4610      	mov	r0, r2
 8015490:	4798      	blx	r3
 8015492:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015494:	e029      	b.n	80154ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015496:	6839      	ldr	r1, [r7, #0]
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f000 fa2a 	bl	80158f2 <USBD_CtlError>
        err++;
 801549e:	7afb      	ldrb	r3, [r7, #11]
 80154a0:	3301      	adds	r3, #1
 80154a2:	72fb      	strb	r3, [r7, #11]
      break;
 80154a4:	e021      	b.n	80154ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	7c1b      	ldrb	r3, [r3, #16]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d10d      	bne.n	80154ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80154b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154b6:	f107 0208 	add.w	r2, r7, #8
 80154ba:	4610      	mov	r0, r2
 80154bc:	4798      	blx	r3
 80154be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	3301      	adds	r3, #1
 80154c4:	2207      	movs	r2, #7
 80154c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80154c8:	e00f      	b.n	80154ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80154ca:	6839      	ldr	r1, [r7, #0]
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f000 fa10 	bl	80158f2 <USBD_CtlError>
        err++;
 80154d2:	7afb      	ldrb	r3, [r7, #11]
 80154d4:	3301      	adds	r3, #1
 80154d6:	72fb      	strb	r3, [r7, #11]
      break;
 80154d8:	e007      	b.n	80154ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80154da:	6839      	ldr	r1, [r7, #0]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f000 fa08 	bl	80158f2 <USBD_CtlError>
      err++;
 80154e2:	7afb      	ldrb	r3, [r7, #11]
 80154e4:	3301      	adds	r3, #1
 80154e6:	72fb      	strb	r3, [r7, #11]
      break;
 80154e8:	bf00      	nop
  }

  if (err != 0U)
 80154ea:	7afb      	ldrb	r3, [r7, #11]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d11e      	bne.n	801552e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	88db      	ldrh	r3, [r3, #6]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d016      	beq.n	8015526 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80154f8:	893b      	ldrh	r3, [r7, #8]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d00e      	beq.n	801551c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	88da      	ldrh	r2, [r3, #6]
 8015502:	893b      	ldrh	r3, [r7, #8]
 8015504:	4293      	cmp	r3, r2
 8015506:	bf28      	it	cs
 8015508:	4613      	movcs	r3, r2
 801550a:	b29b      	uxth	r3, r3
 801550c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801550e:	893b      	ldrh	r3, [r7, #8]
 8015510:	461a      	mov	r2, r3
 8015512:	68f9      	ldr	r1, [r7, #12]
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f000 fb76 	bl	8015c06 <USBD_CtlSendData>
 801551a:	e009      	b.n	8015530 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801551c:	6839      	ldr	r1, [r7, #0]
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f000 f9e7 	bl	80158f2 <USBD_CtlError>
 8015524:	e004      	b.n	8015530 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f000 fbc7 	bl	8015cba <USBD_CtlSendStatus>
 801552c:	e000      	b.n	8015530 <USBD_GetDescriptor+0x2cc>
    return;
 801552e:	bf00      	nop
  }
}
 8015530:	3710      	adds	r7, #16
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop

08015538 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
 8015540:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	889b      	ldrh	r3, [r3, #4]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d131      	bne.n	80155ae <USBD_SetAddress+0x76>
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	88db      	ldrh	r3, [r3, #6]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d12d      	bne.n	80155ae <USBD_SetAddress+0x76>
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	885b      	ldrh	r3, [r3, #2]
 8015556:	2b7f      	cmp	r3, #127	@ 0x7f
 8015558:	d829      	bhi.n	80155ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	885b      	ldrh	r3, [r3, #2]
 801555e:	b2db      	uxtb	r3, r3
 8015560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015564:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801556c:	b2db      	uxtb	r3, r3
 801556e:	2b03      	cmp	r3, #3
 8015570:	d104      	bne.n	801557c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015572:	6839      	ldr	r1, [r7, #0]
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f000 f9bc 	bl	80158f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801557a:	e01d      	b.n	80155b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	7bfa      	ldrb	r2, [r7, #15]
 8015580:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015584:	7bfb      	ldrb	r3, [r7, #15]
 8015586:	4619      	mov	r1, r3
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f7fe ff92 	bl	80144b2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f000 fb93 	bl	8015cba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015594:	7bfb      	ldrb	r3, [r7, #15]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d004      	beq.n	80155a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2202      	movs	r2, #2
 801559e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155a2:	e009      	b.n	80155b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2201      	movs	r2, #1
 80155a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155ac:	e004      	b.n	80155b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80155ae:	6839      	ldr	r1, [r7, #0]
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f000 f99e 	bl	80158f2 <USBD_CtlError>
  }
}
 80155b6:	bf00      	nop
 80155b8:	bf00      	nop
 80155ba:	3710      	adds	r7, #16
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b084      	sub	sp, #16
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80155ca:	2300      	movs	r3, #0
 80155cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	885b      	ldrh	r3, [r3, #2]
 80155d2:	b2da      	uxtb	r2, r3
 80155d4:	4b4e      	ldr	r3, [pc, #312]	@ (8015710 <USBD_SetConfig+0x150>)
 80155d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80155d8:	4b4d      	ldr	r3, [pc, #308]	@ (8015710 <USBD_SetConfig+0x150>)
 80155da:	781b      	ldrb	r3, [r3, #0]
 80155dc:	2b01      	cmp	r3, #1
 80155de:	d905      	bls.n	80155ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80155e0:	6839      	ldr	r1, [r7, #0]
 80155e2:	6878      	ldr	r0, [r7, #4]
 80155e4:	f000 f985 	bl	80158f2 <USBD_CtlError>
    return USBD_FAIL;
 80155e8:	2303      	movs	r3, #3
 80155ea:	e08c      	b.n	8015706 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80155f2:	b2db      	uxtb	r3, r3
 80155f4:	2b02      	cmp	r3, #2
 80155f6:	d002      	beq.n	80155fe <USBD_SetConfig+0x3e>
 80155f8:	2b03      	cmp	r3, #3
 80155fa:	d029      	beq.n	8015650 <USBD_SetConfig+0x90>
 80155fc:	e075      	b.n	80156ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80155fe:	4b44      	ldr	r3, [pc, #272]	@ (8015710 <USBD_SetConfig+0x150>)
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d020      	beq.n	8015648 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015606:	4b42      	ldr	r3, [pc, #264]	@ (8015710 <USBD_SetConfig+0x150>)
 8015608:	781b      	ldrb	r3, [r3, #0]
 801560a:	461a      	mov	r2, r3
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015610:	4b3f      	ldr	r3, [pc, #252]	@ (8015710 <USBD_SetConfig+0x150>)
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	4619      	mov	r1, r3
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f7ff f875 	bl	8014706 <USBD_SetClassConfig>
 801561c:	4603      	mov	r3, r0
 801561e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015620:	7bfb      	ldrb	r3, [r7, #15]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d008      	beq.n	8015638 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015626:	6839      	ldr	r1, [r7, #0]
 8015628:	6878      	ldr	r0, [r7, #4]
 801562a:	f000 f962 	bl	80158f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2202      	movs	r2, #2
 8015632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015636:	e065      	b.n	8015704 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f000 fb3e 	bl	8015cba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	2203      	movs	r2, #3
 8015642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015646:	e05d      	b.n	8015704 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f000 fb36 	bl	8015cba <USBD_CtlSendStatus>
      break;
 801564e:	e059      	b.n	8015704 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015650:	4b2f      	ldr	r3, [pc, #188]	@ (8015710 <USBD_SetConfig+0x150>)
 8015652:	781b      	ldrb	r3, [r3, #0]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d112      	bne.n	801567e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2202      	movs	r2, #2
 801565c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8015660:	4b2b      	ldr	r3, [pc, #172]	@ (8015710 <USBD_SetConfig+0x150>)
 8015662:	781b      	ldrb	r3, [r3, #0]
 8015664:	461a      	mov	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801566a:	4b29      	ldr	r3, [pc, #164]	@ (8015710 <USBD_SetConfig+0x150>)
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	4619      	mov	r1, r3
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f7ff f864 	bl	801473e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f000 fb1f 	bl	8015cba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801567c:	e042      	b.n	8015704 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801567e:	4b24      	ldr	r3, [pc, #144]	@ (8015710 <USBD_SetConfig+0x150>)
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	461a      	mov	r2, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	429a      	cmp	r2, r3
 801568a:	d02a      	beq.n	80156e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	b2db      	uxtb	r3, r3
 8015692:	4619      	mov	r1, r3
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f7ff f852 	bl	801473e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801569a:	4b1d      	ldr	r3, [pc, #116]	@ (8015710 <USBD_SetConfig+0x150>)
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	461a      	mov	r2, r3
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80156a4:	4b1a      	ldr	r3, [pc, #104]	@ (8015710 <USBD_SetConfig+0x150>)
 80156a6:	781b      	ldrb	r3, [r3, #0]
 80156a8:	4619      	mov	r1, r3
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f7ff f82b 	bl	8014706 <USBD_SetClassConfig>
 80156b0:	4603      	mov	r3, r0
 80156b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80156b4:	7bfb      	ldrb	r3, [r7, #15]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d00f      	beq.n	80156da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80156ba:	6839      	ldr	r1, [r7, #0]
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f000 f918 	bl	80158f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	685b      	ldr	r3, [r3, #4]
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	4619      	mov	r1, r3
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f7ff f837 	bl	801473e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2202      	movs	r2, #2
 80156d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80156d8:	e014      	b.n	8015704 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f000 faed 	bl	8015cba <USBD_CtlSendStatus>
      break;
 80156e0:	e010      	b.n	8015704 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f000 fae9 	bl	8015cba <USBD_CtlSendStatus>
      break;
 80156e8:	e00c      	b.n	8015704 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80156ea:	6839      	ldr	r1, [r7, #0]
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f000 f900 	bl	80158f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80156f2:	4b07      	ldr	r3, [pc, #28]	@ (8015710 <USBD_SetConfig+0x150>)
 80156f4:	781b      	ldrb	r3, [r3, #0]
 80156f6:	4619      	mov	r1, r3
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f7ff f820 	bl	801473e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80156fe:	2303      	movs	r3, #3
 8015700:	73fb      	strb	r3, [r7, #15]
      break;
 8015702:	bf00      	nop
  }

  return ret;
 8015704:	7bfb      	ldrb	r3, [r7, #15]
}
 8015706:	4618      	mov	r0, r3
 8015708:	3710      	adds	r7, #16
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	2002a194 	.word	0x2002a194

08015714 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	88db      	ldrh	r3, [r3, #6]
 8015722:	2b01      	cmp	r3, #1
 8015724:	d004      	beq.n	8015730 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015726:	6839      	ldr	r1, [r7, #0]
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f000 f8e2 	bl	80158f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801572e:	e023      	b.n	8015778 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015736:	b2db      	uxtb	r3, r3
 8015738:	2b02      	cmp	r3, #2
 801573a:	dc02      	bgt.n	8015742 <USBD_GetConfig+0x2e>
 801573c:	2b00      	cmp	r3, #0
 801573e:	dc03      	bgt.n	8015748 <USBD_GetConfig+0x34>
 8015740:	e015      	b.n	801576e <USBD_GetConfig+0x5a>
 8015742:	2b03      	cmp	r3, #3
 8015744:	d00b      	beq.n	801575e <USBD_GetConfig+0x4a>
 8015746:	e012      	b.n	801576e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2200      	movs	r2, #0
 801574c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	3308      	adds	r3, #8
 8015752:	2201      	movs	r2, #1
 8015754:	4619      	mov	r1, r3
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f000 fa55 	bl	8015c06 <USBD_CtlSendData>
        break;
 801575c:	e00c      	b.n	8015778 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	3304      	adds	r3, #4
 8015762:	2201      	movs	r2, #1
 8015764:	4619      	mov	r1, r3
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f000 fa4d 	bl	8015c06 <USBD_CtlSendData>
        break;
 801576c:	e004      	b.n	8015778 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801576e:	6839      	ldr	r1, [r7, #0]
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f000 f8be 	bl	80158f2 <USBD_CtlError>
        break;
 8015776:	bf00      	nop
}
 8015778:	bf00      	nop
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}

08015780 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b082      	sub	sp, #8
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015790:	b2db      	uxtb	r3, r3
 8015792:	3b01      	subs	r3, #1
 8015794:	2b02      	cmp	r3, #2
 8015796:	d81e      	bhi.n	80157d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	88db      	ldrh	r3, [r3, #6]
 801579c:	2b02      	cmp	r3, #2
 801579e:	d004      	beq.n	80157aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80157a0:	6839      	ldr	r1, [r7, #0]
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f000 f8a5 	bl	80158f2 <USBD_CtlError>
        break;
 80157a8:	e01a      	b.n	80157e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2201      	movs	r2, #1
 80157ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d005      	beq.n	80157c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	68db      	ldr	r3, [r3, #12]
 80157be:	f043 0202 	orr.w	r2, r3, #2
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	330c      	adds	r3, #12
 80157ca:	2202      	movs	r2, #2
 80157cc:	4619      	mov	r1, r3
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f000 fa19 	bl	8015c06 <USBD_CtlSendData>
      break;
 80157d4:	e004      	b.n	80157e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80157d6:	6839      	ldr	r1, [r7, #0]
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f000 f88a 	bl	80158f2 <USBD_CtlError>
      break;
 80157de:	bf00      	nop
  }
}
 80157e0:	bf00      	nop
 80157e2:	3708      	adds	r7, #8
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b082      	sub	sp, #8
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	885b      	ldrh	r3, [r3, #2]
 80157f6:	2b01      	cmp	r3, #1
 80157f8:	d107      	bne.n	801580a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	2201      	movs	r2, #1
 80157fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f000 fa59 	bl	8015cba <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015808:	e013      	b.n	8015832 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	885b      	ldrh	r3, [r3, #2]
 801580e:	2b02      	cmp	r3, #2
 8015810:	d10b      	bne.n	801582a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	889b      	ldrh	r3, [r3, #4]
 8015816:	0a1b      	lsrs	r3, r3, #8
 8015818:	b29b      	uxth	r3, r3
 801581a:	b2da      	uxtb	r2, r3
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 fa49 	bl	8015cba <USBD_CtlSendStatus>
}
 8015828:	e003      	b.n	8015832 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801582a:	6839      	ldr	r1, [r7, #0]
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f000 f860 	bl	80158f2 <USBD_CtlError>
}
 8015832:	bf00      	nop
 8015834:	3708      	adds	r7, #8
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}

0801583a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801583a:	b580      	push	{r7, lr}
 801583c:	b082      	sub	sp, #8
 801583e:	af00      	add	r7, sp, #0
 8015840:	6078      	str	r0, [r7, #4]
 8015842:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801584a:	b2db      	uxtb	r3, r3
 801584c:	3b01      	subs	r3, #1
 801584e:	2b02      	cmp	r3, #2
 8015850:	d80b      	bhi.n	801586a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	885b      	ldrh	r3, [r3, #2]
 8015856:	2b01      	cmp	r3, #1
 8015858:	d10c      	bne.n	8015874 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2200      	movs	r2, #0
 801585e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f000 fa29 	bl	8015cba <USBD_CtlSendStatus>
      }
      break;
 8015868:	e004      	b.n	8015874 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f000 f840 	bl	80158f2 <USBD_CtlError>
      break;
 8015872:	e000      	b.n	8015876 <USBD_ClrFeature+0x3c>
      break;
 8015874:	bf00      	nop
  }
}
 8015876:	bf00      	nop
 8015878:	3708      	adds	r7, #8
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}

0801587e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801587e:	b580      	push	{r7, lr}
 8015880:	b084      	sub	sp, #16
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
 8015886:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	781a      	ldrb	r2, [r3, #0]
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	3301      	adds	r3, #1
 8015898:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	781a      	ldrb	r2, [r3, #0]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	3301      	adds	r3, #1
 80158a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80158a8:	68f8      	ldr	r0, [r7, #12]
 80158aa:	f7ff fa40 	bl	8014d2e <SWAPBYTE>
 80158ae:	4603      	mov	r3, r0
 80158b0:	461a      	mov	r2, r3
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	3301      	adds	r3, #1
 80158ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	3301      	adds	r3, #1
 80158c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80158c2:	68f8      	ldr	r0, [r7, #12]
 80158c4:	f7ff fa33 	bl	8014d2e <SWAPBYTE>
 80158c8:	4603      	mov	r3, r0
 80158ca:	461a      	mov	r2, r3
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	3301      	adds	r3, #1
 80158d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	3301      	adds	r3, #1
 80158da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80158dc:	68f8      	ldr	r0, [r7, #12]
 80158de:	f7ff fa26 	bl	8014d2e <SWAPBYTE>
 80158e2:	4603      	mov	r3, r0
 80158e4:	461a      	mov	r2, r3
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	80da      	strh	r2, [r3, #6]
}
 80158ea:	bf00      	nop
 80158ec:	3710      	adds	r7, #16
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}

080158f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158f2:	b580      	push	{r7, lr}
 80158f4:	b082      	sub	sp, #8
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	6078      	str	r0, [r7, #4]
 80158fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80158fc:	2180      	movs	r1, #128	@ 0x80
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f7fe fd6d 	bl	80143de <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015904:	2100      	movs	r1, #0
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f7fe fd69 	bl	80143de <USBD_LL_StallEP>
}
 801590c:	bf00      	nop
 801590e:	3708      	adds	r7, #8
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b086      	sub	sp, #24
 8015918:	af00      	add	r7, sp, #0
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015920:	2300      	movs	r3, #0
 8015922:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d040      	beq.n	80159ac <USBD_GetString+0x98>
  {
    return;
  }

  pdesc = desc;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801592e:	6938      	ldr	r0, [r7, #16]
 8015930:	f000 f840 	bl	80159b4 <USBD_GetLen>
 8015934:	4603      	mov	r3, r0
 8015936:	3301      	adds	r3, #1
 8015938:	005b      	lsls	r3, r3, #1
 801593a:	2bc8      	cmp	r3, #200	@ 0xc8
 801593c:	d808      	bhi.n	8015950 <USBD_GetString+0x3c>
 801593e:	6938      	ldr	r0, [r7, #16]
 8015940:	f000 f838 	bl	80159b4 <USBD_GetLen>
 8015944:	4603      	mov	r3, r0
 8015946:	3301      	adds	r3, #1
 8015948:	b29b      	uxth	r3, r3
 801594a:	005b      	lsls	r3, r3, #1
 801594c:	b29a      	uxth	r2, r3
 801594e:	e000      	b.n	8015952 <USBD_GetString+0x3e>
 8015950:	22c8      	movs	r2, #200	@ 0xc8
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015956:	7dfb      	ldrb	r3, [r7, #23]
 8015958:	68ba      	ldr	r2, [r7, #8]
 801595a:	4413      	add	r3, r2
 801595c:	687a      	ldr	r2, [r7, #4]
 801595e:	7812      	ldrb	r2, [r2, #0]
 8015960:	701a      	strb	r2, [r3, #0]
  idx++;
 8015962:	7dfb      	ldrb	r3, [r7, #23]
 8015964:	3301      	adds	r3, #1
 8015966:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015968:	7dfb      	ldrb	r3, [r7, #23]
 801596a:	68ba      	ldr	r2, [r7, #8]
 801596c:	4413      	add	r3, r2
 801596e:	2203      	movs	r2, #3
 8015970:	701a      	strb	r2, [r3, #0]
  idx++;
 8015972:	7dfb      	ldrb	r3, [r7, #23]
 8015974:	3301      	adds	r3, #1
 8015976:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015978:	e013      	b.n	80159a2 <USBD_GetString+0x8e>
  {
    unicode[idx] = *pdesc;
 801597a:	7dfb      	ldrb	r3, [r7, #23]
 801597c:	68ba      	ldr	r2, [r7, #8]
 801597e:	4413      	add	r3, r2
 8015980:	693a      	ldr	r2, [r7, #16]
 8015982:	7812      	ldrb	r2, [r2, #0]
 8015984:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	3301      	adds	r3, #1
 801598a:	613b      	str	r3, [r7, #16]
    idx++;
 801598c:	7dfb      	ldrb	r3, [r7, #23]
 801598e:	3301      	adds	r3, #1
 8015990:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015992:	7dfb      	ldrb	r3, [r7, #23]
 8015994:	68ba      	ldr	r2, [r7, #8]
 8015996:	4413      	add	r3, r2
 8015998:	2200      	movs	r2, #0
 801599a:	701a      	strb	r2, [r3, #0]
    idx++;
 801599c:	7dfb      	ldrb	r3, [r7, #23]
 801599e:	3301      	adds	r3, #1
 80159a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d1e7      	bne.n	801597a <USBD_GetString+0x66>
 80159aa:	e000      	b.n	80159ae <USBD_GetString+0x9a>
    return;
 80159ac:	bf00      	nop
  }
}
 80159ae:	3718      	adds	r7, #24
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}

080159b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80159b4:	b480      	push	{r7}
 80159b6:	b085      	sub	sp, #20
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80159bc:	2300      	movs	r3, #0
 80159be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80159c4:	e005      	b.n	80159d2 <USBD_GetLen+0x1e>
  {
    len++;
 80159c6:	7bfb      	ldrb	r3, [r7, #15]
 80159c8:	3301      	adds	r3, #1
 80159ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	3301      	adds	r3, #1
 80159d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	781b      	ldrb	r3, [r3, #0]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d1f5      	bne.n	80159c6 <USBD_GetLen+0x12>
  }

  return len;
 80159da:	7bfb      	ldrb	r3, [r7, #15]
}
 80159dc:	4618      	mov	r0, r3
 80159de:	3714      	adds	r7, #20
 80159e0:	46bd      	mov	sp, r7
 80159e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e6:	4770      	bx	lr

080159e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159e8:	b480      	push	{r7}
 80159ea:	b083      	sub	sp, #12
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	4603      	mov	r3, r0
 80159f0:	6039      	str	r1, [r7, #0]
 80159f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	2212      	movs	r2, #18
 80159f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80159fa:	4b03      	ldr	r3, [pc, #12]	@ (8015a08 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	370c      	adds	r7, #12
 8015a00:	46bd      	mov	sp, r7
 8015a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a06:	4770      	bx	lr
 8015a08:	200000fc 	.word	0x200000fc

08015a0c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b083      	sub	sp, #12
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	4603      	mov	r3, r0
 8015a14:	6039      	str	r1, [r7, #0]
 8015a16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	2204      	movs	r2, #4
 8015a1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015a1e:	4b03      	ldr	r3, [pc, #12]	@ (8015a2c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr
 8015a2c:	20000110 	.word	0x20000110

08015a30 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	4603      	mov	r3, r0
 8015a38:	6039      	str	r1, [r7, #0]
 8015a3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a3c:	79fb      	ldrb	r3, [r7, #7]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d105      	bne.n	8015a4e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015a42:	683a      	ldr	r2, [r7, #0]
 8015a44:	4907      	ldr	r1, [pc, #28]	@ (8015a64 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015a46:	4808      	ldr	r0, [pc, #32]	@ (8015a68 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015a48:	f7ff ff64 	bl	8015914 <USBD_GetString>
 8015a4c:	e004      	b.n	8015a58 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015a4e:	683a      	ldr	r2, [r7, #0]
 8015a50:	4904      	ldr	r1, [pc, #16]	@ (8015a64 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015a52:	4805      	ldr	r0, [pc, #20]	@ (8015a68 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015a54:	f7ff ff5e 	bl	8015914 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a58:	4b02      	ldr	r3, [pc, #8]	@ (8015a64 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	3708      	adds	r7, #8
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}
 8015a62:	bf00      	nop
 8015a64:	2002a198 	.word	0x2002a198
 8015a68:	08018b90 	.word	0x08018b90

08015a6c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	4603      	mov	r3, r0
 8015a74:	6039      	str	r1, [r7, #0]
 8015a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015a78:	683a      	ldr	r2, [r7, #0]
 8015a7a:	4904      	ldr	r1, [pc, #16]	@ (8015a8c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015a7c:	4804      	ldr	r0, [pc, #16]	@ (8015a90 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8015a7e:	f7ff ff49 	bl	8015914 <USBD_GetString>
  return USBD_StrDesc;
 8015a82:	4b02      	ldr	r3, [pc, #8]	@ (8015a8c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3708      	adds	r7, #8
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	2002a198 	.word	0x2002a198
 8015a90:	08018ba8 	.word	0x08018ba8

08015a94 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	6039      	str	r1, [r7, #0]
 8015a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	221a      	movs	r2, #26
 8015aa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015aa6:	f000 f843 	bl	8015b30 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015aaa:	4b02      	ldr	r3, [pc, #8]	@ (8015ab4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	20000114 	.word	0x20000114

08015ab8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b082      	sub	sp, #8
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	4603      	mov	r3, r0
 8015ac0:	6039      	str	r1, [r7, #0]
 8015ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015ac4:	79fb      	ldrb	r3, [r7, #7]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d105      	bne.n	8015ad6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015aca:	683a      	ldr	r2, [r7, #0]
 8015acc:	4907      	ldr	r1, [pc, #28]	@ (8015aec <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015ace:	4808      	ldr	r0, [pc, #32]	@ (8015af0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015ad0:	f7ff ff20 	bl	8015914 <USBD_GetString>
 8015ad4:	e004      	b.n	8015ae0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015ad6:	683a      	ldr	r2, [r7, #0]
 8015ad8:	4904      	ldr	r1, [pc, #16]	@ (8015aec <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015ada:	4805      	ldr	r0, [pc, #20]	@ (8015af0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015adc:	f7ff ff1a 	bl	8015914 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015ae0:	4b02      	ldr	r3, [pc, #8]	@ (8015aec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3708      	adds	r7, #8
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
 8015aea:	bf00      	nop
 8015aec:	2002a198 	.word	0x2002a198
 8015af0:	08018bbc 	.word	0x08018bbc

08015af4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	4603      	mov	r3, r0
 8015afc:	6039      	str	r1, [r7, #0]
 8015afe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015b00:	79fb      	ldrb	r3, [r7, #7]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d105      	bne.n	8015b12 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015b06:	683a      	ldr	r2, [r7, #0]
 8015b08:	4907      	ldr	r1, [pc, #28]	@ (8015b28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015b0a:	4808      	ldr	r0, [pc, #32]	@ (8015b2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015b0c:	f7ff ff02 	bl	8015914 <USBD_GetString>
 8015b10:	e004      	b.n	8015b1c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015b12:	683a      	ldr	r2, [r7, #0]
 8015b14:	4904      	ldr	r1, [pc, #16]	@ (8015b28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015b16:	4805      	ldr	r0, [pc, #20]	@ (8015b2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015b18:	f7ff fefc 	bl	8015914 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b1c:	4b02      	ldr	r3, [pc, #8]	@ (8015b28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3708      	adds	r7, #8
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	2002a198 	.word	0x2002a198
 8015b2c:	08018bc8 	.word	0x08018bc8

08015b30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b084      	sub	sp, #16
 8015b34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015b36:	4b0f      	ldr	r3, [pc, #60]	@ (8015b74 <Get_SerialNum+0x44>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8015b78 <Get_SerialNum+0x48>)
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015b42:	4b0e      	ldr	r3, [pc, #56]	@ (8015b7c <Get_SerialNum+0x4c>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015b48:	68fa      	ldr	r2, [r7, #12]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d009      	beq.n	8015b6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015b56:	2208      	movs	r2, #8
 8015b58:	4909      	ldr	r1, [pc, #36]	@ (8015b80 <Get_SerialNum+0x50>)
 8015b5a:	68f8      	ldr	r0, [r7, #12]
 8015b5c:	f000 f814 	bl	8015b88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015b60:	2204      	movs	r2, #4
 8015b62:	4908      	ldr	r1, [pc, #32]	@ (8015b84 <Get_SerialNum+0x54>)
 8015b64:	68b8      	ldr	r0, [r7, #8]
 8015b66:	f000 f80f 	bl	8015b88 <IntToUnicode>
  }
}
 8015b6a:	bf00      	nop
 8015b6c:	3710      	adds	r7, #16
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd80      	pop	{r7, pc}
 8015b72:	bf00      	nop
 8015b74:	08fff800 	.word	0x08fff800
 8015b78:	08fff804 	.word	0x08fff804
 8015b7c:	08fff808 	.word	0x08fff808
 8015b80:	20000116 	.word	0x20000116
 8015b84:	20000126 	.word	0x20000126

08015b88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015b88:	b480      	push	{r7}
 8015b8a:	b087      	sub	sp, #28
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	4613      	mov	r3, r2
 8015b94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015b96:	2300      	movs	r3, #0
 8015b98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	75fb      	strb	r3, [r7, #23]
 8015b9e:	e027      	b.n	8015bf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	0f1b      	lsrs	r3, r3, #28
 8015ba4:	2b09      	cmp	r3, #9
 8015ba6:	d80b      	bhi.n	8015bc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	0f1b      	lsrs	r3, r3, #28
 8015bac:	b2da      	uxtb	r2, r3
 8015bae:	7dfb      	ldrb	r3, [r7, #23]
 8015bb0:	005b      	lsls	r3, r3, #1
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	440b      	add	r3, r1
 8015bb8:	3230      	adds	r2, #48	@ 0x30
 8015bba:	b2d2      	uxtb	r2, r2
 8015bbc:	701a      	strb	r2, [r3, #0]
 8015bbe:	e00a      	b.n	8015bd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	0f1b      	lsrs	r3, r3, #28
 8015bc4:	b2da      	uxtb	r2, r3
 8015bc6:	7dfb      	ldrb	r3, [r7, #23]
 8015bc8:	005b      	lsls	r3, r3, #1
 8015bca:	4619      	mov	r1, r3
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	440b      	add	r3, r1
 8015bd0:	3237      	adds	r2, #55	@ 0x37
 8015bd2:	b2d2      	uxtb	r2, r2
 8015bd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	011b      	lsls	r3, r3, #4
 8015bda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015bdc:	7dfb      	ldrb	r3, [r7, #23]
 8015bde:	005b      	lsls	r3, r3, #1
 8015be0:	3301      	adds	r3, #1
 8015be2:	68ba      	ldr	r2, [r7, #8]
 8015be4:	4413      	add	r3, r2
 8015be6:	2200      	movs	r2, #0
 8015be8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015bea:	7dfb      	ldrb	r3, [r7, #23]
 8015bec:	3301      	adds	r3, #1
 8015bee:	75fb      	strb	r3, [r7, #23]
 8015bf0:	7dfa      	ldrb	r2, [r7, #23]
 8015bf2:	79fb      	ldrb	r3, [r7, #7]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d3d3      	bcc.n	8015ba0 <IntToUnicode+0x18>
  }
}
 8015bf8:	bf00      	nop
 8015bfa:	bf00      	nop
 8015bfc:	371c      	adds	r7, #28
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c04:	4770      	bx	lr

08015c06 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015c06:	b580      	push	{r7, lr}
 8015c08:	b084      	sub	sp, #16
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	60f8      	str	r0, [r7, #12]
 8015c0e:	60b9      	str	r1, [r7, #8]
 8015c10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	2202      	movs	r2, #2
 8015c16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	687a      	ldr	r2, [r7, #4]
 8015c24:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	68ba      	ldr	r2, [r7, #8]
 8015c2a:	2100      	movs	r1, #0
 8015c2c:	68f8      	ldr	r0, [r7, #12]
 8015c2e:	f7fe fc5f 	bl	80144f0 <USBD_LL_Transmit>

  return USBD_OK;
 8015c32:	2300      	movs	r3, #0
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3710      	adds	r7, #16
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	60f8      	str	r0, [r7, #12]
 8015c44:	60b9      	str	r1, [r7, #8]
 8015c46:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	68ba      	ldr	r2, [r7, #8]
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	68f8      	ldr	r0, [r7, #12]
 8015c50:	f7fe fc4e 	bl	80144f0 <USBD_LL_Transmit>

  return USBD_OK;
 8015c54:	2300      	movs	r3, #0
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3710      	adds	r7, #16
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}

08015c5e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015c5e:	b580      	push	{r7, lr}
 8015c60:	b084      	sub	sp, #16
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	60f8      	str	r0, [r7, #12]
 8015c66:	60b9      	str	r1, [r7, #8]
 8015c68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	2203      	movs	r2, #3
 8015c6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	687a      	ldr	r2, [r7, #4]
 8015c76:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	68ba      	ldr	r2, [r7, #8]
 8015c86:	2100      	movs	r1, #0
 8015c88:	68f8      	ldr	r0, [r7, #12]
 8015c8a:	f7fe fc52 	bl	8014532 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015c8e:	2300      	movs	r3, #0
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3710      	adds	r7, #16
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}

08015c98 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b084      	sub	sp, #16
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	60b9      	str	r1, [r7, #8]
 8015ca2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	68ba      	ldr	r2, [r7, #8]
 8015ca8:	2100      	movs	r1, #0
 8015caa:	68f8      	ldr	r0, [r7, #12]
 8015cac:	f7fe fc41 	bl	8014532 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015cb0:	2300      	movs	r3, #0
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3710      	adds	r7, #16
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}

08015cba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015cba:	b580      	push	{r7, lr}
 8015cbc:	b082      	sub	sp, #8
 8015cbe:	af00      	add	r7, sp, #0
 8015cc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2204      	movs	r2, #4
 8015cc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015cca:	2300      	movs	r3, #0
 8015ccc:	2200      	movs	r2, #0
 8015cce:	2100      	movs	r1, #0
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f7fe fc0d 	bl	80144f0 <USBD_LL_Transmit>

  return USBD_OK;
 8015cd6:	2300      	movs	r3, #0
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	3708      	adds	r7, #8
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}

08015ce0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2205      	movs	r2, #5
 8015cec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f7fe fc1b 	bl	8014532 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015cfc:	2300      	movs	r3, #0
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3708      	adds	r7, #8
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}

08015d06 <__cvt>:
 8015d06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d0a:	ec57 6b10 	vmov	r6, r7, d0
 8015d0e:	2f00      	cmp	r7, #0
 8015d10:	460c      	mov	r4, r1
 8015d12:	4619      	mov	r1, r3
 8015d14:	463b      	mov	r3, r7
 8015d16:	bfb4      	ite	lt
 8015d18:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8015d1c:	2300      	movge	r3, #0
 8015d1e:	4691      	mov	r9, r2
 8015d20:	bfbf      	itttt	lt
 8015d22:	4632      	movlt	r2, r6
 8015d24:	461f      	movlt	r7, r3
 8015d26:	232d      	movlt	r3, #45	@ 0x2d
 8015d28:	4616      	movlt	r6, r2
 8015d2a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8015d2e:	700b      	strb	r3, [r1, #0]
 8015d30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d32:	f023 0820 	bic.w	r8, r3, #32
 8015d36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015d3a:	d005      	beq.n	8015d48 <__cvt+0x42>
 8015d3c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8015d40:	d100      	bne.n	8015d44 <__cvt+0x3e>
 8015d42:	3401      	adds	r4, #1
 8015d44:	2102      	movs	r1, #2
 8015d46:	e000      	b.n	8015d4a <__cvt+0x44>
 8015d48:	2103      	movs	r1, #3
 8015d4a:	ab03      	add	r3, sp, #12
 8015d4c:	4622      	mov	r2, r4
 8015d4e:	9301      	str	r3, [sp, #4]
 8015d50:	ab02      	add	r3, sp, #8
 8015d52:	ec47 6b10 	vmov	d0, r6, r7
 8015d56:	9300      	str	r3, [sp, #0]
 8015d58:	4653      	mov	r3, sl
 8015d5a:	f000 fe7d 	bl	8016a58 <_dtoa_r>
 8015d5e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8015d62:	4605      	mov	r5, r0
 8015d64:	d119      	bne.n	8015d9a <__cvt+0x94>
 8015d66:	f019 0f01 	tst.w	r9, #1
 8015d6a:	d00e      	beq.n	8015d8a <__cvt+0x84>
 8015d6c:	eb00 0904 	add.w	r9, r0, r4
 8015d70:	2200      	movs	r2, #0
 8015d72:	2300      	movs	r3, #0
 8015d74:	4630      	mov	r0, r6
 8015d76:	4639      	mov	r1, r7
 8015d78:	f7ea feb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8015d7c:	b108      	cbz	r0, 8015d82 <__cvt+0x7c>
 8015d7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8015d82:	2230      	movs	r2, #48	@ 0x30
 8015d84:	9b03      	ldr	r3, [sp, #12]
 8015d86:	454b      	cmp	r3, r9
 8015d88:	d31e      	bcc.n	8015dc8 <__cvt+0xc2>
 8015d8a:	9b03      	ldr	r3, [sp, #12]
 8015d8c:	4628      	mov	r0, r5
 8015d8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015d90:	1b5b      	subs	r3, r3, r5
 8015d92:	6013      	str	r3, [r2, #0]
 8015d94:	b004      	add	sp, #16
 8015d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015d9e:	eb00 0904 	add.w	r9, r0, r4
 8015da2:	d1e5      	bne.n	8015d70 <__cvt+0x6a>
 8015da4:	7803      	ldrb	r3, [r0, #0]
 8015da6:	2b30      	cmp	r3, #48	@ 0x30
 8015da8:	d10a      	bne.n	8015dc0 <__cvt+0xba>
 8015daa:	2200      	movs	r2, #0
 8015dac:	2300      	movs	r3, #0
 8015dae:	4630      	mov	r0, r6
 8015db0:	4639      	mov	r1, r7
 8015db2:	f7ea fe99 	bl	8000ae8 <__aeabi_dcmpeq>
 8015db6:	b918      	cbnz	r0, 8015dc0 <__cvt+0xba>
 8015db8:	f1c4 0401 	rsb	r4, r4, #1
 8015dbc:	f8ca 4000 	str.w	r4, [sl]
 8015dc0:	f8da 3000 	ldr.w	r3, [sl]
 8015dc4:	4499      	add	r9, r3
 8015dc6:	e7d3      	b.n	8015d70 <__cvt+0x6a>
 8015dc8:	1c59      	adds	r1, r3, #1
 8015dca:	9103      	str	r1, [sp, #12]
 8015dcc:	701a      	strb	r2, [r3, #0]
 8015dce:	e7d9      	b.n	8015d84 <__cvt+0x7e>

08015dd0 <__exponent>:
 8015dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dd2:	2900      	cmp	r1, #0
 8015dd4:	7002      	strb	r2, [r0, #0]
 8015dd6:	bfba      	itte	lt
 8015dd8:	4249      	neglt	r1, r1
 8015dda:	232d      	movlt	r3, #45	@ 0x2d
 8015ddc:	232b      	movge	r3, #43	@ 0x2b
 8015dde:	2909      	cmp	r1, #9
 8015de0:	7043      	strb	r3, [r0, #1]
 8015de2:	dd28      	ble.n	8015e36 <__exponent+0x66>
 8015de4:	f10d 0307 	add.w	r3, sp, #7
 8015de8:	270a      	movs	r7, #10
 8015dea:	461d      	mov	r5, r3
 8015dec:	461a      	mov	r2, r3
 8015dee:	3b01      	subs	r3, #1
 8015df0:	fbb1 f6f7 	udiv	r6, r1, r7
 8015df4:	fb07 1416 	mls	r4, r7, r6, r1
 8015df8:	3430      	adds	r4, #48	@ 0x30
 8015dfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015dfe:	460c      	mov	r4, r1
 8015e00:	4631      	mov	r1, r6
 8015e02:	2c63      	cmp	r4, #99	@ 0x63
 8015e04:	dcf2      	bgt.n	8015dec <__exponent+0x1c>
 8015e06:	3130      	adds	r1, #48	@ 0x30
 8015e08:	1e94      	subs	r4, r2, #2
 8015e0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015e0e:	1c41      	adds	r1, r0, #1
 8015e10:	4623      	mov	r3, r4
 8015e12:	42ab      	cmp	r3, r5
 8015e14:	d30a      	bcc.n	8015e2c <__exponent+0x5c>
 8015e16:	f10d 0309 	add.w	r3, sp, #9
 8015e1a:	1a9b      	subs	r3, r3, r2
 8015e1c:	42ac      	cmp	r4, r5
 8015e1e:	bf88      	it	hi
 8015e20:	2300      	movhi	r3, #0
 8015e22:	3302      	adds	r3, #2
 8015e24:	4403      	add	r3, r0
 8015e26:	1a18      	subs	r0, r3, r0
 8015e28:	b003      	add	sp, #12
 8015e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015e30:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015e34:	e7ed      	b.n	8015e12 <__exponent+0x42>
 8015e36:	2330      	movs	r3, #48	@ 0x30
 8015e38:	3130      	adds	r1, #48	@ 0x30
 8015e3a:	7083      	strb	r3, [r0, #2]
 8015e3c:	1d03      	adds	r3, r0, #4
 8015e3e:	70c1      	strb	r1, [r0, #3]
 8015e40:	e7f1      	b.n	8015e26 <__exponent+0x56>
	...

08015e44 <_printf_float>:
 8015e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e48:	b08d      	sub	sp, #52	@ 0x34
 8015e4a:	460c      	mov	r4, r1
 8015e4c:	4616      	mov	r6, r2
 8015e4e:	461f      	mov	r7, r3
 8015e50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8015e54:	4605      	mov	r5, r0
 8015e56:	f000 fcdf 	bl	8016818 <_localeconv_r>
 8015e5a:	6803      	ldr	r3, [r0, #0]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	9304      	str	r3, [sp, #16]
 8015e60:	f7ea fa16 	bl	8000290 <strlen>
 8015e64:	2300      	movs	r3, #0
 8015e66:	9005      	str	r0, [sp, #20]
 8015e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8015e6e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015e72:	3307      	adds	r3, #7
 8015e74:	f8d4 b000 	ldr.w	fp, [r4]
 8015e78:	f023 0307 	bic.w	r3, r3, #7
 8015e7c:	f103 0208 	add.w	r2, r3, #8
 8015e80:	f8c8 2000 	str.w	r2, [r8]
 8015e84:	f04f 32ff 	mov.w	r2, #4294967295
 8015e88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015e8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8015e90:	f8cd 8018 	str.w	r8, [sp, #24]
 8015e94:	9307      	str	r3, [sp, #28]
 8015e96:	4b9d      	ldr	r3, [pc, #628]	@ (801610c <_printf_float+0x2c8>)
 8015e98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e9c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8015ea0:	f7ea fe54 	bl	8000b4c <__aeabi_dcmpun>
 8015ea4:	bb70      	cbnz	r0, 8015f04 <_printf_float+0xc0>
 8015ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8015eaa:	4b98      	ldr	r3, [pc, #608]	@ (801610c <_printf_float+0x2c8>)
 8015eac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015eb0:	f7ea fe2e 	bl	8000b10 <__aeabi_dcmple>
 8015eb4:	bb30      	cbnz	r0, 8015f04 <_printf_float+0xc0>
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	2300      	movs	r3, #0
 8015eba:	4640      	mov	r0, r8
 8015ebc:	4649      	mov	r1, r9
 8015ebe:	f7ea fe1d 	bl	8000afc <__aeabi_dcmplt>
 8015ec2:	b110      	cbz	r0, 8015eca <_printf_float+0x86>
 8015ec4:	232d      	movs	r3, #45	@ 0x2d
 8015ec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015eca:	4a91      	ldr	r2, [pc, #580]	@ (8016110 <_printf_float+0x2cc>)
 8015ecc:	4b91      	ldr	r3, [pc, #580]	@ (8016114 <_printf_float+0x2d0>)
 8015ece:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015ed2:	bf94      	ite	ls
 8015ed4:	4690      	movls	r8, r2
 8015ed6:	4698      	movhi	r8, r3
 8015ed8:	2303      	movs	r3, #3
 8015eda:	f04f 0900 	mov.w	r9, #0
 8015ede:	6123      	str	r3, [r4, #16]
 8015ee0:	f02b 0304 	bic.w	r3, fp, #4
 8015ee4:	6023      	str	r3, [r4, #0]
 8015ee6:	4633      	mov	r3, r6
 8015ee8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015eea:	4621      	mov	r1, r4
 8015eec:	4628      	mov	r0, r5
 8015eee:	9700      	str	r7, [sp, #0]
 8015ef0:	f000 f9d2 	bl	8016298 <_printf_common>
 8015ef4:	3001      	adds	r0, #1
 8015ef6:	f040 808d 	bne.w	8016014 <_printf_float+0x1d0>
 8015efa:	f04f 30ff 	mov.w	r0, #4294967295
 8015efe:	b00d      	add	sp, #52	@ 0x34
 8015f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f04:	4642      	mov	r2, r8
 8015f06:	464b      	mov	r3, r9
 8015f08:	4640      	mov	r0, r8
 8015f0a:	4649      	mov	r1, r9
 8015f0c:	f7ea fe1e 	bl	8000b4c <__aeabi_dcmpun>
 8015f10:	b140      	cbz	r0, 8015f24 <_printf_float+0xe0>
 8015f12:	464b      	mov	r3, r9
 8015f14:	4a80      	ldr	r2, [pc, #512]	@ (8016118 <_printf_float+0x2d4>)
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	bfbc      	itt	lt
 8015f1a:	232d      	movlt	r3, #45	@ 0x2d
 8015f1c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015f20:	4b7e      	ldr	r3, [pc, #504]	@ (801611c <_printf_float+0x2d8>)
 8015f22:	e7d4      	b.n	8015ece <_printf_float+0x8a>
 8015f24:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8015f28:	6863      	ldr	r3, [r4, #4]
 8015f2a:	9206      	str	r2, [sp, #24]
 8015f2c:	1c5a      	adds	r2, r3, #1
 8015f2e:	d13b      	bne.n	8015fa8 <_printf_float+0x164>
 8015f30:	2306      	movs	r3, #6
 8015f32:	6063      	str	r3, [r4, #4]
 8015f34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8015f38:	2300      	movs	r3, #0
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	6022      	str	r2, [r4, #0]
 8015f3e:	9303      	str	r3, [sp, #12]
 8015f40:	ab0a      	add	r3, sp, #40	@ 0x28
 8015f42:	e9cd a301 	strd	sl, r3, [sp, #4]
 8015f46:	ab09      	add	r3, sp, #36	@ 0x24
 8015f48:	ec49 8b10 	vmov	d0, r8, r9
 8015f4c:	9300      	str	r3, [sp, #0]
 8015f4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015f52:	6861      	ldr	r1, [r4, #4]
 8015f54:	f7ff fed7 	bl	8015d06 <__cvt>
 8015f58:	9b06      	ldr	r3, [sp, #24]
 8015f5a:	4680      	mov	r8, r0
 8015f5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015f5e:	2b47      	cmp	r3, #71	@ 0x47
 8015f60:	d129      	bne.n	8015fb6 <_printf_float+0x172>
 8015f62:	1cc8      	adds	r0, r1, #3
 8015f64:	db02      	blt.n	8015f6c <_printf_float+0x128>
 8015f66:	6863      	ldr	r3, [r4, #4]
 8015f68:	4299      	cmp	r1, r3
 8015f6a:	dd41      	ble.n	8015ff0 <_printf_float+0x1ac>
 8015f6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8015f70:	fa5f fa8a 	uxtb.w	sl, sl
 8015f74:	3901      	subs	r1, #1
 8015f76:	4652      	mov	r2, sl
 8015f78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015f7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8015f7e:	f7ff ff27 	bl	8015dd0 <__exponent>
 8015f82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015f84:	4681      	mov	r9, r0
 8015f86:	1813      	adds	r3, r2, r0
 8015f88:	2a01      	cmp	r2, #1
 8015f8a:	6123      	str	r3, [r4, #16]
 8015f8c:	dc02      	bgt.n	8015f94 <_printf_float+0x150>
 8015f8e:	6822      	ldr	r2, [r4, #0]
 8015f90:	07d2      	lsls	r2, r2, #31
 8015f92:	d501      	bpl.n	8015f98 <_printf_float+0x154>
 8015f94:	3301      	adds	r3, #1
 8015f96:	6123      	str	r3, [r4, #16]
 8015f98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d0a2      	beq.n	8015ee6 <_printf_float+0xa2>
 8015fa0:	232d      	movs	r3, #45	@ 0x2d
 8015fa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015fa6:	e79e      	b.n	8015ee6 <_printf_float+0xa2>
 8015fa8:	9a06      	ldr	r2, [sp, #24]
 8015faa:	2a47      	cmp	r2, #71	@ 0x47
 8015fac:	d1c2      	bne.n	8015f34 <_printf_float+0xf0>
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d1c0      	bne.n	8015f34 <_printf_float+0xf0>
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	e7bd      	b.n	8015f32 <_printf_float+0xee>
 8015fb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8015fba:	d9db      	bls.n	8015f74 <_printf_float+0x130>
 8015fbc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8015fc0:	d118      	bne.n	8015ff4 <_printf_float+0x1b0>
 8015fc2:	2900      	cmp	r1, #0
 8015fc4:	6863      	ldr	r3, [r4, #4]
 8015fc6:	dd0b      	ble.n	8015fe0 <_printf_float+0x19c>
 8015fc8:	6121      	str	r1, [r4, #16]
 8015fca:	b913      	cbnz	r3, 8015fd2 <_printf_float+0x18e>
 8015fcc:	6822      	ldr	r2, [r4, #0]
 8015fce:	07d0      	lsls	r0, r2, #31
 8015fd0:	d502      	bpl.n	8015fd8 <_printf_float+0x194>
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	440b      	add	r3, r1
 8015fd6:	6123      	str	r3, [r4, #16]
 8015fd8:	f04f 0900 	mov.w	r9, #0
 8015fdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015fde:	e7db      	b.n	8015f98 <_printf_float+0x154>
 8015fe0:	b913      	cbnz	r3, 8015fe8 <_printf_float+0x1a4>
 8015fe2:	6822      	ldr	r2, [r4, #0]
 8015fe4:	07d2      	lsls	r2, r2, #31
 8015fe6:	d501      	bpl.n	8015fec <_printf_float+0x1a8>
 8015fe8:	3302      	adds	r3, #2
 8015fea:	e7f4      	b.n	8015fd6 <_printf_float+0x192>
 8015fec:	2301      	movs	r3, #1
 8015fee:	e7f2      	b.n	8015fd6 <_printf_float+0x192>
 8015ff0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8015ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ff6:	4299      	cmp	r1, r3
 8015ff8:	db05      	blt.n	8016006 <_printf_float+0x1c2>
 8015ffa:	6823      	ldr	r3, [r4, #0]
 8015ffc:	6121      	str	r1, [r4, #16]
 8015ffe:	07d8      	lsls	r0, r3, #31
 8016000:	d5ea      	bpl.n	8015fd8 <_printf_float+0x194>
 8016002:	1c4b      	adds	r3, r1, #1
 8016004:	e7e7      	b.n	8015fd6 <_printf_float+0x192>
 8016006:	2900      	cmp	r1, #0
 8016008:	bfd4      	ite	le
 801600a:	f1c1 0202 	rsble	r2, r1, #2
 801600e:	2201      	movgt	r2, #1
 8016010:	4413      	add	r3, r2
 8016012:	e7e0      	b.n	8015fd6 <_printf_float+0x192>
 8016014:	6823      	ldr	r3, [r4, #0]
 8016016:	055a      	lsls	r2, r3, #21
 8016018:	d407      	bmi.n	801602a <_printf_float+0x1e6>
 801601a:	6923      	ldr	r3, [r4, #16]
 801601c:	4642      	mov	r2, r8
 801601e:	4631      	mov	r1, r6
 8016020:	4628      	mov	r0, r5
 8016022:	47b8      	blx	r7
 8016024:	3001      	adds	r0, #1
 8016026:	d12b      	bne.n	8016080 <_printf_float+0x23c>
 8016028:	e767      	b.n	8015efa <_printf_float+0xb6>
 801602a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801602e:	f240 80dd 	bls.w	80161ec <_printf_float+0x3a8>
 8016032:	2200      	movs	r2, #0
 8016034:	2300      	movs	r3, #0
 8016036:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801603a:	f7ea fd55 	bl	8000ae8 <__aeabi_dcmpeq>
 801603e:	2800      	cmp	r0, #0
 8016040:	d033      	beq.n	80160aa <_printf_float+0x266>
 8016042:	2301      	movs	r3, #1
 8016044:	4a36      	ldr	r2, [pc, #216]	@ (8016120 <_printf_float+0x2dc>)
 8016046:	4631      	mov	r1, r6
 8016048:	4628      	mov	r0, r5
 801604a:	47b8      	blx	r7
 801604c:	3001      	adds	r0, #1
 801604e:	f43f af54 	beq.w	8015efa <_printf_float+0xb6>
 8016052:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016056:	4543      	cmp	r3, r8
 8016058:	db02      	blt.n	8016060 <_printf_float+0x21c>
 801605a:	6823      	ldr	r3, [r4, #0]
 801605c:	07d8      	lsls	r0, r3, #31
 801605e:	d50f      	bpl.n	8016080 <_printf_float+0x23c>
 8016060:	4631      	mov	r1, r6
 8016062:	4628      	mov	r0, r5
 8016064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016068:	47b8      	blx	r7
 801606a:	3001      	adds	r0, #1
 801606c:	f43f af45 	beq.w	8015efa <_printf_float+0xb6>
 8016070:	f04f 0900 	mov.w	r9, #0
 8016074:	f108 38ff 	add.w	r8, r8, #4294967295
 8016078:	f104 0a1a 	add.w	sl, r4, #26
 801607c:	45c8      	cmp	r8, r9
 801607e:	dc09      	bgt.n	8016094 <_printf_float+0x250>
 8016080:	6823      	ldr	r3, [r4, #0]
 8016082:	079b      	lsls	r3, r3, #30
 8016084:	f100 8103 	bmi.w	801628e <_printf_float+0x44a>
 8016088:	68e0      	ldr	r0, [r4, #12]
 801608a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801608c:	4298      	cmp	r0, r3
 801608e:	bfb8      	it	lt
 8016090:	4618      	movlt	r0, r3
 8016092:	e734      	b.n	8015efe <_printf_float+0xba>
 8016094:	2301      	movs	r3, #1
 8016096:	4652      	mov	r2, sl
 8016098:	4631      	mov	r1, r6
 801609a:	4628      	mov	r0, r5
 801609c:	47b8      	blx	r7
 801609e:	3001      	adds	r0, #1
 80160a0:	f43f af2b 	beq.w	8015efa <_printf_float+0xb6>
 80160a4:	f109 0901 	add.w	r9, r9, #1
 80160a8:	e7e8      	b.n	801607c <_printf_float+0x238>
 80160aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	dc39      	bgt.n	8016124 <_printf_float+0x2e0>
 80160b0:	2301      	movs	r3, #1
 80160b2:	4a1b      	ldr	r2, [pc, #108]	@ (8016120 <_printf_float+0x2dc>)
 80160b4:	4631      	mov	r1, r6
 80160b6:	4628      	mov	r0, r5
 80160b8:	47b8      	blx	r7
 80160ba:	3001      	adds	r0, #1
 80160bc:	f43f af1d 	beq.w	8015efa <_printf_float+0xb6>
 80160c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80160c4:	ea59 0303 	orrs.w	r3, r9, r3
 80160c8:	d102      	bne.n	80160d0 <_printf_float+0x28c>
 80160ca:	6823      	ldr	r3, [r4, #0]
 80160cc:	07d9      	lsls	r1, r3, #31
 80160ce:	d5d7      	bpl.n	8016080 <_printf_float+0x23c>
 80160d0:	4631      	mov	r1, r6
 80160d2:	4628      	mov	r0, r5
 80160d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160d8:	47b8      	blx	r7
 80160da:	3001      	adds	r0, #1
 80160dc:	f43f af0d 	beq.w	8015efa <_printf_float+0xb6>
 80160e0:	f04f 0a00 	mov.w	sl, #0
 80160e4:	f104 0b1a 	add.w	fp, r4, #26
 80160e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160ea:	425b      	negs	r3, r3
 80160ec:	4553      	cmp	r3, sl
 80160ee:	dc01      	bgt.n	80160f4 <_printf_float+0x2b0>
 80160f0:	464b      	mov	r3, r9
 80160f2:	e793      	b.n	801601c <_printf_float+0x1d8>
 80160f4:	2301      	movs	r3, #1
 80160f6:	465a      	mov	r2, fp
 80160f8:	4631      	mov	r1, r6
 80160fa:	4628      	mov	r0, r5
 80160fc:	47b8      	blx	r7
 80160fe:	3001      	adds	r0, #1
 8016100:	f43f aefb 	beq.w	8015efa <_printf_float+0xb6>
 8016104:	f10a 0a01 	add.w	sl, sl, #1
 8016108:	e7ee      	b.n	80160e8 <_printf_float+0x2a4>
 801610a:	bf00      	nop
 801610c:	7fefffff 	.word	0x7fefffff
 8016110:	0801a4f0 	.word	0x0801a4f0
 8016114:	0801a4f4 	.word	0x0801a4f4
 8016118:	0801a4f8 	.word	0x0801a4f8
 801611c:	0801a4fc 	.word	0x0801a4fc
 8016120:	0801a500 	.word	0x0801a500
 8016124:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016126:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801612a:	4553      	cmp	r3, sl
 801612c:	bfa8      	it	ge
 801612e:	4653      	movge	r3, sl
 8016130:	2b00      	cmp	r3, #0
 8016132:	4699      	mov	r9, r3
 8016134:	dc36      	bgt.n	80161a4 <_printf_float+0x360>
 8016136:	f04f 0b00 	mov.w	fp, #0
 801613a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801613e:	f104 021a 	add.w	r2, r4, #26
 8016142:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016144:	9306      	str	r3, [sp, #24]
 8016146:	eba3 0309 	sub.w	r3, r3, r9
 801614a:	455b      	cmp	r3, fp
 801614c:	dc31      	bgt.n	80161b2 <_printf_float+0x36e>
 801614e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016150:	459a      	cmp	sl, r3
 8016152:	dc3a      	bgt.n	80161ca <_printf_float+0x386>
 8016154:	6823      	ldr	r3, [r4, #0]
 8016156:	07da      	lsls	r2, r3, #31
 8016158:	d437      	bmi.n	80161ca <_printf_float+0x386>
 801615a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801615c:	ebaa 0903 	sub.w	r9, sl, r3
 8016160:	9b06      	ldr	r3, [sp, #24]
 8016162:	ebaa 0303 	sub.w	r3, sl, r3
 8016166:	4599      	cmp	r9, r3
 8016168:	bfa8      	it	ge
 801616a:	4699      	movge	r9, r3
 801616c:	f1b9 0f00 	cmp.w	r9, #0
 8016170:	dc33      	bgt.n	80161da <_printf_float+0x396>
 8016172:	f04f 0800 	mov.w	r8, #0
 8016176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801617a:	f104 0b1a 	add.w	fp, r4, #26
 801617e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016180:	ebaa 0303 	sub.w	r3, sl, r3
 8016184:	eba3 0309 	sub.w	r3, r3, r9
 8016188:	4543      	cmp	r3, r8
 801618a:	f77f af79 	ble.w	8016080 <_printf_float+0x23c>
 801618e:	2301      	movs	r3, #1
 8016190:	465a      	mov	r2, fp
 8016192:	4631      	mov	r1, r6
 8016194:	4628      	mov	r0, r5
 8016196:	47b8      	blx	r7
 8016198:	3001      	adds	r0, #1
 801619a:	f43f aeae 	beq.w	8015efa <_printf_float+0xb6>
 801619e:	f108 0801 	add.w	r8, r8, #1
 80161a2:	e7ec      	b.n	801617e <_printf_float+0x33a>
 80161a4:	4642      	mov	r2, r8
 80161a6:	4631      	mov	r1, r6
 80161a8:	4628      	mov	r0, r5
 80161aa:	47b8      	blx	r7
 80161ac:	3001      	adds	r0, #1
 80161ae:	d1c2      	bne.n	8016136 <_printf_float+0x2f2>
 80161b0:	e6a3      	b.n	8015efa <_printf_float+0xb6>
 80161b2:	2301      	movs	r3, #1
 80161b4:	4631      	mov	r1, r6
 80161b6:	4628      	mov	r0, r5
 80161b8:	9206      	str	r2, [sp, #24]
 80161ba:	47b8      	blx	r7
 80161bc:	3001      	adds	r0, #1
 80161be:	f43f ae9c 	beq.w	8015efa <_printf_float+0xb6>
 80161c2:	f10b 0b01 	add.w	fp, fp, #1
 80161c6:	9a06      	ldr	r2, [sp, #24]
 80161c8:	e7bb      	b.n	8016142 <_printf_float+0x2fe>
 80161ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161ce:	4631      	mov	r1, r6
 80161d0:	4628      	mov	r0, r5
 80161d2:	47b8      	blx	r7
 80161d4:	3001      	adds	r0, #1
 80161d6:	d1c0      	bne.n	801615a <_printf_float+0x316>
 80161d8:	e68f      	b.n	8015efa <_printf_float+0xb6>
 80161da:	9a06      	ldr	r2, [sp, #24]
 80161dc:	464b      	mov	r3, r9
 80161de:	4631      	mov	r1, r6
 80161e0:	4628      	mov	r0, r5
 80161e2:	4442      	add	r2, r8
 80161e4:	47b8      	blx	r7
 80161e6:	3001      	adds	r0, #1
 80161e8:	d1c3      	bne.n	8016172 <_printf_float+0x32e>
 80161ea:	e686      	b.n	8015efa <_printf_float+0xb6>
 80161ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80161f0:	f1ba 0f01 	cmp.w	sl, #1
 80161f4:	dc01      	bgt.n	80161fa <_printf_float+0x3b6>
 80161f6:	07db      	lsls	r3, r3, #31
 80161f8:	d536      	bpl.n	8016268 <_printf_float+0x424>
 80161fa:	2301      	movs	r3, #1
 80161fc:	4642      	mov	r2, r8
 80161fe:	4631      	mov	r1, r6
 8016200:	4628      	mov	r0, r5
 8016202:	47b8      	blx	r7
 8016204:	3001      	adds	r0, #1
 8016206:	f43f ae78 	beq.w	8015efa <_printf_float+0xb6>
 801620a:	4631      	mov	r1, r6
 801620c:	4628      	mov	r0, r5
 801620e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016212:	47b8      	blx	r7
 8016214:	3001      	adds	r0, #1
 8016216:	f43f ae70 	beq.w	8015efa <_printf_float+0xb6>
 801621a:	2200      	movs	r2, #0
 801621c:	2300      	movs	r3, #0
 801621e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016226:	f7ea fc5f 	bl	8000ae8 <__aeabi_dcmpeq>
 801622a:	b9c0      	cbnz	r0, 801625e <_printf_float+0x41a>
 801622c:	4653      	mov	r3, sl
 801622e:	f108 0201 	add.w	r2, r8, #1
 8016232:	4631      	mov	r1, r6
 8016234:	4628      	mov	r0, r5
 8016236:	47b8      	blx	r7
 8016238:	3001      	adds	r0, #1
 801623a:	d10c      	bne.n	8016256 <_printf_float+0x412>
 801623c:	e65d      	b.n	8015efa <_printf_float+0xb6>
 801623e:	2301      	movs	r3, #1
 8016240:	465a      	mov	r2, fp
 8016242:	4631      	mov	r1, r6
 8016244:	4628      	mov	r0, r5
 8016246:	47b8      	blx	r7
 8016248:	3001      	adds	r0, #1
 801624a:	f43f ae56 	beq.w	8015efa <_printf_float+0xb6>
 801624e:	f108 0801 	add.w	r8, r8, #1
 8016252:	45d0      	cmp	r8, sl
 8016254:	dbf3      	blt.n	801623e <_printf_float+0x3fa>
 8016256:	464b      	mov	r3, r9
 8016258:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801625c:	e6df      	b.n	801601e <_printf_float+0x1da>
 801625e:	f04f 0800 	mov.w	r8, #0
 8016262:	f104 0b1a 	add.w	fp, r4, #26
 8016266:	e7f4      	b.n	8016252 <_printf_float+0x40e>
 8016268:	2301      	movs	r3, #1
 801626a:	4642      	mov	r2, r8
 801626c:	e7e1      	b.n	8016232 <_printf_float+0x3ee>
 801626e:	2301      	movs	r3, #1
 8016270:	464a      	mov	r2, r9
 8016272:	4631      	mov	r1, r6
 8016274:	4628      	mov	r0, r5
 8016276:	47b8      	blx	r7
 8016278:	3001      	adds	r0, #1
 801627a:	f43f ae3e 	beq.w	8015efa <_printf_float+0xb6>
 801627e:	f108 0801 	add.w	r8, r8, #1
 8016282:	68e3      	ldr	r3, [r4, #12]
 8016284:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016286:	1a5b      	subs	r3, r3, r1
 8016288:	4543      	cmp	r3, r8
 801628a:	dcf0      	bgt.n	801626e <_printf_float+0x42a>
 801628c:	e6fc      	b.n	8016088 <_printf_float+0x244>
 801628e:	f04f 0800 	mov.w	r8, #0
 8016292:	f104 0919 	add.w	r9, r4, #25
 8016296:	e7f4      	b.n	8016282 <_printf_float+0x43e>

08016298 <_printf_common>:
 8016298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801629c:	4616      	mov	r6, r2
 801629e:	4698      	mov	r8, r3
 80162a0:	688a      	ldr	r2, [r1, #8]
 80162a2:	4607      	mov	r7, r0
 80162a4:	690b      	ldr	r3, [r1, #16]
 80162a6:	460c      	mov	r4, r1
 80162a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80162ac:	4293      	cmp	r3, r2
 80162ae:	bfb8      	it	lt
 80162b0:	4613      	movlt	r3, r2
 80162b2:	6033      	str	r3, [r6, #0]
 80162b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80162b8:	b10a      	cbz	r2, 80162be <_printf_common+0x26>
 80162ba:	3301      	adds	r3, #1
 80162bc:	6033      	str	r3, [r6, #0]
 80162be:	6823      	ldr	r3, [r4, #0]
 80162c0:	0699      	lsls	r1, r3, #26
 80162c2:	bf42      	ittt	mi
 80162c4:	6833      	ldrmi	r3, [r6, #0]
 80162c6:	3302      	addmi	r3, #2
 80162c8:	6033      	strmi	r3, [r6, #0]
 80162ca:	6825      	ldr	r5, [r4, #0]
 80162cc:	f015 0506 	ands.w	r5, r5, #6
 80162d0:	d106      	bne.n	80162e0 <_printf_common+0x48>
 80162d2:	f104 0a19 	add.w	sl, r4, #25
 80162d6:	68e3      	ldr	r3, [r4, #12]
 80162d8:	6832      	ldr	r2, [r6, #0]
 80162da:	1a9b      	subs	r3, r3, r2
 80162dc:	42ab      	cmp	r3, r5
 80162de:	dc2b      	bgt.n	8016338 <_printf_common+0xa0>
 80162e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80162e4:	6822      	ldr	r2, [r4, #0]
 80162e6:	3b00      	subs	r3, #0
 80162e8:	bf18      	it	ne
 80162ea:	2301      	movne	r3, #1
 80162ec:	0692      	lsls	r2, r2, #26
 80162ee:	d430      	bmi.n	8016352 <_printf_common+0xba>
 80162f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80162f4:	4641      	mov	r1, r8
 80162f6:	4638      	mov	r0, r7
 80162f8:	47c8      	blx	r9
 80162fa:	3001      	adds	r0, #1
 80162fc:	d023      	beq.n	8016346 <_printf_common+0xae>
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	341a      	adds	r4, #26
 8016302:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8016306:	f003 0306 	and.w	r3, r3, #6
 801630a:	2b04      	cmp	r3, #4
 801630c:	bf0a      	itet	eq
 801630e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8016312:	2500      	movne	r5, #0
 8016314:	6833      	ldreq	r3, [r6, #0]
 8016316:	f04f 0600 	mov.w	r6, #0
 801631a:	bf08      	it	eq
 801631c:	1aed      	subeq	r5, r5, r3
 801631e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8016322:	bf08      	it	eq
 8016324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016328:	4293      	cmp	r3, r2
 801632a:	bfc4      	itt	gt
 801632c:	1a9b      	subgt	r3, r3, r2
 801632e:	18ed      	addgt	r5, r5, r3
 8016330:	42b5      	cmp	r5, r6
 8016332:	d11a      	bne.n	801636a <_printf_common+0xd2>
 8016334:	2000      	movs	r0, #0
 8016336:	e008      	b.n	801634a <_printf_common+0xb2>
 8016338:	2301      	movs	r3, #1
 801633a:	4652      	mov	r2, sl
 801633c:	4641      	mov	r1, r8
 801633e:	4638      	mov	r0, r7
 8016340:	47c8      	blx	r9
 8016342:	3001      	adds	r0, #1
 8016344:	d103      	bne.n	801634e <_printf_common+0xb6>
 8016346:	f04f 30ff 	mov.w	r0, #4294967295
 801634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801634e:	3501      	adds	r5, #1
 8016350:	e7c1      	b.n	80162d6 <_printf_common+0x3e>
 8016352:	18e1      	adds	r1, r4, r3
 8016354:	1c5a      	adds	r2, r3, #1
 8016356:	2030      	movs	r0, #48	@ 0x30
 8016358:	3302      	adds	r3, #2
 801635a:	4422      	add	r2, r4
 801635c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016368:	e7c2      	b.n	80162f0 <_printf_common+0x58>
 801636a:	2301      	movs	r3, #1
 801636c:	4622      	mov	r2, r4
 801636e:	4641      	mov	r1, r8
 8016370:	4638      	mov	r0, r7
 8016372:	47c8      	blx	r9
 8016374:	3001      	adds	r0, #1
 8016376:	d0e6      	beq.n	8016346 <_printf_common+0xae>
 8016378:	3601      	adds	r6, #1
 801637a:	e7d9      	b.n	8016330 <_printf_common+0x98>

0801637c <_printf_i>:
 801637c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016380:	7e0f      	ldrb	r7, [r1, #24]
 8016382:	4691      	mov	r9, r2
 8016384:	4680      	mov	r8, r0
 8016386:	460c      	mov	r4, r1
 8016388:	2f78      	cmp	r7, #120	@ 0x78
 801638a:	469a      	mov	sl, r3
 801638c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801638e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016392:	d807      	bhi.n	80163a4 <_printf_i+0x28>
 8016394:	2f62      	cmp	r7, #98	@ 0x62
 8016396:	d80a      	bhi.n	80163ae <_printf_i+0x32>
 8016398:	2f00      	cmp	r7, #0
 801639a:	f000 80d2 	beq.w	8016542 <_printf_i+0x1c6>
 801639e:	2f58      	cmp	r7, #88	@ 0x58
 80163a0:	f000 80b9 	beq.w	8016516 <_printf_i+0x19a>
 80163a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80163a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80163ac:	e03a      	b.n	8016424 <_printf_i+0xa8>
 80163ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80163b2:	2b15      	cmp	r3, #21
 80163b4:	d8f6      	bhi.n	80163a4 <_printf_i+0x28>
 80163b6:	a101      	add	r1, pc, #4	@ (adr r1, 80163bc <_printf_i+0x40>)
 80163b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80163bc:	08016415 	.word	0x08016415
 80163c0:	08016429 	.word	0x08016429
 80163c4:	080163a5 	.word	0x080163a5
 80163c8:	080163a5 	.word	0x080163a5
 80163cc:	080163a5 	.word	0x080163a5
 80163d0:	080163a5 	.word	0x080163a5
 80163d4:	08016429 	.word	0x08016429
 80163d8:	080163a5 	.word	0x080163a5
 80163dc:	080163a5 	.word	0x080163a5
 80163e0:	080163a5 	.word	0x080163a5
 80163e4:	080163a5 	.word	0x080163a5
 80163e8:	08016529 	.word	0x08016529
 80163ec:	08016453 	.word	0x08016453
 80163f0:	080164e3 	.word	0x080164e3
 80163f4:	080163a5 	.word	0x080163a5
 80163f8:	080163a5 	.word	0x080163a5
 80163fc:	0801654b 	.word	0x0801654b
 8016400:	080163a5 	.word	0x080163a5
 8016404:	08016453 	.word	0x08016453
 8016408:	080163a5 	.word	0x080163a5
 801640c:	080163a5 	.word	0x080163a5
 8016410:	080164eb 	.word	0x080164eb
 8016414:	6833      	ldr	r3, [r6, #0]
 8016416:	1d1a      	adds	r2, r3, #4
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	6032      	str	r2, [r6, #0]
 801641c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016424:	2301      	movs	r3, #1
 8016426:	e09d      	b.n	8016564 <_printf_i+0x1e8>
 8016428:	6833      	ldr	r3, [r6, #0]
 801642a:	6820      	ldr	r0, [r4, #0]
 801642c:	1d19      	adds	r1, r3, #4
 801642e:	6031      	str	r1, [r6, #0]
 8016430:	0606      	lsls	r6, r0, #24
 8016432:	d501      	bpl.n	8016438 <_printf_i+0xbc>
 8016434:	681d      	ldr	r5, [r3, #0]
 8016436:	e003      	b.n	8016440 <_printf_i+0xc4>
 8016438:	0645      	lsls	r5, r0, #25
 801643a:	d5fb      	bpl.n	8016434 <_printf_i+0xb8>
 801643c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016440:	2d00      	cmp	r5, #0
 8016442:	da03      	bge.n	801644c <_printf_i+0xd0>
 8016444:	232d      	movs	r3, #45	@ 0x2d
 8016446:	426d      	negs	r5, r5
 8016448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801644c:	4859      	ldr	r0, [pc, #356]	@ (80165b4 <_printf_i+0x238>)
 801644e:	230a      	movs	r3, #10
 8016450:	e011      	b.n	8016476 <_printf_i+0xfa>
 8016452:	6821      	ldr	r1, [r4, #0]
 8016454:	6833      	ldr	r3, [r6, #0]
 8016456:	0608      	lsls	r0, r1, #24
 8016458:	f853 5b04 	ldr.w	r5, [r3], #4
 801645c:	d402      	bmi.n	8016464 <_printf_i+0xe8>
 801645e:	0649      	lsls	r1, r1, #25
 8016460:	bf48      	it	mi
 8016462:	b2ad      	uxthmi	r5, r5
 8016464:	2f6f      	cmp	r7, #111	@ 0x6f
 8016466:	6033      	str	r3, [r6, #0]
 8016468:	4852      	ldr	r0, [pc, #328]	@ (80165b4 <_printf_i+0x238>)
 801646a:	bf14      	ite	ne
 801646c:	230a      	movne	r3, #10
 801646e:	2308      	moveq	r3, #8
 8016470:	2100      	movs	r1, #0
 8016472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016476:	6866      	ldr	r6, [r4, #4]
 8016478:	2e00      	cmp	r6, #0
 801647a:	60a6      	str	r6, [r4, #8]
 801647c:	bfa2      	ittt	ge
 801647e:	6821      	ldrge	r1, [r4, #0]
 8016480:	f021 0104 	bicge.w	r1, r1, #4
 8016484:	6021      	strge	r1, [r4, #0]
 8016486:	b90d      	cbnz	r5, 801648c <_printf_i+0x110>
 8016488:	2e00      	cmp	r6, #0
 801648a:	d04b      	beq.n	8016524 <_printf_i+0x1a8>
 801648c:	4616      	mov	r6, r2
 801648e:	fbb5 f1f3 	udiv	r1, r5, r3
 8016492:	fb03 5711 	mls	r7, r3, r1, r5
 8016496:	5dc7      	ldrb	r7, [r0, r7]
 8016498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801649c:	462f      	mov	r7, r5
 801649e:	460d      	mov	r5, r1
 80164a0:	42bb      	cmp	r3, r7
 80164a2:	d9f4      	bls.n	801648e <_printf_i+0x112>
 80164a4:	2b08      	cmp	r3, #8
 80164a6:	d10b      	bne.n	80164c0 <_printf_i+0x144>
 80164a8:	6823      	ldr	r3, [r4, #0]
 80164aa:	07df      	lsls	r7, r3, #31
 80164ac:	d508      	bpl.n	80164c0 <_printf_i+0x144>
 80164ae:	6923      	ldr	r3, [r4, #16]
 80164b0:	6861      	ldr	r1, [r4, #4]
 80164b2:	4299      	cmp	r1, r3
 80164b4:	bfde      	ittt	le
 80164b6:	2330      	movle	r3, #48	@ 0x30
 80164b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80164bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80164c0:	1b92      	subs	r2, r2, r6
 80164c2:	6122      	str	r2, [r4, #16]
 80164c4:	464b      	mov	r3, r9
 80164c6:	aa03      	add	r2, sp, #12
 80164c8:	4621      	mov	r1, r4
 80164ca:	4640      	mov	r0, r8
 80164cc:	f8cd a000 	str.w	sl, [sp]
 80164d0:	f7ff fee2 	bl	8016298 <_printf_common>
 80164d4:	3001      	adds	r0, #1
 80164d6:	d14a      	bne.n	801656e <_printf_i+0x1f2>
 80164d8:	f04f 30ff 	mov.w	r0, #4294967295
 80164dc:	b004      	add	sp, #16
 80164de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164e2:	6823      	ldr	r3, [r4, #0]
 80164e4:	f043 0320 	orr.w	r3, r3, #32
 80164e8:	6023      	str	r3, [r4, #0]
 80164ea:	2778      	movs	r7, #120	@ 0x78
 80164ec:	4832      	ldr	r0, [pc, #200]	@ (80165b8 <_printf_i+0x23c>)
 80164ee:	6823      	ldr	r3, [r4, #0]
 80164f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80164f4:	061f      	lsls	r7, r3, #24
 80164f6:	6831      	ldr	r1, [r6, #0]
 80164f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80164fc:	d402      	bmi.n	8016504 <_printf_i+0x188>
 80164fe:	065f      	lsls	r7, r3, #25
 8016500:	bf48      	it	mi
 8016502:	b2ad      	uxthmi	r5, r5
 8016504:	6031      	str	r1, [r6, #0]
 8016506:	07d9      	lsls	r1, r3, #31
 8016508:	bf44      	itt	mi
 801650a:	f043 0320 	orrmi.w	r3, r3, #32
 801650e:	6023      	strmi	r3, [r4, #0]
 8016510:	b11d      	cbz	r5, 801651a <_printf_i+0x19e>
 8016512:	2310      	movs	r3, #16
 8016514:	e7ac      	b.n	8016470 <_printf_i+0xf4>
 8016516:	4827      	ldr	r0, [pc, #156]	@ (80165b4 <_printf_i+0x238>)
 8016518:	e7e9      	b.n	80164ee <_printf_i+0x172>
 801651a:	6823      	ldr	r3, [r4, #0]
 801651c:	f023 0320 	bic.w	r3, r3, #32
 8016520:	6023      	str	r3, [r4, #0]
 8016522:	e7f6      	b.n	8016512 <_printf_i+0x196>
 8016524:	4616      	mov	r6, r2
 8016526:	e7bd      	b.n	80164a4 <_printf_i+0x128>
 8016528:	6833      	ldr	r3, [r6, #0]
 801652a:	6825      	ldr	r5, [r4, #0]
 801652c:	1d18      	adds	r0, r3, #4
 801652e:	6961      	ldr	r1, [r4, #20]
 8016530:	6030      	str	r0, [r6, #0]
 8016532:	062e      	lsls	r6, r5, #24
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	d501      	bpl.n	801653c <_printf_i+0x1c0>
 8016538:	6019      	str	r1, [r3, #0]
 801653a:	e002      	b.n	8016542 <_printf_i+0x1c6>
 801653c:	0668      	lsls	r0, r5, #25
 801653e:	d5fb      	bpl.n	8016538 <_printf_i+0x1bc>
 8016540:	8019      	strh	r1, [r3, #0]
 8016542:	2300      	movs	r3, #0
 8016544:	4616      	mov	r6, r2
 8016546:	6123      	str	r3, [r4, #16]
 8016548:	e7bc      	b.n	80164c4 <_printf_i+0x148>
 801654a:	6833      	ldr	r3, [r6, #0]
 801654c:	2100      	movs	r1, #0
 801654e:	1d1a      	adds	r2, r3, #4
 8016550:	6032      	str	r2, [r6, #0]
 8016552:	681e      	ldr	r6, [r3, #0]
 8016554:	6862      	ldr	r2, [r4, #4]
 8016556:	4630      	mov	r0, r6
 8016558:	f000 f9d5 	bl	8016906 <memchr>
 801655c:	b108      	cbz	r0, 8016562 <_printf_i+0x1e6>
 801655e:	1b80      	subs	r0, r0, r6
 8016560:	6060      	str	r0, [r4, #4]
 8016562:	6863      	ldr	r3, [r4, #4]
 8016564:	6123      	str	r3, [r4, #16]
 8016566:	2300      	movs	r3, #0
 8016568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801656c:	e7aa      	b.n	80164c4 <_printf_i+0x148>
 801656e:	6923      	ldr	r3, [r4, #16]
 8016570:	4632      	mov	r2, r6
 8016572:	4649      	mov	r1, r9
 8016574:	4640      	mov	r0, r8
 8016576:	47d0      	blx	sl
 8016578:	3001      	adds	r0, #1
 801657a:	d0ad      	beq.n	80164d8 <_printf_i+0x15c>
 801657c:	6823      	ldr	r3, [r4, #0]
 801657e:	079b      	lsls	r3, r3, #30
 8016580:	d413      	bmi.n	80165aa <_printf_i+0x22e>
 8016582:	68e0      	ldr	r0, [r4, #12]
 8016584:	9b03      	ldr	r3, [sp, #12]
 8016586:	4298      	cmp	r0, r3
 8016588:	bfb8      	it	lt
 801658a:	4618      	movlt	r0, r3
 801658c:	e7a6      	b.n	80164dc <_printf_i+0x160>
 801658e:	2301      	movs	r3, #1
 8016590:	4632      	mov	r2, r6
 8016592:	4649      	mov	r1, r9
 8016594:	4640      	mov	r0, r8
 8016596:	47d0      	blx	sl
 8016598:	3001      	adds	r0, #1
 801659a:	d09d      	beq.n	80164d8 <_printf_i+0x15c>
 801659c:	3501      	adds	r5, #1
 801659e:	68e3      	ldr	r3, [r4, #12]
 80165a0:	9903      	ldr	r1, [sp, #12]
 80165a2:	1a5b      	subs	r3, r3, r1
 80165a4:	42ab      	cmp	r3, r5
 80165a6:	dcf2      	bgt.n	801658e <_printf_i+0x212>
 80165a8:	e7eb      	b.n	8016582 <_printf_i+0x206>
 80165aa:	2500      	movs	r5, #0
 80165ac:	f104 0619 	add.w	r6, r4, #25
 80165b0:	e7f5      	b.n	801659e <_printf_i+0x222>
 80165b2:	bf00      	nop
 80165b4:	0801a502 	.word	0x0801a502
 80165b8:	0801a513 	.word	0x0801a513

080165bc <std>:
 80165bc:	2300      	movs	r3, #0
 80165be:	b510      	push	{r4, lr}
 80165c0:	4604      	mov	r4, r0
 80165c2:	6083      	str	r3, [r0, #8]
 80165c4:	8181      	strh	r1, [r0, #12]
 80165c6:	4619      	mov	r1, r3
 80165c8:	6643      	str	r3, [r0, #100]	@ 0x64
 80165ca:	81c2      	strh	r2, [r0, #14]
 80165cc:	2208      	movs	r2, #8
 80165ce:	6183      	str	r3, [r0, #24]
 80165d0:	e9c0 3300 	strd	r3, r3, [r0]
 80165d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80165d8:	305c      	adds	r0, #92	@ 0x5c
 80165da:	f000 f914 	bl	8016806 <memset>
 80165de:	4b0d      	ldr	r3, [pc, #52]	@ (8016614 <std+0x58>)
 80165e0:	6224      	str	r4, [r4, #32]
 80165e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80165e4:	4b0c      	ldr	r3, [pc, #48]	@ (8016618 <std+0x5c>)
 80165e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80165e8:	4b0c      	ldr	r3, [pc, #48]	@ (801661c <std+0x60>)
 80165ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80165ec:	4b0c      	ldr	r3, [pc, #48]	@ (8016620 <std+0x64>)
 80165ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80165f0:	4b0c      	ldr	r3, [pc, #48]	@ (8016624 <std+0x68>)
 80165f2:	429c      	cmp	r4, r3
 80165f4:	d006      	beq.n	8016604 <std+0x48>
 80165f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80165fa:	4294      	cmp	r4, r2
 80165fc:	d002      	beq.n	8016604 <std+0x48>
 80165fe:	33d0      	adds	r3, #208	@ 0xd0
 8016600:	429c      	cmp	r4, r3
 8016602:	d105      	bne.n	8016610 <std+0x54>
 8016604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801660c:	f000 b978 	b.w	8016900 <__retarget_lock_init_recursive>
 8016610:	bd10      	pop	{r4, pc}
 8016612:	bf00      	nop
 8016614:	08016781 	.word	0x08016781
 8016618:	080167a3 	.word	0x080167a3
 801661c:	080167db 	.word	0x080167db
 8016620:	080167ff 	.word	0x080167ff
 8016624:	2002a260 	.word	0x2002a260

08016628 <stdio_exit_handler>:
 8016628:	4a02      	ldr	r2, [pc, #8]	@ (8016634 <stdio_exit_handler+0xc>)
 801662a:	4903      	ldr	r1, [pc, #12]	@ (8016638 <stdio_exit_handler+0x10>)
 801662c:	4803      	ldr	r0, [pc, #12]	@ (801663c <stdio_exit_handler+0x14>)
 801662e:	f000 b869 	b.w	8016704 <_fwalk_sglue>
 8016632:	bf00      	nop
 8016634:	20000130 	.word	0x20000130
 8016638:	080182a9 	.word	0x080182a9
 801663c:	20000140 	.word	0x20000140

08016640 <cleanup_stdio>:
 8016640:	6841      	ldr	r1, [r0, #4]
 8016642:	4b0c      	ldr	r3, [pc, #48]	@ (8016674 <cleanup_stdio+0x34>)
 8016644:	4299      	cmp	r1, r3
 8016646:	b510      	push	{r4, lr}
 8016648:	4604      	mov	r4, r0
 801664a:	d001      	beq.n	8016650 <cleanup_stdio+0x10>
 801664c:	f001 fe2c 	bl	80182a8 <_fflush_r>
 8016650:	68a1      	ldr	r1, [r4, #8]
 8016652:	4b09      	ldr	r3, [pc, #36]	@ (8016678 <cleanup_stdio+0x38>)
 8016654:	4299      	cmp	r1, r3
 8016656:	d002      	beq.n	801665e <cleanup_stdio+0x1e>
 8016658:	4620      	mov	r0, r4
 801665a:	f001 fe25 	bl	80182a8 <_fflush_r>
 801665e:	68e1      	ldr	r1, [r4, #12]
 8016660:	4b06      	ldr	r3, [pc, #24]	@ (801667c <cleanup_stdio+0x3c>)
 8016662:	4299      	cmp	r1, r3
 8016664:	d004      	beq.n	8016670 <cleanup_stdio+0x30>
 8016666:	4620      	mov	r0, r4
 8016668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801666c:	f001 be1c 	b.w	80182a8 <_fflush_r>
 8016670:	bd10      	pop	{r4, pc}
 8016672:	bf00      	nop
 8016674:	2002a260 	.word	0x2002a260
 8016678:	2002a2c8 	.word	0x2002a2c8
 801667c:	2002a330 	.word	0x2002a330

08016680 <global_stdio_init.part.0>:
 8016680:	b510      	push	{r4, lr}
 8016682:	4b0b      	ldr	r3, [pc, #44]	@ (80166b0 <global_stdio_init.part.0+0x30>)
 8016684:	2104      	movs	r1, #4
 8016686:	4c0b      	ldr	r4, [pc, #44]	@ (80166b4 <global_stdio_init.part.0+0x34>)
 8016688:	4a0b      	ldr	r2, [pc, #44]	@ (80166b8 <global_stdio_init.part.0+0x38>)
 801668a:	4620      	mov	r0, r4
 801668c:	601a      	str	r2, [r3, #0]
 801668e:	2200      	movs	r2, #0
 8016690:	f7ff ff94 	bl	80165bc <std>
 8016694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016698:	2201      	movs	r2, #1
 801669a:	2109      	movs	r1, #9
 801669c:	f7ff ff8e 	bl	80165bc <std>
 80166a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80166a4:	2202      	movs	r2, #2
 80166a6:	2112      	movs	r1, #18
 80166a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166ac:	f7ff bf86 	b.w	80165bc <std>
 80166b0:	2002a398 	.word	0x2002a398
 80166b4:	2002a260 	.word	0x2002a260
 80166b8:	08016629 	.word	0x08016629

080166bc <__sfp_lock_acquire>:
 80166bc:	4801      	ldr	r0, [pc, #4]	@ (80166c4 <__sfp_lock_acquire+0x8>)
 80166be:	f000 b920 	b.w	8016902 <__retarget_lock_acquire_recursive>
 80166c2:	bf00      	nop
 80166c4:	2002a3a1 	.word	0x2002a3a1

080166c8 <__sfp_lock_release>:
 80166c8:	4801      	ldr	r0, [pc, #4]	@ (80166d0 <__sfp_lock_release+0x8>)
 80166ca:	f000 b91b 	b.w	8016904 <__retarget_lock_release_recursive>
 80166ce:	bf00      	nop
 80166d0:	2002a3a1 	.word	0x2002a3a1

080166d4 <__sinit>:
 80166d4:	b510      	push	{r4, lr}
 80166d6:	4604      	mov	r4, r0
 80166d8:	f7ff fff0 	bl	80166bc <__sfp_lock_acquire>
 80166dc:	6a23      	ldr	r3, [r4, #32]
 80166de:	b11b      	cbz	r3, 80166e8 <__sinit+0x14>
 80166e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166e4:	f7ff bff0 	b.w	80166c8 <__sfp_lock_release>
 80166e8:	4b04      	ldr	r3, [pc, #16]	@ (80166fc <__sinit+0x28>)
 80166ea:	6223      	str	r3, [r4, #32]
 80166ec:	4b04      	ldr	r3, [pc, #16]	@ (8016700 <__sinit+0x2c>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d1f5      	bne.n	80166e0 <__sinit+0xc>
 80166f4:	f7ff ffc4 	bl	8016680 <global_stdio_init.part.0>
 80166f8:	e7f2      	b.n	80166e0 <__sinit+0xc>
 80166fa:	bf00      	nop
 80166fc:	08016641 	.word	0x08016641
 8016700:	2002a398 	.word	0x2002a398

08016704 <_fwalk_sglue>:
 8016704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016708:	4607      	mov	r7, r0
 801670a:	4688      	mov	r8, r1
 801670c:	4614      	mov	r4, r2
 801670e:	2600      	movs	r6, #0
 8016710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016714:	f1b9 0901 	subs.w	r9, r9, #1
 8016718:	d505      	bpl.n	8016726 <_fwalk_sglue+0x22>
 801671a:	6824      	ldr	r4, [r4, #0]
 801671c:	2c00      	cmp	r4, #0
 801671e:	d1f7      	bne.n	8016710 <_fwalk_sglue+0xc>
 8016720:	4630      	mov	r0, r6
 8016722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016726:	89ab      	ldrh	r3, [r5, #12]
 8016728:	2b01      	cmp	r3, #1
 801672a:	d907      	bls.n	801673c <_fwalk_sglue+0x38>
 801672c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016730:	3301      	adds	r3, #1
 8016732:	d003      	beq.n	801673c <_fwalk_sglue+0x38>
 8016734:	4629      	mov	r1, r5
 8016736:	4638      	mov	r0, r7
 8016738:	47c0      	blx	r8
 801673a:	4306      	orrs	r6, r0
 801673c:	3568      	adds	r5, #104	@ 0x68
 801673e:	e7e9      	b.n	8016714 <_fwalk_sglue+0x10>

08016740 <siprintf>:
 8016740:	b40e      	push	{r1, r2, r3}
 8016742:	b500      	push	{lr}
 8016744:	b09c      	sub	sp, #112	@ 0x70
 8016746:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801674a:	ab1d      	add	r3, sp, #116	@ 0x74
 801674c:	9002      	str	r0, [sp, #8]
 801674e:	9006      	str	r0, [sp, #24]
 8016750:	9107      	str	r1, [sp, #28]
 8016752:	9104      	str	r1, [sp, #16]
 8016754:	4808      	ldr	r0, [pc, #32]	@ (8016778 <siprintf+0x38>)
 8016756:	4909      	ldr	r1, [pc, #36]	@ (801677c <siprintf+0x3c>)
 8016758:	f853 2b04 	ldr.w	r2, [r3], #4
 801675c:	9105      	str	r1, [sp, #20]
 801675e:	a902      	add	r1, sp, #8
 8016760:	6800      	ldr	r0, [r0, #0]
 8016762:	9301      	str	r3, [sp, #4]
 8016764:	f001 fc20 	bl	8017fa8 <_svfiprintf_r>
 8016768:	9b02      	ldr	r3, [sp, #8]
 801676a:	2200      	movs	r2, #0
 801676c:	701a      	strb	r2, [r3, #0]
 801676e:	b01c      	add	sp, #112	@ 0x70
 8016770:	f85d eb04 	ldr.w	lr, [sp], #4
 8016774:	b003      	add	sp, #12
 8016776:	4770      	bx	lr
 8016778:	2000013c 	.word	0x2000013c
 801677c:	ffff0208 	.word	0xffff0208

08016780 <__sread>:
 8016780:	b510      	push	{r4, lr}
 8016782:	460c      	mov	r4, r1
 8016784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016788:	f000 f86c 	bl	8016864 <_read_r>
 801678c:	2800      	cmp	r0, #0
 801678e:	bfab      	itete	ge
 8016790:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016792:	89a3      	ldrhlt	r3, [r4, #12]
 8016794:	181b      	addge	r3, r3, r0
 8016796:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801679a:	bfac      	ite	ge
 801679c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801679e:	81a3      	strhlt	r3, [r4, #12]
 80167a0:	bd10      	pop	{r4, pc}

080167a2 <__swrite>:
 80167a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167a6:	461f      	mov	r7, r3
 80167a8:	898b      	ldrh	r3, [r1, #12]
 80167aa:	4605      	mov	r5, r0
 80167ac:	460c      	mov	r4, r1
 80167ae:	05db      	lsls	r3, r3, #23
 80167b0:	4616      	mov	r6, r2
 80167b2:	d505      	bpl.n	80167c0 <__swrite+0x1e>
 80167b4:	2302      	movs	r3, #2
 80167b6:	2200      	movs	r2, #0
 80167b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167bc:	f000 f840 	bl	8016840 <_lseek_r>
 80167c0:	89a3      	ldrh	r3, [r4, #12]
 80167c2:	4632      	mov	r2, r6
 80167c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167c8:	4628      	mov	r0, r5
 80167ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80167ce:	81a3      	strh	r3, [r4, #12]
 80167d0:	463b      	mov	r3, r7
 80167d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167d6:	f000 b857 	b.w	8016888 <_write_r>

080167da <__sseek>:
 80167da:	b510      	push	{r4, lr}
 80167dc:	460c      	mov	r4, r1
 80167de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167e2:	f000 f82d 	bl	8016840 <_lseek_r>
 80167e6:	1c43      	adds	r3, r0, #1
 80167e8:	89a3      	ldrh	r3, [r4, #12]
 80167ea:	bf15      	itete	ne
 80167ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80167ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80167f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80167f6:	81a3      	strheq	r3, [r4, #12]
 80167f8:	bf18      	it	ne
 80167fa:	81a3      	strhne	r3, [r4, #12]
 80167fc:	bd10      	pop	{r4, pc}

080167fe <__sclose>:
 80167fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016802:	f000 b80d 	b.w	8016820 <_close_r>

08016806 <memset>:
 8016806:	4402      	add	r2, r0
 8016808:	4603      	mov	r3, r0
 801680a:	4293      	cmp	r3, r2
 801680c:	d100      	bne.n	8016810 <memset+0xa>
 801680e:	4770      	bx	lr
 8016810:	f803 1b01 	strb.w	r1, [r3], #1
 8016814:	e7f9      	b.n	801680a <memset+0x4>
	...

08016818 <_localeconv_r>:
 8016818:	4800      	ldr	r0, [pc, #0]	@ (801681c <_localeconv_r+0x4>)
 801681a:	4770      	bx	lr
 801681c:	2000027c 	.word	0x2000027c

08016820 <_close_r>:
 8016820:	b538      	push	{r3, r4, r5, lr}
 8016822:	2300      	movs	r3, #0
 8016824:	4d05      	ldr	r5, [pc, #20]	@ (801683c <_close_r+0x1c>)
 8016826:	4604      	mov	r4, r0
 8016828:	4608      	mov	r0, r1
 801682a:	602b      	str	r3, [r5, #0]
 801682c:	f7ee fe4d 	bl	80054ca <_close>
 8016830:	1c43      	adds	r3, r0, #1
 8016832:	d102      	bne.n	801683a <_close_r+0x1a>
 8016834:	682b      	ldr	r3, [r5, #0]
 8016836:	b103      	cbz	r3, 801683a <_close_r+0x1a>
 8016838:	6023      	str	r3, [r4, #0]
 801683a:	bd38      	pop	{r3, r4, r5, pc}
 801683c:	2002a39c 	.word	0x2002a39c

08016840 <_lseek_r>:
 8016840:	b538      	push	{r3, r4, r5, lr}
 8016842:	4604      	mov	r4, r0
 8016844:	4d06      	ldr	r5, [pc, #24]	@ (8016860 <_lseek_r+0x20>)
 8016846:	4608      	mov	r0, r1
 8016848:	4611      	mov	r1, r2
 801684a:	2200      	movs	r2, #0
 801684c:	602a      	str	r2, [r5, #0]
 801684e:	461a      	mov	r2, r3
 8016850:	f7ee fe62 	bl	8005518 <_lseek>
 8016854:	1c43      	adds	r3, r0, #1
 8016856:	d102      	bne.n	801685e <_lseek_r+0x1e>
 8016858:	682b      	ldr	r3, [r5, #0]
 801685a:	b103      	cbz	r3, 801685e <_lseek_r+0x1e>
 801685c:	6023      	str	r3, [r4, #0]
 801685e:	bd38      	pop	{r3, r4, r5, pc}
 8016860:	2002a39c 	.word	0x2002a39c

08016864 <_read_r>:
 8016864:	b538      	push	{r3, r4, r5, lr}
 8016866:	4604      	mov	r4, r0
 8016868:	4d06      	ldr	r5, [pc, #24]	@ (8016884 <_read_r+0x20>)
 801686a:	4608      	mov	r0, r1
 801686c:	4611      	mov	r1, r2
 801686e:	2200      	movs	r2, #0
 8016870:	602a      	str	r2, [r5, #0]
 8016872:	461a      	mov	r2, r3
 8016874:	f7ee fdf0 	bl	8005458 <_read>
 8016878:	1c43      	adds	r3, r0, #1
 801687a:	d102      	bne.n	8016882 <_read_r+0x1e>
 801687c:	682b      	ldr	r3, [r5, #0]
 801687e:	b103      	cbz	r3, 8016882 <_read_r+0x1e>
 8016880:	6023      	str	r3, [r4, #0]
 8016882:	bd38      	pop	{r3, r4, r5, pc}
 8016884:	2002a39c 	.word	0x2002a39c

08016888 <_write_r>:
 8016888:	b538      	push	{r3, r4, r5, lr}
 801688a:	4604      	mov	r4, r0
 801688c:	4d06      	ldr	r5, [pc, #24]	@ (80168a8 <_write_r+0x20>)
 801688e:	4608      	mov	r0, r1
 8016890:	4611      	mov	r1, r2
 8016892:	2200      	movs	r2, #0
 8016894:	602a      	str	r2, [r5, #0]
 8016896:	461a      	mov	r2, r3
 8016898:	f7ee fdfb 	bl	8005492 <_write>
 801689c:	1c43      	adds	r3, r0, #1
 801689e:	d102      	bne.n	80168a6 <_write_r+0x1e>
 80168a0:	682b      	ldr	r3, [r5, #0]
 80168a2:	b103      	cbz	r3, 80168a6 <_write_r+0x1e>
 80168a4:	6023      	str	r3, [r4, #0]
 80168a6:	bd38      	pop	{r3, r4, r5, pc}
 80168a8:	2002a39c 	.word	0x2002a39c

080168ac <__errno>:
 80168ac:	4b01      	ldr	r3, [pc, #4]	@ (80168b4 <__errno+0x8>)
 80168ae:	6818      	ldr	r0, [r3, #0]
 80168b0:	4770      	bx	lr
 80168b2:	bf00      	nop
 80168b4:	2000013c 	.word	0x2000013c

080168b8 <__libc_init_array>:
 80168b8:	b570      	push	{r4, r5, r6, lr}
 80168ba:	4d0d      	ldr	r5, [pc, #52]	@ (80168f0 <__libc_init_array+0x38>)
 80168bc:	2600      	movs	r6, #0
 80168be:	4c0d      	ldr	r4, [pc, #52]	@ (80168f4 <__libc_init_array+0x3c>)
 80168c0:	1b64      	subs	r4, r4, r5
 80168c2:	10a4      	asrs	r4, r4, #2
 80168c4:	42a6      	cmp	r6, r4
 80168c6:	d109      	bne.n	80168dc <__libc_init_array+0x24>
 80168c8:	4d0b      	ldr	r5, [pc, #44]	@ (80168f8 <__libc_init_array+0x40>)
 80168ca:	2600      	movs	r6, #0
 80168cc:	4c0b      	ldr	r4, [pc, #44]	@ (80168fc <__libc_init_array+0x44>)
 80168ce:	f002 f87b 	bl	80189c8 <_init>
 80168d2:	1b64      	subs	r4, r4, r5
 80168d4:	10a4      	asrs	r4, r4, #2
 80168d6:	42a6      	cmp	r6, r4
 80168d8:	d105      	bne.n	80168e6 <__libc_init_array+0x2e>
 80168da:	bd70      	pop	{r4, r5, r6, pc}
 80168dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80168e0:	3601      	adds	r6, #1
 80168e2:	4798      	blx	r3
 80168e4:	e7ee      	b.n	80168c4 <__libc_init_array+0xc>
 80168e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80168ea:	3601      	adds	r6, #1
 80168ec:	4798      	blx	r3
 80168ee:	e7f2      	b.n	80168d6 <__libc_init_array+0x1e>
 80168f0:	0801a868 	.word	0x0801a868
 80168f4:	0801a868 	.word	0x0801a868
 80168f8:	0801a868 	.word	0x0801a868
 80168fc:	0801a86c 	.word	0x0801a86c

08016900 <__retarget_lock_init_recursive>:
 8016900:	4770      	bx	lr

08016902 <__retarget_lock_acquire_recursive>:
 8016902:	4770      	bx	lr

08016904 <__retarget_lock_release_recursive>:
 8016904:	4770      	bx	lr

08016906 <memchr>:
 8016906:	b2c9      	uxtb	r1, r1
 8016908:	4603      	mov	r3, r0
 801690a:	4402      	add	r2, r0
 801690c:	b510      	push	{r4, lr}
 801690e:	4293      	cmp	r3, r2
 8016910:	4618      	mov	r0, r3
 8016912:	d101      	bne.n	8016918 <memchr+0x12>
 8016914:	2000      	movs	r0, #0
 8016916:	e003      	b.n	8016920 <memchr+0x1a>
 8016918:	7804      	ldrb	r4, [r0, #0]
 801691a:	3301      	adds	r3, #1
 801691c:	428c      	cmp	r4, r1
 801691e:	d1f6      	bne.n	801690e <memchr+0x8>
 8016920:	bd10      	pop	{r4, pc}

08016922 <memcpy>:
 8016922:	440a      	add	r2, r1
 8016924:	1e43      	subs	r3, r0, #1
 8016926:	4291      	cmp	r1, r2
 8016928:	d100      	bne.n	801692c <memcpy+0xa>
 801692a:	4770      	bx	lr
 801692c:	b510      	push	{r4, lr}
 801692e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016932:	4291      	cmp	r1, r2
 8016934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016938:	d1f9      	bne.n	801692e <memcpy+0xc>
 801693a:	bd10      	pop	{r4, pc}

0801693c <quorem>:
 801693c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016940:	6903      	ldr	r3, [r0, #16]
 8016942:	4607      	mov	r7, r0
 8016944:	690c      	ldr	r4, [r1, #16]
 8016946:	42a3      	cmp	r3, r4
 8016948:	f2c0 8083 	blt.w	8016a52 <quorem+0x116>
 801694c:	3c01      	subs	r4, #1
 801694e:	f100 0514 	add.w	r5, r0, #20
 8016952:	f101 0814 	add.w	r8, r1, #20
 8016956:	00a3      	lsls	r3, r4, #2
 8016958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801695c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016960:	9300      	str	r3, [sp, #0]
 8016962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016966:	9301      	str	r3, [sp, #4]
 8016968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801696c:	3301      	adds	r3, #1
 801696e:	429a      	cmp	r2, r3
 8016970:	fbb2 f6f3 	udiv	r6, r2, r3
 8016974:	d331      	bcc.n	80169da <quorem+0x9e>
 8016976:	f04f 0a00 	mov.w	sl, #0
 801697a:	46c4      	mov	ip, r8
 801697c:	46ae      	mov	lr, r5
 801697e:	46d3      	mov	fp, sl
 8016980:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016984:	b298      	uxth	r0, r3
 8016986:	45e1      	cmp	r9, ip
 8016988:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801698c:	fb06 a000 	mla	r0, r6, r0, sl
 8016990:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8016994:	b280      	uxth	r0, r0
 8016996:	fb06 2303 	mla	r3, r6, r3, r2
 801699a:	f8de 2000 	ldr.w	r2, [lr]
 801699e:	b292      	uxth	r2, r2
 80169a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80169a4:	eba2 0200 	sub.w	r2, r2, r0
 80169a8:	b29b      	uxth	r3, r3
 80169aa:	f8de 0000 	ldr.w	r0, [lr]
 80169ae:	445a      	add	r2, fp
 80169b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80169b4:	b292      	uxth	r2, r2
 80169b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80169ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80169be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80169c2:	f84e 2b04 	str.w	r2, [lr], #4
 80169c6:	d2db      	bcs.n	8016980 <quorem+0x44>
 80169c8:	9b00      	ldr	r3, [sp, #0]
 80169ca:	58eb      	ldr	r3, [r5, r3]
 80169cc:	b92b      	cbnz	r3, 80169da <quorem+0x9e>
 80169ce:	9b01      	ldr	r3, [sp, #4]
 80169d0:	3b04      	subs	r3, #4
 80169d2:	429d      	cmp	r5, r3
 80169d4:	461a      	mov	r2, r3
 80169d6:	d330      	bcc.n	8016a3a <quorem+0xfe>
 80169d8:	613c      	str	r4, [r7, #16]
 80169da:	4638      	mov	r0, r7
 80169dc:	f001 f97c 	bl	8017cd8 <__mcmp>
 80169e0:	2800      	cmp	r0, #0
 80169e2:	db26      	blt.n	8016a32 <quorem+0xf6>
 80169e4:	4629      	mov	r1, r5
 80169e6:	2000      	movs	r0, #0
 80169e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80169ec:	f8d1 c000 	ldr.w	ip, [r1]
 80169f0:	fa1f fe82 	uxth.w	lr, r2
 80169f4:	45c1      	cmp	r9, r8
 80169f6:	fa1f f38c 	uxth.w	r3, ip
 80169fa:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80169fe:	eba3 030e 	sub.w	r3, r3, lr
 8016a02:	4403      	add	r3, r0
 8016a04:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016a08:	b29b      	uxth	r3, r3
 8016a0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016a16:	f841 3b04 	str.w	r3, [r1], #4
 8016a1a:	d2e5      	bcs.n	80169e8 <quorem+0xac>
 8016a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016a20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016a24:	b922      	cbnz	r2, 8016a30 <quorem+0xf4>
 8016a26:	3b04      	subs	r3, #4
 8016a28:	429d      	cmp	r5, r3
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	d30b      	bcc.n	8016a46 <quorem+0x10a>
 8016a2e:	613c      	str	r4, [r7, #16]
 8016a30:	3601      	adds	r6, #1
 8016a32:	4630      	mov	r0, r6
 8016a34:	b003      	add	sp, #12
 8016a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a3a:	6812      	ldr	r2, [r2, #0]
 8016a3c:	3b04      	subs	r3, #4
 8016a3e:	2a00      	cmp	r2, #0
 8016a40:	d1ca      	bne.n	80169d8 <quorem+0x9c>
 8016a42:	3c01      	subs	r4, #1
 8016a44:	e7c5      	b.n	80169d2 <quorem+0x96>
 8016a46:	6812      	ldr	r2, [r2, #0]
 8016a48:	3b04      	subs	r3, #4
 8016a4a:	2a00      	cmp	r2, #0
 8016a4c:	d1ef      	bne.n	8016a2e <quorem+0xf2>
 8016a4e:	3c01      	subs	r4, #1
 8016a50:	e7ea      	b.n	8016a28 <quorem+0xec>
 8016a52:	2000      	movs	r0, #0
 8016a54:	e7ee      	b.n	8016a34 <quorem+0xf8>
	...

08016a58 <_dtoa_r>:
 8016a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a5c:	69c7      	ldr	r7, [r0, #28]
 8016a5e:	b099      	sub	sp, #100	@ 0x64
 8016a60:	4683      	mov	fp, r0
 8016a62:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8016a64:	9109      	str	r1, [sp, #36]	@ 0x24
 8016a66:	920e      	str	r2, [sp, #56]	@ 0x38
 8016a68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016a6a:	ec55 4b10 	vmov	r4, r5, d0
 8016a6e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016a72:	b97f      	cbnz	r7, 8016a94 <_dtoa_r+0x3c>
 8016a74:	2010      	movs	r0, #16
 8016a76:	f000 fdfd 	bl	8017674 <malloc>
 8016a7a:	4602      	mov	r2, r0
 8016a7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8016a80:	b920      	cbnz	r0, 8016a8c <_dtoa_r+0x34>
 8016a82:	4ba7      	ldr	r3, [pc, #668]	@ (8016d20 <_dtoa_r+0x2c8>)
 8016a84:	21ef      	movs	r1, #239	@ 0xef
 8016a86:	48a7      	ldr	r0, [pc, #668]	@ (8016d24 <_dtoa_r+0x2cc>)
 8016a88:	f001 fc60 	bl	801834c <__assert_func>
 8016a8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016a90:	6007      	str	r7, [r0, #0]
 8016a92:	60c7      	str	r7, [r0, #12]
 8016a94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016a98:	6819      	ldr	r1, [r3, #0]
 8016a9a:	b159      	cbz	r1, 8016ab4 <_dtoa_r+0x5c>
 8016a9c:	685a      	ldr	r2, [r3, #4]
 8016a9e:	2301      	movs	r3, #1
 8016aa0:	4658      	mov	r0, fp
 8016aa2:	4093      	lsls	r3, r2
 8016aa4:	604a      	str	r2, [r1, #4]
 8016aa6:	608b      	str	r3, [r1, #8]
 8016aa8:	f000 feda 	bl	8017860 <_Bfree>
 8016aac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016ab0:	2200      	movs	r2, #0
 8016ab2:	601a      	str	r2, [r3, #0]
 8016ab4:	1e2b      	subs	r3, r5, #0
 8016ab6:	bfb7      	itett	lt
 8016ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016abc:	2300      	movge	r3, #0
 8016abe:	2201      	movlt	r2, #1
 8016ac0:	9303      	strlt	r3, [sp, #12]
 8016ac2:	bfa8      	it	ge
 8016ac4:	6033      	strge	r3, [r6, #0]
 8016ac6:	9f03      	ldr	r7, [sp, #12]
 8016ac8:	4b97      	ldr	r3, [pc, #604]	@ (8016d28 <_dtoa_r+0x2d0>)
 8016aca:	bfb8      	it	lt
 8016acc:	6032      	strlt	r2, [r6, #0]
 8016ace:	43bb      	bics	r3, r7
 8016ad0:	d112      	bne.n	8016af8 <_dtoa_r+0xa0>
 8016ad2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016ad6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016ad8:	6013      	str	r3, [r2, #0]
 8016ada:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ade:	4323      	orrs	r3, r4
 8016ae0:	f000 854c 	beq.w	801757c <_dtoa_r+0xb24>
 8016ae4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016ae6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8016d3c <_dtoa_r+0x2e4>
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	f000 854e 	beq.w	801758c <_dtoa_r+0xb34>
 8016af0:	f10a 0303 	add.w	r3, sl, #3
 8016af4:	f000 bd48 	b.w	8017588 <_dtoa_r+0xb30>
 8016af8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016afc:	2200      	movs	r2, #0
 8016afe:	2300      	movs	r3, #0
 8016b00:	ec51 0b17 	vmov	r0, r1, d7
 8016b04:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8016b08:	f7e9 ffee 	bl	8000ae8 <__aeabi_dcmpeq>
 8016b0c:	4680      	mov	r8, r0
 8016b0e:	b158      	cbz	r0, 8016b28 <_dtoa_r+0xd0>
 8016b10:	2301      	movs	r3, #1
 8016b12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016b14:	6013      	str	r3, [r2, #0]
 8016b16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016b18:	b113      	cbz	r3, 8016b20 <_dtoa_r+0xc8>
 8016b1a:	4b84      	ldr	r3, [pc, #528]	@ (8016d2c <_dtoa_r+0x2d4>)
 8016b1c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016b1e:	6013      	str	r3, [r2, #0]
 8016b20:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8016d40 <_dtoa_r+0x2e8>
 8016b24:	f000 bd32 	b.w	801758c <_dtoa_r+0xb34>
 8016b28:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8016b2c:	aa16      	add	r2, sp, #88	@ 0x58
 8016b2e:	a917      	add	r1, sp, #92	@ 0x5c
 8016b30:	4658      	mov	r0, fp
 8016b32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016b36:	f001 f983 	bl	8017e40 <__d2b>
 8016b3a:	4681      	mov	r9, r0
 8016b3c:	2e00      	cmp	r6, #0
 8016b3e:	d075      	beq.n	8016c2c <_dtoa_r+0x1d4>
 8016b40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016b42:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8016b46:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8016b4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b4e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8016b52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016b56:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8016b5a:	4619      	mov	r1, r3
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	4b74      	ldr	r3, [pc, #464]	@ (8016d30 <_dtoa_r+0x2d8>)
 8016b60:	f7e9 fba2 	bl	80002a8 <__aeabi_dsub>
 8016b64:	a368      	add	r3, pc, #416	@ (adr r3, 8016d08 <_dtoa_r+0x2b0>)
 8016b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6a:	f7e9 fd55 	bl	8000618 <__aeabi_dmul>
 8016b6e:	a368      	add	r3, pc, #416	@ (adr r3, 8016d10 <_dtoa_r+0x2b8>)
 8016b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b74:	f7e9 fb9a 	bl	80002ac <__adddf3>
 8016b78:	4604      	mov	r4, r0
 8016b7a:	460d      	mov	r5, r1
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	f7e9 fce1 	bl	8000544 <__aeabi_i2d>
 8016b82:	a365      	add	r3, pc, #404	@ (adr r3, 8016d18 <_dtoa_r+0x2c0>)
 8016b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b88:	f7e9 fd46 	bl	8000618 <__aeabi_dmul>
 8016b8c:	4602      	mov	r2, r0
 8016b8e:	460b      	mov	r3, r1
 8016b90:	4620      	mov	r0, r4
 8016b92:	4629      	mov	r1, r5
 8016b94:	f7e9 fb8a 	bl	80002ac <__adddf3>
 8016b98:	4604      	mov	r4, r0
 8016b9a:	460d      	mov	r5, r1
 8016b9c:	f7e9 ffec 	bl	8000b78 <__aeabi_d2iz>
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	4607      	mov	r7, r0
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	4629      	mov	r1, r5
 8016baa:	f7e9 ffa7 	bl	8000afc <__aeabi_dcmplt>
 8016bae:	b140      	cbz	r0, 8016bc2 <_dtoa_r+0x16a>
 8016bb0:	4638      	mov	r0, r7
 8016bb2:	f7e9 fcc7 	bl	8000544 <__aeabi_i2d>
 8016bb6:	4622      	mov	r2, r4
 8016bb8:	462b      	mov	r3, r5
 8016bba:	f7e9 ff95 	bl	8000ae8 <__aeabi_dcmpeq>
 8016bbe:	b900      	cbnz	r0, 8016bc2 <_dtoa_r+0x16a>
 8016bc0:	3f01      	subs	r7, #1
 8016bc2:	2f16      	cmp	r7, #22
 8016bc4:	d851      	bhi.n	8016c6a <_dtoa_r+0x212>
 8016bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8016d34 <_dtoa_r+0x2dc>)
 8016bc8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd4:	f7e9 ff92 	bl	8000afc <__aeabi_dcmplt>
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	d048      	beq.n	8016c6e <_dtoa_r+0x216>
 8016bdc:	3f01      	subs	r7, #1
 8016bde:	2300      	movs	r3, #0
 8016be0:	9312      	str	r3, [sp, #72]	@ 0x48
 8016be2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016be4:	1b9b      	subs	r3, r3, r6
 8016be6:	1e5a      	subs	r2, r3, #1
 8016be8:	bf46      	itte	mi
 8016bea:	f1c3 0801 	rsbmi	r8, r3, #1
 8016bee:	2300      	movmi	r3, #0
 8016bf0:	f04f 0800 	movpl.w	r8, #0
 8016bf4:	9208      	str	r2, [sp, #32]
 8016bf6:	bf48      	it	mi
 8016bf8:	9308      	strmi	r3, [sp, #32]
 8016bfa:	2f00      	cmp	r7, #0
 8016bfc:	db39      	blt.n	8016c72 <_dtoa_r+0x21a>
 8016bfe:	9b08      	ldr	r3, [sp, #32]
 8016c00:	970f      	str	r7, [sp, #60]	@ 0x3c
 8016c02:	443b      	add	r3, r7
 8016c04:	9308      	str	r3, [sp, #32]
 8016c06:	2300      	movs	r3, #0
 8016c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8016c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c0c:	2b09      	cmp	r3, #9
 8016c0e:	d864      	bhi.n	8016cda <_dtoa_r+0x282>
 8016c10:	2b05      	cmp	r3, #5
 8016c12:	bfc5      	ittet	gt
 8016c14:	3b04      	subgt	r3, #4
 8016c16:	2400      	movgt	r4, #0
 8016c18:	2401      	movle	r4, #1
 8016c1a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8016c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c1e:	3b02      	subs	r3, #2
 8016c20:	2b03      	cmp	r3, #3
 8016c22:	d865      	bhi.n	8016cf0 <_dtoa_r+0x298>
 8016c24:	e8df f003 	tbb	[pc, r3]
 8016c28:	5737392c 	.word	0x5737392c
 8016c2c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8016c30:	441e      	add	r6, r3
 8016c32:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8016c36:	2b20      	cmp	r3, #32
 8016c38:	bfc9      	itett	gt
 8016c3a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8016c3e:	f1c3 0320 	rsble	r3, r3, #32
 8016c42:	409f      	lslgt	r7, r3
 8016c44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8016c48:	bfd8      	it	le
 8016c4a:	fa04 f003 	lslle.w	r0, r4, r3
 8016c4e:	f106 36ff 	add.w	r6, r6, #4294967295
 8016c52:	bfc4      	itt	gt
 8016c54:	fa24 f303 	lsrgt.w	r3, r4, r3
 8016c58:	ea47 0003 	orrgt.w	r0, r7, r3
 8016c5c:	f7e9 fc62 	bl	8000524 <__aeabi_ui2d>
 8016c60:	2201      	movs	r2, #1
 8016c62:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8016c66:	9214      	str	r2, [sp, #80]	@ 0x50
 8016c68:	e777      	b.n	8016b5a <_dtoa_r+0x102>
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	e7b8      	b.n	8016be0 <_dtoa_r+0x188>
 8016c6e:	9012      	str	r0, [sp, #72]	@ 0x48
 8016c70:	e7b7      	b.n	8016be2 <_dtoa_r+0x18a>
 8016c72:	427b      	negs	r3, r7
 8016c74:	eba8 0807 	sub.w	r8, r8, r7
 8016c78:	930a      	str	r3, [sp, #40]	@ 0x28
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016c7e:	e7c4      	b.n	8016c0a <_dtoa_r+0x1b2>
 8016c80:	2300      	movs	r3, #0
 8016c82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	dc35      	bgt.n	8016cf6 <_dtoa_r+0x29e>
 8016c8a:	2301      	movs	r3, #1
 8016c8c:	461a      	mov	r2, r3
 8016c8e:	9300      	str	r3, [sp, #0]
 8016c90:	9307      	str	r3, [sp, #28]
 8016c92:	920e      	str	r2, [sp, #56]	@ 0x38
 8016c94:	e00b      	b.n	8016cae <_dtoa_r+0x256>
 8016c96:	2301      	movs	r3, #1
 8016c98:	e7f3      	b.n	8016c82 <_dtoa_r+0x22a>
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ca0:	18fb      	adds	r3, r7, r3
 8016ca2:	9300      	str	r3, [sp, #0]
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	2b01      	cmp	r3, #1
 8016ca8:	9307      	str	r3, [sp, #28]
 8016caa:	bfb8      	it	lt
 8016cac:	2301      	movlt	r3, #1
 8016cae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8016cb2:	2100      	movs	r1, #0
 8016cb4:	2204      	movs	r2, #4
 8016cb6:	f102 0514 	add.w	r5, r2, #20
 8016cba:	429d      	cmp	r5, r3
 8016cbc:	d91f      	bls.n	8016cfe <_dtoa_r+0x2a6>
 8016cbe:	6041      	str	r1, [r0, #4]
 8016cc0:	4658      	mov	r0, fp
 8016cc2:	f000 fd8d 	bl	80177e0 <_Balloc>
 8016cc6:	4682      	mov	sl, r0
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d13b      	bne.n	8016d44 <_dtoa_r+0x2ec>
 8016ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8016d38 <_dtoa_r+0x2e0>)
 8016cce:	4602      	mov	r2, r0
 8016cd0:	f240 11af 	movw	r1, #431	@ 0x1af
 8016cd4:	e6d7      	b.n	8016a86 <_dtoa_r+0x2e>
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	e7e0      	b.n	8016c9c <_dtoa_r+0x244>
 8016cda:	2401      	movs	r4, #1
 8016cdc:	2300      	movs	r3, #0
 8016cde:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	9300      	str	r3, [sp, #0]
 8016cea:	9307      	str	r3, [sp, #28]
 8016cec:	2312      	movs	r3, #18
 8016cee:	e7d0      	b.n	8016c92 <_dtoa_r+0x23a>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cf4:	e7f5      	b.n	8016ce2 <_dtoa_r+0x28a>
 8016cf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016cf8:	9300      	str	r3, [sp, #0]
 8016cfa:	9307      	str	r3, [sp, #28]
 8016cfc:	e7d7      	b.n	8016cae <_dtoa_r+0x256>
 8016cfe:	3101      	adds	r1, #1
 8016d00:	0052      	lsls	r2, r2, #1
 8016d02:	e7d8      	b.n	8016cb6 <_dtoa_r+0x25e>
 8016d04:	f3af 8000 	nop.w
 8016d08:	636f4361 	.word	0x636f4361
 8016d0c:	3fd287a7 	.word	0x3fd287a7
 8016d10:	8b60c8b3 	.word	0x8b60c8b3
 8016d14:	3fc68a28 	.word	0x3fc68a28
 8016d18:	509f79fb 	.word	0x509f79fb
 8016d1c:	3fd34413 	.word	0x3fd34413
 8016d20:	0801a531 	.word	0x0801a531
 8016d24:	0801a548 	.word	0x0801a548
 8016d28:	7ff00000 	.word	0x7ff00000
 8016d2c:	0801a501 	.word	0x0801a501
 8016d30:	3ff80000 	.word	0x3ff80000
 8016d34:	0801a640 	.word	0x0801a640
 8016d38:	0801a5a0 	.word	0x0801a5a0
 8016d3c:	0801a52d 	.word	0x0801a52d
 8016d40:	0801a500 	.word	0x0801a500
 8016d44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016d48:	6018      	str	r0, [r3, #0]
 8016d4a:	9b07      	ldr	r3, [sp, #28]
 8016d4c:	2b0e      	cmp	r3, #14
 8016d4e:	f200 80a4 	bhi.w	8016e9a <_dtoa_r+0x442>
 8016d52:	2c00      	cmp	r4, #0
 8016d54:	f000 80a1 	beq.w	8016e9a <_dtoa_r+0x442>
 8016d58:	2f00      	cmp	r7, #0
 8016d5a:	dd33      	ble.n	8016dc4 <_dtoa_r+0x36c>
 8016d5c:	f007 020f 	and.w	r2, r7, #15
 8016d60:	4bac      	ldr	r3, [pc, #688]	@ (8017014 <_dtoa_r+0x5bc>)
 8016d62:	05f8      	lsls	r0, r7, #23
 8016d64:	ea4f 1427 	mov.w	r4, r7, asr #4
 8016d68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d6c:	ed93 7b00 	vldr	d7, [r3]
 8016d70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016d74:	d516      	bpl.n	8016da4 <_dtoa_r+0x34c>
 8016d76:	4ba8      	ldr	r3, [pc, #672]	@ (8017018 <_dtoa_r+0x5c0>)
 8016d78:	f004 040f 	and.w	r4, r4, #15
 8016d7c:	2603      	movs	r6, #3
 8016d7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016d82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016d86:	f7e9 fd71 	bl	800086c <__aeabi_ddiv>
 8016d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d8e:	4da2      	ldr	r5, [pc, #648]	@ (8017018 <_dtoa_r+0x5c0>)
 8016d90:	b954      	cbnz	r4, 8016da8 <_dtoa_r+0x350>
 8016d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016d9a:	f7e9 fd67 	bl	800086c <__aeabi_ddiv>
 8016d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016da2:	e028      	b.n	8016df6 <_dtoa_r+0x39e>
 8016da4:	2602      	movs	r6, #2
 8016da6:	e7f2      	b.n	8016d8e <_dtoa_r+0x336>
 8016da8:	07e1      	lsls	r1, r4, #31
 8016daa:	d508      	bpl.n	8016dbe <_dtoa_r+0x366>
 8016dac:	3601      	adds	r6, #1
 8016dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016db2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016db6:	f7e9 fc2f 	bl	8000618 <__aeabi_dmul>
 8016dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016dbe:	1064      	asrs	r4, r4, #1
 8016dc0:	3508      	adds	r5, #8
 8016dc2:	e7e5      	b.n	8016d90 <_dtoa_r+0x338>
 8016dc4:	f000 80d2 	beq.w	8016f6c <_dtoa_r+0x514>
 8016dc8:	427c      	negs	r4, r7
 8016dca:	4b92      	ldr	r3, [pc, #584]	@ (8017014 <_dtoa_r+0x5bc>)
 8016dcc:	4d92      	ldr	r5, [pc, #584]	@ (8017018 <_dtoa_r+0x5c0>)
 8016dce:	2602      	movs	r6, #2
 8016dd0:	f004 020f 	and.w	r2, r4, #15
 8016dd4:	1124      	asrs	r4, r4, #4
 8016dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016dda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de2:	f7e9 fc19 	bl	8000618 <__aeabi_dmul>
 8016de6:	2300      	movs	r3, #0
 8016de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016dec:	2c00      	cmp	r4, #0
 8016dee:	f040 80b2 	bne.w	8016f56 <_dtoa_r+0x4fe>
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d1d3      	bne.n	8016d9e <_dtoa_r+0x346>
 8016df6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016df8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	f000 80b7 	beq.w	8016f70 <_dtoa_r+0x518>
 8016e02:	2200      	movs	r2, #0
 8016e04:	4b85      	ldr	r3, [pc, #532]	@ (801701c <_dtoa_r+0x5c4>)
 8016e06:	4620      	mov	r0, r4
 8016e08:	4629      	mov	r1, r5
 8016e0a:	f7e9 fe77 	bl	8000afc <__aeabi_dcmplt>
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	f000 80ae 	beq.w	8016f70 <_dtoa_r+0x518>
 8016e14:	9b07      	ldr	r3, [sp, #28]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	f000 80aa 	beq.w	8016f70 <_dtoa_r+0x518>
 8016e1c:	9b00      	ldr	r3, [sp, #0]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	dd37      	ble.n	8016e92 <_dtoa_r+0x43a>
 8016e22:	1e7b      	subs	r3, r7, #1
 8016e24:	4620      	mov	r0, r4
 8016e26:	2200      	movs	r2, #0
 8016e28:	4629      	mov	r1, r5
 8016e2a:	9304      	str	r3, [sp, #16]
 8016e2c:	3601      	adds	r6, #1
 8016e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8017020 <_dtoa_r+0x5c8>)
 8016e30:	f7e9 fbf2 	bl	8000618 <__aeabi_dmul>
 8016e34:	9c00      	ldr	r4, [sp, #0]
 8016e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	f7e9 fb82 	bl	8000544 <__aeabi_i2d>
 8016e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e44:	f7e9 fbe8 	bl	8000618 <__aeabi_dmul>
 8016e48:	2200      	movs	r2, #0
 8016e4a:	4b76      	ldr	r3, [pc, #472]	@ (8017024 <_dtoa_r+0x5cc>)
 8016e4c:	f7e9 fa2e 	bl	80002ac <__adddf3>
 8016e50:	4605      	mov	r5, r0
 8016e52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8016e56:	2c00      	cmp	r4, #0
 8016e58:	f040 808d 	bne.w	8016f76 <_dtoa_r+0x51e>
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	4b72      	ldr	r3, [pc, #456]	@ (8017028 <_dtoa_r+0x5d0>)
 8016e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016e64:	f7e9 fa20 	bl	80002a8 <__aeabi_dsub>
 8016e68:	4602      	mov	r2, r0
 8016e6a:	460b      	mov	r3, r1
 8016e6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016e70:	462a      	mov	r2, r5
 8016e72:	4633      	mov	r3, r6
 8016e74:	f7e9 fe60 	bl	8000b38 <__aeabi_dcmpgt>
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	f040 828b 	bne.w	8017394 <_dtoa_r+0x93c>
 8016e7e:	462a      	mov	r2, r5
 8016e80:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8016e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016e88:	f7e9 fe38 	bl	8000afc <__aeabi_dcmplt>
 8016e8c:	2800      	cmp	r0, #0
 8016e8e:	f040 8128 	bne.w	80170e2 <_dtoa_r+0x68a>
 8016e92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8016e96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016e9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	f2c0 815a 	blt.w	8017156 <_dtoa_r+0x6fe>
 8016ea2:	2f0e      	cmp	r7, #14
 8016ea4:	f300 8157 	bgt.w	8017156 <_dtoa_r+0x6fe>
 8016ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8017014 <_dtoa_r+0x5bc>)
 8016eaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016eae:	ed93 7b00 	vldr	d7, [r3]
 8016eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	ed8d 7b00 	vstr	d7, [sp]
 8016eba:	da03      	bge.n	8016ec4 <_dtoa_r+0x46c>
 8016ebc:	9b07      	ldr	r3, [sp, #28]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	f340 8101 	ble.w	80170c6 <_dtoa_r+0x66e>
 8016ec4:	4656      	mov	r6, sl
 8016ec6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016eca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ece:	4620      	mov	r0, r4
 8016ed0:	4629      	mov	r1, r5
 8016ed2:	f7e9 fccb 	bl	800086c <__aeabi_ddiv>
 8016ed6:	f7e9 fe4f 	bl	8000b78 <__aeabi_d2iz>
 8016eda:	4680      	mov	r8, r0
 8016edc:	f7e9 fb32 	bl	8000544 <__aeabi_i2d>
 8016ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ee4:	f7e9 fb98 	bl	8000618 <__aeabi_dmul>
 8016ee8:	4602      	mov	r2, r0
 8016eea:	4620      	mov	r0, r4
 8016eec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8016ef0:	460b      	mov	r3, r1
 8016ef2:	4629      	mov	r1, r5
 8016ef4:	f7e9 f9d8 	bl	80002a8 <__aeabi_dsub>
 8016ef8:	9d07      	ldr	r5, [sp, #28]
 8016efa:	f806 4b01 	strb.w	r4, [r6], #1
 8016efe:	eba6 040a 	sub.w	r4, r6, sl
 8016f02:	4602      	mov	r2, r0
 8016f04:	460b      	mov	r3, r1
 8016f06:	42a5      	cmp	r5, r4
 8016f08:	f040 8117 	bne.w	801713a <_dtoa_r+0x6e2>
 8016f0c:	f7e9 f9ce 	bl	80002ac <__adddf3>
 8016f10:	4604      	mov	r4, r0
 8016f12:	460d      	mov	r5, r1
 8016f14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f18:	f7e9 fe0e 	bl	8000b38 <__aeabi_dcmpgt>
 8016f1c:	2800      	cmp	r0, #0
 8016f1e:	f040 80f9 	bne.w	8017114 <_dtoa_r+0x6bc>
 8016f22:	4620      	mov	r0, r4
 8016f24:	4629      	mov	r1, r5
 8016f26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f2a:	f7e9 fddd 	bl	8000ae8 <__aeabi_dcmpeq>
 8016f2e:	b118      	cbz	r0, 8016f38 <_dtoa_r+0x4e0>
 8016f30:	f018 0f01 	tst.w	r8, #1
 8016f34:	f040 80ee 	bne.w	8017114 <_dtoa_r+0x6bc>
 8016f38:	4649      	mov	r1, r9
 8016f3a:	4658      	mov	r0, fp
 8016f3c:	f000 fc90 	bl	8017860 <_Bfree>
 8016f40:	2300      	movs	r3, #0
 8016f42:	3701      	adds	r7, #1
 8016f44:	7033      	strb	r3, [r6, #0]
 8016f46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016f48:	601f      	str	r7, [r3, #0]
 8016f4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	f000 831d 	beq.w	801758c <_dtoa_r+0xb34>
 8016f52:	601e      	str	r6, [r3, #0]
 8016f54:	e31a      	b.n	801758c <_dtoa_r+0xb34>
 8016f56:	07e2      	lsls	r2, r4, #31
 8016f58:	d505      	bpl.n	8016f66 <_dtoa_r+0x50e>
 8016f5a:	3601      	adds	r6, #1
 8016f5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016f60:	f7e9 fb5a 	bl	8000618 <__aeabi_dmul>
 8016f64:	2301      	movs	r3, #1
 8016f66:	1064      	asrs	r4, r4, #1
 8016f68:	3508      	adds	r5, #8
 8016f6a:	e73f      	b.n	8016dec <_dtoa_r+0x394>
 8016f6c:	2602      	movs	r6, #2
 8016f6e:	e742      	b.n	8016df6 <_dtoa_r+0x39e>
 8016f70:	9c07      	ldr	r4, [sp, #28]
 8016f72:	9704      	str	r7, [sp, #16]
 8016f74:	e761      	b.n	8016e3a <_dtoa_r+0x3e2>
 8016f76:	4b27      	ldr	r3, [pc, #156]	@ (8017014 <_dtoa_r+0x5bc>)
 8016f78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016f7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016f7e:	4454      	add	r4, sl
 8016f80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016f84:	2900      	cmp	r1, #0
 8016f86:	d053      	beq.n	8017030 <_dtoa_r+0x5d8>
 8016f88:	2000      	movs	r0, #0
 8016f8a:	4928      	ldr	r1, [pc, #160]	@ (801702c <_dtoa_r+0x5d4>)
 8016f8c:	f7e9 fc6e 	bl	800086c <__aeabi_ddiv>
 8016f90:	4633      	mov	r3, r6
 8016f92:	4656      	mov	r6, sl
 8016f94:	462a      	mov	r2, r5
 8016f96:	f7e9 f987 	bl	80002a8 <__aeabi_dsub>
 8016f9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8016f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016fa2:	f7e9 fde9 	bl	8000b78 <__aeabi_d2iz>
 8016fa6:	4605      	mov	r5, r0
 8016fa8:	f7e9 facc 	bl	8000544 <__aeabi_i2d>
 8016fac:	4602      	mov	r2, r0
 8016fae:	460b      	mov	r3, r1
 8016fb0:	3530      	adds	r5, #48	@ 0x30
 8016fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016fb6:	f7e9 f977 	bl	80002a8 <__aeabi_dsub>
 8016fba:	4602      	mov	r2, r0
 8016fbc:	460b      	mov	r3, r1
 8016fbe:	f806 5b01 	strb.w	r5, [r6], #1
 8016fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016fc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8016fca:	f7e9 fd97 	bl	8000afc <__aeabi_dcmplt>
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d171      	bne.n	80170b6 <_dtoa_r+0x65e>
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	4911      	ldr	r1, [pc, #68]	@ (801701c <_dtoa_r+0x5c4>)
 8016fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fda:	f7e9 f965 	bl	80002a8 <__aeabi_dsub>
 8016fde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8016fe2:	f7e9 fd8b 	bl	8000afc <__aeabi_dcmplt>
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	f040 8095 	bne.w	8017116 <_dtoa_r+0x6be>
 8016fec:	42a6      	cmp	r6, r4
 8016fee:	f43f af50 	beq.w	8016e92 <_dtoa_r+0x43a>
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8017020 <_dtoa_r+0x5c8>)
 8016ff6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8016ffa:	f7e9 fb0d 	bl	8000618 <__aeabi_dmul>
 8016ffe:	2200      	movs	r2, #0
 8017000:	4b07      	ldr	r3, [pc, #28]	@ (8017020 <_dtoa_r+0x5c8>)
 8017002:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801700a:	f7e9 fb05 	bl	8000618 <__aeabi_dmul>
 801700e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017012:	e7c4      	b.n	8016f9e <_dtoa_r+0x546>
 8017014:	0801a640 	.word	0x0801a640
 8017018:	0801a618 	.word	0x0801a618
 801701c:	3ff00000 	.word	0x3ff00000
 8017020:	40240000 	.word	0x40240000
 8017024:	401c0000 	.word	0x401c0000
 8017028:	40140000 	.word	0x40140000
 801702c:	3fe00000 	.word	0x3fe00000
 8017030:	4631      	mov	r1, r6
 8017032:	4656      	mov	r6, sl
 8017034:	4628      	mov	r0, r5
 8017036:	f7e9 faef 	bl	8000618 <__aeabi_dmul>
 801703a:	9415      	str	r4, [sp, #84]	@ 0x54
 801703c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017044:	f7e9 fd98 	bl	8000b78 <__aeabi_d2iz>
 8017048:	4605      	mov	r5, r0
 801704a:	f7e9 fa7b 	bl	8000544 <__aeabi_i2d>
 801704e:	4602      	mov	r2, r0
 8017050:	3530      	adds	r5, #48	@ 0x30
 8017052:	460b      	mov	r3, r1
 8017054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017058:	f7e9 f926 	bl	80002a8 <__aeabi_dsub>
 801705c:	f806 5b01 	strb.w	r5, [r6], #1
 8017060:	4602      	mov	r2, r0
 8017062:	460b      	mov	r3, r1
 8017064:	42a6      	cmp	r6, r4
 8017066:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801706a:	f04f 0200 	mov.w	r2, #0
 801706e:	d124      	bne.n	80170ba <_dtoa_r+0x662>
 8017070:	4bac      	ldr	r3, [pc, #688]	@ (8017324 <_dtoa_r+0x8cc>)
 8017072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017076:	f7e9 f919 	bl	80002ac <__adddf3>
 801707a:	4602      	mov	r2, r0
 801707c:	460b      	mov	r3, r1
 801707e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017082:	f7e9 fd59 	bl	8000b38 <__aeabi_dcmpgt>
 8017086:	2800      	cmp	r0, #0
 8017088:	d145      	bne.n	8017116 <_dtoa_r+0x6be>
 801708a:	2000      	movs	r0, #0
 801708c:	49a5      	ldr	r1, [pc, #660]	@ (8017324 <_dtoa_r+0x8cc>)
 801708e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017092:	f7e9 f909 	bl	80002a8 <__aeabi_dsub>
 8017096:	4602      	mov	r2, r0
 8017098:	460b      	mov	r3, r1
 801709a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801709e:	f7e9 fd2d 	bl	8000afc <__aeabi_dcmplt>
 80170a2:	2800      	cmp	r0, #0
 80170a4:	f43f aef5 	beq.w	8016e92 <_dtoa_r+0x43a>
 80170a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80170aa:	1e73      	subs	r3, r6, #1
 80170ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80170ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80170b2:	2b30      	cmp	r3, #48	@ 0x30
 80170b4:	d0f8      	beq.n	80170a8 <_dtoa_r+0x650>
 80170b6:	9f04      	ldr	r7, [sp, #16]
 80170b8:	e73e      	b.n	8016f38 <_dtoa_r+0x4e0>
 80170ba:	4b9b      	ldr	r3, [pc, #620]	@ (8017328 <_dtoa_r+0x8d0>)
 80170bc:	f7e9 faac 	bl	8000618 <__aeabi_dmul>
 80170c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80170c4:	e7bc      	b.n	8017040 <_dtoa_r+0x5e8>
 80170c6:	d10c      	bne.n	80170e2 <_dtoa_r+0x68a>
 80170c8:	2200      	movs	r2, #0
 80170ca:	4b98      	ldr	r3, [pc, #608]	@ (801732c <_dtoa_r+0x8d4>)
 80170cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170d0:	f7e9 faa2 	bl	8000618 <__aeabi_dmul>
 80170d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170d8:	f7e9 fd24 	bl	8000b24 <__aeabi_dcmpge>
 80170dc:	2800      	cmp	r0, #0
 80170de:	f000 8157 	beq.w	8017390 <_dtoa_r+0x938>
 80170e2:	2400      	movs	r4, #0
 80170e4:	4625      	mov	r5, r4
 80170e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170e8:	4656      	mov	r6, sl
 80170ea:	43db      	mvns	r3, r3
 80170ec:	9304      	str	r3, [sp, #16]
 80170ee:	2700      	movs	r7, #0
 80170f0:	4621      	mov	r1, r4
 80170f2:	4658      	mov	r0, fp
 80170f4:	f000 fbb4 	bl	8017860 <_Bfree>
 80170f8:	2d00      	cmp	r5, #0
 80170fa:	d0dc      	beq.n	80170b6 <_dtoa_r+0x65e>
 80170fc:	b12f      	cbz	r7, 801710a <_dtoa_r+0x6b2>
 80170fe:	42af      	cmp	r7, r5
 8017100:	d003      	beq.n	801710a <_dtoa_r+0x6b2>
 8017102:	4639      	mov	r1, r7
 8017104:	4658      	mov	r0, fp
 8017106:	f000 fbab 	bl	8017860 <_Bfree>
 801710a:	4629      	mov	r1, r5
 801710c:	4658      	mov	r0, fp
 801710e:	f000 fba7 	bl	8017860 <_Bfree>
 8017112:	e7d0      	b.n	80170b6 <_dtoa_r+0x65e>
 8017114:	9704      	str	r7, [sp, #16]
 8017116:	4633      	mov	r3, r6
 8017118:	461e      	mov	r6, r3
 801711a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801711e:	2a39      	cmp	r2, #57	@ 0x39
 8017120:	d107      	bne.n	8017132 <_dtoa_r+0x6da>
 8017122:	459a      	cmp	sl, r3
 8017124:	d1f8      	bne.n	8017118 <_dtoa_r+0x6c0>
 8017126:	9a04      	ldr	r2, [sp, #16]
 8017128:	3201      	adds	r2, #1
 801712a:	9204      	str	r2, [sp, #16]
 801712c:	2230      	movs	r2, #48	@ 0x30
 801712e:	f88a 2000 	strb.w	r2, [sl]
 8017132:	781a      	ldrb	r2, [r3, #0]
 8017134:	3201      	adds	r2, #1
 8017136:	701a      	strb	r2, [r3, #0]
 8017138:	e7bd      	b.n	80170b6 <_dtoa_r+0x65e>
 801713a:	2200      	movs	r2, #0
 801713c:	4b7a      	ldr	r3, [pc, #488]	@ (8017328 <_dtoa_r+0x8d0>)
 801713e:	f7e9 fa6b 	bl	8000618 <__aeabi_dmul>
 8017142:	2200      	movs	r2, #0
 8017144:	2300      	movs	r3, #0
 8017146:	4604      	mov	r4, r0
 8017148:	460d      	mov	r5, r1
 801714a:	f7e9 fccd 	bl	8000ae8 <__aeabi_dcmpeq>
 801714e:	2800      	cmp	r0, #0
 8017150:	f43f aebb 	beq.w	8016eca <_dtoa_r+0x472>
 8017154:	e6f0      	b.n	8016f38 <_dtoa_r+0x4e0>
 8017156:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017158:	2a00      	cmp	r2, #0
 801715a:	f000 80db 	beq.w	8017314 <_dtoa_r+0x8bc>
 801715e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017160:	2a01      	cmp	r2, #1
 8017162:	f300 80bf 	bgt.w	80172e4 <_dtoa_r+0x88c>
 8017166:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017168:	2a00      	cmp	r2, #0
 801716a:	f000 80b7 	beq.w	80172dc <_dtoa_r+0x884>
 801716e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8017172:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017174:	4646      	mov	r6, r8
 8017176:	9a08      	ldr	r2, [sp, #32]
 8017178:	2101      	movs	r1, #1
 801717a:	4658      	mov	r0, fp
 801717c:	4498      	add	r8, r3
 801717e:	441a      	add	r2, r3
 8017180:	9208      	str	r2, [sp, #32]
 8017182:	f000 fc23 	bl	80179cc <__i2b>
 8017186:	4605      	mov	r5, r0
 8017188:	b15e      	cbz	r6, 80171a2 <_dtoa_r+0x74a>
 801718a:	9b08      	ldr	r3, [sp, #32]
 801718c:	2b00      	cmp	r3, #0
 801718e:	dd08      	ble.n	80171a2 <_dtoa_r+0x74a>
 8017190:	42b3      	cmp	r3, r6
 8017192:	9a08      	ldr	r2, [sp, #32]
 8017194:	bfa8      	it	ge
 8017196:	4633      	movge	r3, r6
 8017198:	eba8 0803 	sub.w	r8, r8, r3
 801719c:	1af6      	subs	r6, r6, r3
 801719e:	1ad3      	subs	r3, r2, r3
 80171a0:	9308      	str	r3, [sp, #32]
 80171a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171a4:	b1f3      	cbz	r3, 80171e4 <_dtoa_r+0x78c>
 80171a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	f000 80b7 	beq.w	801731c <_dtoa_r+0x8c4>
 80171ae:	b18c      	cbz	r4, 80171d4 <_dtoa_r+0x77c>
 80171b0:	4629      	mov	r1, r5
 80171b2:	4622      	mov	r2, r4
 80171b4:	4658      	mov	r0, fp
 80171b6:	f000 fcc9 	bl	8017b4c <__pow5mult>
 80171ba:	464a      	mov	r2, r9
 80171bc:	4601      	mov	r1, r0
 80171be:	4605      	mov	r5, r0
 80171c0:	4658      	mov	r0, fp
 80171c2:	f000 fc19 	bl	80179f8 <__multiply>
 80171c6:	4649      	mov	r1, r9
 80171c8:	9004      	str	r0, [sp, #16]
 80171ca:	4658      	mov	r0, fp
 80171cc:	f000 fb48 	bl	8017860 <_Bfree>
 80171d0:	9b04      	ldr	r3, [sp, #16]
 80171d2:	4699      	mov	r9, r3
 80171d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171d6:	1b1a      	subs	r2, r3, r4
 80171d8:	d004      	beq.n	80171e4 <_dtoa_r+0x78c>
 80171da:	4649      	mov	r1, r9
 80171dc:	4658      	mov	r0, fp
 80171de:	f000 fcb5 	bl	8017b4c <__pow5mult>
 80171e2:	4681      	mov	r9, r0
 80171e4:	2101      	movs	r1, #1
 80171e6:	4658      	mov	r0, fp
 80171e8:	f000 fbf0 	bl	80179cc <__i2b>
 80171ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171ee:	4604      	mov	r4, r0
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	f000 81cf 	beq.w	8017594 <_dtoa_r+0xb3c>
 80171f6:	461a      	mov	r2, r3
 80171f8:	4601      	mov	r1, r0
 80171fa:	4658      	mov	r0, fp
 80171fc:	f000 fca6 	bl	8017b4c <__pow5mult>
 8017200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017202:	4604      	mov	r4, r0
 8017204:	2b01      	cmp	r3, #1
 8017206:	f300 8095 	bgt.w	8017334 <_dtoa_r+0x8dc>
 801720a:	9b02      	ldr	r3, [sp, #8]
 801720c:	2b00      	cmp	r3, #0
 801720e:	f040 8087 	bne.w	8017320 <_dtoa_r+0x8c8>
 8017212:	9b03      	ldr	r3, [sp, #12]
 8017214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017218:	2b00      	cmp	r3, #0
 801721a:	f040 8089 	bne.w	8017330 <_dtoa_r+0x8d8>
 801721e:	9b03      	ldr	r3, [sp, #12]
 8017220:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017224:	0d1b      	lsrs	r3, r3, #20
 8017226:	051b      	lsls	r3, r3, #20
 8017228:	b12b      	cbz	r3, 8017236 <_dtoa_r+0x7de>
 801722a:	9b08      	ldr	r3, [sp, #32]
 801722c:	f108 0801 	add.w	r8, r8, #1
 8017230:	3301      	adds	r3, #1
 8017232:	9308      	str	r3, [sp, #32]
 8017234:	2301      	movs	r3, #1
 8017236:	930a      	str	r3, [sp, #40]	@ 0x28
 8017238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801723a:	2b00      	cmp	r3, #0
 801723c:	f000 81b0 	beq.w	80175a0 <_dtoa_r+0xb48>
 8017240:	6923      	ldr	r3, [r4, #16]
 8017242:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017246:	6918      	ldr	r0, [r3, #16]
 8017248:	f000 fb74 	bl	8017934 <__hi0bits>
 801724c:	f1c0 0020 	rsb	r0, r0, #32
 8017250:	9b08      	ldr	r3, [sp, #32]
 8017252:	4418      	add	r0, r3
 8017254:	f010 001f 	ands.w	r0, r0, #31
 8017258:	d077      	beq.n	801734a <_dtoa_r+0x8f2>
 801725a:	f1c0 0320 	rsb	r3, r0, #32
 801725e:	2b04      	cmp	r3, #4
 8017260:	dd6b      	ble.n	801733a <_dtoa_r+0x8e2>
 8017262:	f1c0 001c 	rsb	r0, r0, #28
 8017266:	9b08      	ldr	r3, [sp, #32]
 8017268:	4480      	add	r8, r0
 801726a:	4403      	add	r3, r0
 801726c:	4406      	add	r6, r0
 801726e:	9308      	str	r3, [sp, #32]
 8017270:	f1b8 0f00 	cmp.w	r8, #0
 8017274:	dd05      	ble.n	8017282 <_dtoa_r+0x82a>
 8017276:	4649      	mov	r1, r9
 8017278:	4642      	mov	r2, r8
 801727a:	4658      	mov	r0, fp
 801727c:	f000 fcc0 	bl	8017c00 <__lshift>
 8017280:	4681      	mov	r9, r0
 8017282:	9b08      	ldr	r3, [sp, #32]
 8017284:	2b00      	cmp	r3, #0
 8017286:	dd05      	ble.n	8017294 <_dtoa_r+0x83c>
 8017288:	4621      	mov	r1, r4
 801728a:	461a      	mov	r2, r3
 801728c:	4658      	mov	r0, fp
 801728e:	f000 fcb7 	bl	8017c00 <__lshift>
 8017292:	4604      	mov	r4, r0
 8017294:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017296:	2b00      	cmp	r3, #0
 8017298:	d059      	beq.n	801734e <_dtoa_r+0x8f6>
 801729a:	4621      	mov	r1, r4
 801729c:	4648      	mov	r0, r9
 801729e:	f000 fd1b 	bl	8017cd8 <__mcmp>
 80172a2:	2800      	cmp	r0, #0
 80172a4:	da53      	bge.n	801734e <_dtoa_r+0x8f6>
 80172a6:	1e7b      	subs	r3, r7, #1
 80172a8:	4649      	mov	r1, r9
 80172aa:	220a      	movs	r2, #10
 80172ac:	4658      	mov	r0, fp
 80172ae:	9304      	str	r3, [sp, #16]
 80172b0:	2300      	movs	r3, #0
 80172b2:	f000 faf7 	bl	80178a4 <__multadd>
 80172b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80172b8:	4681      	mov	r9, r0
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	f000 8172 	beq.w	80175a4 <_dtoa_r+0xb4c>
 80172c0:	2300      	movs	r3, #0
 80172c2:	4629      	mov	r1, r5
 80172c4:	220a      	movs	r2, #10
 80172c6:	4658      	mov	r0, fp
 80172c8:	f000 faec 	bl	80178a4 <__multadd>
 80172cc:	9b00      	ldr	r3, [sp, #0]
 80172ce:	4605      	mov	r5, r0
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	dc67      	bgt.n	80173a4 <_dtoa_r+0x94c>
 80172d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172d6:	2b02      	cmp	r3, #2
 80172d8:	dc41      	bgt.n	801735e <_dtoa_r+0x906>
 80172da:	e063      	b.n	80173a4 <_dtoa_r+0x94c>
 80172dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80172de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80172e2:	e746      	b.n	8017172 <_dtoa_r+0x71a>
 80172e4:	9b07      	ldr	r3, [sp, #28]
 80172e6:	1e5c      	subs	r4, r3, #1
 80172e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172ea:	42a3      	cmp	r3, r4
 80172ec:	bfb7      	itett	lt
 80172ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80172f0:	1b1c      	subge	r4, r3, r4
 80172f2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80172f4:	1ae3      	sublt	r3, r4, r3
 80172f6:	bfbe      	ittt	lt
 80172f8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80172fa:	2400      	movlt	r4, #0
 80172fc:	18d2      	addlt	r2, r2, r3
 80172fe:	9b07      	ldr	r3, [sp, #28]
 8017300:	bfb8      	it	lt
 8017302:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8017304:	2b00      	cmp	r3, #0
 8017306:	bfb5      	itete	lt
 8017308:	eba8 0603 	sublt.w	r6, r8, r3
 801730c:	4646      	movge	r6, r8
 801730e:	2300      	movlt	r3, #0
 8017310:	9b07      	ldrge	r3, [sp, #28]
 8017312:	e730      	b.n	8017176 <_dtoa_r+0x71e>
 8017314:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017316:	4646      	mov	r6, r8
 8017318:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801731a:	e735      	b.n	8017188 <_dtoa_r+0x730>
 801731c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801731e:	e75c      	b.n	80171da <_dtoa_r+0x782>
 8017320:	2300      	movs	r3, #0
 8017322:	e788      	b.n	8017236 <_dtoa_r+0x7de>
 8017324:	3fe00000 	.word	0x3fe00000
 8017328:	40240000 	.word	0x40240000
 801732c:	40140000 	.word	0x40140000
 8017330:	9b02      	ldr	r3, [sp, #8]
 8017332:	e780      	b.n	8017236 <_dtoa_r+0x7de>
 8017334:	2300      	movs	r3, #0
 8017336:	930a      	str	r3, [sp, #40]	@ 0x28
 8017338:	e782      	b.n	8017240 <_dtoa_r+0x7e8>
 801733a:	d099      	beq.n	8017270 <_dtoa_r+0x818>
 801733c:	331c      	adds	r3, #28
 801733e:	9a08      	ldr	r2, [sp, #32]
 8017340:	441a      	add	r2, r3
 8017342:	4498      	add	r8, r3
 8017344:	441e      	add	r6, r3
 8017346:	9208      	str	r2, [sp, #32]
 8017348:	e792      	b.n	8017270 <_dtoa_r+0x818>
 801734a:	4603      	mov	r3, r0
 801734c:	e7f6      	b.n	801733c <_dtoa_r+0x8e4>
 801734e:	9b07      	ldr	r3, [sp, #28]
 8017350:	9704      	str	r7, [sp, #16]
 8017352:	2b00      	cmp	r3, #0
 8017354:	dc20      	bgt.n	8017398 <_dtoa_r+0x940>
 8017356:	9300      	str	r3, [sp, #0]
 8017358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801735a:	2b02      	cmp	r3, #2
 801735c:	dd1e      	ble.n	801739c <_dtoa_r+0x944>
 801735e:	9b00      	ldr	r3, [sp, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	f47f aec0 	bne.w	80170e6 <_dtoa_r+0x68e>
 8017366:	4621      	mov	r1, r4
 8017368:	2205      	movs	r2, #5
 801736a:	4658      	mov	r0, fp
 801736c:	f000 fa9a 	bl	80178a4 <__multadd>
 8017370:	4601      	mov	r1, r0
 8017372:	4604      	mov	r4, r0
 8017374:	4648      	mov	r0, r9
 8017376:	f000 fcaf 	bl	8017cd8 <__mcmp>
 801737a:	2800      	cmp	r0, #0
 801737c:	f77f aeb3 	ble.w	80170e6 <_dtoa_r+0x68e>
 8017380:	2331      	movs	r3, #49	@ 0x31
 8017382:	4656      	mov	r6, sl
 8017384:	f806 3b01 	strb.w	r3, [r6], #1
 8017388:	9b04      	ldr	r3, [sp, #16]
 801738a:	3301      	adds	r3, #1
 801738c:	9304      	str	r3, [sp, #16]
 801738e:	e6ae      	b.n	80170ee <_dtoa_r+0x696>
 8017390:	9c07      	ldr	r4, [sp, #28]
 8017392:	9704      	str	r7, [sp, #16]
 8017394:	4625      	mov	r5, r4
 8017396:	e7f3      	b.n	8017380 <_dtoa_r+0x928>
 8017398:	9b07      	ldr	r3, [sp, #28]
 801739a:	9300      	str	r3, [sp, #0]
 801739c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801739e:	2b00      	cmp	r3, #0
 80173a0:	f000 8104 	beq.w	80175ac <_dtoa_r+0xb54>
 80173a4:	2e00      	cmp	r6, #0
 80173a6:	dd05      	ble.n	80173b4 <_dtoa_r+0x95c>
 80173a8:	4629      	mov	r1, r5
 80173aa:	4632      	mov	r2, r6
 80173ac:	4658      	mov	r0, fp
 80173ae:	f000 fc27 	bl	8017c00 <__lshift>
 80173b2:	4605      	mov	r5, r0
 80173b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d05a      	beq.n	8017470 <_dtoa_r+0xa18>
 80173ba:	6869      	ldr	r1, [r5, #4]
 80173bc:	4658      	mov	r0, fp
 80173be:	f000 fa0f 	bl	80177e0 <_Balloc>
 80173c2:	4606      	mov	r6, r0
 80173c4:	b928      	cbnz	r0, 80173d2 <_dtoa_r+0x97a>
 80173c6:	4b84      	ldr	r3, [pc, #528]	@ (80175d8 <_dtoa_r+0xb80>)
 80173c8:	4602      	mov	r2, r0
 80173ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80173ce:	f7ff bb5a 	b.w	8016a86 <_dtoa_r+0x2e>
 80173d2:	692a      	ldr	r2, [r5, #16]
 80173d4:	f105 010c 	add.w	r1, r5, #12
 80173d8:	300c      	adds	r0, #12
 80173da:	3202      	adds	r2, #2
 80173dc:	0092      	lsls	r2, r2, #2
 80173de:	f7ff faa0 	bl	8016922 <memcpy>
 80173e2:	2201      	movs	r2, #1
 80173e4:	4631      	mov	r1, r6
 80173e6:	4658      	mov	r0, fp
 80173e8:	f000 fc0a 	bl	8017c00 <__lshift>
 80173ec:	f10a 0301 	add.w	r3, sl, #1
 80173f0:	462f      	mov	r7, r5
 80173f2:	4605      	mov	r5, r0
 80173f4:	9307      	str	r3, [sp, #28]
 80173f6:	9b00      	ldr	r3, [sp, #0]
 80173f8:	4453      	add	r3, sl
 80173fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80173fc:	9b02      	ldr	r3, [sp, #8]
 80173fe:	f003 0301 	and.w	r3, r3, #1
 8017402:	930a      	str	r3, [sp, #40]	@ 0x28
 8017404:	9b07      	ldr	r3, [sp, #28]
 8017406:	4621      	mov	r1, r4
 8017408:	4648      	mov	r0, r9
 801740a:	3b01      	subs	r3, #1
 801740c:	9300      	str	r3, [sp, #0]
 801740e:	f7ff fa95 	bl	801693c <quorem>
 8017412:	4639      	mov	r1, r7
 8017414:	9002      	str	r0, [sp, #8]
 8017416:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801741a:	4648      	mov	r0, r9
 801741c:	f000 fc5c 	bl	8017cd8 <__mcmp>
 8017420:	462a      	mov	r2, r5
 8017422:	9008      	str	r0, [sp, #32]
 8017424:	4621      	mov	r1, r4
 8017426:	4658      	mov	r0, fp
 8017428:	f000 fc72 	bl	8017d10 <__mdiff>
 801742c:	68c2      	ldr	r2, [r0, #12]
 801742e:	4606      	mov	r6, r0
 8017430:	bb02      	cbnz	r2, 8017474 <_dtoa_r+0xa1c>
 8017432:	4601      	mov	r1, r0
 8017434:	4648      	mov	r0, r9
 8017436:	f000 fc4f 	bl	8017cd8 <__mcmp>
 801743a:	4602      	mov	r2, r0
 801743c:	4631      	mov	r1, r6
 801743e:	4658      	mov	r0, fp
 8017440:	920e      	str	r2, [sp, #56]	@ 0x38
 8017442:	f000 fa0d 	bl	8017860 <_Bfree>
 8017446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801744a:	9e07      	ldr	r6, [sp, #28]
 801744c:	ea43 0102 	orr.w	r1, r3, r2
 8017450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017452:	4319      	orrs	r1, r3
 8017454:	d110      	bne.n	8017478 <_dtoa_r+0xa20>
 8017456:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801745a:	d029      	beq.n	80174b0 <_dtoa_r+0xa58>
 801745c:	9b08      	ldr	r3, [sp, #32]
 801745e:	2b00      	cmp	r3, #0
 8017460:	dd02      	ble.n	8017468 <_dtoa_r+0xa10>
 8017462:	9b02      	ldr	r3, [sp, #8]
 8017464:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8017468:	9b00      	ldr	r3, [sp, #0]
 801746a:	f883 8000 	strb.w	r8, [r3]
 801746e:	e63f      	b.n	80170f0 <_dtoa_r+0x698>
 8017470:	4628      	mov	r0, r5
 8017472:	e7bb      	b.n	80173ec <_dtoa_r+0x994>
 8017474:	2201      	movs	r2, #1
 8017476:	e7e1      	b.n	801743c <_dtoa_r+0x9e4>
 8017478:	9b08      	ldr	r3, [sp, #32]
 801747a:	2b00      	cmp	r3, #0
 801747c:	db04      	blt.n	8017488 <_dtoa_r+0xa30>
 801747e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017480:	430b      	orrs	r3, r1
 8017482:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017484:	430b      	orrs	r3, r1
 8017486:	d120      	bne.n	80174ca <_dtoa_r+0xa72>
 8017488:	2a00      	cmp	r2, #0
 801748a:	dded      	ble.n	8017468 <_dtoa_r+0xa10>
 801748c:	4649      	mov	r1, r9
 801748e:	2201      	movs	r2, #1
 8017490:	4658      	mov	r0, fp
 8017492:	f000 fbb5 	bl	8017c00 <__lshift>
 8017496:	4621      	mov	r1, r4
 8017498:	4681      	mov	r9, r0
 801749a:	f000 fc1d 	bl	8017cd8 <__mcmp>
 801749e:	2800      	cmp	r0, #0
 80174a0:	dc03      	bgt.n	80174aa <_dtoa_r+0xa52>
 80174a2:	d1e1      	bne.n	8017468 <_dtoa_r+0xa10>
 80174a4:	f018 0f01 	tst.w	r8, #1
 80174a8:	d0de      	beq.n	8017468 <_dtoa_r+0xa10>
 80174aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80174ae:	d1d8      	bne.n	8017462 <_dtoa_r+0xa0a>
 80174b0:	2339      	movs	r3, #57	@ 0x39
 80174b2:	9a00      	ldr	r2, [sp, #0]
 80174b4:	7013      	strb	r3, [r2, #0]
 80174b6:	4633      	mov	r3, r6
 80174b8:	461e      	mov	r6, r3
 80174ba:	3b01      	subs	r3, #1
 80174bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80174c0:	2a39      	cmp	r2, #57	@ 0x39
 80174c2:	d052      	beq.n	801756a <_dtoa_r+0xb12>
 80174c4:	3201      	adds	r2, #1
 80174c6:	701a      	strb	r2, [r3, #0]
 80174c8:	e612      	b.n	80170f0 <_dtoa_r+0x698>
 80174ca:	2a00      	cmp	r2, #0
 80174cc:	dd07      	ble.n	80174de <_dtoa_r+0xa86>
 80174ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80174d2:	d0ed      	beq.n	80174b0 <_dtoa_r+0xa58>
 80174d4:	f108 0301 	add.w	r3, r8, #1
 80174d8:	9a00      	ldr	r2, [sp, #0]
 80174da:	7013      	strb	r3, [r2, #0]
 80174dc:	e608      	b.n	80170f0 <_dtoa_r+0x698>
 80174de:	9b07      	ldr	r3, [sp, #28]
 80174e0:	9a07      	ldr	r2, [sp, #28]
 80174e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80174e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80174e8:	4293      	cmp	r3, r2
 80174ea:	d028      	beq.n	801753e <_dtoa_r+0xae6>
 80174ec:	4649      	mov	r1, r9
 80174ee:	2300      	movs	r3, #0
 80174f0:	220a      	movs	r2, #10
 80174f2:	4658      	mov	r0, fp
 80174f4:	f000 f9d6 	bl	80178a4 <__multadd>
 80174f8:	42af      	cmp	r7, r5
 80174fa:	4681      	mov	r9, r0
 80174fc:	f04f 0300 	mov.w	r3, #0
 8017500:	f04f 020a 	mov.w	r2, #10
 8017504:	4639      	mov	r1, r7
 8017506:	4658      	mov	r0, fp
 8017508:	d107      	bne.n	801751a <_dtoa_r+0xac2>
 801750a:	f000 f9cb 	bl	80178a4 <__multadd>
 801750e:	4607      	mov	r7, r0
 8017510:	4605      	mov	r5, r0
 8017512:	9b07      	ldr	r3, [sp, #28]
 8017514:	3301      	adds	r3, #1
 8017516:	9307      	str	r3, [sp, #28]
 8017518:	e774      	b.n	8017404 <_dtoa_r+0x9ac>
 801751a:	f000 f9c3 	bl	80178a4 <__multadd>
 801751e:	4629      	mov	r1, r5
 8017520:	4607      	mov	r7, r0
 8017522:	2300      	movs	r3, #0
 8017524:	220a      	movs	r2, #10
 8017526:	4658      	mov	r0, fp
 8017528:	f000 f9bc 	bl	80178a4 <__multadd>
 801752c:	4605      	mov	r5, r0
 801752e:	e7f0      	b.n	8017512 <_dtoa_r+0xaba>
 8017530:	9b00      	ldr	r3, [sp, #0]
 8017532:	2700      	movs	r7, #0
 8017534:	2b00      	cmp	r3, #0
 8017536:	bfcc      	ite	gt
 8017538:	461e      	movgt	r6, r3
 801753a:	2601      	movle	r6, #1
 801753c:	4456      	add	r6, sl
 801753e:	4649      	mov	r1, r9
 8017540:	2201      	movs	r2, #1
 8017542:	4658      	mov	r0, fp
 8017544:	f000 fb5c 	bl	8017c00 <__lshift>
 8017548:	4621      	mov	r1, r4
 801754a:	4681      	mov	r9, r0
 801754c:	f000 fbc4 	bl	8017cd8 <__mcmp>
 8017550:	2800      	cmp	r0, #0
 8017552:	dcb0      	bgt.n	80174b6 <_dtoa_r+0xa5e>
 8017554:	d102      	bne.n	801755c <_dtoa_r+0xb04>
 8017556:	f018 0f01 	tst.w	r8, #1
 801755a:	d1ac      	bne.n	80174b6 <_dtoa_r+0xa5e>
 801755c:	4633      	mov	r3, r6
 801755e:	461e      	mov	r6, r3
 8017560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017564:	2a30      	cmp	r2, #48	@ 0x30
 8017566:	d0fa      	beq.n	801755e <_dtoa_r+0xb06>
 8017568:	e5c2      	b.n	80170f0 <_dtoa_r+0x698>
 801756a:	459a      	cmp	sl, r3
 801756c:	d1a4      	bne.n	80174b8 <_dtoa_r+0xa60>
 801756e:	9b04      	ldr	r3, [sp, #16]
 8017570:	3301      	adds	r3, #1
 8017572:	9304      	str	r3, [sp, #16]
 8017574:	2331      	movs	r3, #49	@ 0x31
 8017576:	f88a 3000 	strb.w	r3, [sl]
 801757a:	e5b9      	b.n	80170f0 <_dtoa_r+0x698>
 801757c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801757e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80175dc <_dtoa_r+0xb84>
 8017582:	b11b      	cbz	r3, 801758c <_dtoa_r+0xb34>
 8017584:	f10a 0308 	add.w	r3, sl, #8
 8017588:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801758a:	6013      	str	r3, [r2, #0]
 801758c:	4650      	mov	r0, sl
 801758e:	b019      	add	sp, #100	@ 0x64
 8017590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017596:	2b01      	cmp	r3, #1
 8017598:	f77f ae37 	ble.w	801720a <_dtoa_r+0x7b2>
 801759c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801759e:	930a      	str	r3, [sp, #40]	@ 0x28
 80175a0:	2001      	movs	r0, #1
 80175a2:	e655      	b.n	8017250 <_dtoa_r+0x7f8>
 80175a4:	9b00      	ldr	r3, [sp, #0]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	f77f aed6 	ble.w	8017358 <_dtoa_r+0x900>
 80175ac:	4656      	mov	r6, sl
 80175ae:	4621      	mov	r1, r4
 80175b0:	4648      	mov	r0, r9
 80175b2:	f7ff f9c3 	bl	801693c <quorem>
 80175b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80175ba:	9b00      	ldr	r3, [sp, #0]
 80175bc:	f806 8b01 	strb.w	r8, [r6], #1
 80175c0:	eba6 020a 	sub.w	r2, r6, sl
 80175c4:	4293      	cmp	r3, r2
 80175c6:	ddb3      	ble.n	8017530 <_dtoa_r+0xad8>
 80175c8:	4649      	mov	r1, r9
 80175ca:	2300      	movs	r3, #0
 80175cc:	220a      	movs	r2, #10
 80175ce:	4658      	mov	r0, fp
 80175d0:	f000 f968 	bl	80178a4 <__multadd>
 80175d4:	4681      	mov	r9, r0
 80175d6:	e7ea      	b.n	80175ae <_dtoa_r+0xb56>
 80175d8:	0801a5a0 	.word	0x0801a5a0
 80175dc:	0801a524 	.word	0x0801a524

080175e0 <_free_r>:
 80175e0:	b538      	push	{r3, r4, r5, lr}
 80175e2:	4605      	mov	r5, r0
 80175e4:	2900      	cmp	r1, #0
 80175e6:	d041      	beq.n	801766c <_free_r+0x8c>
 80175e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175ec:	1f0c      	subs	r4, r1, #4
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	bfb8      	it	lt
 80175f2:	18e4      	addlt	r4, r4, r3
 80175f4:	f000 f8e8 	bl	80177c8 <__malloc_lock>
 80175f8:	4a1d      	ldr	r2, [pc, #116]	@ (8017670 <_free_r+0x90>)
 80175fa:	6813      	ldr	r3, [r2, #0]
 80175fc:	b933      	cbnz	r3, 801760c <_free_r+0x2c>
 80175fe:	6063      	str	r3, [r4, #4]
 8017600:	6014      	str	r4, [r2, #0]
 8017602:	4628      	mov	r0, r5
 8017604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017608:	f000 b8e4 	b.w	80177d4 <__malloc_unlock>
 801760c:	42a3      	cmp	r3, r4
 801760e:	d908      	bls.n	8017622 <_free_r+0x42>
 8017610:	6820      	ldr	r0, [r4, #0]
 8017612:	1821      	adds	r1, r4, r0
 8017614:	428b      	cmp	r3, r1
 8017616:	bf01      	itttt	eq
 8017618:	6819      	ldreq	r1, [r3, #0]
 801761a:	685b      	ldreq	r3, [r3, #4]
 801761c:	1809      	addeq	r1, r1, r0
 801761e:	6021      	streq	r1, [r4, #0]
 8017620:	e7ed      	b.n	80175fe <_free_r+0x1e>
 8017622:	461a      	mov	r2, r3
 8017624:	685b      	ldr	r3, [r3, #4]
 8017626:	b10b      	cbz	r3, 801762c <_free_r+0x4c>
 8017628:	42a3      	cmp	r3, r4
 801762a:	d9fa      	bls.n	8017622 <_free_r+0x42>
 801762c:	6811      	ldr	r1, [r2, #0]
 801762e:	1850      	adds	r0, r2, r1
 8017630:	42a0      	cmp	r0, r4
 8017632:	d10b      	bne.n	801764c <_free_r+0x6c>
 8017634:	6820      	ldr	r0, [r4, #0]
 8017636:	4401      	add	r1, r0
 8017638:	1850      	adds	r0, r2, r1
 801763a:	6011      	str	r1, [r2, #0]
 801763c:	4283      	cmp	r3, r0
 801763e:	d1e0      	bne.n	8017602 <_free_r+0x22>
 8017640:	6818      	ldr	r0, [r3, #0]
 8017642:	685b      	ldr	r3, [r3, #4]
 8017644:	4408      	add	r0, r1
 8017646:	6053      	str	r3, [r2, #4]
 8017648:	6010      	str	r0, [r2, #0]
 801764a:	e7da      	b.n	8017602 <_free_r+0x22>
 801764c:	d902      	bls.n	8017654 <_free_r+0x74>
 801764e:	230c      	movs	r3, #12
 8017650:	602b      	str	r3, [r5, #0]
 8017652:	e7d6      	b.n	8017602 <_free_r+0x22>
 8017654:	6820      	ldr	r0, [r4, #0]
 8017656:	1821      	adds	r1, r4, r0
 8017658:	428b      	cmp	r3, r1
 801765a:	bf02      	ittt	eq
 801765c:	6819      	ldreq	r1, [r3, #0]
 801765e:	685b      	ldreq	r3, [r3, #4]
 8017660:	1809      	addeq	r1, r1, r0
 8017662:	6063      	str	r3, [r4, #4]
 8017664:	bf08      	it	eq
 8017666:	6021      	streq	r1, [r4, #0]
 8017668:	6054      	str	r4, [r2, #4]
 801766a:	e7ca      	b.n	8017602 <_free_r+0x22>
 801766c:	bd38      	pop	{r3, r4, r5, pc}
 801766e:	bf00      	nop
 8017670:	2002a3a8 	.word	0x2002a3a8

08017674 <malloc>:
 8017674:	4b02      	ldr	r3, [pc, #8]	@ (8017680 <malloc+0xc>)
 8017676:	4601      	mov	r1, r0
 8017678:	6818      	ldr	r0, [r3, #0]
 801767a:	f000 b825 	b.w	80176c8 <_malloc_r>
 801767e:	bf00      	nop
 8017680:	2000013c 	.word	0x2000013c

08017684 <sbrk_aligned>:
 8017684:	b570      	push	{r4, r5, r6, lr}
 8017686:	4e0f      	ldr	r6, [pc, #60]	@ (80176c4 <sbrk_aligned+0x40>)
 8017688:	460c      	mov	r4, r1
 801768a:	4605      	mov	r5, r0
 801768c:	6831      	ldr	r1, [r6, #0]
 801768e:	b911      	cbnz	r1, 8017696 <sbrk_aligned+0x12>
 8017690:	f000 fe4c 	bl	801832c <_sbrk_r>
 8017694:	6030      	str	r0, [r6, #0]
 8017696:	4621      	mov	r1, r4
 8017698:	4628      	mov	r0, r5
 801769a:	f000 fe47 	bl	801832c <_sbrk_r>
 801769e:	1c43      	adds	r3, r0, #1
 80176a0:	d103      	bne.n	80176aa <sbrk_aligned+0x26>
 80176a2:	f04f 34ff 	mov.w	r4, #4294967295
 80176a6:	4620      	mov	r0, r4
 80176a8:	bd70      	pop	{r4, r5, r6, pc}
 80176aa:	1cc4      	adds	r4, r0, #3
 80176ac:	f024 0403 	bic.w	r4, r4, #3
 80176b0:	42a0      	cmp	r0, r4
 80176b2:	d0f8      	beq.n	80176a6 <sbrk_aligned+0x22>
 80176b4:	1a21      	subs	r1, r4, r0
 80176b6:	4628      	mov	r0, r5
 80176b8:	f000 fe38 	bl	801832c <_sbrk_r>
 80176bc:	3001      	adds	r0, #1
 80176be:	d1f2      	bne.n	80176a6 <sbrk_aligned+0x22>
 80176c0:	e7ef      	b.n	80176a2 <sbrk_aligned+0x1e>
 80176c2:	bf00      	nop
 80176c4:	2002a3a4 	.word	0x2002a3a4

080176c8 <_malloc_r>:
 80176c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176cc:	1ccd      	adds	r5, r1, #3
 80176ce:	4606      	mov	r6, r0
 80176d0:	f025 0503 	bic.w	r5, r5, #3
 80176d4:	3508      	adds	r5, #8
 80176d6:	2d0c      	cmp	r5, #12
 80176d8:	bf38      	it	cc
 80176da:	250c      	movcc	r5, #12
 80176dc:	2d00      	cmp	r5, #0
 80176de:	db01      	blt.n	80176e4 <_malloc_r+0x1c>
 80176e0:	42a9      	cmp	r1, r5
 80176e2:	d904      	bls.n	80176ee <_malloc_r+0x26>
 80176e4:	230c      	movs	r3, #12
 80176e6:	6033      	str	r3, [r6, #0]
 80176e8:	2000      	movs	r0, #0
 80176ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80177c4 <_malloc_r+0xfc>
 80176f2:	f000 f869 	bl	80177c8 <__malloc_lock>
 80176f6:	f8d8 3000 	ldr.w	r3, [r8]
 80176fa:	461c      	mov	r4, r3
 80176fc:	bb44      	cbnz	r4, 8017750 <_malloc_r+0x88>
 80176fe:	4629      	mov	r1, r5
 8017700:	4630      	mov	r0, r6
 8017702:	f7ff ffbf 	bl	8017684 <sbrk_aligned>
 8017706:	1c43      	adds	r3, r0, #1
 8017708:	4604      	mov	r4, r0
 801770a:	d158      	bne.n	80177be <_malloc_r+0xf6>
 801770c:	f8d8 4000 	ldr.w	r4, [r8]
 8017710:	4627      	mov	r7, r4
 8017712:	2f00      	cmp	r7, #0
 8017714:	d143      	bne.n	801779e <_malloc_r+0xd6>
 8017716:	2c00      	cmp	r4, #0
 8017718:	d04b      	beq.n	80177b2 <_malloc_r+0xea>
 801771a:	6823      	ldr	r3, [r4, #0]
 801771c:	4639      	mov	r1, r7
 801771e:	4630      	mov	r0, r6
 8017720:	eb04 0903 	add.w	r9, r4, r3
 8017724:	f000 fe02 	bl	801832c <_sbrk_r>
 8017728:	4581      	cmp	r9, r0
 801772a:	d142      	bne.n	80177b2 <_malloc_r+0xea>
 801772c:	6821      	ldr	r1, [r4, #0]
 801772e:	4630      	mov	r0, r6
 8017730:	1a6d      	subs	r5, r5, r1
 8017732:	4629      	mov	r1, r5
 8017734:	f7ff ffa6 	bl	8017684 <sbrk_aligned>
 8017738:	3001      	adds	r0, #1
 801773a:	d03a      	beq.n	80177b2 <_malloc_r+0xea>
 801773c:	6823      	ldr	r3, [r4, #0]
 801773e:	442b      	add	r3, r5
 8017740:	6023      	str	r3, [r4, #0]
 8017742:	f8d8 3000 	ldr.w	r3, [r8]
 8017746:	685a      	ldr	r2, [r3, #4]
 8017748:	bb62      	cbnz	r2, 80177a4 <_malloc_r+0xdc>
 801774a:	f8c8 7000 	str.w	r7, [r8]
 801774e:	e00f      	b.n	8017770 <_malloc_r+0xa8>
 8017750:	6822      	ldr	r2, [r4, #0]
 8017752:	1b52      	subs	r2, r2, r5
 8017754:	d420      	bmi.n	8017798 <_malloc_r+0xd0>
 8017756:	2a0b      	cmp	r2, #11
 8017758:	d917      	bls.n	801778a <_malloc_r+0xc2>
 801775a:	1961      	adds	r1, r4, r5
 801775c:	42a3      	cmp	r3, r4
 801775e:	6025      	str	r5, [r4, #0]
 8017760:	bf18      	it	ne
 8017762:	6059      	strne	r1, [r3, #4]
 8017764:	6863      	ldr	r3, [r4, #4]
 8017766:	bf08      	it	eq
 8017768:	f8c8 1000 	streq.w	r1, [r8]
 801776c:	5162      	str	r2, [r4, r5]
 801776e:	604b      	str	r3, [r1, #4]
 8017770:	4630      	mov	r0, r6
 8017772:	f000 f82f 	bl	80177d4 <__malloc_unlock>
 8017776:	f104 000b 	add.w	r0, r4, #11
 801777a:	1d23      	adds	r3, r4, #4
 801777c:	f020 0007 	bic.w	r0, r0, #7
 8017780:	1ac2      	subs	r2, r0, r3
 8017782:	bf1c      	itt	ne
 8017784:	1a1b      	subne	r3, r3, r0
 8017786:	50a3      	strne	r3, [r4, r2]
 8017788:	e7af      	b.n	80176ea <_malloc_r+0x22>
 801778a:	6862      	ldr	r2, [r4, #4]
 801778c:	42a3      	cmp	r3, r4
 801778e:	bf0c      	ite	eq
 8017790:	f8c8 2000 	streq.w	r2, [r8]
 8017794:	605a      	strne	r2, [r3, #4]
 8017796:	e7eb      	b.n	8017770 <_malloc_r+0xa8>
 8017798:	4623      	mov	r3, r4
 801779a:	6864      	ldr	r4, [r4, #4]
 801779c:	e7ae      	b.n	80176fc <_malloc_r+0x34>
 801779e:	463c      	mov	r4, r7
 80177a0:	687f      	ldr	r7, [r7, #4]
 80177a2:	e7b6      	b.n	8017712 <_malloc_r+0x4a>
 80177a4:	461a      	mov	r2, r3
 80177a6:	685b      	ldr	r3, [r3, #4]
 80177a8:	42a3      	cmp	r3, r4
 80177aa:	d1fb      	bne.n	80177a4 <_malloc_r+0xdc>
 80177ac:	2300      	movs	r3, #0
 80177ae:	6053      	str	r3, [r2, #4]
 80177b0:	e7de      	b.n	8017770 <_malloc_r+0xa8>
 80177b2:	230c      	movs	r3, #12
 80177b4:	4630      	mov	r0, r6
 80177b6:	6033      	str	r3, [r6, #0]
 80177b8:	f000 f80c 	bl	80177d4 <__malloc_unlock>
 80177bc:	e794      	b.n	80176e8 <_malloc_r+0x20>
 80177be:	6005      	str	r5, [r0, #0]
 80177c0:	e7d6      	b.n	8017770 <_malloc_r+0xa8>
 80177c2:	bf00      	nop
 80177c4:	2002a3a8 	.word	0x2002a3a8

080177c8 <__malloc_lock>:
 80177c8:	4801      	ldr	r0, [pc, #4]	@ (80177d0 <__malloc_lock+0x8>)
 80177ca:	f7ff b89a 	b.w	8016902 <__retarget_lock_acquire_recursive>
 80177ce:	bf00      	nop
 80177d0:	2002a3a0 	.word	0x2002a3a0

080177d4 <__malloc_unlock>:
 80177d4:	4801      	ldr	r0, [pc, #4]	@ (80177dc <__malloc_unlock+0x8>)
 80177d6:	f7ff b895 	b.w	8016904 <__retarget_lock_release_recursive>
 80177da:	bf00      	nop
 80177dc:	2002a3a0 	.word	0x2002a3a0

080177e0 <_Balloc>:
 80177e0:	b570      	push	{r4, r5, r6, lr}
 80177e2:	69c6      	ldr	r6, [r0, #28]
 80177e4:	4604      	mov	r4, r0
 80177e6:	460d      	mov	r5, r1
 80177e8:	b976      	cbnz	r6, 8017808 <_Balloc+0x28>
 80177ea:	2010      	movs	r0, #16
 80177ec:	f7ff ff42 	bl	8017674 <malloc>
 80177f0:	4602      	mov	r2, r0
 80177f2:	61e0      	str	r0, [r4, #28]
 80177f4:	b920      	cbnz	r0, 8017800 <_Balloc+0x20>
 80177f6:	4b18      	ldr	r3, [pc, #96]	@ (8017858 <_Balloc+0x78>)
 80177f8:	216b      	movs	r1, #107	@ 0x6b
 80177fa:	4818      	ldr	r0, [pc, #96]	@ (801785c <_Balloc+0x7c>)
 80177fc:	f000 fda6 	bl	801834c <__assert_func>
 8017800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017804:	6006      	str	r6, [r0, #0]
 8017806:	60c6      	str	r6, [r0, #12]
 8017808:	69e6      	ldr	r6, [r4, #28]
 801780a:	68f3      	ldr	r3, [r6, #12]
 801780c:	b183      	cbz	r3, 8017830 <_Balloc+0x50>
 801780e:	69e3      	ldr	r3, [r4, #28]
 8017810:	68db      	ldr	r3, [r3, #12]
 8017812:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017816:	b9b8      	cbnz	r0, 8017848 <_Balloc+0x68>
 8017818:	2101      	movs	r1, #1
 801781a:	4620      	mov	r0, r4
 801781c:	fa01 f605 	lsl.w	r6, r1, r5
 8017820:	1d72      	adds	r2, r6, #5
 8017822:	0092      	lsls	r2, r2, #2
 8017824:	f000 fdb0 	bl	8018388 <_calloc_r>
 8017828:	b160      	cbz	r0, 8017844 <_Balloc+0x64>
 801782a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801782e:	e00e      	b.n	801784e <_Balloc+0x6e>
 8017830:	2221      	movs	r2, #33	@ 0x21
 8017832:	2104      	movs	r1, #4
 8017834:	4620      	mov	r0, r4
 8017836:	f000 fda7 	bl	8018388 <_calloc_r>
 801783a:	69e3      	ldr	r3, [r4, #28]
 801783c:	60f0      	str	r0, [r6, #12]
 801783e:	68db      	ldr	r3, [r3, #12]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d1e4      	bne.n	801780e <_Balloc+0x2e>
 8017844:	2000      	movs	r0, #0
 8017846:	bd70      	pop	{r4, r5, r6, pc}
 8017848:	6802      	ldr	r2, [r0, #0]
 801784a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801784e:	2300      	movs	r3, #0
 8017850:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017854:	e7f7      	b.n	8017846 <_Balloc+0x66>
 8017856:	bf00      	nop
 8017858:	0801a531 	.word	0x0801a531
 801785c:	0801a5b1 	.word	0x0801a5b1

08017860 <_Bfree>:
 8017860:	b570      	push	{r4, r5, r6, lr}
 8017862:	69c6      	ldr	r6, [r0, #28]
 8017864:	4605      	mov	r5, r0
 8017866:	460c      	mov	r4, r1
 8017868:	b976      	cbnz	r6, 8017888 <_Bfree+0x28>
 801786a:	2010      	movs	r0, #16
 801786c:	f7ff ff02 	bl	8017674 <malloc>
 8017870:	4602      	mov	r2, r0
 8017872:	61e8      	str	r0, [r5, #28]
 8017874:	b920      	cbnz	r0, 8017880 <_Bfree+0x20>
 8017876:	4b09      	ldr	r3, [pc, #36]	@ (801789c <_Bfree+0x3c>)
 8017878:	218f      	movs	r1, #143	@ 0x8f
 801787a:	4809      	ldr	r0, [pc, #36]	@ (80178a0 <_Bfree+0x40>)
 801787c:	f000 fd66 	bl	801834c <__assert_func>
 8017880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017884:	6006      	str	r6, [r0, #0]
 8017886:	60c6      	str	r6, [r0, #12]
 8017888:	b13c      	cbz	r4, 801789a <_Bfree+0x3a>
 801788a:	69eb      	ldr	r3, [r5, #28]
 801788c:	6862      	ldr	r2, [r4, #4]
 801788e:	68db      	ldr	r3, [r3, #12]
 8017890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017894:	6021      	str	r1, [r4, #0]
 8017896:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801789a:	bd70      	pop	{r4, r5, r6, pc}
 801789c:	0801a531 	.word	0x0801a531
 80178a0:	0801a5b1 	.word	0x0801a5b1

080178a4 <__multadd>:
 80178a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178a8:	f101 0c14 	add.w	ip, r1, #20
 80178ac:	4607      	mov	r7, r0
 80178ae:	460c      	mov	r4, r1
 80178b0:	461e      	mov	r6, r3
 80178b2:	690d      	ldr	r5, [r1, #16]
 80178b4:	2000      	movs	r0, #0
 80178b6:	f8dc 3000 	ldr.w	r3, [ip]
 80178ba:	3001      	adds	r0, #1
 80178bc:	b299      	uxth	r1, r3
 80178be:	4285      	cmp	r5, r0
 80178c0:	fb02 6101 	mla	r1, r2, r1, r6
 80178c4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80178c8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80178cc:	b289      	uxth	r1, r1
 80178ce:	fb02 3306 	mla	r3, r2, r6, r3
 80178d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80178d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80178da:	f84c 1b04 	str.w	r1, [ip], #4
 80178de:	dcea      	bgt.n	80178b6 <__multadd+0x12>
 80178e0:	b30e      	cbz	r6, 8017926 <__multadd+0x82>
 80178e2:	68a3      	ldr	r3, [r4, #8]
 80178e4:	42ab      	cmp	r3, r5
 80178e6:	dc19      	bgt.n	801791c <__multadd+0x78>
 80178e8:	6861      	ldr	r1, [r4, #4]
 80178ea:	4638      	mov	r0, r7
 80178ec:	3101      	adds	r1, #1
 80178ee:	f7ff ff77 	bl	80177e0 <_Balloc>
 80178f2:	4680      	mov	r8, r0
 80178f4:	b928      	cbnz	r0, 8017902 <__multadd+0x5e>
 80178f6:	4602      	mov	r2, r0
 80178f8:	4b0c      	ldr	r3, [pc, #48]	@ (801792c <__multadd+0x88>)
 80178fa:	21ba      	movs	r1, #186	@ 0xba
 80178fc:	480c      	ldr	r0, [pc, #48]	@ (8017930 <__multadd+0x8c>)
 80178fe:	f000 fd25 	bl	801834c <__assert_func>
 8017902:	6922      	ldr	r2, [r4, #16]
 8017904:	f104 010c 	add.w	r1, r4, #12
 8017908:	300c      	adds	r0, #12
 801790a:	3202      	adds	r2, #2
 801790c:	0092      	lsls	r2, r2, #2
 801790e:	f7ff f808 	bl	8016922 <memcpy>
 8017912:	4621      	mov	r1, r4
 8017914:	4644      	mov	r4, r8
 8017916:	4638      	mov	r0, r7
 8017918:	f7ff ffa2 	bl	8017860 <_Bfree>
 801791c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017920:	3501      	adds	r5, #1
 8017922:	615e      	str	r6, [r3, #20]
 8017924:	6125      	str	r5, [r4, #16]
 8017926:	4620      	mov	r0, r4
 8017928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801792c:	0801a5a0 	.word	0x0801a5a0
 8017930:	0801a5b1 	.word	0x0801a5b1

08017934 <__hi0bits>:
 8017934:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017938:	4603      	mov	r3, r0
 801793a:	bf36      	itet	cc
 801793c:	0403      	lslcc	r3, r0, #16
 801793e:	2000      	movcs	r0, #0
 8017940:	2010      	movcc	r0, #16
 8017942:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017946:	bf3c      	itt	cc
 8017948:	021b      	lslcc	r3, r3, #8
 801794a:	3008      	addcc	r0, #8
 801794c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017950:	bf3c      	itt	cc
 8017952:	011b      	lslcc	r3, r3, #4
 8017954:	3004      	addcc	r0, #4
 8017956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801795a:	bf3c      	itt	cc
 801795c:	009b      	lslcc	r3, r3, #2
 801795e:	3002      	addcc	r0, #2
 8017960:	2b00      	cmp	r3, #0
 8017962:	db05      	blt.n	8017970 <__hi0bits+0x3c>
 8017964:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017968:	f100 0001 	add.w	r0, r0, #1
 801796c:	bf08      	it	eq
 801796e:	2020      	moveq	r0, #32
 8017970:	4770      	bx	lr

08017972 <__lo0bits>:
 8017972:	6803      	ldr	r3, [r0, #0]
 8017974:	4602      	mov	r2, r0
 8017976:	f013 0007 	ands.w	r0, r3, #7
 801797a:	d00b      	beq.n	8017994 <__lo0bits+0x22>
 801797c:	07d9      	lsls	r1, r3, #31
 801797e:	d421      	bmi.n	80179c4 <__lo0bits+0x52>
 8017980:	0798      	lsls	r0, r3, #30
 8017982:	bf47      	ittee	mi
 8017984:	085b      	lsrmi	r3, r3, #1
 8017986:	2001      	movmi	r0, #1
 8017988:	089b      	lsrpl	r3, r3, #2
 801798a:	2002      	movpl	r0, #2
 801798c:	bf4c      	ite	mi
 801798e:	6013      	strmi	r3, [r2, #0]
 8017990:	6013      	strpl	r3, [r2, #0]
 8017992:	4770      	bx	lr
 8017994:	b299      	uxth	r1, r3
 8017996:	b909      	cbnz	r1, 801799c <__lo0bits+0x2a>
 8017998:	0c1b      	lsrs	r3, r3, #16
 801799a:	2010      	movs	r0, #16
 801799c:	b2d9      	uxtb	r1, r3
 801799e:	b909      	cbnz	r1, 80179a4 <__lo0bits+0x32>
 80179a0:	3008      	adds	r0, #8
 80179a2:	0a1b      	lsrs	r3, r3, #8
 80179a4:	0719      	lsls	r1, r3, #28
 80179a6:	bf04      	itt	eq
 80179a8:	091b      	lsreq	r3, r3, #4
 80179aa:	3004      	addeq	r0, #4
 80179ac:	0799      	lsls	r1, r3, #30
 80179ae:	bf04      	itt	eq
 80179b0:	089b      	lsreq	r3, r3, #2
 80179b2:	3002      	addeq	r0, #2
 80179b4:	07d9      	lsls	r1, r3, #31
 80179b6:	d403      	bmi.n	80179c0 <__lo0bits+0x4e>
 80179b8:	085b      	lsrs	r3, r3, #1
 80179ba:	f100 0001 	add.w	r0, r0, #1
 80179be:	d003      	beq.n	80179c8 <__lo0bits+0x56>
 80179c0:	6013      	str	r3, [r2, #0]
 80179c2:	4770      	bx	lr
 80179c4:	2000      	movs	r0, #0
 80179c6:	4770      	bx	lr
 80179c8:	2020      	movs	r0, #32
 80179ca:	4770      	bx	lr

080179cc <__i2b>:
 80179cc:	b510      	push	{r4, lr}
 80179ce:	460c      	mov	r4, r1
 80179d0:	2101      	movs	r1, #1
 80179d2:	f7ff ff05 	bl	80177e0 <_Balloc>
 80179d6:	4602      	mov	r2, r0
 80179d8:	b928      	cbnz	r0, 80179e6 <__i2b+0x1a>
 80179da:	4b05      	ldr	r3, [pc, #20]	@ (80179f0 <__i2b+0x24>)
 80179dc:	f240 1145 	movw	r1, #325	@ 0x145
 80179e0:	4804      	ldr	r0, [pc, #16]	@ (80179f4 <__i2b+0x28>)
 80179e2:	f000 fcb3 	bl	801834c <__assert_func>
 80179e6:	2301      	movs	r3, #1
 80179e8:	6144      	str	r4, [r0, #20]
 80179ea:	6103      	str	r3, [r0, #16]
 80179ec:	bd10      	pop	{r4, pc}
 80179ee:	bf00      	nop
 80179f0:	0801a5a0 	.word	0x0801a5a0
 80179f4:	0801a5b1 	.word	0x0801a5b1

080179f8 <__multiply>:
 80179f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179fc:	4614      	mov	r4, r2
 80179fe:	690a      	ldr	r2, [r1, #16]
 8017a00:	460f      	mov	r7, r1
 8017a02:	b085      	sub	sp, #20
 8017a04:	6923      	ldr	r3, [r4, #16]
 8017a06:	429a      	cmp	r2, r3
 8017a08:	bfa2      	ittt	ge
 8017a0a:	4623      	movge	r3, r4
 8017a0c:	460c      	movge	r4, r1
 8017a0e:	461f      	movge	r7, r3
 8017a10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017a14:	68a3      	ldr	r3, [r4, #8]
 8017a16:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017a1a:	6861      	ldr	r1, [r4, #4]
 8017a1c:	eb0a 0609 	add.w	r6, sl, r9
 8017a20:	42b3      	cmp	r3, r6
 8017a22:	bfb8      	it	lt
 8017a24:	3101      	addlt	r1, #1
 8017a26:	f7ff fedb 	bl	80177e0 <_Balloc>
 8017a2a:	b930      	cbnz	r0, 8017a3a <__multiply+0x42>
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	4b45      	ldr	r3, [pc, #276]	@ (8017b44 <__multiply+0x14c>)
 8017a30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017a34:	4844      	ldr	r0, [pc, #272]	@ (8017b48 <__multiply+0x150>)
 8017a36:	f000 fc89 	bl	801834c <__assert_func>
 8017a3a:	f100 0514 	add.w	r5, r0, #20
 8017a3e:	2200      	movs	r2, #0
 8017a40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017a44:	462b      	mov	r3, r5
 8017a46:	4543      	cmp	r3, r8
 8017a48:	d321      	bcc.n	8017a8e <__multiply+0x96>
 8017a4a:	f107 0114 	add.w	r1, r7, #20
 8017a4e:	f104 0214 	add.w	r2, r4, #20
 8017a52:	f104 0715 	add.w	r7, r4, #21
 8017a56:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017a5a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017a5e:	9302      	str	r3, [sp, #8]
 8017a60:	1b13      	subs	r3, r2, r4
 8017a62:	3b15      	subs	r3, #21
 8017a64:	f023 0303 	bic.w	r3, r3, #3
 8017a68:	3304      	adds	r3, #4
 8017a6a:	42ba      	cmp	r2, r7
 8017a6c:	bf38      	it	cc
 8017a6e:	2304      	movcc	r3, #4
 8017a70:	9301      	str	r3, [sp, #4]
 8017a72:	9b02      	ldr	r3, [sp, #8]
 8017a74:	9103      	str	r1, [sp, #12]
 8017a76:	428b      	cmp	r3, r1
 8017a78:	d80c      	bhi.n	8017a94 <__multiply+0x9c>
 8017a7a:	2e00      	cmp	r6, #0
 8017a7c:	dd03      	ble.n	8017a86 <__multiply+0x8e>
 8017a7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d05b      	beq.n	8017b3e <__multiply+0x146>
 8017a86:	6106      	str	r6, [r0, #16]
 8017a88:	b005      	add	sp, #20
 8017a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a8e:	f843 2b04 	str.w	r2, [r3], #4
 8017a92:	e7d8      	b.n	8017a46 <__multiply+0x4e>
 8017a94:	f8b1 a000 	ldrh.w	sl, [r1]
 8017a98:	f1ba 0f00 	cmp.w	sl, #0
 8017a9c:	d024      	beq.n	8017ae8 <__multiply+0xf0>
 8017a9e:	f104 0e14 	add.w	lr, r4, #20
 8017aa2:	46a9      	mov	r9, r5
 8017aa4:	f04f 0c00 	mov.w	ip, #0
 8017aa8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017aac:	f8d9 3000 	ldr.w	r3, [r9]
 8017ab0:	fa1f fb87 	uxth.w	fp, r7
 8017ab4:	4572      	cmp	r2, lr
 8017ab6:	b29b      	uxth	r3, r3
 8017ab8:	fb0a 330b 	mla	r3, sl, fp, r3
 8017abc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017ac0:	f8d9 7000 	ldr.w	r7, [r9]
 8017ac4:	4463      	add	r3, ip
 8017ac6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017aca:	fb0a c70b 	mla	r7, sl, fp, ip
 8017ace:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017ad2:	b29b      	uxth	r3, r3
 8017ad4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017ad8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017adc:	f849 3b04 	str.w	r3, [r9], #4
 8017ae0:	d8e2      	bhi.n	8017aa8 <__multiply+0xb0>
 8017ae2:	9b01      	ldr	r3, [sp, #4]
 8017ae4:	f845 c003 	str.w	ip, [r5, r3]
 8017ae8:	9b03      	ldr	r3, [sp, #12]
 8017aea:	3104      	adds	r1, #4
 8017aec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017af0:	f1b9 0f00 	cmp.w	r9, #0
 8017af4:	d021      	beq.n	8017b3a <__multiply+0x142>
 8017af6:	682b      	ldr	r3, [r5, #0]
 8017af8:	f104 0c14 	add.w	ip, r4, #20
 8017afc:	46ae      	mov	lr, r5
 8017afe:	f04f 0a00 	mov.w	sl, #0
 8017b02:	f8bc b000 	ldrh.w	fp, [ip]
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017b0c:	fb09 770b 	mla	r7, r9, fp, r7
 8017b10:	4457      	add	r7, sl
 8017b12:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017b16:	f84e 3b04 	str.w	r3, [lr], #4
 8017b1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017b1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017b22:	f8be 3000 	ldrh.w	r3, [lr]
 8017b26:	4562      	cmp	r2, ip
 8017b28:	fb09 330a 	mla	r3, r9, sl, r3
 8017b2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017b30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017b34:	d8e5      	bhi.n	8017b02 <__multiply+0x10a>
 8017b36:	9f01      	ldr	r7, [sp, #4]
 8017b38:	51eb      	str	r3, [r5, r7]
 8017b3a:	3504      	adds	r5, #4
 8017b3c:	e799      	b.n	8017a72 <__multiply+0x7a>
 8017b3e:	3e01      	subs	r6, #1
 8017b40:	e79b      	b.n	8017a7a <__multiply+0x82>
 8017b42:	bf00      	nop
 8017b44:	0801a5a0 	.word	0x0801a5a0
 8017b48:	0801a5b1 	.word	0x0801a5b1

08017b4c <__pow5mult>:
 8017b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b50:	4615      	mov	r5, r2
 8017b52:	f012 0203 	ands.w	r2, r2, #3
 8017b56:	4607      	mov	r7, r0
 8017b58:	460e      	mov	r6, r1
 8017b5a:	d007      	beq.n	8017b6c <__pow5mult+0x20>
 8017b5c:	3a01      	subs	r2, #1
 8017b5e:	4c25      	ldr	r4, [pc, #148]	@ (8017bf4 <__pow5mult+0xa8>)
 8017b60:	2300      	movs	r3, #0
 8017b62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017b66:	f7ff fe9d 	bl	80178a4 <__multadd>
 8017b6a:	4606      	mov	r6, r0
 8017b6c:	10ad      	asrs	r5, r5, #2
 8017b6e:	d03d      	beq.n	8017bec <__pow5mult+0xa0>
 8017b70:	69fc      	ldr	r4, [r7, #28]
 8017b72:	b97c      	cbnz	r4, 8017b94 <__pow5mult+0x48>
 8017b74:	2010      	movs	r0, #16
 8017b76:	f7ff fd7d 	bl	8017674 <malloc>
 8017b7a:	4602      	mov	r2, r0
 8017b7c:	61f8      	str	r0, [r7, #28]
 8017b7e:	b928      	cbnz	r0, 8017b8c <__pow5mult+0x40>
 8017b80:	4b1d      	ldr	r3, [pc, #116]	@ (8017bf8 <__pow5mult+0xac>)
 8017b82:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017b86:	481d      	ldr	r0, [pc, #116]	@ (8017bfc <__pow5mult+0xb0>)
 8017b88:	f000 fbe0 	bl	801834c <__assert_func>
 8017b8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017b90:	6004      	str	r4, [r0, #0]
 8017b92:	60c4      	str	r4, [r0, #12]
 8017b94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017b98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017b9c:	b94c      	cbnz	r4, 8017bb2 <__pow5mult+0x66>
 8017b9e:	f240 2171 	movw	r1, #625	@ 0x271
 8017ba2:	4638      	mov	r0, r7
 8017ba4:	f7ff ff12 	bl	80179cc <__i2b>
 8017ba8:	2300      	movs	r3, #0
 8017baa:	4604      	mov	r4, r0
 8017bac:	f8c8 0008 	str.w	r0, [r8, #8]
 8017bb0:	6003      	str	r3, [r0, #0]
 8017bb2:	f04f 0900 	mov.w	r9, #0
 8017bb6:	07eb      	lsls	r3, r5, #31
 8017bb8:	d50a      	bpl.n	8017bd0 <__pow5mult+0x84>
 8017bba:	4631      	mov	r1, r6
 8017bbc:	4622      	mov	r2, r4
 8017bbe:	4638      	mov	r0, r7
 8017bc0:	f7ff ff1a 	bl	80179f8 <__multiply>
 8017bc4:	4680      	mov	r8, r0
 8017bc6:	4631      	mov	r1, r6
 8017bc8:	4638      	mov	r0, r7
 8017bca:	4646      	mov	r6, r8
 8017bcc:	f7ff fe48 	bl	8017860 <_Bfree>
 8017bd0:	106d      	asrs	r5, r5, #1
 8017bd2:	d00b      	beq.n	8017bec <__pow5mult+0xa0>
 8017bd4:	6820      	ldr	r0, [r4, #0]
 8017bd6:	b938      	cbnz	r0, 8017be8 <__pow5mult+0x9c>
 8017bd8:	4622      	mov	r2, r4
 8017bda:	4621      	mov	r1, r4
 8017bdc:	4638      	mov	r0, r7
 8017bde:	f7ff ff0b 	bl	80179f8 <__multiply>
 8017be2:	6020      	str	r0, [r4, #0]
 8017be4:	f8c0 9000 	str.w	r9, [r0]
 8017be8:	4604      	mov	r4, r0
 8017bea:	e7e4      	b.n	8017bb6 <__pow5mult+0x6a>
 8017bec:	4630      	mov	r0, r6
 8017bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bf2:	bf00      	nop
 8017bf4:	0801a60c 	.word	0x0801a60c
 8017bf8:	0801a531 	.word	0x0801a531
 8017bfc:	0801a5b1 	.word	0x0801a5b1

08017c00 <__lshift>:
 8017c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c04:	460c      	mov	r4, r1
 8017c06:	4607      	mov	r7, r0
 8017c08:	4691      	mov	r9, r2
 8017c0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017c0e:	6923      	ldr	r3, [r4, #16]
 8017c10:	6849      	ldr	r1, [r1, #4]
 8017c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017c16:	68a3      	ldr	r3, [r4, #8]
 8017c18:	f108 0601 	add.w	r6, r8, #1
 8017c1c:	42b3      	cmp	r3, r6
 8017c1e:	db0b      	blt.n	8017c38 <__lshift+0x38>
 8017c20:	4638      	mov	r0, r7
 8017c22:	f7ff fddd 	bl	80177e0 <_Balloc>
 8017c26:	4605      	mov	r5, r0
 8017c28:	b948      	cbnz	r0, 8017c3e <__lshift+0x3e>
 8017c2a:	4602      	mov	r2, r0
 8017c2c:	4b28      	ldr	r3, [pc, #160]	@ (8017cd0 <__lshift+0xd0>)
 8017c2e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017c32:	4828      	ldr	r0, [pc, #160]	@ (8017cd4 <__lshift+0xd4>)
 8017c34:	f000 fb8a 	bl	801834c <__assert_func>
 8017c38:	3101      	adds	r1, #1
 8017c3a:	005b      	lsls	r3, r3, #1
 8017c3c:	e7ee      	b.n	8017c1c <__lshift+0x1c>
 8017c3e:	2300      	movs	r3, #0
 8017c40:	f100 0114 	add.w	r1, r0, #20
 8017c44:	f100 0210 	add.w	r2, r0, #16
 8017c48:	4618      	mov	r0, r3
 8017c4a:	4553      	cmp	r3, sl
 8017c4c:	db33      	blt.n	8017cb6 <__lshift+0xb6>
 8017c4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017c52:	f104 0314 	add.w	r3, r4, #20
 8017c56:	6920      	ldr	r0, [r4, #16]
 8017c58:	f019 091f 	ands.w	r9, r9, #31
 8017c5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017c60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017c64:	d02b      	beq.n	8017cbe <__lshift+0xbe>
 8017c66:	f1c9 0e20 	rsb	lr, r9, #32
 8017c6a:	468a      	mov	sl, r1
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	6818      	ldr	r0, [r3, #0]
 8017c70:	fa00 f009 	lsl.w	r0, r0, r9
 8017c74:	4310      	orrs	r0, r2
 8017c76:	f84a 0b04 	str.w	r0, [sl], #4
 8017c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c7e:	459c      	cmp	ip, r3
 8017c80:	fa22 f20e 	lsr.w	r2, r2, lr
 8017c84:	d8f3      	bhi.n	8017c6e <__lshift+0x6e>
 8017c86:	ebac 0304 	sub.w	r3, ip, r4
 8017c8a:	f104 0015 	add.w	r0, r4, #21
 8017c8e:	3b15      	subs	r3, #21
 8017c90:	f023 0303 	bic.w	r3, r3, #3
 8017c94:	3304      	adds	r3, #4
 8017c96:	4584      	cmp	ip, r0
 8017c98:	bf38      	it	cc
 8017c9a:	2304      	movcc	r3, #4
 8017c9c:	50ca      	str	r2, [r1, r3]
 8017c9e:	b10a      	cbz	r2, 8017ca4 <__lshift+0xa4>
 8017ca0:	f108 0602 	add.w	r6, r8, #2
 8017ca4:	3e01      	subs	r6, #1
 8017ca6:	4638      	mov	r0, r7
 8017ca8:	4621      	mov	r1, r4
 8017caa:	612e      	str	r6, [r5, #16]
 8017cac:	f7ff fdd8 	bl	8017860 <_Bfree>
 8017cb0:	4628      	mov	r0, r5
 8017cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cb6:	3301      	adds	r3, #1
 8017cb8:	f842 0f04 	str.w	r0, [r2, #4]!
 8017cbc:	e7c5      	b.n	8017c4a <__lshift+0x4a>
 8017cbe:	3904      	subs	r1, #4
 8017cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cc4:	459c      	cmp	ip, r3
 8017cc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8017cca:	d8f9      	bhi.n	8017cc0 <__lshift+0xc0>
 8017ccc:	e7ea      	b.n	8017ca4 <__lshift+0xa4>
 8017cce:	bf00      	nop
 8017cd0:	0801a5a0 	.word	0x0801a5a0
 8017cd4:	0801a5b1 	.word	0x0801a5b1

08017cd8 <__mcmp>:
 8017cd8:	4603      	mov	r3, r0
 8017cda:	690a      	ldr	r2, [r1, #16]
 8017cdc:	6900      	ldr	r0, [r0, #16]
 8017cde:	1a80      	subs	r0, r0, r2
 8017ce0:	b530      	push	{r4, r5, lr}
 8017ce2:	d10e      	bne.n	8017d02 <__mcmp+0x2a>
 8017ce4:	3314      	adds	r3, #20
 8017ce6:	3114      	adds	r1, #20
 8017ce8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017cec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017cf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017cf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017cf8:	4295      	cmp	r5, r2
 8017cfa:	d003      	beq.n	8017d04 <__mcmp+0x2c>
 8017cfc:	d205      	bcs.n	8017d0a <__mcmp+0x32>
 8017cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8017d02:	bd30      	pop	{r4, r5, pc}
 8017d04:	42a3      	cmp	r3, r4
 8017d06:	d3f3      	bcc.n	8017cf0 <__mcmp+0x18>
 8017d08:	e7fb      	b.n	8017d02 <__mcmp+0x2a>
 8017d0a:	2001      	movs	r0, #1
 8017d0c:	e7f9      	b.n	8017d02 <__mcmp+0x2a>
	...

08017d10 <__mdiff>:
 8017d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d14:	4689      	mov	r9, r1
 8017d16:	4606      	mov	r6, r0
 8017d18:	4611      	mov	r1, r2
 8017d1a:	4614      	mov	r4, r2
 8017d1c:	4648      	mov	r0, r9
 8017d1e:	f7ff ffdb 	bl	8017cd8 <__mcmp>
 8017d22:	1e05      	subs	r5, r0, #0
 8017d24:	d112      	bne.n	8017d4c <__mdiff+0x3c>
 8017d26:	4629      	mov	r1, r5
 8017d28:	4630      	mov	r0, r6
 8017d2a:	f7ff fd59 	bl	80177e0 <_Balloc>
 8017d2e:	4602      	mov	r2, r0
 8017d30:	b928      	cbnz	r0, 8017d3e <__mdiff+0x2e>
 8017d32:	4b41      	ldr	r3, [pc, #260]	@ (8017e38 <__mdiff+0x128>)
 8017d34:	f240 2137 	movw	r1, #567	@ 0x237
 8017d38:	4840      	ldr	r0, [pc, #256]	@ (8017e3c <__mdiff+0x12c>)
 8017d3a:	f000 fb07 	bl	801834c <__assert_func>
 8017d3e:	2301      	movs	r3, #1
 8017d40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017d44:	4610      	mov	r0, r2
 8017d46:	b003      	add	sp, #12
 8017d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4c:	bfbc      	itt	lt
 8017d4e:	464b      	movlt	r3, r9
 8017d50:	46a1      	movlt	r9, r4
 8017d52:	4630      	mov	r0, r6
 8017d54:	bfb8      	it	lt
 8017d56:	2501      	movlt	r5, #1
 8017d58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017d5c:	bfb4      	ite	lt
 8017d5e:	461c      	movlt	r4, r3
 8017d60:	2500      	movge	r5, #0
 8017d62:	f7ff fd3d 	bl	80177e0 <_Balloc>
 8017d66:	4602      	mov	r2, r0
 8017d68:	b918      	cbnz	r0, 8017d72 <__mdiff+0x62>
 8017d6a:	4b33      	ldr	r3, [pc, #204]	@ (8017e38 <__mdiff+0x128>)
 8017d6c:	f240 2145 	movw	r1, #581	@ 0x245
 8017d70:	e7e2      	b.n	8017d38 <__mdiff+0x28>
 8017d72:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017d76:	f104 0e14 	add.w	lr, r4, #20
 8017d7a:	6926      	ldr	r6, [r4, #16]
 8017d7c:	f100 0b14 	add.w	fp, r0, #20
 8017d80:	60c5      	str	r5, [r0, #12]
 8017d82:	f109 0514 	add.w	r5, r9, #20
 8017d86:	f109 0310 	add.w	r3, r9, #16
 8017d8a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017d8e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017d92:	46d9      	mov	r9, fp
 8017d94:	f04f 0c00 	mov.w	ip, #0
 8017d98:	9301      	str	r3, [sp, #4]
 8017d9a:	9b01      	ldr	r3, [sp, #4]
 8017d9c:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017da0:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017da4:	4576      	cmp	r6, lr
 8017da6:	9301      	str	r3, [sp, #4]
 8017da8:	fa1f f38a 	uxth.w	r3, sl
 8017dac:	4619      	mov	r1, r3
 8017dae:	b283      	uxth	r3, r0
 8017db0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8017db4:	eba1 0303 	sub.w	r3, r1, r3
 8017db8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017dbc:	4463      	add	r3, ip
 8017dbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017dc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017dcc:	f849 3b04 	str.w	r3, [r9], #4
 8017dd0:	d8e3      	bhi.n	8017d9a <__mdiff+0x8a>
 8017dd2:	1b33      	subs	r3, r6, r4
 8017dd4:	3415      	adds	r4, #21
 8017dd6:	3b15      	subs	r3, #21
 8017dd8:	f023 0303 	bic.w	r3, r3, #3
 8017ddc:	3304      	adds	r3, #4
 8017dde:	42a6      	cmp	r6, r4
 8017de0:	bf38      	it	cc
 8017de2:	2304      	movcc	r3, #4
 8017de4:	441d      	add	r5, r3
 8017de6:	445b      	add	r3, fp
 8017de8:	462c      	mov	r4, r5
 8017dea:	461e      	mov	r6, r3
 8017dec:	4544      	cmp	r4, r8
 8017dee:	d30e      	bcc.n	8017e0e <__mdiff+0xfe>
 8017df0:	f108 0103 	add.w	r1, r8, #3
 8017df4:	1b49      	subs	r1, r1, r5
 8017df6:	3d03      	subs	r5, #3
 8017df8:	f021 0103 	bic.w	r1, r1, #3
 8017dfc:	45a8      	cmp	r8, r5
 8017dfe:	bf38      	it	cc
 8017e00:	2100      	movcc	r1, #0
 8017e02:	440b      	add	r3, r1
 8017e04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017e08:	b199      	cbz	r1, 8017e32 <__mdiff+0x122>
 8017e0a:	6117      	str	r7, [r2, #16]
 8017e0c:	e79a      	b.n	8017d44 <__mdiff+0x34>
 8017e0e:	f854 1b04 	ldr.w	r1, [r4], #4
 8017e12:	46e6      	mov	lr, ip
 8017e14:	fa1f fc81 	uxth.w	ip, r1
 8017e18:	0c08      	lsrs	r0, r1, #16
 8017e1a:	4471      	add	r1, lr
 8017e1c:	44f4      	add	ip, lr
 8017e1e:	b289      	uxth	r1, r1
 8017e20:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017e28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017e2c:	f846 1b04 	str.w	r1, [r6], #4
 8017e30:	e7dc      	b.n	8017dec <__mdiff+0xdc>
 8017e32:	3f01      	subs	r7, #1
 8017e34:	e7e6      	b.n	8017e04 <__mdiff+0xf4>
 8017e36:	bf00      	nop
 8017e38:	0801a5a0 	.word	0x0801a5a0
 8017e3c:	0801a5b1 	.word	0x0801a5b1

08017e40 <__d2b>:
 8017e40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017e44:	460f      	mov	r7, r1
 8017e46:	2101      	movs	r1, #1
 8017e48:	4616      	mov	r6, r2
 8017e4a:	ec59 8b10 	vmov	r8, r9, d0
 8017e4e:	f7ff fcc7 	bl	80177e0 <_Balloc>
 8017e52:	4604      	mov	r4, r0
 8017e54:	b930      	cbnz	r0, 8017e64 <__d2b+0x24>
 8017e56:	4602      	mov	r2, r0
 8017e58:	4b23      	ldr	r3, [pc, #140]	@ (8017ee8 <__d2b+0xa8>)
 8017e5a:	f240 310f 	movw	r1, #783	@ 0x30f
 8017e5e:	4823      	ldr	r0, [pc, #140]	@ (8017eec <__d2b+0xac>)
 8017e60:	f000 fa74 	bl	801834c <__assert_func>
 8017e64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017e6c:	b10d      	cbz	r5, 8017e72 <__d2b+0x32>
 8017e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017e72:	9301      	str	r3, [sp, #4]
 8017e74:	f1b8 0300 	subs.w	r3, r8, #0
 8017e78:	d023      	beq.n	8017ec2 <__d2b+0x82>
 8017e7a:	4668      	mov	r0, sp
 8017e7c:	9300      	str	r3, [sp, #0]
 8017e7e:	f7ff fd78 	bl	8017972 <__lo0bits>
 8017e82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017e86:	b1d0      	cbz	r0, 8017ebe <__d2b+0x7e>
 8017e88:	f1c0 0320 	rsb	r3, r0, #32
 8017e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8017e90:	40c2      	lsrs	r2, r0
 8017e92:	430b      	orrs	r3, r1
 8017e94:	9201      	str	r2, [sp, #4]
 8017e96:	6163      	str	r3, [r4, #20]
 8017e98:	9b01      	ldr	r3, [sp, #4]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	61a3      	str	r3, [r4, #24]
 8017e9e:	bf0c      	ite	eq
 8017ea0:	2201      	moveq	r2, #1
 8017ea2:	2202      	movne	r2, #2
 8017ea4:	6122      	str	r2, [r4, #16]
 8017ea6:	b1a5      	cbz	r5, 8017ed2 <__d2b+0x92>
 8017ea8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017eac:	4405      	add	r5, r0
 8017eae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017eb2:	603d      	str	r5, [r7, #0]
 8017eb4:	6030      	str	r0, [r6, #0]
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	b003      	add	sp, #12
 8017eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ebe:	6161      	str	r1, [r4, #20]
 8017ec0:	e7ea      	b.n	8017e98 <__d2b+0x58>
 8017ec2:	a801      	add	r0, sp, #4
 8017ec4:	f7ff fd55 	bl	8017972 <__lo0bits>
 8017ec8:	9b01      	ldr	r3, [sp, #4]
 8017eca:	3020      	adds	r0, #32
 8017ecc:	2201      	movs	r2, #1
 8017ece:	6163      	str	r3, [r4, #20]
 8017ed0:	e7e8      	b.n	8017ea4 <__d2b+0x64>
 8017ed2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017ed6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017eda:	6038      	str	r0, [r7, #0]
 8017edc:	6918      	ldr	r0, [r3, #16]
 8017ede:	f7ff fd29 	bl	8017934 <__hi0bits>
 8017ee2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017ee6:	e7e5      	b.n	8017eb4 <__d2b+0x74>
 8017ee8:	0801a5a0 	.word	0x0801a5a0
 8017eec:	0801a5b1 	.word	0x0801a5b1

08017ef0 <__ssputs_r>:
 8017ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ef4:	461f      	mov	r7, r3
 8017ef6:	688e      	ldr	r6, [r1, #8]
 8017ef8:	4682      	mov	sl, r0
 8017efa:	460c      	mov	r4, r1
 8017efc:	42be      	cmp	r6, r7
 8017efe:	4690      	mov	r8, r2
 8017f00:	680b      	ldr	r3, [r1, #0]
 8017f02:	d82d      	bhi.n	8017f60 <__ssputs_r+0x70>
 8017f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017f08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017f0c:	d026      	beq.n	8017f5c <__ssputs_r+0x6c>
 8017f0e:	6965      	ldr	r5, [r4, #20]
 8017f10:	6909      	ldr	r1, [r1, #16]
 8017f12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f16:	eba3 0901 	sub.w	r9, r3, r1
 8017f1a:	1c7b      	adds	r3, r7, #1
 8017f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017f20:	444b      	add	r3, r9
 8017f22:	106d      	asrs	r5, r5, #1
 8017f24:	429d      	cmp	r5, r3
 8017f26:	bf38      	it	cc
 8017f28:	461d      	movcc	r5, r3
 8017f2a:	0553      	lsls	r3, r2, #21
 8017f2c:	d527      	bpl.n	8017f7e <__ssputs_r+0x8e>
 8017f2e:	4629      	mov	r1, r5
 8017f30:	f7ff fbca 	bl	80176c8 <_malloc_r>
 8017f34:	4606      	mov	r6, r0
 8017f36:	b360      	cbz	r0, 8017f92 <__ssputs_r+0xa2>
 8017f38:	464a      	mov	r2, r9
 8017f3a:	6921      	ldr	r1, [r4, #16]
 8017f3c:	f7fe fcf1 	bl	8016922 <memcpy>
 8017f40:	89a3      	ldrh	r3, [r4, #12]
 8017f42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f4a:	81a3      	strh	r3, [r4, #12]
 8017f4c:	6126      	str	r6, [r4, #16]
 8017f4e:	444e      	add	r6, r9
 8017f50:	6165      	str	r5, [r4, #20]
 8017f52:	eba5 0509 	sub.w	r5, r5, r9
 8017f56:	6026      	str	r6, [r4, #0]
 8017f58:	463e      	mov	r6, r7
 8017f5a:	60a5      	str	r5, [r4, #8]
 8017f5c:	42be      	cmp	r6, r7
 8017f5e:	d900      	bls.n	8017f62 <__ssputs_r+0x72>
 8017f60:	463e      	mov	r6, r7
 8017f62:	4632      	mov	r2, r6
 8017f64:	4641      	mov	r1, r8
 8017f66:	6820      	ldr	r0, [r4, #0]
 8017f68:	f000 f9c6 	bl	80182f8 <memmove>
 8017f6c:	68a3      	ldr	r3, [r4, #8]
 8017f6e:	2000      	movs	r0, #0
 8017f70:	1b9b      	subs	r3, r3, r6
 8017f72:	60a3      	str	r3, [r4, #8]
 8017f74:	6823      	ldr	r3, [r4, #0]
 8017f76:	4433      	add	r3, r6
 8017f78:	6023      	str	r3, [r4, #0]
 8017f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f7e:	462a      	mov	r2, r5
 8017f80:	f000 fa28 	bl	80183d4 <_realloc_r>
 8017f84:	4606      	mov	r6, r0
 8017f86:	2800      	cmp	r0, #0
 8017f88:	d1e0      	bne.n	8017f4c <__ssputs_r+0x5c>
 8017f8a:	6921      	ldr	r1, [r4, #16]
 8017f8c:	4650      	mov	r0, sl
 8017f8e:	f7ff fb27 	bl	80175e0 <_free_r>
 8017f92:	230c      	movs	r3, #12
 8017f94:	f04f 30ff 	mov.w	r0, #4294967295
 8017f98:	f8ca 3000 	str.w	r3, [sl]
 8017f9c:	89a3      	ldrh	r3, [r4, #12]
 8017f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fa2:	81a3      	strh	r3, [r4, #12]
 8017fa4:	e7e9      	b.n	8017f7a <__ssputs_r+0x8a>
	...

08017fa8 <_svfiprintf_r>:
 8017fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fac:	4698      	mov	r8, r3
 8017fae:	898b      	ldrh	r3, [r1, #12]
 8017fb0:	b09d      	sub	sp, #116	@ 0x74
 8017fb2:	4607      	mov	r7, r0
 8017fb4:	061b      	lsls	r3, r3, #24
 8017fb6:	460d      	mov	r5, r1
 8017fb8:	4614      	mov	r4, r2
 8017fba:	d510      	bpl.n	8017fde <_svfiprintf_r+0x36>
 8017fbc:	690b      	ldr	r3, [r1, #16]
 8017fbe:	b973      	cbnz	r3, 8017fde <_svfiprintf_r+0x36>
 8017fc0:	2140      	movs	r1, #64	@ 0x40
 8017fc2:	f7ff fb81 	bl	80176c8 <_malloc_r>
 8017fc6:	6028      	str	r0, [r5, #0]
 8017fc8:	6128      	str	r0, [r5, #16]
 8017fca:	b930      	cbnz	r0, 8017fda <_svfiprintf_r+0x32>
 8017fcc:	230c      	movs	r3, #12
 8017fce:	603b      	str	r3, [r7, #0]
 8017fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8017fd4:	b01d      	add	sp, #116	@ 0x74
 8017fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fda:	2340      	movs	r3, #64	@ 0x40
 8017fdc:	616b      	str	r3, [r5, #20]
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8017fe4:	f04f 0901 	mov.w	r9, #1
 8017fe8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 801818c <_svfiprintf_r+0x1e4>
 8017fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fee:	2320      	movs	r3, #32
 8017ff0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017ff4:	2330      	movs	r3, #48	@ 0x30
 8017ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017ffa:	4623      	mov	r3, r4
 8017ffc:	469a      	mov	sl, r3
 8017ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018002:	b10a      	cbz	r2, 8018008 <_svfiprintf_r+0x60>
 8018004:	2a25      	cmp	r2, #37	@ 0x25
 8018006:	d1f9      	bne.n	8017ffc <_svfiprintf_r+0x54>
 8018008:	ebba 0b04 	subs.w	fp, sl, r4
 801800c:	d00b      	beq.n	8018026 <_svfiprintf_r+0x7e>
 801800e:	465b      	mov	r3, fp
 8018010:	4622      	mov	r2, r4
 8018012:	4629      	mov	r1, r5
 8018014:	4638      	mov	r0, r7
 8018016:	f7ff ff6b 	bl	8017ef0 <__ssputs_r>
 801801a:	3001      	adds	r0, #1
 801801c:	f000 80a7 	beq.w	801816e <_svfiprintf_r+0x1c6>
 8018020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018022:	445a      	add	r2, fp
 8018024:	9209      	str	r2, [sp, #36]	@ 0x24
 8018026:	f89a 3000 	ldrb.w	r3, [sl]
 801802a:	2b00      	cmp	r3, #0
 801802c:	f000 809f 	beq.w	801816e <_svfiprintf_r+0x1c6>
 8018030:	2300      	movs	r3, #0
 8018032:	f04f 32ff 	mov.w	r2, #4294967295
 8018036:	f10a 0a01 	add.w	sl, sl, #1
 801803a:	9304      	str	r3, [sp, #16]
 801803c:	9307      	str	r3, [sp, #28]
 801803e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018042:	931a      	str	r3, [sp, #104]	@ 0x68
 8018044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018048:	4654      	mov	r4, sl
 801804a:	2205      	movs	r2, #5
 801804c:	484f      	ldr	r0, [pc, #316]	@ (801818c <_svfiprintf_r+0x1e4>)
 801804e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018052:	f7fe fc58 	bl	8016906 <memchr>
 8018056:	9a04      	ldr	r2, [sp, #16]
 8018058:	b9d8      	cbnz	r0, 8018092 <_svfiprintf_r+0xea>
 801805a:	06d0      	lsls	r0, r2, #27
 801805c:	bf44      	itt	mi
 801805e:	2320      	movmi	r3, #32
 8018060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018064:	0711      	lsls	r1, r2, #28
 8018066:	bf44      	itt	mi
 8018068:	232b      	movmi	r3, #43	@ 0x2b
 801806a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801806e:	f89a 3000 	ldrb.w	r3, [sl]
 8018072:	2b2a      	cmp	r3, #42	@ 0x2a
 8018074:	d015      	beq.n	80180a2 <_svfiprintf_r+0xfa>
 8018076:	9a07      	ldr	r2, [sp, #28]
 8018078:	4654      	mov	r4, sl
 801807a:	2000      	movs	r0, #0
 801807c:	f04f 0c0a 	mov.w	ip, #10
 8018080:	4621      	mov	r1, r4
 8018082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018086:	3b30      	subs	r3, #48	@ 0x30
 8018088:	2b09      	cmp	r3, #9
 801808a:	d94b      	bls.n	8018124 <_svfiprintf_r+0x17c>
 801808c:	b1b0      	cbz	r0, 80180bc <_svfiprintf_r+0x114>
 801808e:	9207      	str	r2, [sp, #28]
 8018090:	e014      	b.n	80180bc <_svfiprintf_r+0x114>
 8018092:	eba0 0308 	sub.w	r3, r0, r8
 8018096:	46a2      	mov	sl, r4
 8018098:	fa09 f303 	lsl.w	r3, r9, r3
 801809c:	4313      	orrs	r3, r2
 801809e:	9304      	str	r3, [sp, #16]
 80180a0:	e7d2      	b.n	8018048 <_svfiprintf_r+0xa0>
 80180a2:	9b03      	ldr	r3, [sp, #12]
 80180a4:	1d19      	adds	r1, r3, #4
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	9103      	str	r1, [sp, #12]
 80180ac:	bfbb      	ittet	lt
 80180ae:	425b      	neglt	r3, r3
 80180b0:	f042 0202 	orrlt.w	r2, r2, #2
 80180b4:	9307      	strge	r3, [sp, #28]
 80180b6:	9307      	strlt	r3, [sp, #28]
 80180b8:	bfb8      	it	lt
 80180ba:	9204      	strlt	r2, [sp, #16]
 80180bc:	7823      	ldrb	r3, [r4, #0]
 80180be:	2b2e      	cmp	r3, #46	@ 0x2e
 80180c0:	d10a      	bne.n	80180d8 <_svfiprintf_r+0x130>
 80180c2:	7863      	ldrb	r3, [r4, #1]
 80180c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80180c6:	d132      	bne.n	801812e <_svfiprintf_r+0x186>
 80180c8:	9b03      	ldr	r3, [sp, #12]
 80180ca:	3402      	adds	r4, #2
 80180cc:	1d1a      	adds	r2, r3, #4
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80180d4:	9203      	str	r2, [sp, #12]
 80180d6:	9305      	str	r3, [sp, #20]
 80180d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801819c <_svfiprintf_r+0x1f4>
 80180dc:	2203      	movs	r2, #3
 80180de:	7821      	ldrb	r1, [r4, #0]
 80180e0:	4650      	mov	r0, sl
 80180e2:	f7fe fc10 	bl	8016906 <memchr>
 80180e6:	b138      	cbz	r0, 80180f8 <_svfiprintf_r+0x150>
 80180e8:	eba0 000a 	sub.w	r0, r0, sl
 80180ec:	2240      	movs	r2, #64	@ 0x40
 80180ee:	9b04      	ldr	r3, [sp, #16]
 80180f0:	3401      	adds	r4, #1
 80180f2:	4082      	lsls	r2, r0
 80180f4:	4313      	orrs	r3, r2
 80180f6:	9304      	str	r3, [sp, #16]
 80180f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180fc:	2206      	movs	r2, #6
 80180fe:	4824      	ldr	r0, [pc, #144]	@ (8018190 <_svfiprintf_r+0x1e8>)
 8018100:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018104:	f7fe fbff 	bl	8016906 <memchr>
 8018108:	2800      	cmp	r0, #0
 801810a:	d036      	beq.n	801817a <_svfiprintf_r+0x1d2>
 801810c:	4b21      	ldr	r3, [pc, #132]	@ (8018194 <_svfiprintf_r+0x1ec>)
 801810e:	bb1b      	cbnz	r3, 8018158 <_svfiprintf_r+0x1b0>
 8018110:	9b03      	ldr	r3, [sp, #12]
 8018112:	3307      	adds	r3, #7
 8018114:	f023 0307 	bic.w	r3, r3, #7
 8018118:	3308      	adds	r3, #8
 801811a:	9303      	str	r3, [sp, #12]
 801811c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801811e:	4433      	add	r3, r6
 8018120:	9309      	str	r3, [sp, #36]	@ 0x24
 8018122:	e76a      	b.n	8017ffa <_svfiprintf_r+0x52>
 8018124:	fb0c 3202 	mla	r2, ip, r2, r3
 8018128:	460c      	mov	r4, r1
 801812a:	2001      	movs	r0, #1
 801812c:	e7a8      	b.n	8018080 <_svfiprintf_r+0xd8>
 801812e:	2300      	movs	r3, #0
 8018130:	3401      	adds	r4, #1
 8018132:	f04f 0c0a 	mov.w	ip, #10
 8018136:	4619      	mov	r1, r3
 8018138:	9305      	str	r3, [sp, #20]
 801813a:	4620      	mov	r0, r4
 801813c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018140:	3a30      	subs	r2, #48	@ 0x30
 8018142:	2a09      	cmp	r2, #9
 8018144:	d903      	bls.n	801814e <_svfiprintf_r+0x1a6>
 8018146:	2b00      	cmp	r3, #0
 8018148:	d0c6      	beq.n	80180d8 <_svfiprintf_r+0x130>
 801814a:	9105      	str	r1, [sp, #20]
 801814c:	e7c4      	b.n	80180d8 <_svfiprintf_r+0x130>
 801814e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018152:	4604      	mov	r4, r0
 8018154:	2301      	movs	r3, #1
 8018156:	e7f0      	b.n	801813a <_svfiprintf_r+0x192>
 8018158:	ab03      	add	r3, sp, #12
 801815a:	462a      	mov	r2, r5
 801815c:	a904      	add	r1, sp, #16
 801815e:	4638      	mov	r0, r7
 8018160:	9300      	str	r3, [sp, #0]
 8018162:	4b0d      	ldr	r3, [pc, #52]	@ (8018198 <_svfiprintf_r+0x1f0>)
 8018164:	f7fd fe6e 	bl	8015e44 <_printf_float>
 8018168:	1c42      	adds	r2, r0, #1
 801816a:	4606      	mov	r6, r0
 801816c:	d1d6      	bne.n	801811c <_svfiprintf_r+0x174>
 801816e:	89ab      	ldrh	r3, [r5, #12]
 8018170:	065b      	lsls	r3, r3, #25
 8018172:	f53f af2d 	bmi.w	8017fd0 <_svfiprintf_r+0x28>
 8018176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018178:	e72c      	b.n	8017fd4 <_svfiprintf_r+0x2c>
 801817a:	ab03      	add	r3, sp, #12
 801817c:	462a      	mov	r2, r5
 801817e:	a904      	add	r1, sp, #16
 8018180:	4638      	mov	r0, r7
 8018182:	9300      	str	r3, [sp, #0]
 8018184:	4b04      	ldr	r3, [pc, #16]	@ (8018198 <_svfiprintf_r+0x1f0>)
 8018186:	f7fe f8f9 	bl	801637c <_printf_i>
 801818a:	e7ed      	b.n	8018168 <_svfiprintf_r+0x1c0>
 801818c:	0801a708 	.word	0x0801a708
 8018190:	0801a712 	.word	0x0801a712
 8018194:	08015e45 	.word	0x08015e45
 8018198:	08017ef1 	.word	0x08017ef1
 801819c:	0801a70e 	.word	0x0801a70e

080181a0 <__sflush_r>:
 80181a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80181a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181a8:	0716      	lsls	r6, r2, #28
 80181aa:	4605      	mov	r5, r0
 80181ac:	460c      	mov	r4, r1
 80181ae:	d454      	bmi.n	801825a <__sflush_r+0xba>
 80181b0:	684b      	ldr	r3, [r1, #4]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	dc02      	bgt.n	80181bc <__sflush_r+0x1c>
 80181b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	dd48      	ble.n	801824e <__sflush_r+0xae>
 80181bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80181be:	2e00      	cmp	r6, #0
 80181c0:	d045      	beq.n	801824e <__sflush_r+0xae>
 80181c2:	2300      	movs	r3, #0
 80181c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80181c8:	682f      	ldr	r7, [r5, #0]
 80181ca:	6a21      	ldr	r1, [r4, #32]
 80181cc:	602b      	str	r3, [r5, #0]
 80181ce:	d030      	beq.n	8018232 <__sflush_r+0x92>
 80181d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80181d2:	89a3      	ldrh	r3, [r4, #12]
 80181d4:	0759      	lsls	r1, r3, #29
 80181d6:	d505      	bpl.n	80181e4 <__sflush_r+0x44>
 80181d8:	6863      	ldr	r3, [r4, #4]
 80181da:	1ad2      	subs	r2, r2, r3
 80181dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80181de:	b10b      	cbz	r3, 80181e4 <__sflush_r+0x44>
 80181e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80181e2:	1ad2      	subs	r2, r2, r3
 80181e4:	2300      	movs	r3, #0
 80181e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80181e8:	6a21      	ldr	r1, [r4, #32]
 80181ea:	4628      	mov	r0, r5
 80181ec:	47b0      	blx	r6
 80181ee:	1c43      	adds	r3, r0, #1
 80181f0:	89a3      	ldrh	r3, [r4, #12]
 80181f2:	d106      	bne.n	8018202 <__sflush_r+0x62>
 80181f4:	6829      	ldr	r1, [r5, #0]
 80181f6:	291d      	cmp	r1, #29
 80181f8:	d82b      	bhi.n	8018252 <__sflush_r+0xb2>
 80181fa:	4a2a      	ldr	r2, [pc, #168]	@ (80182a4 <__sflush_r+0x104>)
 80181fc:	410a      	asrs	r2, r1
 80181fe:	07d6      	lsls	r6, r2, #31
 8018200:	d427      	bmi.n	8018252 <__sflush_r+0xb2>
 8018202:	2200      	movs	r2, #0
 8018204:	04d9      	lsls	r1, r3, #19
 8018206:	6062      	str	r2, [r4, #4]
 8018208:	6922      	ldr	r2, [r4, #16]
 801820a:	6022      	str	r2, [r4, #0]
 801820c:	d504      	bpl.n	8018218 <__sflush_r+0x78>
 801820e:	1c42      	adds	r2, r0, #1
 8018210:	d101      	bne.n	8018216 <__sflush_r+0x76>
 8018212:	682b      	ldr	r3, [r5, #0]
 8018214:	b903      	cbnz	r3, 8018218 <__sflush_r+0x78>
 8018216:	6560      	str	r0, [r4, #84]	@ 0x54
 8018218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801821a:	602f      	str	r7, [r5, #0]
 801821c:	b1b9      	cbz	r1, 801824e <__sflush_r+0xae>
 801821e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018222:	4299      	cmp	r1, r3
 8018224:	d002      	beq.n	801822c <__sflush_r+0x8c>
 8018226:	4628      	mov	r0, r5
 8018228:	f7ff f9da 	bl	80175e0 <_free_r>
 801822c:	2300      	movs	r3, #0
 801822e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018230:	e00d      	b.n	801824e <__sflush_r+0xae>
 8018232:	2301      	movs	r3, #1
 8018234:	4628      	mov	r0, r5
 8018236:	47b0      	blx	r6
 8018238:	4602      	mov	r2, r0
 801823a:	1c50      	adds	r0, r2, #1
 801823c:	d1c9      	bne.n	80181d2 <__sflush_r+0x32>
 801823e:	682b      	ldr	r3, [r5, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d0c6      	beq.n	80181d2 <__sflush_r+0x32>
 8018244:	2b1d      	cmp	r3, #29
 8018246:	d001      	beq.n	801824c <__sflush_r+0xac>
 8018248:	2b16      	cmp	r3, #22
 801824a:	d11d      	bne.n	8018288 <__sflush_r+0xe8>
 801824c:	602f      	str	r7, [r5, #0]
 801824e:	2000      	movs	r0, #0
 8018250:	e021      	b.n	8018296 <__sflush_r+0xf6>
 8018252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018256:	b21b      	sxth	r3, r3
 8018258:	e01a      	b.n	8018290 <__sflush_r+0xf0>
 801825a:	690f      	ldr	r7, [r1, #16]
 801825c:	2f00      	cmp	r7, #0
 801825e:	d0f6      	beq.n	801824e <__sflush_r+0xae>
 8018260:	0793      	lsls	r3, r2, #30
 8018262:	680e      	ldr	r6, [r1, #0]
 8018264:	600f      	str	r7, [r1, #0]
 8018266:	bf0c      	ite	eq
 8018268:	694b      	ldreq	r3, [r1, #20]
 801826a:	2300      	movne	r3, #0
 801826c:	eba6 0807 	sub.w	r8, r6, r7
 8018270:	608b      	str	r3, [r1, #8]
 8018272:	f1b8 0f00 	cmp.w	r8, #0
 8018276:	ddea      	ble.n	801824e <__sflush_r+0xae>
 8018278:	4643      	mov	r3, r8
 801827a:	463a      	mov	r2, r7
 801827c:	6a21      	ldr	r1, [r4, #32]
 801827e:	4628      	mov	r0, r5
 8018280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018282:	47b0      	blx	r6
 8018284:	2800      	cmp	r0, #0
 8018286:	dc08      	bgt.n	801829a <__sflush_r+0xfa>
 8018288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801828c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018290:	f04f 30ff 	mov.w	r0, #4294967295
 8018294:	81a3      	strh	r3, [r4, #12]
 8018296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801829a:	4407      	add	r7, r0
 801829c:	eba8 0800 	sub.w	r8, r8, r0
 80182a0:	e7e7      	b.n	8018272 <__sflush_r+0xd2>
 80182a2:	bf00      	nop
 80182a4:	dfbffffe 	.word	0xdfbffffe

080182a8 <_fflush_r>:
 80182a8:	b538      	push	{r3, r4, r5, lr}
 80182aa:	690b      	ldr	r3, [r1, #16]
 80182ac:	4605      	mov	r5, r0
 80182ae:	460c      	mov	r4, r1
 80182b0:	b913      	cbnz	r3, 80182b8 <_fflush_r+0x10>
 80182b2:	2500      	movs	r5, #0
 80182b4:	4628      	mov	r0, r5
 80182b6:	bd38      	pop	{r3, r4, r5, pc}
 80182b8:	b118      	cbz	r0, 80182c2 <_fflush_r+0x1a>
 80182ba:	6a03      	ldr	r3, [r0, #32]
 80182bc:	b90b      	cbnz	r3, 80182c2 <_fflush_r+0x1a>
 80182be:	f7fe fa09 	bl	80166d4 <__sinit>
 80182c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d0f3      	beq.n	80182b2 <_fflush_r+0xa>
 80182ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80182cc:	07d0      	lsls	r0, r2, #31
 80182ce:	d404      	bmi.n	80182da <_fflush_r+0x32>
 80182d0:	0599      	lsls	r1, r3, #22
 80182d2:	d402      	bmi.n	80182da <_fflush_r+0x32>
 80182d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182d6:	f7fe fb14 	bl	8016902 <__retarget_lock_acquire_recursive>
 80182da:	4628      	mov	r0, r5
 80182dc:	4621      	mov	r1, r4
 80182de:	f7ff ff5f 	bl	80181a0 <__sflush_r>
 80182e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80182e4:	4605      	mov	r5, r0
 80182e6:	07da      	lsls	r2, r3, #31
 80182e8:	d4e4      	bmi.n	80182b4 <_fflush_r+0xc>
 80182ea:	89a3      	ldrh	r3, [r4, #12]
 80182ec:	059b      	lsls	r3, r3, #22
 80182ee:	d4e1      	bmi.n	80182b4 <_fflush_r+0xc>
 80182f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182f2:	f7fe fb07 	bl	8016904 <__retarget_lock_release_recursive>
 80182f6:	e7dd      	b.n	80182b4 <_fflush_r+0xc>

080182f8 <memmove>:
 80182f8:	4288      	cmp	r0, r1
 80182fa:	b510      	push	{r4, lr}
 80182fc:	eb01 0402 	add.w	r4, r1, r2
 8018300:	d902      	bls.n	8018308 <memmove+0x10>
 8018302:	4284      	cmp	r4, r0
 8018304:	4623      	mov	r3, r4
 8018306:	d807      	bhi.n	8018318 <memmove+0x20>
 8018308:	1e43      	subs	r3, r0, #1
 801830a:	42a1      	cmp	r1, r4
 801830c:	d008      	beq.n	8018320 <memmove+0x28>
 801830e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018316:	e7f8      	b.n	801830a <memmove+0x12>
 8018318:	4402      	add	r2, r0
 801831a:	4601      	mov	r1, r0
 801831c:	428a      	cmp	r2, r1
 801831e:	d100      	bne.n	8018322 <memmove+0x2a>
 8018320:	bd10      	pop	{r4, pc}
 8018322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801832a:	e7f7      	b.n	801831c <memmove+0x24>

0801832c <_sbrk_r>:
 801832c:	b538      	push	{r3, r4, r5, lr}
 801832e:	2300      	movs	r3, #0
 8018330:	4d05      	ldr	r5, [pc, #20]	@ (8018348 <_sbrk_r+0x1c>)
 8018332:	4604      	mov	r4, r0
 8018334:	4608      	mov	r0, r1
 8018336:	602b      	str	r3, [r5, #0]
 8018338:	f7ed f8fc 	bl	8005534 <_sbrk>
 801833c:	1c43      	adds	r3, r0, #1
 801833e:	d102      	bne.n	8018346 <_sbrk_r+0x1a>
 8018340:	682b      	ldr	r3, [r5, #0]
 8018342:	b103      	cbz	r3, 8018346 <_sbrk_r+0x1a>
 8018344:	6023      	str	r3, [r4, #0]
 8018346:	bd38      	pop	{r3, r4, r5, pc}
 8018348:	2002a39c 	.word	0x2002a39c

0801834c <__assert_func>:
 801834c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801834e:	4614      	mov	r4, r2
 8018350:	461a      	mov	r2, r3
 8018352:	4b09      	ldr	r3, [pc, #36]	@ (8018378 <__assert_func+0x2c>)
 8018354:	4605      	mov	r5, r0
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	68d8      	ldr	r0, [r3, #12]
 801835a:	b954      	cbnz	r4, 8018372 <__assert_func+0x26>
 801835c:	4b07      	ldr	r3, [pc, #28]	@ (801837c <__assert_func+0x30>)
 801835e:	461c      	mov	r4, r3
 8018360:	9100      	str	r1, [sp, #0]
 8018362:	4907      	ldr	r1, [pc, #28]	@ (8018380 <__assert_func+0x34>)
 8018364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018368:	462b      	mov	r3, r5
 801836a:	f000 f86f 	bl	801844c <fiprintf>
 801836e:	f000 f87f 	bl	8018470 <abort>
 8018372:	4b04      	ldr	r3, [pc, #16]	@ (8018384 <__assert_func+0x38>)
 8018374:	e7f4      	b.n	8018360 <__assert_func+0x14>
 8018376:	bf00      	nop
 8018378:	2000013c 	.word	0x2000013c
 801837c:	0801a75e 	.word	0x0801a75e
 8018380:	0801a730 	.word	0x0801a730
 8018384:	0801a723 	.word	0x0801a723

08018388 <_calloc_r>:
 8018388:	b570      	push	{r4, r5, r6, lr}
 801838a:	fba1 5402 	umull	r5, r4, r1, r2
 801838e:	b93c      	cbnz	r4, 80183a0 <_calloc_r+0x18>
 8018390:	4629      	mov	r1, r5
 8018392:	f7ff f999 	bl	80176c8 <_malloc_r>
 8018396:	4606      	mov	r6, r0
 8018398:	b928      	cbnz	r0, 80183a6 <_calloc_r+0x1e>
 801839a:	2600      	movs	r6, #0
 801839c:	4630      	mov	r0, r6
 801839e:	bd70      	pop	{r4, r5, r6, pc}
 80183a0:	220c      	movs	r2, #12
 80183a2:	6002      	str	r2, [r0, #0]
 80183a4:	e7f9      	b.n	801839a <_calloc_r+0x12>
 80183a6:	462a      	mov	r2, r5
 80183a8:	4621      	mov	r1, r4
 80183aa:	f7fe fa2c 	bl	8016806 <memset>
 80183ae:	e7f5      	b.n	801839c <_calloc_r+0x14>

080183b0 <__ascii_mbtowc>:
 80183b0:	b082      	sub	sp, #8
 80183b2:	b901      	cbnz	r1, 80183b6 <__ascii_mbtowc+0x6>
 80183b4:	a901      	add	r1, sp, #4
 80183b6:	b142      	cbz	r2, 80183ca <__ascii_mbtowc+0x1a>
 80183b8:	b14b      	cbz	r3, 80183ce <__ascii_mbtowc+0x1e>
 80183ba:	7813      	ldrb	r3, [r2, #0]
 80183bc:	600b      	str	r3, [r1, #0]
 80183be:	7812      	ldrb	r2, [r2, #0]
 80183c0:	1e10      	subs	r0, r2, #0
 80183c2:	bf18      	it	ne
 80183c4:	2001      	movne	r0, #1
 80183c6:	b002      	add	sp, #8
 80183c8:	4770      	bx	lr
 80183ca:	4610      	mov	r0, r2
 80183cc:	e7fb      	b.n	80183c6 <__ascii_mbtowc+0x16>
 80183ce:	f06f 0001 	mvn.w	r0, #1
 80183d2:	e7f8      	b.n	80183c6 <__ascii_mbtowc+0x16>

080183d4 <_realloc_r>:
 80183d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183d8:	4680      	mov	r8, r0
 80183da:	4615      	mov	r5, r2
 80183dc:	460c      	mov	r4, r1
 80183de:	b921      	cbnz	r1, 80183ea <_realloc_r+0x16>
 80183e0:	4611      	mov	r1, r2
 80183e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183e6:	f7ff b96f 	b.w	80176c8 <_malloc_r>
 80183ea:	b92a      	cbnz	r2, 80183f8 <_realloc_r+0x24>
 80183ec:	f7ff f8f8 	bl	80175e0 <_free_r>
 80183f0:	2400      	movs	r4, #0
 80183f2:	4620      	mov	r0, r4
 80183f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183f8:	f000 f841 	bl	801847e <_malloc_usable_size_r>
 80183fc:	4285      	cmp	r5, r0
 80183fe:	4606      	mov	r6, r0
 8018400:	d802      	bhi.n	8018408 <_realloc_r+0x34>
 8018402:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018406:	d8f4      	bhi.n	80183f2 <_realloc_r+0x1e>
 8018408:	4629      	mov	r1, r5
 801840a:	4640      	mov	r0, r8
 801840c:	f7ff f95c 	bl	80176c8 <_malloc_r>
 8018410:	4607      	mov	r7, r0
 8018412:	2800      	cmp	r0, #0
 8018414:	d0ec      	beq.n	80183f0 <_realloc_r+0x1c>
 8018416:	42b5      	cmp	r5, r6
 8018418:	462a      	mov	r2, r5
 801841a:	4621      	mov	r1, r4
 801841c:	bf28      	it	cs
 801841e:	4632      	movcs	r2, r6
 8018420:	f7fe fa7f 	bl	8016922 <memcpy>
 8018424:	4621      	mov	r1, r4
 8018426:	4640      	mov	r0, r8
 8018428:	463c      	mov	r4, r7
 801842a:	f7ff f8d9 	bl	80175e0 <_free_r>
 801842e:	e7e0      	b.n	80183f2 <_realloc_r+0x1e>

08018430 <__ascii_wctomb>:
 8018430:	4603      	mov	r3, r0
 8018432:	4608      	mov	r0, r1
 8018434:	b141      	cbz	r1, 8018448 <__ascii_wctomb+0x18>
 8018436:	2aff      	cmp	r2, #255	@ 0xff
 8018438:	d904      	bls.n	8018444 <__ascii_wctomb+0x14>
 801843a:	228a      	movs	r2, #138	@ 0x8a
 801843c:	f04f 30ff 	mov.w	r0, #4294967295
 8018440:	601a      	str	r2, [r3, #0]
 8018442:	4770      	bx	lr
 8018444:	2001      	movs	r0, #1
 8018446:	700a      	strb	r2, [r1, #0]
 8018448:	4770      	bx	lr
	...

0801844c <fiprintf>:
 801844c:	b40e      	push	{r1, r2, r3}
 801844e:	b503      	push	{r0, r1, lr}
 8018450:	ab03      	add	r3, sp, #12
 8018452:	4601      	mov	r1, r0
 8018454:	4805      	ldr	r0, [pc, #20]	@ (801846c <fiprintf+0x20>)
 8018456:	f853 2b04 	ldr.w	r2, [r3], #4
 801845a:	6800      	ldr	r0, [r0, #0]
 801845c:	9301      	str	r3, [sp, #4]
 801845e:	f000 f83f 	bl	80184e0 <_vfiprintf_r>
 8018462:	b002      	add	sp, #8
 8018464:	f85d eb04 	ldr.w	lr, [sp], #4
 8018468:	b003      	add	sp, #12
 801846a:	4770      	bx	lr
 801846c:	2000013c 	.word	0x2000013c

08018470 <abort>:
 8018470:	2006      	movs	r0, #6
 8018472:	b508      	push	{r3, lr}
 8018474:	f000 fa08 	bl	8018888 <raise>
 8018478:	2001      	movs	r0, #1
 801847a:	f7ec ffe2 	bl	8005442 <_exit>

0801847e <_malloc_usable_size_r>:
 801847e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018482:	1f18      	subs	r0, r3, #4
 8018484:	2b00      	cmp	r3, #0
 8018486:	bfbc      	itt	lt
 8018488:	580b      	ldrlt	r3, [r1, r0]
 801848a:	18c0      	addlt	r0, r0, r3
 801848c:	4770      	bx	lr

0801848e <__sfputc_r>:
 801848e:	6893      	ldr	r3, [r2, #8]
 8018490:	3b01      	subs	r3, #1
 8018492:	2b00      	cmp	r3, #0
 8018494:	6093      	str	r3, [r2, #8]
 8018496:	b410      	push	{r4}
 8018498:	da08      	bge.n	80184ac <__sfputc_r+0x1e>
 801849a:	6994      	ldr	r4, [r2, #24]
 801849c:	42a3      	cmp	r3, r4
 801849e:	db01      	blt.n	80184a4 <__sfputc_r+0x16>
 80184a0:	290a      	cmp	r1, #10
 80184a2:	d103      	bne.n	80184ac <__sfputc_r+0x1e>
 80184a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184a8:	f000 b932 	b.w	8018710 <__swbuf_r>
 80184ac:	6813      	ldr	r3, [r2, #0]
 80184ae:	1c58      	adds	r0, r3, #1
 80184b0:	6010      	str	r0, [r2, #0]
 80184b2:	4608      	mov	r0, r1
 80184b4:	7019      	strb	r1, [r3, #0]
 80184b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184ba:	4770      	bx	lr

080184bc <__sfputs_r>:
 80184bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184be:	4606      	mov	r6, r0
 80184c0:	460f      	mov	r7, r1
 80184c2:	4614      	mov	r4, r2
 80184c4:	18d5      	adds	r5, r2, r3
 80184c6:	42ac      	cmp	r4, r5
 80184c8:	d101      	bne.n	80184ce <__sfputs_r+0x12>
 80184ca:	2000      	movs	r0, #0
 80184cc:	e007      	b.n	80184de <__sfputs_r+0x22>
 80184ce:	463a      	mov	r2, r7
 80184d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184d4:	4630      	mov	r0, r6
 80184d6:	f7ff ffda 	bl	801848e <__sfputc_r>
 80184da:	1c43      	adds	r3, r0, #1
 80184dc:	d1f3      	bne.n	80184c6 <__sfputs_r+0xa>
 80184de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080184e0 <_vfiprintf_r>:
 80184e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e4:	460d      	mov	r5, r1
 80184e6:	b09d      	sub	sp, #116	@ 0x74
 80184e8:	4614      	mov	r4, r2
 80184ea:	4698      	mov	r8, r3
 80184ec:	4606      	mov	r6, r0
 80184ee:	b118      	cbz	r0, 80184f8 <_vfiprintf_r+0x18>
 80184f0:	6a03      	ldr	r3, [r0, #32]
 80184f2:	b90b      	cbnz	r3, 80184f8 <_vfiprintf_r+0x18>
 80184f4:	f7fe f8ee 	bl	80166d4 <__sinit>
 80184f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80184fa:	07d9      	lsls	r1, r3, #31
 80184fc:	d405      	bmi.n	801850a <_vfiprintf_r+0x2a>
 80184fe:	89ab      	ldrh	r3, [r5, #12]
 8018500:	059a      	lsls	r2, r3, #22
 8018502:	d402      	bmi.n	801850a <_vfiprintf_r+0x2a>
 8018504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018506:	f7fe f9fc 	bl	8016902 <__retarget_lock_acquire_recursive>
 801850a:	89ab      	ldrh	r3, [r5, #12]
 801850c:	071b      	lsls	r3, r3, #28
 801850e:	d501      	bpl.n	8018514 <_vfiprintf_r+0x34>
 8018510:	692b      	ldr	r3, [r5, #16]
 8018512:	b99b      	cbnz	r3, 801853c <_vfiprintf_r+0x5c>
 8018514:	4629      	mov	r1, r5
 8018516:	4630      	mov	r0, r6
 8018518:	f000 f938 	bl	801878c <__swsetup_r>
 801851c:	b170      	cbz	r0, 801853c <_vfiprintf_r+0x5c>
 801851e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018520:	07dc      	lsls	r4, r3, #31
 8018522:	d504      	bpl.n	801852e <_vfiprintf_r+0x4e>
 8018524:	f04f 30ff 	mov.w	r0, #4294967295
 8018528:	b01d      	add	sp, #116	@ 0x74
 801852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801852e:	89ab      	ldrh	r3, [r5, #12]
 8018530:	0598      	lsls	r0, r3, #22
 8018532:	d4f7      	bmi.n	8018524 <_vfiprintf_r+0x44>
 8018534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018536:	f7fe f9e5 	bl	8016904 <__retarget_lock_release_recursive>
 801853a:	e7f3      	b.n	8018524 <_vfiprintf_r+0x44>
 801853c:	2300      	movs	r3, #0
 801853e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018542:	f04f 0901 	mov.w	r9, #1
 8018546:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80186fc <_vfiprintf_r+0x21c>
 801854a:	9309      	str	r3, [sp, #36]	@ 0x24
 801854c:	2320      	movs	r3, #32
 801854e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018552:	2330      	movs	r3, #48	@ 0x30
 8018554:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018558:	4623      	mov	r3, r4
 801855a:	469a      	mov	sl, r3
 801855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018560:	b10a      	cbz	r2, 8018566 <_vfiprintf_r+0x86>
 8018562:	2a25      	cmp	r2, #37	@ 0x25
 8018564:	d1f9      	bne.n	801855a <_vfiprintf_r+0x7a>
 8018566:	ebba 0b04 	subs.w	fp, sl, r4
 801856a:	d00b      	beq.n	8018584 <_vfiprintf_r+0xa4>
 801856c:	465b      	mov	r3, fp
 801856e:	4622      	mov	r2, r4
 8018570:	4629      	mov	r1, r5
 8018572:	4630      	mov	r0, r6
 8018574:	f7ff ffa2 	bl	80184bc <__sfputs_r>
 8018578:	3001      	adds	r0, #1
 801857a:	f000 80a7 	beq.w	80186cc <_vfiprintf_r+0x1ec>
 801857e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018580:	445a      	add	r2, fp
 8018582:	9209      	str	r2, [sp, #36]	@ 0x24
 8018584:	f89a 3000 	ldrb.w	r3, [sl]
 8018588:	2b00      	cmp	r3, #0
 801858a:	f000 809f 	beq.w	80186cc <_vfiprintf_r+0x1ec>
 801858e:	2300      	movs	r3, #0
 8018590:	f04f 32ff 	mov.w	r2, #4294967295
 8018594:	f10a 0a01 	add.w	sl, sl, #1
 8018598:	9304      	str	r3, [sp, #16]
 801859a:	9307      	str	r3, [sp, #28]
 801859c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80185a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80185a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185a6:	4654      	mov	r4, sl
 80185a8:	2205      	movs	r2, #5
 80185aa:	4854      	ldr	r0, [pc, #336]	@ (80186fc <_vfiprintf_r+0x21c>)
 80185ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185b0:	f7fe f9a9 	bl	8016906 <memchr>
 80185b4:	9a04      	ldr	r2, [sp, #16]
 80185b6:	b9d8      	cbnz	r0, 80185f0 <_vfiprintf_r+0x110>
 80185b8:	06d1      	lsls	r1, r2, #27
 80185ba:	bf44      	itt	mi
 80185bc:	2320      	movmi	r3, #32
 80185be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80185c2:	0713      	lsls	r3, r2, #28
 80185c4:	bf44      	itt	mi
 80185c6:	232b      	movmi	r3, #43	@ 0x2b
 80185c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80185cc:	f89a 3000 	ldrb.w	r3, [sl]
 80185d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80185d2:	d015      	beq.n	8018600 <_vfiprintf_r+0x120>
 80185d4:	9a07      	ldr	r2, [sp, #28]
 80185d6:	4654      	mov	r4, sl
 80185d8:	2000      	movs	r0, #0
 80185da:	f04f 0c0a 	mov.w	ip, #10
 80185de:	4621      	mov	r1, r4
 80185e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80185e4:	3b30      	subs	r3, #48	@ 0x30
 80185e6:	2b09      	cmp	r3, #9
 80185e8:	d94b      	bls.n	8018682 <_vfiprintf_r+0x1a2>
 80185ea:	b1b0      	cbz	r0, 801861a <_vfiprintf_r+0x13a>
 80185ec:	9207      	str	r2, [sp, #28]
 80185ee:	e014      	b.n	801861a <_vfiprintf_r+0x13a>
 80185f0:	eba0 0308 	sub.w	r3, r0, r8
 80185f4:	46a2      	mov	sl, r4
 80185f6:	fa09 f303 	lsl.w	r3, r9, r3
 80185fa:	4313      	orrs	r3, r2
 80185fc:	9304      	str	r3, [sp, #16]
 80185fe:	e7d2      	b.n	80185a6 <_vfiprintf_r+0xc6>
 8018600:	9b03      	ldr	r3, [sp, #12]
 8018602:	1d19      	adds	r1, r3, #4
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	2b00      	cmp	r3, #0
 8018608:	9103      	str	r1, [sp, #12]
 801860a:	bfbb      	ittet	lt
 801860c:	425b      	neglt	r3, r3
 801860e:	f042 0202 	orrlt.w	r2, r2, #2
 8018612:	9307      	strge	r3, [sp, #28]
 8018614:	9307      	strlt	r3, [sp, #28]
 8018616:	bfb8      	it	lt
 8018618:	9204      	strlt	r2, [sp, #16]
 801861a:	7823      	ldrb	r3, [r4, #0]
 801861c:	2b2e      	cmp	r3, #46	@ 0x2e
 801861e:	d10a      	bne.n	8018636 <_vfiprintf_r+0x156>
 8018620:	7863      	ldrb	r3, [r4, #1]
 8018622:	2b2a      	cmp	r3, #42	@ 0x2a
 8018624:	d132      	bne.n	801868c <_vfiprintf_r+0x1ac>
 8018626:	9b03      	ldr	r3, [sp, #12]
 8018628:	3402      	adds	r4, #2
 801862a:	1d1a      	adds	r2, r3, #4
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018632:	9203      	str	r2, [sp, #12]
 8018634:	9305      	str	r3, [sp, #20]
 8018636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801870c <_vfiprintf_r+0x22c>
 801863a:	2203      	movs	r2, #3
 801863c:	7821      	ldrb	r1, [r4, #0]
 801863e:	4650      	mov	r0, sl
 8018640:	f7fe f961 	bl	8016906 <memchr>
 8018644:	b138      	cbz	r0, 8018656 <_vfiprintf_r+0x176>
 8018646:	eba0 000a 	sub.w	r0, r0, sl
 801864a:	2240      	movs	r2, #64	@ 0x40
 801864c:	9b04      	ldr	r3, [sp, #16]
 801864e:	3401      	adds	r4, #1
 8018650:	4082      	lsls	r2, r0
 8018652:	4313      	orrs	r3, r2
 8018654:	9304      	str	r3, [sp, #16]
 8018656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801865a:	2206      	movs	r2, #6
 801865c:	4828      	ldr	r0, [pc, #160]	@ (8018700 <_vfiprintf_r+0x220>)
 801865e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018662:	f7fe f950 	bl	8016906 <memchr>
 8018666:	2800      	cmp	r0, #0
 8018668:	d03f      	beq.n	80186ea <_vfiprintf_r+0x20a>
 801866a:	4b26      	ldr	r3, [pc, #152]	@ (8018704 <_vfiprintf_r+0x224>)
 801866c:	bb1b      	cbnz	r3, 80186b6 <_vfiprintf_r+0x1d6>
 801866e:	9b03      	ldr	r3, [sp, #12]
 8018670:	3307      	adds	r3, #7
 8018672:	f023 0307 	bic.w	r3, r3, #7
 8018676:	3308      	adds	r3, #8
 8018678:	9303      	str	r3, [sp, #12]
 801867a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801867c:	443b      	add	r3, r7
 801867e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018680:	e76a      	b.n	8018558 <_vfiprintf_r+0x78>
 8018682:	fb0c 3202 	mla	r2, ip, r2, r3
 8018686:	460c      	mov	r4, r1
 8018688:	2001      	movs	r0, #1
 801868a:	e7a8      	b.n	80185de <_vfiprintf_r+0xfe>
 801868c:	2300      	movs	r3, #0
 801868e:	3401      	adds	r4, #1
 8018690:	f04f 0c0a 	mov.w	ip, #10
 8018694:	4619      	mov	r1, r3
 8018696:	9305      	str	r3, [sp, #20]
 8018698:	4620      	mov	r0, r4
 801869a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801869e:	3a30      	subs	r2, #48	@ 0x30
 80186a0:	2a09      	cmp	r2, #9
 80186a2:	d903      	bls.n	80186ac <_vfiprintf_r+0x1cc>
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d0c6      	beq.n	8018636 <_vfiprintf_r+0x156>
 80186a8:	9105      	str	r1, [sp, #20]
 80186aa:	e7c4      	b.n	8018636 <_vfiprintf_r+0x156>
 80186ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80186b0:	4604      	mov	r4, r0
 80186b2:	2301      	movs	r3, #1
 80186b4:	e7f0      	b.n	8018698 <_vfiprintf_r+0x1b8>
 80186b6:	ab03      	add	r3, sp, #12
 80186b8:	462a      	mov	r2, r5
 80186ba:	a904      	add	r1, sp, #16
 80186bc:	4630      	mov	r0, r6
 80186be:	9300      	str	r3, [sp, #0]
 80186c0:	4b11      	ldr	r3, [pc, #68]	@ (8018708 <_vfiprintf_r+0x228>)
 80186c2:	f7fd fbbf 	bl	8015e44 <_printf_float>
 80186c6:	4607      	mov	r7, r0
 80186c8:	1c78      	adds	r0, r7, #1
 80186ca:	d1d6      	bne.n	801867a <_vfiprintf_r+0x19a>
 80186cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80186ce:	07d9      	lsls	r1, r3, #31
 80186d0:	d405      	bmi.n	80186de <_vfiprintf_r+0x1fe>
 80186d2:	89ab      	ldrh	r3, [r5, #12]
 80186d4:	059a      	lsls	r2, r3, #22
 80186d6:	d402      	bmi.n	80186de <_vfiprintf_r+0x1fe>
 80186d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80186da:	f7fe f913 	bl	8016904 <__retarget_lock_release_recursive>
 80186de:	89ab      	ldrh	r3, [r5, #12]
 80186e0:	065b      	lsls	r3, r3, #25
 80186e2:	f53f af1f 	bmi.w	8018524 <_vfiprintf_r+0x44>
 80186e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80186e8:	e71e      	b.n	8018528 <_vfiprintf_r+0x48>
 80186ea:	ab03      	add	r3, sp, #12
 80186ec:	462a      	mov	r2, r5
 80186ee:	a904      	add	r1, sp, #16
 80186f0:	4630      	mov	r0, r6
 80186f2:	9300      	str	r3, [sp, #0]
 80186f4:	4b04      	ldr	r3, [pc, #16]	@ (8018708 <_vfiprintf_r+0x228>)
 80186f6:	f7fd fe41 	bl	801637c <_printf_i>
 80186fa:	e7e4      	b.n	80186c6 <_vfiprintf_r+0x1e6>
 80186fc:	0801a708 	.word	0x0801a708
 8018700:	0801a712 	.word	0x0801a712
 8018704:	08015e45 	.word	0x08015e45
 8018708:	080184bd 	.word	0x080184bd
 801870c:	0801a70e 	.word	0x0801a70e

08018710 <__swbuf_r>:
 8018710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018712:	460e      	mov	r6, r1
 8018714:	4614      	mov	r4, r2
 8018716:	4605      	mov	r5, r0
 8018718:	b118      	cbz	r0, 8018722 <__swbuf_r+0x12>
 801871a:	6a03      	ldr	r3, [r0, #32]
 801871c:	b90b      	cbnz	r3, 8018722 <__swbuf_r+0x12>
 801871e:	f7fd ffd9 	bl	80166d4 <__sinit>
 8018722:	69a3      	ldr	r3, [r4, #24]
 8018724:	60a3      	str	r3, [r4, #8]
 8018726:	89a3      	ldrh	r3, [r4, #12]
 8018728:	071a      	lsls	r2, r3, #28
 801872a:	d501      	bpl.n	8018730 <__swbuf_r+0x20>
 801872c:	6923      	ldr	r3, [r4, #16]
 801872e:	b943      	cbnz	r3, 8018742 <__swbuf_r+0x32>
 8018730:	4621      	mov	r1, r4
 8018732:	4628      	mov	r0, r5
 8018734:	f000 f82a 	bl	801878c <__swsetup_r>
 8018738:	b118      	cbz	r0, 8018742 <__swbuf_r+0x32>
 801873a:	f04f 37ff 	mov.w	r7, #4294967295
 801873e:	4638      	mov	r0, r7
 8018740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018742:	6823      	ldr	r3, [r4, #0]
 8018744:	b2f6      	uxtb	r6, r6
 8018746:	6922      	ldr	r2, [r4, #16]
 8018748:	4637      	mov	r7, r6
 801874a:	1a98      	subs	r0, r3, r2
 801874c:	6963      	ldr	r3, [r4, #20]
 801874e:	4283      	cmp	r3, r0
 8018750:	dc05      	bgt.n	801875e <__swbuf_r+0x4e>
 8018752:	4621      	mov	r1, r4
 8018754:	4628      	mov	r0, r5
 8018756:	f7ff fda7 	bl	80182a8 <_fflush_r>
 801875a:	2800      	cmp	r0, #0
 801875c:	d1ed      	bne.n	801873a <__swbuf_r+0x2a>
 801875e:	68a3      	ldr	r3, [r4, #8]
 8018760:	3b01      	subs	r3, #1
 8018762:	60a3      	str	r3, [r4, #8]
 8018764:	6823      	ldr	r3, [r4, #0]
 8018766:	1c5a      	adds	r2, r3, #1
 8018768:	6022      	str	r2, [r4, #0]
 801876a:	701e      	strb	r6, [r3, #0]
 801876c:	1c43      	adds	r3, r0, #1
 801876e:	6962      	ldr	r2, [r4, #20]
 8018770:	429a      	cmp	r2, r3
 8018772:	d004      	beq.n	801877e <__swbuf_r+0x6e>
 8018774:	89a3      	ldrh	r3, [r4, #12]
 8018776:	07db      	lsls	r3, r3, #31
 8018778:	d5e1      	bpl.n	801873e <__swbuf_r+0x2e>
 801877a:	2e0a      	cmp	r6, #10
 801877c:	d1df      	bne.n	801873e <__swbuf_r+0x2e>
 801877e:	4621      	mov	r1, r4
 8018780:	4628      	mov	r0, r5
 8018782:	f7ff fd91 	bl	80182a8 <_fflush_r>
 8018786:	2800      	cmp	r0, #0
 8018788:	d0d9      	beq.n	801873e <__swbuf_r+0x2e>
 801878a:	e7d6      	b.n	801873a <__swbuf_r+0x2a>

0801878c <__swsetup_r>:
 801878c:	b538      	push	{r3, r4, r5, lr}
 801878e:	4b29      	ldr	r3, [pc, #164]	@ (8018834 <__swsetup_r+0xa8>)
 8018790:	4605      	mov	r5, r0
 8018792:	460c      	mov	r4, r1
 8018794:	6818      	ldr	r0, [r3, #0]
 8018796:	b118      	cbz	r0, 80187a0 <__swsetup_r+0x14>
 8018798:	6a03      	ldr	r3, [r0, #32]
 801879a:	b90b      	cbnz	r3, 80187a0 <__swsetup_r+0x14>
 801879c:	f7fd ff9a 	bl	80166d4 <__sinit>
 80187a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187a4:	0719      	lsls	r1, r3, #28
 80187a6:	d422      	bmi.n	80187ee <__swsetup_r+0x62>
 80187a8:	06da      	lsls	r2, r3, #27
 80187aa:	d407      	bmi.n	80187bc <__swsetup_r+0x30>
 80187ac:	2209      	movs	r2, #9
 80187ae:	602a      	str	r2, [r5, #0]
 80187b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187b4:	f04f 30ff 	mov.w	r0, #4294967295
 80187b8:	81a3      	strh	r3, [r4, #12]
 80187ba:	e033      	b.n	8018824 <__swsetup_r+0x98>
 80187bc:	0758      	lsls	r0, r3, #29
 80187be:	d512      	bpl.n	80187e6 <__swsetup_r+0x5a>
 80187c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80187c2:	b141      	cbz	r1, 80187d6 <__swsetup_r+0x4a>
 80187c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80187c8:	4299      	cmp	r1, r3
 80187ca:	d002      	beq.n	80187d2 <__swsetup_r+0x46>
 80187cc:	4628      	mov	r0, r5
 80187ce:	f7fe ff07 	bl	80175e0 <_free_r>
 80187d2:	2300      	movs	r3, #0
 80187d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80187d6:	89a3      	ldrh	r3, [r4, #12]
 80187d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80187dc:	81a3      	strh	r3, [r4, #12]
 80187de:	2300      	movs	r3, #0
 80187e0:	6063      	str	r3, [r4, #4]
 80187e2:	6923      	ldr	r3, [r4, #16]
 80187e4:	6023      	str	r3, [r4, #0]
 80187e6:	89a3      	ldrh	r3, [r4, #12]
 80187e8:	f043 0308 	orr.w	r3, r3, #8
 80187ec:	81a3      	strh	r3, [r4, #12]
 80187ee:	6923      	ldr	r3, [r4, #16]
 80187f0:	b94b      	cbnz	r3, 8018806 <__swsetup_r+0x7a>
 80187f2:	89a3      	ldrh	r3, [r4, #12]
 80187f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80187f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187fc:	d003      	beq.n	8018806 <__swsetup_r+0x7a>
 80187fe:	4621      	mov	r1, r4
 8018800:	4628      	mov	r0, r5
 8018802:	f000 f882 	bl	801890a <__smakebuf_r>
 8018806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801880a:	f013 0201 	ands.w	r2, r3, #1
 801880e:	d00a      	beq.n	8018826 <__swsetup_r+0x9a>
 8018810:	2200      	movs	r2, #0
 8018812:	60a2      	str	r2, [r4, #8]
 8018814:	6962      	ldr	r2, [r4, #20]
 8018816:	4252      	negs	r2, r2
 8018818:	61a2      	str	r2, [r4, #24]
 801881a:	6922      	ldr	r2, [r4, #16]
 801881c:	b942      	cbnz	r2, 8018830 <__swsetup_r+0xa4>
 801881e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018822:	d1c5      	bne.n	80187b0 <__swsetup_r+0x24>
 8018824:	bd38      	pop	{r3, r4, r5, pc}
 8018826:	0799      	lsls	r1, r3, #30
 8018828:	bf58      	it	pl
 801882a:	6962      	ldrpl	r2, [r4, #20]
 801882c:	60a2      	str	r2, [r4, #8]
 801882e:	e7f4      	b.n	801881a <__swsetup_r+0x8e>
 8018830:	2000      	movs	r0, #0
 8018832:	e7f7      	b.n	8018824 <__swsetup_r+0x98>
 8018834:	2000013c 	.word	0x2000013c

08018838 <_raise_r>:
 8018838:	291f      	cmp	r1, #31
 801883a:	b538      	push	{r3, r4, r5, lr}
 801883c:	4605      	mov	r5, r0
 801883e:	460c      	mov	r4, r1
 8018840:	d904      	bls.n	801884c <_raise_r+0x14>
 8018842:	2316      	movs	r3, #22
 8018844:	6003      	str	r3, [r0, #0]
 8018846:	f04f 30ff 	mov.w	r0, #4294967295
 801884a:	bd38      	pop	{r3, r4, r5, pc}
 801884c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801884e:	b112      	cbz	r2, 8018856 <_raise_r+0x1e>
 8018850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018854:	b94b      	cbnz	r3, 801886a <_raise_r+0x32>
 8018856:	4628      	mov	r0, r5
 8018858:	f000 f830 	bl	80188bc <_getpid_r>
 801885c:	4622      	mov	r2, r4
 801885e:	4601      	mov	r1, r0
 8018860:	4628      	mov	r0, r5
 8018862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018866:	f000 b817 	b.w	8018898 <_kill_r>
 801886a:	2b01      	cmp	r3, #1
 801886c:	d00a      	beq.n	8018884 <_raise_r+0x4c>
 801886e:	1c59      	adds	r1, r3, #1
 8018870:	d103      	bne.n	801887a <_raise_r+0x42>
 8018872:	2316      	movs	r3, #22
 8018874:	6003      	str	r3, [r0, #0]
 8018876:	2001      	movs	r0, #1
 8018878:	e7e7      	b.n	801884a <_raise_r+0x12>
 801887a:	2100      	movs	r1, #0
 801887c:	4620      	mov	r0, r4
 801887e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018882:	4798      	blx	r3
 8018884:	2000      	movs	r0, #0
 8018886:	e7e0      	b.n	801884a <_raise_r+0x12>

08018888 <raise>:
 8018888:	4b02      	ldr	r3, [pc, #8]	@ (8018894 <raise+0xc>)
 801888a:	4601      	mov	r1, r0
 801888c:	6818      	ldr	r0, [r3, #0]
 801888e:	f7ff bfd3 	b.w	8018838 <_raise_r>
 8018892:	bf00      	nop
 8018894:	2000013c 	.word	0x2000013c

08018898 <_kill_r>:
 8018898:	b538      	push	{r3, r4, r5, lr}
 801889a:	2300      	movs	r3, #0
 801889c:	4d06      	ldr	r5, [pc, #24]	@ (80188b8 <_kill_r+0x20>)
 801889e:	4604      	mov	r4, r0
 80188a0:	4608      	mov	r0, r1
 80188a2:	4611      	mov	r1, r2
 80188a4:	602b      	str	r3, [r5, #0]
 80188a6:	f7ec fdbc 	bl	8005422 <_kill>
 80188aa:	1c43      	adds	r3, r0, #1
 80188ac:	d102      	bne.n	80188b4 <_kill_r+0x1c>
 80188ae:	682b      	ldr	r3, [r5, #0]
 80188b0:	b103      	cbz	r3, 80188b4 <_kill_r+0x1c>
 80188b2:	6023      	str	r3, [r4, #0]
 80188b4:	bd38      	pop	{r3, r4, r5, pc}
 80188b6:	bf00      	nop
 80188b8:	2002a39c 	.word	0x2002a39c

080188bc <_getpid_r>:
 80188bc:	f7ec bda9 	b.w	8005412 <_getpid>

080188c0 <__swhatbuf_r>:
 80188c0:	b570      	push	{r4, r5, r6, lr}
 80188c2:	460c      	mov	r4, r1
 80188c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188c8:	b096      	sub	sp, #88	@ 0x58
 80188ca:	4615      	mov	r5, r2
 80188cc:	2900      	cmp	r1, #0
 80188ce:	461e      	mov	r6, r3
 80188d0:	da0c      	bge.n	80188ec <__swhatbuf_r+0x2c>
 80188d2:	89a3      	ldrh	r3, [r4, #12]
 80188d4:	2100      	movs	r1, #0
 80188d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80188da:	bf14      	ite	ne
 80188dc:	2340      	movne	r3, #64	@ 0x40
 80188de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80188e2:	2000      	movs	r0, #0
 80188e4:	6031      	str	r1, [r6, #0]
 80188e6:	602b      	str	r3, [r5, #0]
 80188e8:	b016      	add	sp, #88	@ 0x58
 80188ea:	bd70      	pop	{r4, r5, r6, pc}
 80188ec:	466a      	mov	r2, sp
 80188ee:	f000 f849 	bl	8018984 <_fstat_r>
 80188f2:	2800      	cmp	r0, #0
 80188f4:	dbed      	blt.n	80188d2 <__swhatbuf_r+0x12>
 80188f6:	9901      	ldr	r1, [sp, #4]
 80188f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80188fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018900:	4259      	negs	r1, r3
 8018902:	4159      	adcs	r1, r3
 8018904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018908:	e7eb      	b.n	80188e2 <__swhatbuf_r+0x22>

0801890a <__smakebuf_r>:
 801890a:	898b      	ldrh	r3, [r1, #12]
 801890c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801890e:	079d      	lsls	r5, r3, #30
 8018910:	4606      	mov	r6, r0
 8018912:	460c      	mov	r4, r1
 8018914:	d507      	bpl.n	8018926 <__smakebuf_r+0x1c>
 8018916:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801891a:	6023      	str	r3, [r4, #0]
 801891c:	6123      	str	r3, [r4, #16]
 801891e:	2301      	movs	r3, #1
 8018920:	6163      	str	r3, [r4, #20]
 8018922:	b003      	add	sp, #12
 8018924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018926:	ab01      	add	r3, sp, #4
 8018928:	466a      	mov	r2, sp
 801892a:	f7ff ffc9 	bl	80188c0 <__swhatbuf_r>
 801892e:	9f00      	ldr	r7, [sp, #0]
 8018930:	4605      	mov	r5, r0
 8018932:	4630      	mov	r0, r6
 8018934:	4639      	mov	r1, r7
 8018936:	f7fe fec7 	bl	80176c8 <_malloc_r>
 801893a:	b948      	cbnz	r0, 8018950 <__smakebuf_r+0x46>
 801893c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018940:	059a      	lsls	r2, r3, #22
 8018942:	d4ee      	bmi.n	8018922 <__smakebuf_r+0x18>
 8018944:	f023 0303 	bic.w	r3, r3, #3
 8018948:	f043 0302 	orr.w	r3, r3, #2
 801894c:	81a3      	strh	r3, [r4, #12]
 801894e:	e7e2      	b.n	8018916 <__smakebuf_r+0xc>
 8018950:	89a3      	ldrh	r3, [r4, #12]
 8018952:	6020      	str	r0, [r4, #0]
 8018954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018958:	81a3      	strh	r3, [r4, #12]
 801895a:	9b01      	ldr	r3, [sp, #4]
 801895c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018960:	b15b      	cbz	r3, 801897a <__smakebuf_r+0x70>
 8018962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018966:	4630      	mov	r0, r6
 8018968:	f000 f81e 	bl	80189a8 <_isatty_r>
 801896c:	b128      	cbz	r0, 801897a <__smakebuf_r+0x70>
 801896e:	89a3      	ldrh	r3, [r4, #12]
 8018970:	f023 0303 	bic.w	r3, r3, #3
 8018974:	f043 0301 	orr.w	r3, r3, #1
 8018978:	81a3      	strh	r3, [r4, #12]
 801897a:	89a3      	ldrh	r3, [r4, #12]
 801897c:	431d      	orrs	r5, r3
 801897e:	81a5      	strh	r5, [r4, #12]
 8018980:	e7cf      	b.n	8018922 <__smakebuf_r+0x18>
	...

08018984 <_fstat_r>:
 8018984:	b538      	push	{r3, r4, r5, lr}
 8018986:	2300      	movs	r3, #0
 8018988:	4d06      	ldr	r5, [pc, #24]	@ (80189a4 <_fstat_r+0x20>)
 801898a:	4604      	mov	r4, r0
 801898c:	4608      	mov	r0, r1
 801898e:	4611      	mov	r1, r2
 8018990:	602b      	str	r3, [r5, #0]
 8018992:	f7ec fda6 	bl	80054e2 <_fstat>
 8018996:	1c43      	adds	r3, r0, #1
 8018998:	d102      	bne.n	80189a0 <_fstat_r+0x1c>
 801899a:	682b      	ldr	r3, [r5, #0]
 801899c:	b103      	cbz	r3, 80189a0 <_fstat_r+0x1c>
 801899e:	6023      	str	r3, [r4, #0]
 80189a0:	bd38      	pop	{r3, r4, r5, pc}
 80189a2:	bf00      	nop
 80189a4:	2002a39c 	.word	0x2002a39c

080189a8 <_isatty_r>:
 80189a8:	b538      	push	{r3, r4, r5, lr}
 80189aa:	2300      	movs	r3, #0
 80189ac:	4d05      	ldr	r5, [pc, #20]	@ (80189c4 <_isatty_r+0x1c>)
 80189ae:	4604      	mov	r4, r0
 80189b0:	4608      	mov	r0, r1
 80189b2:	602b      	str	r3, [r5, #0]
 80189b4:	f7ec fda5 	bl	8005502 <_isatty>
 80189b8:	1c43      	adds	r3, r0, #1
 80189ba:	d102      	bne.n	80189c2 <_isatty_r+0x1a>
 80189bc:	682b      	ldr	r3, [r5, #0]
 80189be:	b103      	cbz	r3, 80189c2 <_isatty_r+0x1a>
 80189c0:	6023      	str	r3, [r4, #0]
 80189c2:	bd38      	pop	{r3, r4, r5, pc}
 80189c4:	2002a39c 	.word	0x2002a39c

080189c8 <_init>:
 80189c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ca:	bf00      	nop
 80189cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189ce:	bc08      	pop	{r3}
 80189d0:	469e      	mov	lr, r3
 80189d2:	4770      	bx	lr

080189d4 <_fini>:
 80189d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189d6:	bf00      	nop
 80189d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189da:	bc08      	pop	{r3}
 80189dc:	469e      	mov	lr, r3
 80189de:	4770      	bx	lr
