
Table_Tester_PRS20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f620  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e38  0800f870  0800f870  00010870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116a8  080116a8  000131f4  2**0
                  CONTENTS
  4 .ARM          00000008  080116a8  080116a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116b0  080116b0  000131f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116b0  080116b0  000126b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116b4  080116b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  080116b8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028910  200001f4  080118ac  000131f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20028b04  080118ac  00013b04  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fa7  00000000  00000000  0001322a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e38  00000000  00000000  0002b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001300  00000000  00000000  00030948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fc3c  00000000  00000000  00031c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c07  00000000  00000000  00061884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e7cc  00000000  00000000  0007a48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188c57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a78  00000000  00000000  00188c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00190714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001f4 	.word	0x200001f4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f858 	.word	0x0800f858

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001f8 	.word	0x200001f8
 800028c:	0800f858 	.word	0x0800f858

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b97e 	b.w	8000edc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14d      	bne.n	8000ca0 <__udivmoddi4+0xa8>
 8000c04:	428a      	cmp	r2, r1
 8000c06:	460f      	mov	r7, r1
 8000c08:	4684      	mov	ip, r0
 8000c0a:	4696      	mov	lr, r2
 8000c0c:	fab2 f382 	clz	r3, r2
 8000c10:	d960      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c12:	b14b      	cbz	r3, 8000c28 <__udivmoddi4+0x30>
 8000c14:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c22:	fa20 f202 	lsr.w	r2, r0, r2
 8000c26:	4317      	orrs	r7, r2
 8000c28:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c2c:	fa1f f48e 	uxth.w	r4, lr
 8000c30:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c34:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c38:	fb06 7711 	mls	r7, r6, r1, r7
 8000c3c:	fb01 f004 	mul.w	r0, r1, r4
 8000c40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c48:	eb1e 0202 	adds.w	r2, lr, r2
 8000c4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x60>
 8000c52:	4290      	cmp	r0, r2
 8000c54:	f200 812d 	bhi.w	8000eb2 <__udivmoddi4+0x2ba>
 8000c58:	4639      	mov	r1, r7
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	fa1f fc8c 	uxth.w	ip, ip
 8000c60:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c64:	fb06 2210 	mls	r2, r6, r0, r2
 8000c68:	fb00 f404 	mul.w	r4, r0, r4
 8000c6c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c70:	4564      	cmp	r4, ip
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c74:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7c:	d202      	bcs.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	4564      	cmp	r4, ip
 8000c80:	f200 811a 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000c84:	4610      	mov	r0, r2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	ebac 0c04 	sub.w	ip, ip, r4
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b125      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c92:	fa2c f303 	lsr.w	r3, ip, r3
 8000c96:	2200      	movs	r2, #0
 8000c98:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d905      	bls.n	8000cb0 <__udivmoddi4+0xb8>
 8000ca4:	b10d      	cbz	r5, 8000caa <__udivmoddi4+0xb2>
 8000ca6:	e9c5 0100 	strd	r0, r1, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	4608      	mov	r0, r1
 8000cae:	e7f5      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000cb0:	fab3 f183 	clz	r1, r3
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d14d      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb8:	42a3      	cmp	r3, r4
 8000cba:	f0c0 80f2 	bcc.w	8000ea2 <__udivmoddi4+0x2aa>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f080 80ef 	bcs.w	8000ea2 <__udivmoddi4+0x2aa>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	4608      	mov	r0, r1
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e6      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cce:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd2:	e7e3      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 80a2 	bne.w	8000e1e <__udivmoddi4+0x226>
 8000cda:	1a8a      	subs	r2, r1, r2
 8000cdc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ce0:	fa1f f68e 	uxth.w	r6, lr
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cea:	fb07 2014 	mls	r0, r7, r4, r2
 8000cee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb06 f004 	mul.w	r0, r6, r4
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d90f      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000cfe:	eb1e 0202 	adds.w	r2, lr, r2
 8000d02:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80c8 	beq.w	8000eac <__udivmoddi4+0x2b4>
 8000d1c:	4644      	mov	r4, r8
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	fa1f fc8c 	uxth.w	ip, ip
 8000d24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d28:	fb07 2210 	mls	r2, r7, r0, r2
 8000d2c:	fb00 f606 	mul.w	r6, r0, r6
 8000d30:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d34:	4566      	cmp	r6, ip
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d38:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x150>
 8000d42:	4566      	cmp	r6, ip
 8000d44:	f200 80bb 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000d48:	4610      	mov	r0, r2
 8000d4a:	ebac 0c06 	sub.w	ip, ip, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d66:	40f4      	lsrs	r4, r6
 8000d68:	408a      	lsls	r2, r1
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	ea4e 030c 	orr.w	r3, lr, ip
 8000d70:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fa1f fc87 	uxth.w	ip, r7
 8000d80:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d84:	fb08 4410 	mls	r4, r8, r0, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb00 f90c 	mul.w	r9, r0, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d90e      	bls.n	8000db2 <__udivmoddi4+0x1ba>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	bf2c      	ite	cs
 8000d9c:	f04f 0b01 	movcs.w	fp, #1
 8000da0:	f04f 0b00 	movcc.w	fp, #0
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	d903      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000da8:	f1bb 0f00 	cmp.w	fp, #0
 8000dac:	f000 8093 	beq.w	8000ed6 <__udivmoddi4+0x2de>
 8000db0:	4650      	mov	r0, sl
 8000db2:	eba4 0409 	sub.w	r4, r4, r9
 8000db6:	fa1f f983 	uxth.w	r9, r3
 8000dba:	fbb4 f3f8 	udiv	r3, r4, r8
 8000dbe:	fb08 4413 	mls	r4, r8, r3, r4
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d906      	bls.n	8000ddc <__udivmoddi4+0x1e4>
 8000dce:	193c      	adds	r4, r7, r4
 8000dd0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd4:	d201      	bcs.n	8000dda <__udivmoddi4+0x1e2>
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d87a      	bhi.n	8000ed0 <__udivmoddi4+0x2d8>
 8000dda:	4643      	mov	r3, r8
 8000ddc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000de0:	eba4 040c 	sub.w	r4, r4, ip
 8000de4:	fba0 9802 	umull	r9, r8, r0, r2
 8000de8:	4544      	cmp	r4, r8
 8000dea:	46cc      	mov	ip, r9
 8000dec:	4643      	mov	r3, r8
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0x1fe>
 8000df0:	d106      	bne.n	8000e00 <__udivmoddi4+0x208>
 8000df2:	45ce      	cmp	lr, r9
 8000df4:	d204      	bcs.n	8000e00 <__udivmoddi4+0x208>
 8000df6:	3801      	subs	r0, #1
 8000df8:	ebb9 0c02 	subs.w	ip, r9, r2
 8000dfc:	eb68 0307 	sbc.w	r3, r8, r7
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x222>
 8000e02:	ebbe 020c 	subs.w	r2, lr, ip
 8000e06:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e73e      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e1e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e22:	f1c3 0120 	rsb	r1, r3, #32
 8000e26:	fa04 f203 	lsl.w	r2, r4, r3
 8000e2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e2e:	40cc      	lsrs	r4, r1
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa20 f101 	lsr.w	r1, r0, r1
 8000e38:	fa1f f68e 	uxth.w	r6, lr
 8000e3c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fb07 4410 	mls	r4, r7, r0, r4
 8000e46:	0c11      	lsrs	r1, r2, #16
 8000e48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e4c:	fb00 f406 	mul.w	r4, r0, r6
 8000e50:	428c      	cmp	r4, r1
 8000e52:	d90e      	bls.n	8000e72 <__udivmoddi4+0x27a>
 8000e54:	eb1e 0101 	adds.w	r1, lr, r1
 8000e58:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5c:	bf2c      	ite	cs
 8000e5e:	f04f 0901 	movcs.w	r9, #1
 8000e62:	f04f 0900 	movcc.w	r9, #0
 8000e66:	428c      	cmp	r4, r1
 8000e68:	d902      	bls.n	8000e70 <__udivmoddi4+0x278>
 8000e6a:	f1b9 0f00 	cmp.w	r9, #0
 8000e6e:	d02c      	beq.n	8000eca <__udivmoddi4+0x2d2>
 8000e70:	4640      	mov	r0, r8
 8000e72:	1b09      	subs	r1, r1, r4
 8000e74:	b292      	uxth	r2, r2
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e82:	fb04 f106 	mul.w	r1, r4, r6
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x2a2>
 8000e8a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e8e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e92:	d201      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d815      	bhi.n	8000ec4 <__udivmoddi4+0x2cc>
 8000e98:	4644      	mov	r4, r8
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ea0:	e721      	b.n	8000ce6 <__udivmoddi4+0xee>
 8000ea2:	1a86      	subs	r6, r0, r2
 8000ea4:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	e70e      	b.n	8000cca <__udivmoddi4+0xd2>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e735      	b.n	8000d1e <__udivmoddi4+0x126>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4472      	add	r2, lr
 8000eb6:	e6d0      	b.n	8000c5a <__udivmoddi4+0x62>
 8000eb8:	44f4      	add	ip, lr
 8000eba:	3802      	subs	r0, #2
 8000ebc:	e6e3      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000ebe:	44f4      	add	ip, lr
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e742      	b.n	8000d4a <__udivmoddi4+0x152>
 8000ec4:	3c02      	subs	r4, #2
 8000ec6:	4472      	add	r2, lr
 8000ec8:	e7e7      	b.n	8000e9a <__udivmoddi4+0x2a2>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4471      	add	r1, lr
 8000ece:	e7d0      	b.n	8000e72 <__udivmoddi4+0x27a>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	e782      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	e76a      	b.n	8000db2 <__udivmoddi4+0x1ba>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000ee4:	4814      	ldr	r0, [pc, #80]	@ (8000f38 <MX_FREERTOS_Init+0x58>)
 8000ee6:	f009 f90f 	bl	800a108 <osMutexNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <MX_FREERTOS_Init+0x5c>)
 8000eee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <MX_FREERTOS_Init+0x60>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4813      	ldr	r0, [pc, #76]	@ (8000f44 <MX_FREERTOS_Init+0x64>)
 8000ef8:	f009 f864 	bl	8009fc4 <osTimerNew>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <MX_FREERTOS_Init+0x68>)
 8000f00:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <MX_FREERTOS_Init+0x6c>)
 8000f04:	2102      	movs	r1, #2
 8000f06:	2010      	movs	r0, #16
 8000f08:	f009 f983 	bl	800a212 <osMessageQueueNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <MX_FREERTOS_Init+0x70>)
 8000f10:	6013      	str	r3, [r2, #0]
  Lines_Seq_Queue_Handle = osMessageQueueNew (100, sizeof(uint8_t), &Lines_Seq_Queue_attributes);
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <MX_FREERTOS_Init+0x74>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	2064      	movs	r0, #100	@ 0x64
 8000f18:	f009 f97b 	bl	800a212 <osMessageQueueNew>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <MX_FREERTOS_Init+0x78>)
 8000f20:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  //Lines_Sequence_Task_Handle = osThreadNew(Lines_Sequence_Task, NULL, &Lines_Sequence_Task_attributes);
  //RX_Task_Handle = osThreadNew(RX_Task, NULL, &RX_Task_attributes);
  LCD_Touch_Task_Handle = osThreadNew(LCD_Touch_Task, NULL, &LCD_Touch_Task_attributes);
 8000f22:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <MX_FREERTOS_Init+0x7c>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	480e      	ldr	r0, [pc, #56]	@ (8000f60 <MX_FREERTOS_Init+0x80>)
 8000f28:	f008 ff88 	bl	8009e3c <osThreadNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <MX_FREERTOS_Init+0x84>)
 8000f30:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	0800fa94 	.word	0x0800fa94
 8000f3c:	20000210 	.word	0x20000210
 8000f40:	0800faa4 	.word	0x0800faa4
 8000f44:	08002521 	.word	0x08002521
 8000f48:	20000214 	.word	0x20000214
 8000f4c:	0800fab4 	.word	0x0800fab4
 8000f50:	20000218 	.word	0x20000218
 8000f54:	0800faf0 	.word	0x0800faf0
 8000f58:	20000220 	.word	0x20000220
 8000f5c:	0800facc 	.word	0x0800facc
 8000f60:	08000f69 	.word	0x08000f69
 8000f64:	2000021c 	.word	0x2000021c

08000f68 <LCD_Touch_Task>:

}
//--------------------------------------------------------------------------

void LCD_Touch_Task(void *argument)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b09a      	sub	sp, #104	@ 0x68
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	6078      	str	r0, [r7, #4]
	Coordinate Touch_XY;
	int Coor_X = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	657b      	str	r3, [r7, #84]	@ 0x54
	int Coor_Y = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	653b      	str	r3, [r7, #80]	@ 0x50
	//Coordinate Touch_XY_Old;
	char Str[50];
	char i = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint16_t X = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t Y = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint8_t Sync_MSG = 255;
 8000f8a:	23ff      	movs	r3, #255	@ 0xff
 8000f8c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	memset(Str, 0, sizeof(Str));
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2232      	movs	r2, #50	@ 0x32
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00c fb7c 	bl	800d696 <memset>

	osDelay(100);
 8000f9e:	2064      	movs	r0, #100	@ 0x64
 8000fa0:	f008 ffdd 	bl	8009f5e <osDelay>

	matrix = Matrix_Default; //ts_calibrate( 240, 320 );
 8000fa4:	4ab7      	ldr	r2, [pc, #732]	@ (8001284 <LCD_Touch_Task+0x31c>)
 8000fa6:	4bb8      	ldr	r3, [pc, #736]	@ (8001288 <LCD_Touch_Task+0x320>)
 8000fa8:	4614      	mov	r4, r2
 8000faa:	461d      	mov	r5, r3
 8000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	getDisplayPoint(&display, Read_Value(), &matrix ) ;
 8000fb8:	f005 ff0a 	bl	8006dd0 <Read_Value>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4ab1      	ldr	r2, [pc, #708]	@ (8001284 <LCD_Touch_Task+0x31c>)
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	48b2      	ldr	r0, [pc, #712]	@ (800128c <LCD_Touch_Task+0x324>)
 8000fc4:	f005 fdf6 	bl	8006bb4 <getDisplayPoint>

	LCD_Clear(BLACK);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f005 fab5 	bl	8006538 <LCD_Clear>
	Show_Str(5, 10, YELLOW, BLACK, (u8 *)LCD_FEU_Str,20,1);
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2314      	movs	r3, #20
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	4bae      	ldr	r3, [pc, #696]	@ (8001290 <LCD_Touch_Task+0x328>)
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000fe0:	210a      	movs	r1, #10
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f004 fa38 	bl	8005458 <Show_Str>
	Show_Str(5, 30, WHITE, BLACK, (u8 *)LCD_RX1_Str,20,1);
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2314      	movs	r3, #20
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	4ba8      	ldr	r3, [pc, #672]	@ (8001294 <LCD_Touch_Task+0x32c>)
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ffa:	211e      	movs	r1, #30
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	f004 fa2b 	bl	8005458 <Show_Str>
	Show_Str(60, 30, WHITE, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 8001002:	2301      	movs	r3, #1
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2314      	movs	r3, #20
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4ba3      	ldr	r3, [pc, #652]	@ (8001298 <LCD_Touch_Task+0x330>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2300      	movs	r3, #0
 8001010:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001014:	211e      	movs	r1, #30
 8001016:	203c      	movs	r0, #60	@ 0x3c
 8001018:	f004 fa1e 	bl	8005458 <Show_Str>
	Show_Str(150, 30, WHITE, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 800101c:	2301      	movs	r3, #1
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2314      	movs	r3, #20
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	4b9d      	ldr	r3, [pc, #628]	@ (800129c <LCD_Touch_Task+0x334>)
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102e:	211e      	movs	r1, #30
 8001030:	2096      	movs	r0, #150	@ 0x96
 8001032:	f004 fa11 	bl	8005458 <Show_Str>
	Show_Str(5, 50, WHITE, BLACK, (u8 *)LCD_Gain_Low_Str,20,1);
 8001036:	2301      	movs	r3, #1
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2314      	movs	r3, #20
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b98      	ldr	r3, [pc, #608]	@ (80012a0 <LCD_Touch_Task+0x338>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001048:	2132      	movs	r1, #50	@ 0x32
 800104a:	2005      	movs	r0, #5
 800104c:	f004 fa04 	bl	8005458 <Show_Str>
	Show_Str(150, 50, WHITE, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8001050:	2301      	movs	r3, #1
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2314      	movs	r3, #20
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	4b92      	ldr	r3, [pc, #584]	@ (80012a4 <LCD_Touch_Task+0x33c>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001062:	2132      	movs	r1, #50	@ 0x32
 8001064:	2096      	movs	r0, #150	@ 0x96
 8001066:	f004 f9f7 	bl	8005458 <Show_Str>
	Show_Str(5, 70, WHITE, BLACK, (u8 *)LCD_Atten_Str,20,1);
 800106a:	2301      	movs	r3, #1
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2314      	movs	r3, #20
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	4b8d      	ldr	r3, [pc, #564]	@ (80012a8 <LCD_Touch_Task+0x340>)
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800107c:	2146      	movs	r1, #70	@ 0x46
 800107e:	2005      	movs	r0, #5
 8001080:	f004 f9ea 	bl	8005458 <Show_Str>
	LCD_DrawLine(0, 88, 239, 88, RED);
 8001084:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2358      	movs	r3, #88	@ 0x58
 800108c:	22ef      	movs	r2, #239	@ 0xef
 800108e:	2158      	movs	r1, #88	@ 0x58
 8001090:	2000      	movs	r0, #0
 8001092:	f003 fe60 	bl	8004d56 <LCD_DrawLine>
	Show_Str(5, 90, YELLOW, BLACK, (u8 *)LCD_IJU_Str,20,1);
 8001096:	2301      	movs	r3, #1
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2314      	movs	r3, #20
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	4b83      	ldr	r3, [pc, #524]	@ (80012ac <LCD_Touch_Task+0x344>)
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80010a8:	215a      	movs	r1, #90	@ 0x5a
 80010aa:	2005      	movs	r0, #5
 80010ac:	f004 f9d4 	bl	8005458 <Show_Str>
	Show_Str(5, 110, WHITE, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 80010b0:	2301      	movs	r3, #1
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2314      	movs	r3, #20
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	4b77      	ldr	r3, [pc, #476]	@ (8001298 <LCD_Touch_Task+0x330>)
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c2:	216e      	movs	r1, #110	@ 0x6e
 80010c4:	2005      	movs	r0, #5
 80010c6:	f004 f9c7 	bl	8005458 <Show_Str>
	Show_Str(95, 110, WHITE, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 80010ca:	2301      	movs	r3, #1
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2314      	movs	r3, #20
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	4b72      	ldr	r3, [pc, #456]	@ (800129c <LCD_Touch_Task+0x334>)
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2300      	movs	r3, #0
 80010d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010dc:	216e      	movs	r1, #110	@ 0x6e
 80010de:	205f      	movs	r0, #95	@ 0x5f
 80010e0:	f004 f9ba 	bl	8005458 <Show_Str>
	Show_Str(5, 130, WHITE, BLACK, (u8 *)LCD_Atten_Str,20,1);
 80010e4:	2301      	movs	r3, #1
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2314      	movs	r3, #20
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	4b6e      	ldr	r3, [pc, #440]	@ (80012a8 <LCD_Touch_Task+0x340>)
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010f6:	2182      	movs	r1, #130	@ 0x82
 80010f8:	2005      	movs	r0, #5
 80010fa:	f004 f9ad 	bl	8005458 <Show_Str>
	Show_Str(150, 130, WHITE, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 80010fe:	2301      	movs	r3, #1
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2314      	movs	r3, #20
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	4b67      	ldr	r3, [pc, #412]	@ (80012a4 <LCD_Touch_Task+0x33c>)
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001110:	2182      	movs	r1, #130	@ 0x82
 8001112:	2096      	movs	r0, #150	@ 0x96
 8001114:	f004 f9a0 	bl	8005458 <Show_Str>

	for(;;)
	{
		if(TS_Touched() == 1)
 8001118:	f005 ffa6 	bl	8007068 <TS_Touched>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d1fa      	bne.n	8001118 <LCD_Touch_Task+0x1b0>
		{
			getDisplayPoint(&display, Read_Value(), &matrix ) ;
 8001122:	f005 fe55 	bl	8006dd0 <Read_Value>
 8001126:	4603      	mov	r3, r0
 8001128:	4a56      	ldr	r2, [pc, #344]	@ (8001284 <LCD_Touch_Task+0x31c>)
 800112a:	4619      	mov	r1, r3
 800112c:	4857      	ldr	r0, [pc, #348]	@ (800128c <LCD_Touch_Task+0x324>)
 800112e:	f005 fd41 	bl	8006bb4 <getDisplayPoint>
			//---------------FEU RX---------------
			X = 5;	Y = 30;
 8001132:	2305      	movs	r3, #5
 8001134:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001138:	231e      	movs	r3, #30
 800113a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen(LCD_RX1_Str)*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 800113e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001142:	4b52      	ldr	r3, [pc, #328]	@ (800128c <LCD_Touch_Task+0x324>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	f280 80c6 	bge.w	80012d8 <LCD_Touch_Task+0x370>
 800114c:	4b4f      	ldr	r3, [pc, #316]	@ (800128c <LCD_Touch_Task+0x324>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	461d      	mov	r5, r3
 8001152:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001156:	484f      	ldr	r0, [pc, #316]	@ (8001294 <LCD_Touch_Task+0x32c>)
 8001158:	f7ff f89a 	bl	8000290 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4423      	add	r3, r4
 8001162:	429d      	cmp	r5, r3
 8001164:	f080 80b8 	bcs.w	80012d8 <LCD_Touch_Task+0x370>
 8001168:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800116c:	4b47      	ldr	r3, [pc, #284]	@ (800128c <LCD_Touch_Task+0x324>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	f280 80b1 	bge.w	80012d8 <LCD_Touch_Task+0x370>
 8001176:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800117a:	f103 020e 	add.w	r2, r3, #14
 800117e:	4b43      	ldr	r3, [pc, #268]	@ (800128c <LCD_Touch_Task+0x324>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	f2c0 80a8 	blt.w	80012d8 <LCD_Touch_Task+0x370>
 8001188:	f005 ff6e 	bl	8007068 <TS_Touched>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	f040 80a2 	bne.w	80012d8 <LCD_Touch_Task+0x370>
			{

				if( (MIU_FEU_MSG.PCKT_0 & RX2_Bit0) == RX2_Bit0)
 8001194:	4b46      	ldr	r3, [pc, #280]	@ (80012b0 <LCD_Touch_Task+0x348>)
 8001196:	789a      	ldrb	r2, [r3, #2]
 8001198:	4b46      	ldr	r3, [pc, #280]	@ (80012b4 <LCD_Touch_Task+0x34c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4013      	ands	r3, r2
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <LCD_Touch_Task+0x34c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d133      	bne.n	8001210 <LCD_Touch_Task+0x2a8>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RX2_Str,20,1);
 80011a8:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80011ac:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80011b0:	2301      	movs	r3, #1
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2314      	movs	r3, #20
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	4b3f      	ldr	r3, [pc, #252]	@ (80012b8 <LCD_Touch_Task+0x350>)
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	2200      	movs	r2, #0
 80011c0:	f004 f94a 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RX1_Str,20,1);
 80011c4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80011c8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80011cc:	2301      	movs	r3, #1
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2314      	movs	r3, #20
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <LCD_Touch_Task+0x32c>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011de:	f004 f93b 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RX_Bit0_RST, RX1_Bit0);
 80011e2:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <LCD_Touch_Task+0x354>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <LCD_Touch_Task+0x358>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4936      	ldr	r1, [pc, #216]	@ (80012c4 <LCD_Touch_Task+0x35c>)
 80011ec:	4830      	ldr	r0, [pc, #192]	@ (80012b0 <LCD_Touch_Task+0x348>)
 80011ee:	f003 fcab 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 80011f2:	4b2f      	ldr	r3, [pc, #188]	@ (80012b0 <LCD_Touch_Task+0x348>)
 80011f4:	7a9b      	ldrb	r3, [r3, #10]
 80011f6:	461a      	mov	r2, r3
 80011f8:	492d      	ldr	r1, [pc, #180]	@ (80012b0 <LCD_Touch_Task+0x348>)
 80011fa:	2001      	movs	r0, #1
 80011fc:	f004 fc9e 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001200:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	2005      	movs	r0, #5
 800120a:	f004 fc97 	bl	8005b3c <RS485_Tx>
 800120e:	e032      	b.n	8001276 <LCD_Touch_Task+0x30e>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RX1_Str,20,1);
 8001210:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001214:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001218:	2301      	movs	r3, #1
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2314      	movs	r3, #20
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <LCD_Touch_Task+0x32c>)
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	2200      	movs	r2, #0
 8001228:	f004 f916 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RX2_Str,20,1);
 800122c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001230:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001234:	2301      	movs	r3, #1
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2314      	movs	r3, #20
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <LCD_Touch_Task+0x350>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001246:	f004 f907 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RX_Bit0_RST, RX2_Bit0);
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <LCD_Touch_Task+0x354>)
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <LCD_Touch_Task+0x34c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	491c      	ldr	r1, [pc, #112]	@ (80012c4 <LCD_Touch_Task+0x35c>)
 8001254:	4816      	ldr	r0, [pc, #88]	@ (80012b0 <LCD_Touch_Task+0x348>)
 8001256:	f003 fc77 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <LCD_Touch_Task+0x348>)
 800125c:	7a9b      	ldrb	r3, [r3, #10]
 800125e:	461a      	mov	r2, r3
 8001260:	4913      	ldr	r1, [pc, #76]	@ (80012b0 <LCD_Touch_Task+0x348>)
 8001262:	2001      	movs	r0, #1
 8001264:	f004 fc6a 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001268:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	2005      	movs	r0, #5
 8001272:	f004 fc63 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <LCD_Touch_Task+0x324>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <LCD_Touch_Task+0x324>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001282:	e024      	b.n	80012ce <LCD_Touch_Task+0x366>
 8001284:	20025e2c 	.word	0x20025e2c
 8001288:	20025e50 	.word	0x20025e50
 800128c:	20025e48 	.word	0x20025e48
 8001290:	0800fb48 	.word	0x0800fb48
 8001294:	0800fb60 	.word	0x0800fb60
 8001298:	0800fb70 	.word	0x0800fb70
 800129c:	0800fb80 	.word	0x0800fb80
 80012a0:	0800fbb0 	.word	0x0800fbb0
 80012a4:	0800fbd0 	.word	0x0800fbd0
 80012a8:	0800fbe0 	.word	0x0800fbe0
 80012ac:	0800fb54 	.word	0x0800fb54
 80012b0:	20000000 	.word	0x20000000
 80012b4:	0800fbf1 	.word	0x0800fbf1
 80012b8:	0800fb68 	.word	0x0800fb68
 80012bc:	0800fbef 	.word	0x0800fbef
 80012c0:	0800fbf0 	.word	0x0800fbf0
 80012c4:	20000002 	.word	0x20000002
 80012c8:	200a      	movs	r0, #10
 80012ca:	f008 fe48 	bl	8009f5e <osDelay>
 80012ce:	f005 fecb 	bl	8007068 <TS_Touched>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d0f7      	beq.n	80012c8 <LCD_Touch_Task+0x360>
			}
			//---------------FEU INJ---------------
			X = 60;	Y = 30;
 80012d8:	233c      	movs	r3, #60	@ 0x3c
 80012da:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80012de:	231e      	movs	r3, #30
 80012e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen(LCD_INJ_ON_Str)*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 80012e4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80012e8:	4baa      	ldr	r3, [pc, #680]	@ (8001594 <LCD_Touch_Task+0x62c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f280 80a3 	bge.w	8001438 <LCD_Touch_Task+0x4d0>
 80012f2:	4ba8      	ldr	r3, [pc, #672]	@ (8001594 <LCD_Touch_Task+0x62c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461d      	mov	r5, r3
 80012f8:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 80012fc:	48a6      	ldr	r0, [pc, #664]	@ (8001598 <LCD_Touch_Task+0x630>)
 80012fe:	f7fe ffc7 	bl	8000290 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4423      	add	r3, r4
 8001308:	429d      	cmp	r5, r3
 800130a:	f080 8095 	bcs.w	8001438 <LCD_Touch_Task+0x4d0>
 800130e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001312:	4ba0      	ldr	r3, [pc, #640]	@ (8001594 <LCD_Touch_Task+0x62c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	f280 808e 	bge.w	8001438 <LCD_Touch_Task+0x4d0>
 800131c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001320:	f103 020e 	add.w	r2, r3, #14
 8001324:	4b9b      	ldr	r3, [pc, #620]	@ (8001594 <LCD_Touch_Task+0x62c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	f2c0 8085 	blt.w	8001438 <LCD_Touch_Task+0x4d0>
 800132e:	f005 fe9b 	bl	8007068 <TS_Touched>
 8001332:	4603      	mov	r3, r0
 8001334:	2b01      	cmp	r3, #1
 8001336:	d17f      	bne.n	8001438 <LCD_Touch_Task+0x4d0>
			{

				if( (MIU_FEU_MSG.PCKT_0 & INJ_ON_Bit1) == INJ_ON_Bit1)
 8001338:	4b98      	ldr	r3, [pc, #608]	@ (800159c <LCD_Touch_Task+0x634>)
 800133a:	789a      	ldrb	r2, [r3, #2]
 800133c:	4b98      	ldr	r3, [pc, #608]	@ (80015a0 <LCD_Touch_Task+0x638>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4013      	ands	r3, r2
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b96      	ldr	r3, [pc, #600]	@ (80015a0 <LCD_Touch_Task+0x638>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d133      	bne.n	80013b4 <LCD_Touch_Task+0x44c>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_INJ_ON_Str,20,1);
 800134c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001350:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001354:	2301      	movs	r3, #1
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2314      	movs	r3, #20
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	4b8e      	ldr	r3, [pc, #568]	@ (8001598 <LCD_Touch_Task+0x630>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	2200      	movs	r2, #0
 8001364:	f004 f878 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 8001368:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800136c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001370:	2301      	movs	r3, #1
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2314      	movs	r3, #20
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b8a      	ldr	r3, [pc, #552]	@ (80015a4 <LCD_Touch_Task+0x63c>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001382:	f004 f869 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, INJ_Bit1_RST, INJ_OFF_Bit1);
 8001386:	4b88      	ldr	r3, [pc, #544]	@ (80015a8 <LCD_Touch_Task+0x640>)
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	4b88      	ldr	r3, [pc, #544]	@ (80015ac <LCD_Touch_Task+0x644>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4988      	ldr	r1, [pc, #544]	@ (80015b0 <LCD_Touch_Task+0x648>)
 8001390:	4882      	ldr	r0, [pc, #520]	@ (800159c <LCD_Touch_Task+0x634>)
 8001392:	f003 fbd9 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001396:	4b81      	ldr	r3, [pc, #516]	@ (800159c <LCD_Touch_Task+0x634>)
 8001398:	7a9b      	ldrb	r3, [r3, #10]
 800139a:	461a      	mov	r2, r3
 800139c:	497f      	ldr	r1, [pc, #508]	@ (800159c <LCD_Touch_Task+0x634>)
 800139e:	2001      	movs	r0, #1
 80013a0:	f004 fbcc 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 80013a4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	2005      	movs	r0, #5
 80013ae:	f004 fbc5 	bl	8005b3c <RS485_Tx>
 80013b2:	e032      	b.n	800141a <LCD_Touch_Task+0x4b2>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 80013b4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80013b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80013bc:	2301      	movs	r3, #1
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2314      	movs	r3, #20
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	4b77      	ldr	r3, [pc, #476]	@ (80015a4 <LCD_Touch_Task+0x63c>)
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	2200      	movs	r2, #0
 80013cc:	f004 f844 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_INJ_ON_Str,20,1);
 80013d0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80013d4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80013d8:	2301      	movs	r3, #1
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2314      	movs	r3, #20
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001598 <LCD_Touch_Task+0x630>)
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ea:	f004 f835 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, INJ_Bit1_RST, INJ_ON_Bit1);
 80013ee:	4b6e      	ldr	r3, [pc, #440]	@ (80015a8 <LCD_Touch_Task+0x640>)
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <LCD_Touch_Task+0x638>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	496e      	ldr	r1, [pc, #440]	@ (80015b0 <LCD_Touch_Task+0x648>)
 80013f8:	4868      	ldr	r0, [pc, #416]	@ (800159c <LCD_Touch_Task+0x634>)
 80013fa:	f003 fba5 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 80013fe:	4b67      	ldr	r3, [pc, #412]	@ (800159c <LCD_Touch_Task+0x634>)
 8001400:	7a9b      	ldrb	r3, [r3, #10]
 8001402:	461a      	mov	r2, r3
 8001404:	4965      	ldr	r1, [pc, #404]	@ (800159c <LCD_Touch_Task+0x634>)
 8001406:	2001      	movs	r0, #1
 8001408:	f004 fb98 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 800140c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001410:	2201      	movs	r2, #1
 8001412:	4619      	mov	r1, r3
 8001414:	2005      	movs	r0, #5
 8001416:	f004 fb91 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 800141a:	4b5e      	ldr	r3, [pc, #376]	@ (8001594 <LCD_Touch_Task+0x62c>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	4b5c      	ldr	r3, [pc, #368]	@ (8001594 <LCD_Touch_Task+0x62c>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001426:	e002      	b.n	800142e <LCD_Touch_Task+0x4c6>
 8001428:	200a      	movs	r0, #10
 800142a:	f008 fd98 	bl	8009f5e <osDelay>
 800142e:	f005 fe1b 	bl	8007068 <TS_Touched>
 8001432:	4603      	mov	r3, r0
 8001434:	2b01      	cmp	r3, #1
 8001436:	d0f7      	beq.n	8001428 <LCD_Touch_Task+0x4c0>
			}
			//---------------FEU RF---------------
			X = 150;	Y = 30;
 8001438:	2396      	movs	r3, #150	@ 0x96
 800143a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800143e:	231e      	movs	r3, #30
 8001440:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen(LCD_RF_16_22_Str)*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 8001444:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001448:	4b52      	ldr	r3, [pc, #328]	@ (8001594 <LCD_Touch_Task+0x62c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	f280 813f 	bge.w	80016d0 <LCD_Touch_Task+0x768>
 8001452:	4b50      	ldr	r3, [pc, #320]	@ (8001594 <LCD_Touch_Task+0x62c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461d      	mov	r5, r3
 8001458:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 800145c:	4855      	ldr	r0, [pc, #340]	@ (80015b4 <LCD_Touch_Task+0x64c>)
 800145e:	f7fe ff17 	bl	8000290 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4423      	add	r3, r4
 8001468:	429d      	cmp	r5, r3
 800146a:	f080 8131 	bcs.w	80016d0 <LCD_Touch_Task+0x768>
 800146e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001472:	4b48      	ldr	r3, [pc, #288]	@ (8001594 <LCD_Touch_Task+0x62c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	f280 812a 	bge.w	80016d0 <LCD_Touch_Task+0x768>
 800147c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001480:	f103 020e 	add.w	r2, r3, #14
 8001484:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <LCD_Touch_Task+0x62c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	f2c0 8121 	blt.w	80016d0 <LCD_Touch_Task+0x768>
 800148e:	f005 fdeb 	bl	8007068 <TS_Touched>
 8001492:	4603      	mov	r3, r0
 8001494:	2b01      	cmp	r3, #1
 8001496:	f040 811b 	bne.w	80016d0 <LCD_Touch_Task+0x768>
			{
				if( (MIU_FEU_MSG.PCKT_0 & RF_42_63_Bit2_3) == RF_42_63_Bit2_3)
 800149a:	4b40      	ldr	r3, [pc, #256]	@ (800159c <LCD_Touch_Task+0x634>)
 800149c:	789a      	ldrb	r2, [r3, #2]
 800149e:	4b46      	ldr	r3, [pc, #280]	@ (80015b8 <LCD_Touch_Task+0x650>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4013      	ands	r3, r2
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b44      	ldr	r3, [pc, #272]	@ (80015b8 <LCD_Touch_Task+0x650>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d133      	bne.n	8001516 <LCD_Touch_Task+0x5ae>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_42_63_Str,20,1);
 80014ae:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80014b2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80014b6:	2301      	movs	r3, #1
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2314      	movs	r3, #20
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	4b3f      	ldr	r3, [pc, #252]	@ (80015bc <LCD_Touch_Task+0x654>)
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	2200      	movs	r2, #0
 80014c6:	f003 ffc7 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 80014ca:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80014ce:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80014d2:	2301      	movs	r3, #1
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	2314      	movs	r3, #20
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b36      	ldr	r3, [pc, #216]	@ (80015b4 <LCD_Touch_Task+0x64c>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2300      	movs	r3, #0
 80014e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e4:	f003 ffb8 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit2_3_RST, RF_16_22_Bit2_3);
 80014e8:	4b35      	ldr	r3, [pc, #212]	@ (80015c0 <LCD_Touch_Task+0x658>)
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	4b35      	ldr	r3, [pc, #212]	@ (80015c4 <LCD_Touch_Task+0x65c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	492f      	ldr	r1, [pc, #188]	@ (80015b0 <LCD_Touch_Task+0x648>)
 80014f2:	482a      	ldr	r0, [pc, #168]	@ (800159c <LCD_Touch_Task+0x634>)
 80014f4:	f003 fb28 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 80014f8:	4b28      	ldr	r3, [pc, #160]	@ (800159c <LCD_Touch_Task+0x634>)
 80014fa:	7a9b      	ldrb	r3, [r3, #10]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4927      	ldr	r1, [pc, #156]	@ (800159c <LCD_Touch_Task+0x634>)
 8001500:	2001      	movs	r0, #1
 8001502:	f004 fb1b 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001506:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800150a:	2201      	movs	r2, #1
 800150c:	4619      	mov	r1, r3
 800150e:	2005      	movs	r0, #5
 8001510:	f004 fb14 	bl	8005b3c <RS485_Tx>
 8001514:	e0cd      	b.n	80016b2 <LCD_Touch_Task+0x74a>
				}
				else if( (MIU_FEU_MSG.PCKT_0 & RF_30_46_Bit2_3) == RF_30_46_Bit2_3)
 8001516:	4b21      	ldr	r3, [pc, #132]	@ (800159c <LCD_Touch_Task+0x634>)
 8001518:	789a      	ldrb	r2, [r3, #2]
 800151a:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <LCD_Touch_Task+0x660>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4013      	ands	r3, r2
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <LCD_Touch_Task+0x660>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d152      	bne.n	80015d0 <LCD_Touch_Task+0x668>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_30_46_Str,20,1);
 800152a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800152e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001532:	2301      	movs	r3, #1
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	2314      	movs	r3, #20
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <LCD_Touch_Task+0x664>)
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	2200      	movs	r2, #0
 8001542:	f003 ff89 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_42_63_Str,20,1);
 8001546:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800154a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800154e:	2301      	movs	r3, #1
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2314      	movs	r3, #20
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <LCD_Touch_Task+0x654>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001560:	f003 ff7a 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit2_3_RST, RF_42_63_Bit2_3);
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <LCD_Touch_Task+0x658>)
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <LCD_Touch_Task+0x650>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4910      	ldr	r1, [pc, #64]	@ (80015b0 <LCD_Touch_Task+0x648>)
 800156e:	480b      	ldr	r0, [pc, #44]	@ (800159c <LCD_Touch_Task+0x634>)
 8001570:	f003 faea 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <LCD_Touch_Task+0x634>)
 8001576:	7a9b      	ldrb	r3, [r3, #10]
 8001578:	461a      	mov	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	@ (800159c <LCD_Touch_Task+0x634>)
 800157c:	2001      	movs	r0, #1
 800157e:	f004 fadd 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001582:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	2005      	movs	r0, #5
 800158c:	f004 fad6 	bl	8005b3c <RS485_Tx>
 8001590:	e08f      	b.n	80016b2 <LCD_Touch_Task+0x74a>
 8001592:	bf00      	nop
 8001594:	20025e48 	.word	0x20025e48
 8001598:	0800fb78 	.word	0x0800fb78
 800159c:	20000000 	.word	0x20000000
 80015a0:	0800fbf4 	.word	0x0800fbf4
 80015a4:	0800fb70 	.word	0x0800fb70
 80015a8:	0800fbf2 	.word	0x0800fbf2
 80015ac:	0800fbf3 	.word	0x0800fbf3
 80015b0:	20000002 	.word	0x20000002
 80015b4:	0800fb80 	.word	0x0800fb80
 80015b8:	0800fbf9 	.word	0x0800fbf9
 80015bc:	0800fba4 	.word	0x0800fba4
 80015c0:	0800fbf5 	.word	0x0800fbf5
 80015c4:	0800fbf6 	.word	0x0800fbf6
 80015c8:	0800fbf8 	.word	0x0800fbf8
 80015cc:	0800fb98 	.word	0x0800fb98
				}
				else if( (MIU_FEU_MSG.PCKT_0 & RF_20_32_Bit2_3) == RF_20_32_Bit2_3)
 80015d0:	4b94      	ldr	r3, [pc, #592]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 80015d2:	789a      	ldrb	r2, [r3, #2]
 80015d4:	4b94      	ldr	r3, [pc, #592]	@ (8001828 <LCD_Touch_Task+0x8c0>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4013      	ands	r3, r2
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b92      	ldr	r3, [pc, #584]	@ (8001828 <LCD_Touch_Task+0x8c0>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d133      	bne.n	800164c <LCD_Touch_Task+0x6e4>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_20_32_Str,20,1);
 80015e4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80015e8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80015ec:	2301      	movs	r3, #1
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2314      	movs	r3, #20
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	4b8d      	ldr	r3, [pc, #564]	@ (800182c <LCD_Touch_Task+0x8c4>)
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2200      	movs	r2, #0
 80015fc:	f003 ff2c 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_30_46_Str,20,1);
 8001600:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001604:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001608:	2301      	movs	r3, #1
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	2314      	movs	r3, #20
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	4b87      	ldr	r3, [pc, #540]	@ (8001830 <LCD_Touch_Task+0x8c8>)
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161a:	f003 ff1d 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit2_3_RST, RF_30_46_Bit2_3);
 800161e:	4b85      	ldr	r3, [pc, #532]	@ (8001834 <LCD_Touch_Task+0x8cc>)
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	4b85      	ldr	r3, [pc, #532]	@ (8001838 <LCD_Touch_Task+0x8d0>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4985      	ldr	r1, [pc, #532]	@ (800183c <LCD_Touch_Task+0x8d4>)
 8001628:	487e      	ldr	r0, [pc, #504]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 800162a:	f003 fa8d 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 800162e:	4b7d      	ldr	r3, [pc, #500]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 8001630:	7a9b      	ldrb	r3, [r3, #10]
 8001632:	461a      	mov	r2, r3
 8001634:	497b      	ldr	r1, [pc, #492]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 8001636:	2001      	movs	r0, #1
 8001638:	f004 fa80 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 800163c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001640:	2201      	movs	r2, #1
 8001642:	4619      	mov	r1, r3
 8001644:	2005      	movs	r0, #5
 8001646:	f004 fa79 	bl	8005b3c <RS485_Tx>
 800164a:	e032      	b.n	80016b2 <LCD_Touch_Task+0x74a>
				}
				else //RF_16_22_Bit2_3
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 800164c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001650:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001654:	2301      	movs	r3, #1
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2314      	movs	r3, #20
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	4b78      	ldr	r3, [pc, #480]	@ (8001840 <LCD_Touch_Task+0x8d8>)
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	2200      	movs	r2, #0
 8001664:	f003 fef8 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_20_32_Str,20,1);
 8001668:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800166c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001670:	2301      	movs	r3, #1
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2314      	movs	r3, #20
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	4b6c      	ldr	r3, [pc, #432]	@ (800182c <LCD_Touch_Task+0x8c4>)
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001682:	f003 fee9 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit2_3_RST, RF_20_32_Bit2_3);
 8001686:	4b6b      	ldr	r3, [pc, #428]	@ (8001834 <LCD_Touch_Task+0x8cc>)
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	4b67      	ldr	r3, [pc, #412]	@ (8001828 <LCD_Touch_Task+0x8c0>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	496b      	ldr	r1, [pc, #428]	@ (800183c <LCD_Touch_Task+0x8d4>)
 8001690:	4864      	ldr	r0, [pc, #400]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 8001692:	f003 fa59 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001696:	4b63      	ldr	r3, [pc, #396]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 8001698:	7a9b      	ldrb	r3, [r3, #10]
 800169a:	461a      	mov	r2, r3
 800169c:	4961      	ldr	r1, [pc, #388]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 800169e:	2001      	movs	r0, #1
 80016a0:	f004 fa4c 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 80016a4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80016a8:	2201      	movs	r2, #1
 80016aa:	4619      	mov	r1, r3
 80016ac:	2005      	movs	r0, #5
 80016ae:	f004 fa45 	bl	8005b3c <RS485_Tx>
				}


				display.x=0; display.y=0;
 80016b2:	4b64      	ldr	r3, [pc, #400]	@ (8001844 <LCD_Touch_Task+0x8dc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	4b62      	ldr	r3, [pc, #392]	@ (8001844 <LCD_Touch_Task+0x8dc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 80016be:	e002      	b.n	80016c6 <LCD_Touch_Task+0x75e>
 80016c0:	200a      	movs	r0, #10
 80016c2:	f008 fc4c 	bl	8009f5e <osDelay>
 80016c6:	f005 fccf 	bl	8007068 <TS_Touched>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d0f7      	beq.n	80016c0 <LCD_Touch_Task+0x758>
			}
			//---------------FEU Gain path---------------
			X = 5;	Y = 50;
 80016d0:	2305      	movs	r3, #5
 80016d2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80016d6:	2332      	movs	r3, #50	@ 0x32
 80016d8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen(LCD_Gain_Low_Str)*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 80016dc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80016e0:	4b58      	ldr	r3, [pc, #352]	@ (8001844 <LCD_Touch_Task+0x8dc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f280 80c1 	bge.w	800186c <LCD_Touch_Task+0x904>
 80016ea:	4b56      	ldr	r3, [pc, #344]	@ (8001844 <LCD_Touch_Task+0x8dc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	461d      	mov	r5, r3
 80016f0:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 80016f4:	4854      	ldr	r0, [pc, #336]	@ (8001848 <LCD_Touch_Task+0x8e0>)
 80016f6:	f7fe fdcb 	bl	8000290 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4423      	add	r3, r4
 8001700:	429d      	cmp	r5, r3
 8001702:	f080 80b3 	bcs.w	800186c <LCD_Touch_Task+0x904>
 8001706:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800170a:	4b4e      	ldr	r3, [pc, #312]	@ (8001844 <LCD_Touch_Task+0x8dc>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	f280 80ac 	bge.w	800186c <LCD_Touch_Task+0x904>
 8001714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001718:	f103 020e 	add.w	r2, r3, #14
 800171c:	4b49      	ldr	r3, [pc, #292]	@ (8001844 <LCD_Touch_Task+0x8dc>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	f2c0 80a3 	blt.w	800186c <LCD_Touch_Task+0x904>
 8001726:	f005 fc9f 	bl	8007068 <TS_Touched>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	f040 809d 	bne.w	800186c <LCD_Touch_Task+0x904>
			{

				if( (MIU_FEU_MSG.PCKT_0 & Gain_High_Bit4) == Gain_High_Bit4)
 8001732:	4b3c      	ldr	r3, [pc, #240]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 8001734:	789a      	ldrb	r2, [r3, #2]
 8001736:	4b45      	ldr	r3, [pc, #276]	@ (800184c <LCD_Touch_Task+0x8e4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4013      	ands	r3, r2
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b43      	ldr	r3, [pc, #268]	@ (800184c <LCD_Touch_Task+0x8e4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d133      	bne.n	80017ae <LCD_Touch_Task+0x846>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_Gain_High_Str,20,1);
 8001746:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800174a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800174e:	2301      	movs	r3, #1
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2314      	movs	r3, #20
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	4b3e      	ldr	r3, [pc, #248]	@ (8001850 <LCD_Touch_Task+0x8e8>)
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	f003 fe7b 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_Gain_Low_Str,20,1);
 8001762:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001766:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800176a:	2301      	movs	r3, #1
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	2314      	movs	r3, #20
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	4b35      	ldr	r3, [pc, #212]	@ (8001848 <LCD_Touch_Task+0x8e0>)
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800177c:	f003 fe6c 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, Gain_Bit4_RST, Gain_Low_Bit4);
 8001780:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <LCD_Touch_Task+0x8ec>)
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <LCD_Touch_Task+0x8f0>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	492c      	ldr	r1, [pc, #176]	@ (800183c <LCD_Touch_Task+0x8d4>)
 800178a:	4826      	ldr	r0, [pc, #152]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 800178c:	f003 f9dc 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001790:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 8001792:	7a9b      	ldrb	r3, [r3, #10]
 8001794:	461a      	mov	r2, r3
 8001796:	4923      	ldr	r1, [pc, #140]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 8001798:	2001      	movs	r0, #1
 800179a:	f004 f9cf 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 800179e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80017a2:	2201      	movs	r2, #1
 80017a4:	4619      	mov	r1, r3
 80017a6:	2005      	movs	r0, #5
 80017a8:	f004 f9c8 	bl	8005b3c <RS485_Tx>
 80017ac:	e032      	b.n	8001814 <LCD_Touch_Task+0x8ac>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_Gain_Low_Str,20,1);
 80017ae:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80017b2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80017b6:	2301      	movs	r3, #1
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2314      	movs	r3, #20
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <LCD_Touch_Task+0x8e0>)
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	2200      	movs	r2, #0
 80017c6:	f003 fe47 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_Gain_High_Str,20,1);
 80017ca:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80017ce:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80017d2:	2301      	movs	r3, #1
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	2314      	movs	r3, #20
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <LCD_Touch_Task+0x8e8>)
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e4:	f003 fe38 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, Gain_Bit4_RST, Gain_High_Bit4);
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <LCD_Touch_Task+0x8ec>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <LCD_Touch_Task+0x8e4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4912      	ldr	r1, [pc, #72]	@ (800183c <LCD_Touch_Task+0x8d4>)
 80017f2:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 80017f4:	f003 f9a8 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 80017fa:	7a9b      	ldrb	r3, [r3, #10]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4909      	ldr	r1, [pc, #36]	@ (8001824 <LCD_Touch_Task+0x8bc>)
 8001800:	2001      	movs	r0, #1
 8001802:	f004 f99b 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001806:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800180a:	2201      	movs	r2, #1
 800180c:	4619      	mov	r1, r3
 800180e:	2005      	movs	r0, #5
 8001810:	f004 f994 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <LCD_Touch_Task+0x8dc>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <LCD_Touch_Task+0x8dc>)
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001820:	e01f      	b.n	8001862 <LCD_Touch_Task+0x8fa>
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000
 8001828:	0800fbf7 	.word	0x0800fbf7
 800182c:	0800fb8c 	.word	0x0800fb8c
 8001830:	0800fb98 	.word	0x0800fb98
 8001834:	0800fbf5 	.word	0x0800fbf5
 8001838:	0800fbf8 	.word	0x0800fbf8
 800183c:	20000002 	.word	0x20000002
 8001840:	0800fb80 	.word	0x0800fb80
 8001844:	20025e48 	.word	0x20025e48
 8001848:	0800fbb0 	.word	0x0800fbb0
 800184c:	0800fbfc 	.word	0x0800fbfc
 8001850:	0800fbc0 	.word	0x0800fbc0
 8001854:	0800fbfa 	.word	0x0800fbfa
 8001858:	0800fbfb 	.word	0x0800fbfb
 800185c:	200a      	movs	r0, #10
 800185e:	f008 fb7e 	bl	8009f5e <osDelay>
 8001862:	f005 fc01 	bl	8007068 <TS_Touched>
 8001866:	4603      	mov	r3, r0
 8001868:	2b01      	cmp	r3, #1
 800186a:	d0f7      	beq.n	800185c <LCD_Touch_Task+0x8f4>
			}
			//---------------FEU RF Power---------------
			X = 150;	Y = 50;
 800186c:	2396      	movs	r3, #150	@ 0x96
 800186e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001872:	2332      	movs	r3, #50	@ 0x32
 8001874:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen(LCD_RX1_Str)*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 8001878:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800187c:	4ba5      	ldr	r3, [pc, #660]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	f280 80a3 	bge.w	80019cc <LCD_Touch_Task+0xa64>
 8001886:	4ba3      	ldr	r3, [pc, #652]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461d      	mov	r5, r3
 800188c:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001890:	48a1      	ldr	r0, [pc, #644]	@ (8001b18 <LCD_Touch_Task+0xbb0>)
 8001892:	f7fe fcfd 	bl	8000290 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4423      	add	r3, r4
 800189c:	429d      	cmp	r5, r3
 800189e:	f080 8095 	bcs.w	80019cc <LCD_Touch_Task+0xa64>
 80018a2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80018a6:	4b9b      	ldr	r3, [pc, #620]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	f280 808e 	bge.w	80019cc <LCD_Touch_Task+0xa64>
 80018b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018b4:	f103 020e 	add.w	r2, r3, #14
 80018b8:	4b96      	ldr	r3, [pc, #600]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f2c0 8085 	blt.w	80019cc <LCD_Touch_Task+0xa64>
 80018c2:	f005 fbd1 	bl	8007068 <TS_Touched>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d17f      	bne.n	80019cc <LCD_Touch_Task+0xa64>
			{

				if( (MIU_FEU_MSG.PCKT_0 & RF_ON_Bit5) == RF_ON_Bit5)
 80018cc:	4b93      	ldr	r3, [pc, #588]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 80018ce:	789a      	ldrb	r2, [r3, #2]
 80018d0:	4b93      	ldr	r3, [pc, #588]	@ (8001b20 <LCD_Touch_Task+0xbb8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4013      	ands	r3, r2
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b91      	ldr	r3, [pc, #580]	@ (8001b20 <LCD_Touch_Task+0xbb8>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d133      	bne.n	8001948 <LCD_Touch_Task+0x9e0>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_ON_Str,20,1);
 80018e0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80018e4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 80018e8:	2301      	movs	r3, #1
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	2314      	movs	r3, #20
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001b24 <LCD_Touch_Task+0xbbc>)
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	2200      	movs	r2, #0
 80018f8:	f003 fdae 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 80018fc:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001900:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001904:	2301      	movs	r3, #1
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2314      	movs	r3, #20
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	4b86      	ldr	r3, [pc, #536]	@ (8001b28 <LCD_Touch_Task+0xbc0>)
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2300      	movs	r3, #0
 8001912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001916:	f003 fd9f 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit5_RST, RF_OFF_Bit5);
 800191a:	4b84      	ldr	r3, [pc, #528]	@ (8001b2c <LCD_Touch_Task+0xbc4>)
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	4b84      	ldr	r3, [pc, #528]	@ (8001b30 <LCD_Touch_Task+0xbc8>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4984      	ldr	r1, [pc, #528]	@ (8001b34 <LCD_Touch_Task+0xbcc>)
 8001924:	487d      	ldr	r0, [pc, #500]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 8001926:	f003 f90f 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 800192a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 800192c:	7a9b      	ldrb	r3, [r3, #10]
 800192e:	461a      	mov	r2, r3
 8001930:	497a      	ldr	r1, [pc, #488]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 8001932:	2001      	movs	r0, #1
 8001934:	f004 f902 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001938:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800193c:	2201      	movs	r2, #1
 800193e:	4619      	mov	r1, r3
 8001940:	2005      	movs	r0, #5
 8001942:	f004 f8fb 	bl	8005b3c <RS485_Tx>
 8001946:	e032      	b.n	80019ae <LCD_Touch_Task+0xa46>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8001948:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800194c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001950:	2301      	movs	r3, #1
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2314      	movs	r3, #20
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	4b73      	ldr	r3, [pc, #460]	@ (8001b28 <LCD_Touch_Task+0xbc0>)
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	2200      	movs	r2, #0
 8001960:	f003 fd7a 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_ON_Str,20,1);
 8001964:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001968:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800196c:	2301      	movs	r3, #1
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	2314      	movs	r3, #20
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	4b6b      	ldr	r3, [pc, #428]	@ (8001b24 <LCD_Touch_Task+0xbbc>)
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2300      	movs	r3, #0
 800197a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800197e:	f003 fd6b 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_0, RF_Bit5_RST, RF_ON_Bit5);
 8001982:	4b6a      	ldr	r3, [pc, #424]	@ (8001b2c <LCD_Touch_Task+0xbc4>)
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	4b66      	ldr	r3, [pc, #408]	@ (8001b20 <LCD_Touch_Task+0xbb8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	496a      	ldr	r1, [pc, #424]	@ (8001b34 <LCD_Touch_Task+0xbcc>)
 800198c:	4863      	ldr	r0, [pc, #396]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 800198e:	f003 f8db 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001992:	4b62      	ldr	r3, [pc, #392]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 8001994:	7a9b      	ldrb	r3, [r3, #10]
 8001996:	461a      	mov	r2, r3
 8001998:	4960      	ldr	r1, [pc, #384]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 800199a:	2001      	movs	r0, #1
 800199c:	f004 f8ce 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 80019a0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80019a4:	2201      	movs	r2, #1
 80019a6:	4619      	mov	r1, r3
 80019a8:	2005      	movs	r0, #5
 80019aa:	f004 f8c7 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 80019ae:	4b59      	ldr	r3, [pc, #356]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b57      	ldr	r3, [pc, #348]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 80019ba:	e002      	b.n	80019c2 <LCD_Touch_Task+0xa5a>
 80019bc:	200a      	movs	r0, #10
 80019be:	f008 face 	bl	8009f5e <osDelay>
 80019c2:	f005 fb51 	bl	8007068 <TS_Touched>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d0f7      	beq.n	80019bc <LCD_Touch_Task+0xa54>
			}
			//---------------FEU Atten---------------
			X = 5+(strlen("Atten: ")*8);	Y = 70;
 80019cc:	233d      	movs	r3, #61	@ 0x3d
 80019ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80019d2:	2346      	movs	r3, #70	@ 0x46
 80019d4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen("-")*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 80019d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80019dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f280 80b9 	bge.w	8001b58 <LCD_Touch_Task+0xbf0>
 80019e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80019f0:	3308      	adds	r3, #8
 80019f2:	429a      	cmp	r2, r3
 80019f4:	f080 80b0 	bcs.w	8001b58 <LCD_Touch_Task+0xbf0>
 80019f8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80019fc:	4b45      	ldr	r3, [pc, #276]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f280 80a9 	bge.w	8001b58 <LCD_Touch_Task+0xbf0>
 8001a06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a0a:	f103 020e 	add.w	r2, r3, #14
 8001a0e:	4b41      	ldr	r3, [pc, #260]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	f2c0 80a0 	blt.w	8001b58 <LCD_Touch_Task+0xbf0>
 8001a18:	f005 fb26 	bl	8007068 <TS_Touched>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	f040 809a 	bne.w	8001b58 <LCD_Touch_Task+0xbf0>
			{
				if(FEU_Atten_Bit0_5 > 0)
 8001a24:	4b44      	ldr	r3, [pc, #272]	@ (8001b38 <LCD_Touch_Task+0xbd0>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d06b      	beq.n	8001b04 <LCD_Touch_Task+0xb9c>
				{
					X = 5+(strlen("Atten: -")*8);
 8001a2c:	2345      	movs	r3, #69	@ 0x45
 8001a2e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					sprintf(Str, "%.1f", ((float)FEU_Atten_Bit0_5/2));
 8001a32:	4b41      	ldr	r3, [pc, #260]	@ (8001b38 <LCD_Touch_Task+0xbd0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a46:	ee16 0a90 	vmov	r0, s13
 8001a4a:	f7fe fd8d 	bl	8000568 <__aeabi_f2d>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	f107 000c 	add.w	r0, r7, #12
 8001a56:	4939      	ldr	r1, [pc, #228]	@ (8001b3c <LCD_Touch_Task+0xbd4>)
 8001a58:	f00b fdba 	bl	800d5d0 <siprintf>
					Show_Str(X+2, Y, BLACK, BLACK, (u8 *)Str,20,1);
 8001a5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001a60:	3302      	adds	r3, #2
 8001a62:	b298      	uxth	r0, r3
 8001a64:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	2314      	movs	r3, #20
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f003 fced 	bl	8005458 <Show_Str>
					FEU_Atten_Bit0_5--;
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b38 <LCD_Touch_Task+0xbd0>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b2c      	ldr	r3, [pc, #176]	@ (8001b38 <LCD_Touch_Task+0xbd0>)
 8001a88:	701a      	strb	r2, [r3, #0]
					sprintf(Str, "%.1f", ((float)FEU_Atten_Bit0_5/2));
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <LCD_Touch_Task+0xbd0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a96:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a9e:	ee16 0a90 	vmov	r0, s13
 8001aa2:	f7fe fd61 	bl	8000568 <__aeabi_f2d>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	f107 000c 	add.w	r0, r7, #12
 8001aae:	4923      	ldr	r1, [pc, #140]	@ (8001b3c <LCD_Touch_Task+0xbd4>)
 8001ab0:	f00b fd8e 	bl	800d5d0 <siprintf>
					Show_Str(X+2, Y, WHITE, BLACK, (u8 *)Str,20,1);
 8001ab4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ab8:	3302      	adds	r3, #2
 8001aba:	b298      	uxth	r0, r3
 8001abc:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	2314      	movs	r3, #20
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ad4:	f003 fcc0 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_1, Atten_Bit0_5_RST, FEU_Atten_Bit0_5);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <LCD_Touch_Task+0xbd8>)
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <LCD_Touch_Task+0xbd0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4918      	ldr	r1, [pc, #96]	@ (8001b44 <LCD_Touch_Task+0xbdc>)
 8001ae2:	480e      	ldr	r0, [pc, #56]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 8001ae4:	f003 f830 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 8001aea:	7a9b      	ldrb	r3, [r3, #10]
 8001aec:	461a      	mov	r2, r3
 8001aee:	490b      	ldr	r1, [pc, #44]	@ (8001b1c <LCD_Touch_Task+0xbb4>)
 8001af0:	2001      	movs	r0, #1
 8001af2:	f004 f823 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001af6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001afa:	2201      	movs	r2, #1
 8001afc:	4619      	mov	r1, r3
 8001afe:	2005      	movs	r0, #5
 8001b00:	f004 f81c 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <LCD_Touch_Task+0xbac>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001b10:	e01d      	b.n	8001b4e <LCD_Touch_Task+0xbe6>
 8001b12:	bf00      	nop
 8001b14:	20025e48 	.word	0x20025e48
 8001b18:	0800fb60 	.word	0x0800fb60
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	0800fbff 	.word	0x0800fbff
 8001b24:	0800fbd8 	.word	0x0800fbd8
 8001b28:	0800fbd0 	.word	0x0800fbd0
 8001b2c:	0800fbfd 	.word	0x0800fbfd
 8001b30:	0800fbfe 	.word	0x0800fbfe
 8001b34:	20000002 	.word	0x20000002
 8001b38:	20025e10 	.word	0x20025e10
 8001b3c:	0800f920 	.word	0x0800f920
 8001b40:	0800fc00 	.word	0x0800fc00
 8001b44:	20000003 	.word	0x20000003
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f008 fa08 	bl	8009f5e <osDelay>
 8001b4e:	f005 fa8b 	bl	8007068 <TS_Touched>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d0f7      	beq.n	8001b48 <LCD_Touch_Task+0xbe0>
			}
			//----------
			X = 5+(strlen("Atten: -     ")*8);	Y = 70;
 8001b58:	236d      	movs	r3, #109	@ 0x6d
 8001b5a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001b5e:	2346      	movs	r3, #70	@ 0x46
 8001b60:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen("+")*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 8001b64:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001b68:	4ba5      	ldr	r3, [pc, #660]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f280 809d 	bge.w	8001cac <LCD_Touch_Task+0xd44>
 8001b72:	4ba3      	ldr	r3, [pc, #652]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	f080 8094 	bcs.w	8001cac <LCD_Touch_Task+0xd44>
 8001b84:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001b88:	4b9d      	ldr	r3, [pc, #628]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f280 808d 	bge.w	8001cac <LCD_Touch_Task+0xd44>
 8001b92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b96:	f103 020e 	add.w	r2, r3, #14
 8001b9a:	4b99      	ldr	r3, [pc, #612]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	f2c0 8084 	blt.w	8001cac <LCD_Touch_Task+0xd44>
 8001ba4:	f005 fa60 	bl	8007068 <TS_Touched>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d17e      	bne.n	8001cac <LCD_Touch_Task+0xd44>
			{
				if(FEU_Atten_Bit0_5 < 63)
 8001bae:	4b95      	ldr	r3, [pc, #596]	@ (8001e04 <LCD_Touch_Task+0xe9c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8001bb4:	d86b      	bhi.n	8001c8e <LCD_Touch_Task+0xd26>
				{
					X = 5+(strlen("Atten: -")*8);
 8001bb6:	2345      	movs	r3, #69	@ 0x45
 8001bb8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					sprintf(Str, "%.1f", ((float)FEU_Atten_Bit0_5/2));
 8001bbc:	4b91      	ldr	r3, [pc, #580]	@ (8001e04 <LCD_Touch_Task+0xe9c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001bcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bd0:	ee16 0a90 	vmov	r0, s13
 8001bd4:	f7fe fcc8 	bl	8000568 <__aeabi_f2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	f107 000c 	add.w	r0, r7, #12
 8001be0:	4989      	ldr	r1, [pc, #548]	@ (8001e08 <LCD_Touch_Task+0xea0>)
 8001be2:	f00b fcf5 	bl	800d5d0 <siprintf>
					Show_Str(X+2, Y, BLACK, BLACK, (u8 *)Str,20,1);
 8001be6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001bea:	3302      	adds	r3, #2
 8001bec:	b298      	uxth	r0, r3
 8001bee:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	2314      	movs	r3, #20
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	2200      	movs	r2, #0
 8001c04:	f003 fc28 	bl	8005458 <Show_Str>
					FEU_Atten_Bit0_5++;
 8001c08:	4b7e      	ldr	r3, [pc, #504]	@ (8001e04 <LCD_Touch_Task+0xe9c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b7c      	ldr	r3, [pc, #496]	@ (8001e04 <LCD_Touch_Task+0xe9c>)
 8001c12:	701a      	strb	r2, [r3, #0]
					sprintf(Str, "%.1f", ((float)FEU_Atten_Bit0_5/2));
 8001c14:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <LCD_Touch_Task+0xe9c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c28:	ee16 0a90 	vmov	r0, s13
 8001c2c:	f7fe fc9c 	bl	8000568 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	f107 000c 	add.w	r0, r7, #12
 8001c38:	4973      	ldr	r1, [pc, #460]	@ (8001e08 <LCD_Touch_Task+0xea0>)
 8001c3a:	f00b fcc9 	bl	800d5d0 <siprintf>
					Show_Str(X+2, Y, WHITE, BLACK, (u8 *)Str,20,1);
 8001c3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c42:	3302      	adds	r3, #2
 8001c44:	b298      	uxth	r0, r3
 8001c46:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2314      	movs	r3, #20
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c5e:	f003 fbfb 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_FEU_MSG, &MIU_FEU_MSG.PCKT_1, Atten_Bit0_5_RST, FEU_Atten_Bit0_5);
 8001c62:	4b6a      	ldr	r3, [pc, #424]	@ (8001e0c <LCD_Touch_Task+0xea4>)
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <LCD_Touch_Task+0xe9c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4969      	ldr	r1, [pc, #420]	@ (8001e10 <LCD_Touch_Task+0xea8>)
 8001c6c:	4869      	ldr	r0, [pc, #420]	@ (8001e14 <LCD_Touch_Task+0xeac>)
 8001c6e:	f002 ff6b 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_FEU_MSG, MIU_FEU_MSG.Length);
 8001c72:	4b68      	ldr	r3, [pc, #416]	@ (8001e14 <LCD_Touch_Task+0xeac>)
 8001c74:	7a9b      	ldrb	r3, [r3, #10]
 8001c76:	461a      	mov	r2, r3
 8001c78:	4966      	ldr	r1, [pc, #408]	@ (8001e14 <LCD_Touch_Task+0xeac>)
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f003 ff5e 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001c80:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001c84:	2201      	movs	r2, #1
 8001c86:	4619      	mov	r1, r3
 8001c88:	2005      	movs	r0, #5
 8001c8a:	f003 ff57 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	4b5a      	ldr	r3, [pc, #360]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001c9a:	e002      	b.n	8001ca2 <LCD_Touch_Task+0xd3a>
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f008 f95e 	bl	8009f5e <osDelay>
 8001ca2:	f005 f9e1 	bl	8007068 <TS_Touched>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d0f7      	beq.n	8001c9c <LCD_Touch_Task+0xd34>
			}
			//---------------IJU INJ---------------
			X = 5;	Y = 110;
 8001cac:	2305      	movs	r3, #5
 8001cae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001cb2:	236e      	movs	r3, #110	@ 0x6e
 8001cb4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen(LCD_INJ_ON_Str)*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 8001cb8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f280 80bf 	bge.w	8001e44 <LCD_Touch_Task+0xedc>
 8001cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	461d      	mov	r5, r3
 8001ccc:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001cd0:	4851      	ldr	r0, [pc, #324]	@ (8001e18 <LCD_Touch_Task+0xeb0>)
 8001cd2:	f7fe fadd 	bl	8000290 <strlen>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4423      	add	r3, r4
 8001cdc:	429d      	cmp	r5, r3
 8001cde:	f080 80b1 	bcs.w	8001e44 <LCD_Touch_Task+0xedc>
 8001ce2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001ce6:	4b46      	ldr	r3, [pc, #280]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	f280 80aa 	bge.w	8001e44 <LCD_Touch_Task+0xedc>
 8001cf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cf4:	f103 020e 	add.w	r2, r3, #14
 8001cf8:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f2c0 80a1 	blt.w	8001e44 <LCD_Touch_Task+0xedc>
 8001d02:	f005 f9b1 	bl	8007068 <TS_Touched>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f040 809b 	bne.w	8001e44 <LCD_Touch_Task+0xedc>
			{

				if( (MIU_IJU_MSG.PCKT_0 & INJ_ON_Bit1) == INJ_ON_Bit1)
 8001d0e:	4b43      	ldr	r3, [pc, #268]	@ (8001e1c <LCD_Touch_Task+0xeb4>)
 8001d10:	789a      	ldrb	r2, [r3, #2]
 8001d12:	4b43      	ldr	r3, [pc, #268]	@ (8001e20 <LCD_Touch_Task+0xeb8>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4013      	ands	r3, r2
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b41      	ldr	r3, [pc, #260]	@ (8001e20 <LCD_Touch_Task+0xeb8>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d133      	bne.n	8001d8a <LCD_Touch_Task+0xe22>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_INJ_ON_Str,20,1);
 8001d22:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001d26:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	2314      	movs	r3, #20
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <LCD_Touch_Task+0xeb0>)
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f003 fb8d 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 8001d3e:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001d42:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001d46:	2301      	movs	r3, #1
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	2314      	movs	r3, #20
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	4b35      	ldr	r3, [pc, #212]	@ (8001e24 <LCD_Touch_Task+0xebc>)
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d58:	f003 fb7e 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, INJ_Bit1_RST, INJ_OFF_Bit1);
 8001d5c:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <LCD_Touch_Task+0xec0>)
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	4b32      	ldr	r3, [pc, #200]	@ (8001e2c <LCD_Touch_Task+0xec4>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4932      	ldr	r1, [pc, #200]	@ (8001e30 <LCD_Touch_Task+0xec8>)
 8001d66:	482d      	ldr	r0, [pc, #180]	@ (8001e1c <LCD_Touch_Task+0xeb4>)
 8001d68:	f002 feee 	bl	8004b48 <Message_Maker>
					RS485_Tx(2, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <LCD_Touch_Task+0xeb4>)
 8001d6e:	7a9b      	ldrb	r3, [r3, #10]
 8001d70:	461a      	mov	r2, r3
 8001d72:	492a      	ldr	r1, [pc, #168]	@ (8001e1c <LCD_Touch_Task+0xeb4>)
 8001d74:	2002      	movs	r0, #2
 8001d76:	f003 fee1 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001d7a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4619      	mov	r1, r3
 8001d82:	2005      	movs	r0, #5
 8001d84:	f003 feda 	bl	8005b3c <RS485_Tx>
 8001d88:	e032      	b.n	8001df0 <LCD_Touch_Task+0xe88>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_INJ_OFF_Str,20,1);
 8001d8a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001d8e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001d92:	2301      	movs	r3, #1
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2314      	movs	r3, #20
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <LCD_Touch_Task+0xebc>)
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	f003 fb59 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_INJ_ON_Str,20,1);
 8001da6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001daa:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001dae:	2301      	movs	r3, #1
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	2314      	movs	r3, #20
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <LCD_Touch_Task+0xeb0>)
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc0:	f003 fb4a 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, INJ_Bit1_RST, INJ_ON_Bit1);
 8001dc4:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <LCD_Touch_Task+0xec0>)
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <LCD_Touch_Task+0xeb8>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4918      	ldr	r1, [pc, #96]	@ (8001e30 <LCD_Touch_Task+0xec8>)
 8001dce:	4813      	ldr	r0, [pc, #76]	@ (8001e1c <LCD_Touch_Task+0xeb4>)
 8001dd0:	f002 feba 	bl	8004b48 <Message_Maker>
					RS485_Tx(2, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <LCD_Touch_Task+0xeb4>)
 8001dd6:	7a9b      	ldrb	r3, [r3, #10]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4910      	ldr	r1, [pc, #64]	@ (8001e1c <LCD_Touch_Task+0xeb4>)
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f003 fead 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001de2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001de6:	2201      	movs	r2, #1
 8001de8:	4619      	mov	r1, r3
 8001dea:	2005      	movs	r0, #5
 8001dec:	f003 fea6 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8001df0:	4b03      	ldr	r3, [pc, #12]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	4b02      	ldr	r3, [pc, #8]	@ (8001e00 <LCD_Touch_Task+0xe98>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8001dfc:	e01d      	b.n	8001e3a <LCD_Touch_Task+0xed2>
 8001dfe:	bf00      	nop
 8001e00:	20025e48 	.word	0x20025e48
 8001e04:	20025e10 	.word	0x20025e10
 8001e08:	0800f920 	.word	0x0800f920
 8001e0c:	0800fc00 	.word	0x0800fc00
 8001e10:	20000003 	.word	0x20000003
 8001e14:	20000000 	.word	0x20000000
 8001e18:	0800fb78 	.word	0x0800fb78
 8001e1c:	20000010 	.word	0x20000010
 8001e20:	0800fbf4 	.word	0x0800fbf4
 8001e24:	0800fb70 	.word	0x0800fb70
 8001e28:	0800fbf2 	.word	0x0800fbf2
 8001e2c:	0800fbf3 	.word	0x0800fbf3
 8001e30:	20000012 	.word	0x20000012
 8001e34:	200a      	movs	r0, #10
 8001e36:	f008 f892 	bl	8009f5e <osDelay>
 8001e3a:	f005 f915 	bl	8007068 <TS_Touched>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d0f7      	beq.n	8001e34 <LCD_Touch_Task+0xecc>
			}
			//---------------IJU RF---------------
			X = 95;	Y = 110;
 8001e44:	235f      	movs	r3, #95	@ 0x5f
 8001e46:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001e4a:	236e      	movs	r3, #110	@ 0x6e
 8001e4c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen(LCD_RF_16_22_Str)*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 8001e50:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001e54:	4b8e      	ldr	r3, [pc, #568]	@ (8002090 <LCD_Touch_Task+0x1128>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	f280 8139 	bge.w	80020d0 <LCD_Touch_Task+0x1168>
 8001e5e:	4b8c      	ldr	r3, [pc, #560]	@ (8002090 <LCD_Touch_Task+0x1128>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461d      	mov	r5, r3
 8001e64:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 8001e68:	488a      	ldr	r0, [pc, #552]	@ (8002094 <LCD_Touch_Task+0x112c>)
 8001e6a:	f7fe fa11 	bl	8000290 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4423      	add	r3, r4
 8001e74:	429d      	cmp	r5, r3
 8001e76:	f080 812b 	bcs.w	80020d0 <LCD_Touch_Task+0x1168>
 8001e7a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001e7e:	4b84      	ldr	r3, [pc, #528]	@ (8002090 <LCD_Touch_Task+0x1128>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	f280 8124 	bge.w	80020d0 <LCD_Touch_Task+0x1168>
 8001e88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e8c:	f103 020e 	add.w	r2, r3, #14
 8001e90:	4b7f      	ldr	r3, [pc, #508]	@ (8002090 <LCD_Touch_Task+0x1128>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f2c0 811b 	blt.w	80020d0 <LCD_Touch_Task+0x1168>
 8001e9a:	f005 f8e5 	bl	8007068 <TS_Touched>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	f040 8115 	bne.w	80020d0 <LCD_Touch_Task+0x1168>
			{
				if( (MIU_IJU_MSG.PCKT_0 & RF_42_63_Bit2_3) == RF_42_63_Bit2_3)
 8001ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001ea8:	789a      	ldrb	r2, [r3, #2]
 8001eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800209c <LCD_Touch_Task+0x1134>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800209c <LCD_Touch_Task+0x1134>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d133      	bne.n	8001f22 <LCD_Touch_Task+0xfba>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_42_63_Str,20,1);
 8001eba:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001ebe:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	2314      	movs	r3, #20
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	4b75      	ldr	r3, [pc, #468]	@ (80020a0 <LCD_Touch_Task+0x1138>)
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f003 fac1 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 8001ed6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001eda:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2314      	movs	r3, #20
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	4b6b      	ldr	r3, [pc, #428]	@ (8002094 <LCD_Touch_Task+0x112c>)
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ef0:	f003 fab2 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit2_3_RST, RF_16_22_Bit2_3);
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80020a4 <LCD_Touch_Task+0x113c>)
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <LCD_Touch_Task+0x1140>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	496b      	ldr	r1, [pc, #428]	@ (80020ac <LCD_Touch_Task+0x1144>)
 8001efe:	4866      	ldr	r0, [pc, #408]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001f00:	f002 fe22 	bl	8004b48 <Message_Maker>
					RS485_Tx(2, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8001f04:	4b64      	ldr	r3, [pc, #400]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001f06:	7a9b      	ldrb	r3, [r3, #10]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4963      	ldr	r1, [pc, #396]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f003 fe15 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001f12:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001f16:	2201      	movs	r2, #1
 8001f18:	4619      	mov	r1, r3
 8001f1a:	2005      	movs	r0, #5
 8001f1c:	f003 fe0e 	bl	8005b3c <RS485_Tx>
 8001f20:	e0ae      	b.n	8002080 <LCD_Touch_Task+0x1118>
				}
				else if( (MIU_IJU_MSG.PCKT_0 & RF_30_46_Bit2_3) == RF_30_46_Bit2_3)
 8001f22:	4b5d      	ldr	r3, [pc, #372]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001f24:	789a      	ldrb	r2, [r3, #2]
 8001f26:	4b62      	ldr	r3, [pc, #392]	@ (80020b0 <LCD_Touch_Task+0x1148>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b60      	ldr	r3, [pc, #384]	@ (80020b0 <LCD_Touch_Task+0x1148>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d133      	bne.n	8001f9e <LCD_Touch_Task+0x1036>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_30_46_Str,20,1);
 8001f36:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001f3a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001f3e:	2301      	movs	r3, #1
 8001f40:	9302      	str	r3, [sp, #8]
 8001f42:	2314      	movs	r3, #20
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	4b5b      	ldr	r3, [pc, #364]	@ (80020b4 <LCD_Touch_Task+0x114c>)
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f003 fa83 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_42_63_Str,20,1);
 8001f52:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001f56:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	2314      	movs	r3, #20
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	4b4f      	ldr	r3, [pc, #316]	@ (80020a0 <LCD_Touch_Task+0x1138>)
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2300      	movs	r3, #0
 8001f68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f6c:	f003 fa74 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit2_3_RST, RF_42_63_Bit2_3);
 8001f70:	4b4c      	ldr	r3, [pc, #304]	@ (80020a4 <LCD_Touch_Task+0x113c>)
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	4b49      	ldr	r3, [pc, #292]	@ (800209c <LCD_Touch_Task+0x1134>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	494c      	ldr	r1, [pc, #304]	@ (80020ac <LCD_Touch_Task+0x1144>)
 8001f7a:	4847      	ldr	r0, [pc, #284]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001f7c:	f002 fde4 	bl	8004b48 <Message_Maker>
					RS485_Tx(2, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8001f80:	4b45      	ldr	r3, [pc, #276]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001f82:	7a9b      	ldrb	r3, [r3, #10]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4944      	ldr	r1, [pc, #272]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f003 fdd7 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8001f8e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001f92:	2201      	movs	r2, #1
 8001f94:	4619      	mov	r1, r3
 8001f96:	2005      	movs	r0, #5
 8001f98:	f003 fdd0 	bl	8005b3c <RS485_Tx>
 8001f9c:	e070      	b.n	8002080 <LCD_Touch_Task+0x1118>
				}
				else if( (MIU_IJU_MSG.PCKT_0 & RF_20_32_Bit2_3) == RF_20_32_Bit2_3)
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001fa0:	789a      	ldrb	r2, [r3, #2]
 8001fa2:	4b45      	ldr	r3, [pc, #276]	@ (80020b8 <LCD_Touch_Task+0x1150>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b43      	ldr	r3, [pc, #268]	@ (80020b8 <LCD_Touch_Task+0x1150>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d133      	bne.n	800201a <LCD_Touch_Task+0x10b2>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_20_32_Str,20,1);
 8001fb2:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001fb6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	2314      	movs	r3, #20
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <LCD_Touch_Task+0x1154>)
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f003 fa45 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_30_46_Str,20,1);
 8001fce:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001fd2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	2314      	movs	r3, #20
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	4b35      	ldr	r3, [pc, #212]	@ (80020b4 <LCD_Touch_Task+0x114c>)
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe8:	f003 fa36 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit2_3_RST, RF_30_46_Bit2_3);
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <LCD_Touch_Task+0x113c>)
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <LCD_Touch_Task+0x1148>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	492d      	ldr	r1, [pc, #180]	@ (80020ac <LCD_Touch_Task+0x1144>)
 8001ff6:	4828      	ldr	r0, [pc, #160]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001ff8:	f002 fda6 	bl	8004b48 <Message_Maker>
					RS485_Tx(2, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8001ffc:	4b26      	ldr	r3, [pc, #152]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8001ffe:	7a9b      	ldrb	r3, [r3, #10]
 8002000:	461a      	mov	r2, r3
 8002002:	4925      	ldr	r1, [pc, #148]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8002004:	2002      	movs	r0, #2
 8002006:	f003 fd99 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 800200a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	2005      	movs	r0, #5
 8002014:	f003 fd92 	bl	8005b3c <RS485_Tx>
 8002018:	e032      	b.n	8002080 <LCD_Touch_Task+0x1118>
				}
				else //RF_16_22_Bit2_3
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_16_22_Str,20,1);
 800201a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800201e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002022:	2301      	movs	r3, #1
 8002024:	9302      	str	r3, [sp, #8]
 8002026:	2314      	movs	r3, #20
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <LCD_Touch_Task+0x112c>)
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2300      	movs	r3, #0
 8002030:	2200      	movs	r2, #0
 8002032:	f003 fa11 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_20_32_Str,20,1);
 8002036:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800203a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800203e:	2301      	movs	r3, #1
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2314      	movs	r3, #20
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <LCD_Touch_Task+0x1154>)
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2300      	movs	r3, #0
 800204c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002050:	f003 fa02 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit2_3_RST, RF_20_32_Bit2_3);
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <LCD_Touch_Task+0x113c>)
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <LCD_Touch_Task+0x1150>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4913      	ldr	r1, [pc, #76]	@ (80020ac <LCD_Touch_Task+0x1144>)
 800205e:	480e      	ldr	r0, [pc, #56]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8002060:	f002 fd72 	bl	8004b48 <Message_Maker>
					RS485_Tx(2, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <LCD_Touch_Task+0x1130>)
 8002066:	7a9b      	ldrb	r3, [r3, #10]
 8002068:	461a      	mov	r2, r3
 800206a:	490b      	ldr	r1, [pc, #44]	@ (8002098 <LCD_Touch_Task+0x1130>)
 800206c:	2002      	movs	r0, #2
 800206e:	f003 fd65 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8002072:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002076:	2201      	movs	r2, #1
 8002078:	4619      	mov	r1, r3
 800207a:	2005      	movs	r0, #5
 800207c:	f003 fd5e 	bl	8005b3c <RS485_Tx>
				}


				display.x=0; display.y=0;
 8002080:	4b03      	ldr	r3, [pc, #12]	@ (8002090 <LCD_Touch_Task+0x1128>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	4b02      	ldr	r3, [pc, #8]	@ (8002090 <LCD_Touch_Task+0x1128>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 800208c:	e01b      	b.n	80020c6 <LCD_Touch_Task+0x115e>
 800208e:	bf00      	nop
 8002090:	20025e48 	.word	0x20025e48
 8002094:	0800fb80 	.word	0x0800fb80
 8002098:	20000010 	.word	0x20000010
 800209c:	0800fbf9 	.word	0x0800fbf9
 80020a0:	0800fba4 	.word	0x0800fba4
 80020a4:	0800fbf5 	.word	0x0800fbf5
 80020a8:	0800fbf6 	.word	0x0800fbf6
 80020ac:	20000012 	.word	0x20000012
 80020b0:	0800fbf8 	.word	0x0800fbf8
 80020b4:	0800fb98 	.word	0x0800fb98
 80020b8:	0800fbf7 	.word	0x0800fbf7
 80020bc:	0800fb8c 	.word	0x0800fb8c
 80020c0:	200a      	movs	r0, #10
 80020c2:	f007 ff4c 	bl	8009f5e <osDelay>
 80020c6:	f004 ffcf 	bl	8007068 <TS_Touched>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d0f7      	beq.n	80020c0 <LCD_Touch_Task+0x1158>
			}
			//---------------IJU Atten---------------
			X = 5+(strlen("Atten: ")*8);	Y = 130;
 80020d0:	233d      	movs	r3, #61	@ 0x3d
 80020d2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80020d6:	2382      	movs	r3, #130	@ 0x82
 80020d8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen("-")*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 80020dc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80020e0:	4ba2      	ldr	r3, [pc, #648]	@ (800236c <LCD_Touch_Task+0x1404>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f280 809d 	bge.w	8002224 <LCD_Touch_Task+0x12bc>
 80020ea:	4ba0      	ldr	r3, [pc, #640]	@ (800236c <LCD_Touch_Task+0x1404>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80020f4:	3308      	adds	r3, #8
 80020f6:	429a      	cmp	r2, r3
 80020f8:	f080 8094 	bcs.w	8002224 <LCD_Touch_Task+0x12bc>
 80020fc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002100:	4b9a      	ldr	r3, [pc, #616]	@ (800236c <LCD_Touch_Task+0x1404>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	f280 808d 	bge.w	8002224 <LCD_Touch_Task+0x12bc>
 800210a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800210e:	f103 020e 	add.w	r2, r3, #14
 8002112:	4b96      	ldr	r3, [pc, #600]	@ (800236c <LCD_Touch_Task+0x1404>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	f2c0 8084 	blt.w	8002224 <LCD_Touch_Task+0x12bc>
 800211c:	f004 ffa4 	bl	8007068 <TS_Touched>
 8002120:	4603      	mov	r3, r0
 8002122:	2b01      	cmp	r3, #1
 8002124:	d17e      	bne.n	8002224 <LCD_Touch_Task+0x12bc>
			{
				if(IJU_Atten_Bit0_5 > 0)
 8002126:	4b92      	ldr	r3, [pc, #584]	@ (8002370 <LCD_Touch_Task+0x1408>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06b      	beq.n	8002206 <LCD_Touch_Task+0x129e>
				{
					X = 5+(strlen("Atten: -")*8);
 800212e:	2345      	movs	r3, #69	@ 0x45
 8002130:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					sprintf(Str, "%.1f", ((float)IJU_Atten_Bit0_5/2));
 8002134:	4b8e      	ldr	r3, [pc, #568]	@ (8002370 <LCD_Touch_Task+0x1408>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002144:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002148:	ee16 0a90 	vmov	r0, s13
 800214c:	f7fe fa0c 	bl	8000568 <__aeabi_f2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	f107 000c 	add.w	r0, r7, #12
 8002158:	4986      	ldr	r1, [pc, #536]	@ (8002374 <LCD_Touch_Task+0x140c>)
 800215a:	f00b fa39 	bl	800d5d0 <siprintf>
					Show_Str(X+2, Y, BLACK, BLACK, (u8 *)Str,20,1);
 800215e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002162:	3302      	adds	r3, #2
 8002164:	b298      	uxth	r0, r3
 8002166:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800216a:	2301      	movs	r3, #1
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	2314      	movs	r3, #20
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2300      	movs	r3, #0
 800217a:	2200      	movs	r2, #0
 800217c:	f003 f96c 	bl	8005458 <Show_Str>
					IJU_Atten_Bit0_5--;
 8002180:	4b7b      	ldr	r3, [pc, #492]	@ (8002370 <LCD_Touch_Task+0x1408>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3b01      	subs	r3, #1
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b79      	ldr	r3, [pc, #484]	@ (8002370 <LCD_Touch_Task+0x1408>)
 800218a:	701a      	strb	r2, [r3, #0]
					sprintf(Str, "%.1f", ((float)IJU_Atten_Bit0_5/2));
 800218c:	4b78      	ldr	r3, [pc, #480]	@ (8002370 <LCD_Touch_Task+0x1408>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002198:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800219c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021a0:	ee16 0a90 	vmov	r0, s13
 80021a4:	f7fe f9e0 	bl	8000568 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	f107 000c 	add.w	r0, r7, #12
 80021b0:	4970      	ldr	r1, [pc, #448]	@ (8002374 <LCD_Touch_Task+0x140c>)
 80021b2:	f00b fa0d 	bl	800d5d0 <siprintf>
					Show_Str(X+2, Y, WHITE, BLACK, (u8 *)Str,20,1);
 80021b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021ba:	3302      	adds	r3, #2
 80021bc:	b298      	uxth	r0, r3
 80021be:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80021c2:	2301      	movs	r3, #1
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	2314      	movs	r3, #20
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021d6:	f003 f93f 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_1, Atten_Bit0_5_RST, IJU_Atten_Bit0_5);
 80021da:	4b67      	ldr	r3, [pc, #412]	@ (8002378 <LCD_Touch_Task+0x1410>)
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	4b64      	ldr	r3, [pc, #400]	@ (8002370 <LCD_Touch_Task+0x1408>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4966      	ldr	r1, [pc, #408]	@ (800237c <LCD_Touch_Task+0x1414>)
 80021e4:	4866      	ldr	r0, [pc, #408]	@ (8002380 <LCD_Touch_Task+0x1418>)
 80021e6:	f002 fcaf 	bl	8004b48 <Message_Maker>
					RS485_Tx(2, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 80021ea:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <LCD_Touch_Task+0x1418>)
 80021ec:	7a9b      	ldrb	r3, [r3, #10]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4963      	ldr	r1, [pc, #396]	@ (8002380 <LCD_Touch_Task+0x1418>)
 80021f2:	2002      	movs	r0, #2
 80021f4:	f003 fca2 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 80021f8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80021fc:	2201      	movs	r2, #1
 80021fe:	4619      	mov	r1, r3
 8002200:	2005      	movs	r0, #5
 8002202:	f003 fc9b 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 8002206:	4b59      	ldr	r3, [pc, #356]	@ (800236c <LCD_Touch_Task+0x1404>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4b57      	ldr	r3, [pc, #348]	@ (800236c <LCD_Touch_Task+0x1404>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002212:	e002      	b.n	800221a <LCD_Touch_Task+0x12b2>
 8002214:	200a      	movs	r0, #10
 8002216:	f007 fea2 	bl	8009f5e <osDelay>
 800221a:	f004 ff25 	bl	8007068 <TS_Touched>
 800221e:	4603      	mov	r3, r0
 8002220:	2b01      	cmp	r3, #1
 8002222:	d0f7      	beq.n	8002214 <LCD_Touch_Task+0x12ac>
			}
			//----------
			X = 5+(strlen("Atten: -     ")*8);	Y = 130;
 8002224:	236d      	movs	r3, #109	@ 0x6d
 8002226:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800222a:	2382      	movs	r3, #130	@ 0x82
 800222c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen("+")*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 8002230:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002234:	4b4d      	ldr	r3, [pc, #308]	@ (800236c <LCD_Touch_Task+0x1404>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	f280 80ab 	bge.w	8002394 <LCD_Touch_Task+0x142c>
 800223e:	4b4b      	ldr	r3, [pc, #300]	@ (800236c <LCD_Touch_Task+0x1404>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002248:	3308      	adds	r3, #8
 800224a:	429a      	cmp	r2, r3
 800224c:	f080 80a2 	bcs.w	8002394 <LCD_Touch_Task+0x142c>
 8002250:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002254:	4b45      	ldr	r3, [pc, #276]	@ (800236c <LCD_Touch_Task+0x1404>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	f280 809b 	bge.w	8002394 <LCD_Touch_Task+0x142c>
 800225e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002262:	f103 020e 	add.w	r2, r3, #14
 8002266:	4b41      	ldr	r3, [pc, #260]	@ (800236c <LCD_Touch_Task+0x1404>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	f2c0 8092 	blt.w	8002394 <LCD_Touch_Task+0x142c>
 8002270:	f004 fefa 	bl	8007068 <TS_Touched>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	f040 808c 	bne.w	8002394 <LCD_Touch_Task+0x142c>
			{
				if(IJU_Atten_Bit0_5 < 63)
 800227c:	4b3c      	ldr	r3, [pc, #240]	@ (8002370 <LCD_Touch_Task+0x1408>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b3e      	cmp	r3, #62	@ 0x3e
 8002282:	d86b      	bhi.n	800235c <LCD_Touch_Task+0x13f4>
				{
					X = 5+(strlen("Atten: -")*8);
 8002284:	2345      	movs	r3, #69	@ 0x45
 8002286:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					sprintf(Str, "%.1f", ((float)IJU_Atten_Bit0_5/2));
 800228a:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <LCD_Touch_Task+0x1408>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800229a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800229e:	ee16 0a90 	vmov	r0, s13
 80022a2:	f7fe f961 	bl	8000568 <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	f107 000c 	add.w	r0, r7, #12
 80022ae:	4931      	ldr	r1, [pc, #196]	@ (8002374 <LCD_Touch_Task+0x140c>)
 80022b0:	f00b f98e 	bl	800d5d0 <siprintf>
					Show_Str(X+2, Y, BLACK, BLACK, (u8 *)Str,20,1);
 80022b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80022b8:	3302      	adds	r3, #2
 80022ba:	b298      	uxth	r0, r3
 80022bc:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80022c0:	2301      	movs	r3, #1
 80022c2:	9302      	str	r3, [sp, #8]
 80022c4:	2314      	movs	r3, #20
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2200      	movs	r2, #0
 80022d2:	f003 f8c1 	bl	8005458 <Show_Str>
					IJU_Atten_Bit0_5++;
 80022d6:	4b26      	ldr	r3, [pc, #152]	@ (8002370 <LCD_Touch_Task+0x1408>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <LCD_Touch_Task+0x1408>)
 80022e0:	701a      	strb	r2, [r3, #0]
					sprintf(Str, "%.1f", ((float)IJU_Atten_Bit0_5/2));
 80022e2:	4b23      	ldr	r3, [pc, #140]	@ (8002370 <LCD_Touch_Task+0x1408>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ee:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80022f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022f6:	ee16 0a90 	vmov	r0, s13
 80022fa:	f7fe f935 	bl	8000568 <__aeabi_f2d>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	f107 000c 	add.w	r0, r7, #12
 8002306:	491b      	ldr	r1, [pc, #108]	@ (8002374 <LCD_Touch_Task+0x140c>)
 8002308:	f00b f962 	bl	800d5d0 <siprintf>
					Show_Str(X+2, Y, WHITE, BLACK, (u8 *)Str,20,1);
 800230c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002310:	3302      	adds	r3, #2
 8002312:	b298      	uxth	r0, r3
 8002314:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002318:	2301      	movs	r3, #1
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	2314      	movs	r3, #20
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800232c:	f003 f894 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_1, Atten_Bit0_5_RST, IJU_Atten_Bit0_5);
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <LCD_Touch_Task+0x1410>)
 8002332:	781a      	ldrb	r2, [r3, #0]
 8002334:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <LCD_Touch_Task+0x1408>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4910      	ldr	r1, [pc, #64]	@ (800237c <LCD_Touch_Task+0x1414>)
 800233a:	4811      	ldr	r0, [pc, #68]	@ (8002380 <LCD_Touch_Task+0x1418>)
 800233c:	f002 fc04 	bl	8004b48 <Message_Maker>
					RS485_Tx(2, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <LCD_Touch_Task+0x1418>)
 8002342:	7a9b      	ldrb	r3, [r3, #10]
 8002344:	461a      	mov	r2, r3
 8002346:	490e      	ldr	r1, [pc, #56]	@ (8002380 <LCD_Touch_Task+0x1418>)
 8002348:	2002      	movs	r0, #2
 800234a:	f003 fbf7 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 800234e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002352:	2201      	movs	r2, #1
 8002354:	4619      	mov	r1, r3
 8002356:	2005      	movs	r0, #5
 8002358:	f003 fbf0 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <LCD_Touch_Task+0x1404>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	4b02      	ldr	r3, [pc, #8]	@ (800236c <LCD_Touch_Task+0x1404>)
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 8002368:	e00f      	b.n	800238a <LCD_Touch_Task+0x1422>
 800236a:	bf00      	nop
 800236c:	20025e48 	.word	0x20025e48
 8002370:	20025e11 	.word	0x20025e11
 8002374:	0800f920 	.word	0x0800f920
 8002378:	0800fc00 	.word	0x0800fc00
 800237c:	20000013 	.word	0x20000013
 8002380:	20000010 	.word	0x20000010
 8002384:	200a      	movs	r0, #10
 8002386:	f007 fdea 	bl	8009f5e <osDelay>
 800238a:	f004 fe6d 	bl	8007068 <TS_Touched>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	d0f7      	beq.n	8002384 <LCD_Touch_Task+0x141c>
			}
			//---------------IJU RF Power---------------
			X = 150;	Y = 130;
 8002394:	2396      	movs	r3, #150	@ 0x96
 8002396:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800239a:	2382      	movs	r3, #130	@ 0x82
 800239c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			if( (X<display.x && display.x<X+(strlen(LCD_RX1_Str)*8)) && (Y<display.y && display.y<Y+15) && (TS_Touched() == 1) )
 80023a0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80023a4:	4b55      	ldr	r3, [pc, #340]	@ (80024fc <LCD_Touch_Task+0x1594>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f6be aeb5 	bge.w	8001118 <LCD_Touch_Task+0x1b0>
 80023ae:	4b53      	ldr	r3, [pc, #332]	@ (80024fc <LCD_Touch_Task+0x1594>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461d      	mov	r5, r3
 80023b4:	f8b7 404c 	ldrh.w	r4, [r7, #76]	@ 0x4c
 80023b8:	4851      	ldr	r0, [pc, #324]	@ (8002500 <LCD_Touch_Task+0x1598>)
 80023ba:	f7fd ff69 	bl	8000290 <strlen>
 80023be:	4603      	mov	r3, r0
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4423      	add	r3, r4
 80023c4:	429d      	cmp	r5, r3
 80023c6:	f4be aea7 	bcs.w	8001118 <LCD_Touch_Task+0x1b0>
 80023ca:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80023ce:	4b4b      	ldr	r3, [pc, #300]	@ (80024fc <LCD_Touch_Task+0x1594>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	f6be aea0 	bge.w	8001118 <LCD_Touch_Task+0x1b0>
 80023d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023dc:	f103 020e 	add.w	r2, r3, #14
 80023e0:	4b46      	ldr	r3, [pc, #280]	@ (80024fc <LCD_Touch_Task+0x1594>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f6fe ae97 	blt.w	8001118 <LCD_Touch_Task+0x1b0>
 80023ea:	f004 fe3d 	bl	8007068 <TS_Touched>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	f47e ae91 	bne.w	8001118 <LCD_Touch_Task+0x1b0>
			{

				if( (MIU_IJU_MSG.PCKT_0 & RF_ON_Bit5) == RF_ON_Bit5)
 80023f6:	4b43      	ldr	r3, [pc, #268]	@ (8002504 <LCD_Touch_Task+0x159c>)
 80023f8:	789a      	ldrb	r2, [r3, #2]
 80023fa:	4b43      	ldr	r3, [pc, #268]	@ (8002508 <LCD_Touch_Task+0x15a0>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4013      	ands	r3, r2
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <LCD_Touch_Task+0x15a0>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d133      	bne.n	8002472 <LCD_Touch_Task+0x150a>
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_ON_Str,20,1);
 800240a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800240e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002412:	2301      	movs	r3, #1
 8002414:	9302      	str	r3, [sp, #8]
 8002416:	2314      	movs	r3, #20
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <LCD_Touch_Task+0x15a4>)
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	2200      	movs	r2, #0
 8002422:	f003 f819 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8002426:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800242a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800242e:	2301      	movs	r3, #1
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2314      	movs	r3, #20
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	4b36      	ldr	r3, [pc, #216]	@ (8002510 <LCD_Touch_Task+0x15a8>)
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2300      	movs	r3, #0
 800243c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002440:	f003 f80a 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit5_RST, RF_OFF_Bit5);
 8002444:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <LCD_Touch_Task+0x15ac>)
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	4b33      	ldr	r3, [pc, #204]	@ (8002518 <LCD_Touch_Task+0x15b0>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4933      	ldr	r1, [pc, #204]	@ (800251c <LCD_Touch_Task+0x15b4>)
 800244e:	482d      	ldr	r0, [pc, #180]	@ (8002504 <LCD_Touch_Task+0x159c>)
 8002450:	f002 fb7a 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 8002454:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <LCD_Touch_Task+0x159c>)
 8002456:	7a9b      	ldrb	r3, [r3, #10]
 8002458:	461a      	mov	r2, r3
 800245a:	492a      	ldr	r1, [pc, #168]	@ (8002504 <LCD_Touch_Task+0x159c>)
 800245c:	2001      	movs	r0, #1
 800245e:	f003 fb6d 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 8002462:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002466:	2201      	movs	r2, #1
 8002468:	4619      	mov	r1, r3
 800246a:	2005      	movs	r0, #5
 800246c:	f003 fb66 	bl	8005b3c <RS485_Tx>
 8002470:	e032      	b.n	80024d8 <LCD_Touch_Task+0x1570>
				}
				else
				{
					Show_Str(X, Y, BLACK, BLACK, (u8 *)LCD_RF_OFF_Str,20,1);
 8002472:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002476:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 800247a:	2301      	movs	r3, #1
 800247c:	9302      	str	r3, [sp, #8]
 800247e:	2314      	movs	r3, #20
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	4b23      	ldr	r3, [pc, #140]	@ (8002510 <LCD_Touch_Task+0x15a8>)
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	2200      	movs	r2, #0
 800248a:	f002 ffe5 	bl	8005458 <Show_Str>
					Show_Str(X, Y, WHITE, BLACK, (u8 *)LCD_RF_ON_Str,20,1);
 800248e:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8002492:	f8b7 004c 	ldrh.w	r0, [r7, #76]	@ 0x4c
 8002496:	2301      	movs	r3, #1
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	2314      	movs	r3, #20
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <LCD_Touch_Task+0x15a4>)
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024a8:	f002 ffd6 	bl	8005458 <Show_Str>
					Message_Maker(&MIU_IJU_MSG, &MIU_IJU_MSG.PCKT_0, RF_Bit5_RST, RF_ON_Bit5);
 80024ac:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <LCD_Touch_Task+0x15ac>)
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <LCD_Touch_Task+0x15a0>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4919      	ldr	r1, [pc, #100]	@ (800251c <LCD_Touch_Task+0x15b4>)
 80024b6:	4813      	ldr	r0, [pc, #76]	@ (8002504 <LCD_Touch_Task+0x159c>)
 80024b8:	f002 fb46 	bl	8004b48 <Message_Maker>
					RS485_Tx(1, &MIU_IJU_MSG, MIU_IJU_MSG.Length);
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <LCD_Touch_Task+0x159c>)
 80024be:	7a9b      	ldrb	r3, [r3, #10]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4910      	ldr	r1, [pc, #64]	@ (8002504 <LCD_Touch_Task+0x159c>)
 80024c4:	2001      	movs	r0, #1
 80024c6:	f003 fb39 	bl	8005b3c <RS485_Tx>
					RS485_Tx(5, Sync_MSG, sizeof(Sync_MSG));
 80024ca:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80024ce:	2201      	movs	r2, #1
 80024d0:	4619      	mov	r1, r3
 80024d2:	2005      	movs	r0, #5
 80024d4:	f003 fb32 	bl	8005b3c <RS485_Tx>
				}

				display.x=0; display.y=0;
 80024d8:	4b08      	ldr	r3, [pc, #32]	@ (80024fc <LCD_Touch_Task+0x1594>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <LCD_Touch_Task+0x1594>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
				while(TS_Touched() == 1)	{osDelay(10);}
 80024e4:	e002      	b.n	80024ec <LCD_Touch_Task+0x1584>
 80024e6:	200a      	movs	r0, #10
 80024e8:	f007 fd39 	bl	8009f5e <osDelay>
 80024ec:	f004 fdbc 	bl	8007068 <TS_Touched>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d0f7      	beq.n	80024e6 <LCD_Touch_Task+0x157e>
		if(TS_Touched() == 1)
 80024f6:	f7fe be0f 	b.w	8001118 <LCD_Touch_Task+0x1b0>
 80024fa:	bf00      	nop
 80024fc:	20025e48 	.word	0x20025e48
 8002500:	0800fb60 	.word	0x0800fb60
 8002504:	20000010 	.word	0x20000010
 8002508:	0800fbff 	.word	0x0800fbff
 800250c:	0800fbd8 	.word	0x0800fbd8
 8002510:	0800fbd0 	.word	0x0800fbd0
 8002514:	0800fbfd 	.word	0x0800fbfd
 8002518:	0800fbfe 	.word	0x0800fbfe
 800251c:	20000012 	.word	0x20000012

08002520 <Callback01>:
}
//--------------------------------------------------------------------------

/* Callback01 function */
void Callback01(void *argument)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	@ (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	@ (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	@ (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	@ 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800269e:	4a0b      	ldr	r2, [pc, #44]	@ (80026cc <LL_DMA_EnableChannel+0x3c>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4907      	ldr	r1, [pc, #28]	@ (80026cc <LL_DMA_EnableChannel+0x3c>)
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	440a      	add	r2, r1
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6153      	str	r3, [r2, #20]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	0800fb08 	.word	0x0800fb08

080026d0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80026de:	4a0b      	ldr	r2, [pc, #44]	@ (800270c <LL_DMA_EnableIT_TC+0x3c>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	4907      	ldr	r1, [pc, #28]	@ (800270c <LL_DMA_EnableIT_TC+0x3c>)
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	440a      	add	r2, r1
 80026f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fc:	6153      	str	r3, [r2, #20]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	0800fb08 	.word	0x0800fb08

08002710 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	601a      	str	r2, [r3, #0]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	@ 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3308      	adds	r3, #8
 800275e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	e853 3f00 	ldrex	r3, [r3]
 8002766:	60bb      	str	r3, [r7, #8]
   return(result);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	075b      	lsls	r3, r3, #29
 8002772:	4313      	orrs	r3, r2
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3308      	adds	r3, #8
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	61ba      	str	r2, [r7, #24]
 800277e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	6979      	ldr	r1, [r7, #20]
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	613b      	str	r3, [r7, #16]
   return(result);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e4      	bne.n	800275a <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 800279e:	b480      	push	{r7}
 80027a0:	b089      	sub	sp, #36	@ 0x24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3308      	adds	r3, #8
 80027ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	065b      	lsls	r3, r3, #25
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3308      	adds	r3, #8
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	61ba      	str	r2, [r7, #24]
 80027cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	6979      	ldr	r1, [r7, #20]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	e841 2300 	strex	r3, r2, [r1]
 80027d6:	613b      	str	r3, [r7, #16]
   return(result);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e4      	bne.n	80027a8 <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	3724      	adds	r7, #36	@ 0x24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_LPUART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_DisableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableOverrunDetect(USART_TypeDef *LPUARTx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	609a      	str	r2, [r3, #8]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_LPUART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_LPUART_EnableDMAReq_RX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_RX(USART_TypeDef *LPUARTx)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3308      	adds	r3, #8
 8002818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	60bb      	str	r3, [r7, #8]
   return(result);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3308      	adds	r3, #8
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	61ba      	str	r2, [r7, #24]
 8002832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002834:	6979      	ldr	r1, [r7, #20]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	e841 2300 	strex	r3, r2, [r1]
 800283c:	613b      	str	r3, [r7, #16]
   return(result);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e7      	bne.n	8002814 <LL_LPUART_EnableDMAReq_RX+0x8>
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3724      	adds	r7, #36	@ 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3328      	adds	r3, #40	@ 0x28
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e002      	b.n	8002870 <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3324      	adds	r3, #36	@ 0x24
 800286e:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <LL_RCC_HSE_EnableBypass+0x1c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a04      	ldr	r2, [pc, #16]	@ (800289c <LL_RCC_HSE_EnableBypass+0x1c>)
 800288a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	44020c00 	.word	0x44020c00

080028a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <LL_RCC_HSE_Enable+0x1c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <LL_RCC_HSE_Enable+0x1c>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	44020c00 	.word	0x44020c00

080028c0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80028c4:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <LL_RCC_HSE_IsReady+0x24>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028d0:	d101      	bne.n	80028d6 <LL_RCC_HSE_IsReady+0x16>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <LL_RCC_HSE_IsReady+0x18>
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	44020c00 	.word	0x44020c00

080028e8 <LL_RCC_HSE_SetExternalClockType>:
  *         @arg @ref LL_RCC_HSE_ANALOG_TYPE
  *         @arg @ref LL_RCC_HSE_DIGITAL_TYPE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetExternalClockType(uint32_t HSEClockMode)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSEEXT, HSEClockMode);
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <LL_RCC_HSE_SetExternalClockType+0x24>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028f8:	4904      	ldr	r1, [pc, #16]	@ (800290c <LL_RCC_HSE_SetExternalClockType+0x24>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	44020c00 	.word	0x44020c00

08002910 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <LL_RCC_SetSysClkSource+0x24>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	4904      	ldr	r1, [pc, #16]	@ (8002934 <LL_RCC_SetSysClkSource+0x24>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4313      	orrs	r3, r2
 8002926:	61cb      	str	r3, [r1, #28]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	44020c00 	.word	0x44020c00

08002938 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <LL_RCC_GetSysClkSource+0x18>)
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f003 0318 	and.w	r3, r3, #24
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	44020c00 	.word	0x44020c00

08002954 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, Prescaler);
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <LL_RCC_SetAHBPrescaler+0x24>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 020f 	bic.w	r2, r3, #15
 8002964:	4904      	ldr	r1, [pc, #16]	@ (8002978 <LL_RCC_SetAHBPrescaler+0x24>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4313      	orrs	r3, r2
 800296a:	620b      	str	r3, [r1, #32]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	44020c00 	.word	0x44020c00

0800297c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, Prescaler);
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800298c:	4904      	ldr	r1, [pc, #16]	@ (80029a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4313      	orrs	r3, r2
 8002992:	620b      	str	r3, [r1, #32]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	44020c00 	.word	0x44020c00

080029a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, Prescaler);
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029b4:	4904      	ldr	r1, [pc, #16]	@ (80029c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	620b      	str	r3, [r1, #32]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	44020c00 	.word	0x44020c00

080029cc <LL_RCC_SetAPB3Prescaler>:
  *         @arg @ref LL_RCC_APB3_DIV_8
  *         @arg @ref LL_RCC_APB3_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB3Prescaler(uint32_t Prescaler)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, Prescaler);
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <LL_RCC_SetAPB3Prescaler+0x24>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80029dc:	4904      	ldr	r1, [pc, #16]	@ (80029f0 <LL_RCC_SetAPB3Prescaler+0x24>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	620b      	str	r3, [r1, #32]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	44020c00 	.word	0x44020c00

080029f4 <LL_RCC_SetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClockSource(uint32_t ClkSource)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <LL_RCC_SetClockSource+0x50>)
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0e19      	lsrs	r1, r3, #24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b2d9      	uxtb	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	44020cd8 	.word	0x44020cd8

08002a48 <LL_RCC_SetUSARTClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(USARTxSource);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ffcf 	bl	80029f4 <LL_RCC_SetClockSource>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <LL_RCC_SetUARTClockSource>:
  *         @arg @ref LL_RCC_UART12_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_UART12_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUARTClockSource(uint32_t UARTxSource)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(UARTxSource);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ffc4 	bl	80029f4 <LL_RCC_SetClockSource>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <LL_RCC_SetLPUARTClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_LPUART1SEL, LPUARTxSource);
 8002a7c:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <LL_RCC_SetLPUARTClockSource+0x28>)
 8002a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a82:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002a86:	4905      	ldr	r1, [pc, #20]	@ (8002a9c <LL_RCC_SetLPUARTClockSource+0x28>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	44020c00 	.word	0x44020c00

08002aa0 <LL_RCC_SetSPIClockSource>:
  *
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSPIClockSource(uint32_t SPIxSource)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(SPIxSource);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffa3 	bl	80029f4 <LL_RCC_SetClockSource>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <LL_RCC_PLL1_Enable+0x1c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <LL_RCC_PLL1_Enable+0x1c>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	44020c00 	.word	0x44020c00

08002ad8 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == RCC_CR_PLL1RDY) ? 1UL : 0UL);
 8002adc:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <LL_RCC_PLL1_IsReady+0x24>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ae8:	d101      	bne.n	8002aee <LL_RCC_PLL1_IsReady+0x16>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <LL_RCC_PLL1_IsReady+0x18>
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	44020c00 	.word	0x44020c00

08002b00 <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1CFGR      PLL1PEN        LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1PEN);
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <LL_RCC_PLL1P_Enable+0x1c>)
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <LL_RCC_PLL1P_Enable+0x1c>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	44020c00 	.word	0x44020c00

08002b20 <LL_RCC_PLL1_SetSource>:
  *         @arg @ref LL_RCC_PLL1SOURCE_CSI
  *         @arg @ref LL_RCC_PLL1SOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetSource(uint32_t PLL1Source)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC, PLL1Source);
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <LL_RCC_PLL1_SetSource+0x24>)
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	f023 0203 	bic.w	r2, r3, #3
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <LL_RCC_PLL1_SetSource+0x24>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	44020c00 	.word	0x44020c00

08002b48 <LL_RCC_PLL1_SetN>:
  * @brief  Set Main PLL1 multiplication factor for VCO
  * @rmtoll PLL1CFGR      PLL1N          LL_RCC_PLL1_SetN
  * @param PLL1N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t PLL1N)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N, (PLL1N - 1UL) << RCC_PLL1DIVR_PLL1N_Pos);
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <LL_RCC_PLL1_SetN+0x2c>)
 8002b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b54:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	4904      	ldr	r1, [pc, #16]	@ (8002b74 <LL_RCC_PLL1_SetN+0x2c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	44020c00 	.word	0x44020c00

08002b78 <LL_RCC_PLL1_SetP>:
  * @note Used for System clock
  * @rmtoll PLL1CFGR      PLL1P       LL_RCC_PLL1_SetP
  * @param PLL1P parameter can be a value between 2 and 128 (odd value not allowed)
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t PLL1P)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P, (PLL1P - 1UL) << RCC_PLL1DIVR_PLL1P_Pos);
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <LL_RCC_PLL1_SetP+0x28>)
 8002b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b84:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	025b      	lsls	r3, r3, #9
 8002b8e:	4904      	ldr	r1, [pc, #16]	@ (8002ba0 <LL_RCC_PLL1_SetP+0x28>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	44020c00 	.word	0x44020c00

08002ba4 <LL_RCC_PLL1_SetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLLCFGR      PLL1Q          LL_RCC_PLL1_SetQ
  * @param PLL1Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t PLL1Q)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1Q, (PLL1Q - 1UL) << RCC_PLL1DIVR_PLL1Q_Pos);
 8002bac:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <LL_RCC_PLL1_SetQ+0x28>)
 8002bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	4904      	ldr	r1, [pc, #16]	@ (8002bcc <LL_RCC_PLL1_SetQ+0x28>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	44020c00 	.word	0x44020c00

08002bd0 <LL_RCC_PLL1_SetR>:
  * @note Used for trace
  * @rmtoll PLL1DIVR      PLL1R          LL_RCC_PLL1_SetR
  * @param PLL1R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t PLL1R)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R, (PLL1R - 1UL) << RCC_PLL1DIVR_PLL1R_Pos);
 8002bd8:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <LL_RCC_PLL1_SetR+0x28>)
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	4904      	ldr	r1, [pc, #16]	@ (8002bf8 <LL_RCC_PLL1_SetR+0x28>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	44020c00 	.word	0x44020c00

08002bfc <LL_RCC_PLL1_SetM>:
  * @brief  Set Division factor for the main PLL and other PLL
  * @rmtoll PLL1CFGR      PLL1M          LL_RCC_PLL1_SetM
  * @param PLL1M parameter can be a value between 1 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t PLL1M)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M, PLL1M  << RCC_PLL1CFGR_PLL1M_Pos);
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <LL_RCC_PLL1_SetM+0x28>)
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	4904      	ldr	r1, [pc, #16]	@ (8002c24 <LL_RCC_PLL1_SetM+0x28>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	44020c00 	.word	0x44020c00

08002c28 <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RGE, InputRange << RCC_PLL1CFGR_PLL1RGE_Pos);
 8002c30:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	f023 020c 	bic.w	r2, r3, #12
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4904      	ldr	r1, [pc, #16]	@ (8002c50 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	44020c00 	.word	0x44020c00

08002c54 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1VCOSEL, VCORange << RCC_PLL1CFGR_PLL1VCOSEL_Pos);
 8002c5c:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	f023 0220 	bic.w	r2, r3, #32
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	015b      	lsls	r3, r3, #5
 8002c68:	4904      	ldr	r1, [pc, #16]	@ (8002c7c <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	44020c00 	.word	0x44020c00

08002c80 <LL_RCC_PLL2_Enable>:
  * @brief  Enable PLL2
  * @rmtoll CR           PLL2ON     LL_RCC_PLL2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_Enable(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <LL_RCC_PLL2_Enable+0x1c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <LL_RCC_PLL2_Enable+0x1c>)
 8002c8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	44020c00 	.word	0x44020c00

08002ca0 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY    LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == RCC_CR_PLL2RDY) ? 1UL : 0UL);
 8002ca4:	4b07      	ldr	r3, [pc, #28]	@ (8002cc4 <LL_RCC_PLL2_IsReady+0x24>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cb0:	d101      	bne.n	8002cb6 <LL_RCC_PLL2_IsReady+0x16>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <LL_RCC_PLL2_IsReady+0x18>
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	44020c00 	.word	0x44020c00

08002cc8 <LL_RCC_PLL2_SetSource>:
  *         @arg @ref LL_RCC_PLL2SOURCE_HSI
  *         @arg @ref LL_RCC_PLL2SOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetSource(uint32_t PLL2Source)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2SRC, PLL2Source);
 8002cd0:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <LL_RCC_PLL2_SetSource+0x24>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	f023 0203 	bic.w	r2, r3, #3
 8002cd8:	4904      	ldr	r1, [pc, #16]	@ (8002cec <LL_RCC_PLL2_SetSource+0x24>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	44020c00 	.word	0x44020c00

08002cf0 <LL_RCC_PLL2_SetM>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2CFGR      PLL2M          LL_RCC_PLL2_SetM
  * @param PLL2M parameter can be a value between 1 and 63
  */
__STATIC_INLINE void LL_RCC_PLL2_SetM(uint32_t PLL2M)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2M, PLL2M << RCC_PLL2CFGR_PLL2M_Pos);
 8002cf8:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <LL_RCC_PLL2_SetM+0x28>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	4904      	ldr	r1, [pc, #16]	@ (8002d18 <LL_RCC_PLL2_SetM+0x28>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	44020c00 	.word	0x44020c00

08002d1c <LL_RCC_PLL2_SetN>:
  * @brief  Set PLL2 multiplication factor N
  * @rmtoll PLL2CFGR      PLL2N          LL_RCC_PLL2_SetN
  * @param PLL2N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL2_SetN(uint32_t PLL2N)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2N, (PLL2N - 1UL) << RCC_PLL2DIVR_PLL2N_Pos);
 8002d24:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <LL_RCC_PLL2_SetN+0x2c>)
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	3a01      	subs	r2, #1
 8002d34:	4904      	ldr	r1, [pc, #16]	@ (8002d48 <LL_RCC_PLL2_SetN+0x2c>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	44020c00 	.word	0x44020c00

08002d4c <LL_RCC_PLL2_SetP>:
  * @note Used for peripherals clocks
  * @rmtoll PLL2CFGR      PLL2P       LL_RCC_PLL2_SetP
  * @param PLL2P parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetP(uint32_t PLL2P)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2P, (PLL2P - 1UL) << RCC_PLL2DIVR_PLL2P_Pos);
 8002d54:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <LL_RCC_PLL2_SetP+0x28>)
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	4904      	ldr	r1, [pc, #16]	@ (8002d74 <LL_RCC_PLL2_SetP+0x28>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	44020c00 	.word	0x44020c00

08002d78 <LL_RCC_PLL2_SetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLLCFGR      PLL2Q          LL_RCC_PLL2_SetQ
  * @param PLL2Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetQ(uint32_t PLL2Q)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2Q, (PLL2Q - 1UL) << RCC_PLL2DIVR_PLL2Q_Pos);
 8002d80:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <LL_RCC_PLL2_SetQ+0x28>)
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	4904      	ldr	r1, [pc, #16]	@ (8002da0 <LL_RCC_PLL2_SetQ+0x28>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	44020c00 	.word	0x44020c00

08002da4 <LL_RCC_PLL2_SetR>:
  * @note Used for PLL2CLK selected for peripherals clocks
  * @rmtoll PLL2CFGR      PLL2Q          LL_RCC_PLL2_SetR
  * @param PLL2R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void  LL_RCC_PLL2_SetR(uint32_t PLL2R)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2R, (PLL2R - 1UL) << RCC_PLL2DIVR_PLL2R_Pos);
 8002dac:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <LL_RCC_PLL2_SetR+0x28>)
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	4904      	ldr	r1, [pc, #16]	@ (8002dcc <LL_RCC_PLL2_SetR+0x28>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	44020c00 	.word	0x44020c00

08002dd0 <LL_RCC_PLL2P_Enable>:
  * @brief  Enable PLL2 P output
  * @rmtoll PLL2CFGR  PLL2PEN    LL_RCC_PLL2P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2P_Enable(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2PEN);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <LL_RCC_PLL2P_Enable+0x1c>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <LL_RCC_PLL2P_Enable+0x1c>)
 8002dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dde:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	44020c00 	.word	0x44020c00

08002df0 <LL_RCC_PLL2_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOInputRange(uint32_t InputRange)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2RGE, InputRange << RCC_PLL2CFGR_PLL2RGE_Pos);
 8002df8:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfc:	f023 020c 	bic.w	r2, r3, #12
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	44020c00 	.word	0x44020c00

08002e1c <LL_RCC_PLL2_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOOutputRange(uint32_t VCORange)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2VCOSEL, VCORange << RCC_PLL2CFGR_PLL2VCOSEL_Pos);
 8002e24:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	f023 0220 	bic.w	r2, r3, #32
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	015b      	lsls	r3, r3, #5
 8002e30:	4904      	ldr	r1, [pc, #16]	@ (8002e44 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	44020c00 	.word	0x44020c00

08002e48 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->VOSCR, PWR_VOSCR_VOS, VoltageScaling);
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e58:	4904      	ldr	r1, [pc, #16]	@ (8002e6c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	610b      	str	r3, [r1, #16]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	44020800 	.word	0x44020800

08002e70 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll UCPDR          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	44020800 	.word	0x44020800

08002e90 <LL_PWR_IsActiveFlag_VOS>:
  *         scaling range or not.
  * @rmtoll VOSSR          VOSRDY          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->VOSSR, PWR_VOSSR_VOSRDY) == (PWR_VOSSR_VOSRDY)) ? 1UL : 0UL);
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <LL_PWR_IsActiveFlag_VOS+0x20>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d101      	bne.n	8002ea4 <LL_PWR_IsActiveFlag_VOS+0x14>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_PWR_IsActiveFlag_VOS+0x16>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	44020800 	.word	0x44020800

08002eb4 <LL_AHB1_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <LL_AHB1_GRP1_EnableClock+0x34>)
 8002ebe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ec2:	4909      	ldr	r1, [pc, #36]	@ (8002ee8 <LL_AHB1_GRP1_EnableClock+0x34>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ecc:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <LL_AHB1_GRP1_EnableClock+0x34>)
 8002ece:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	44020c00 	.word	0x44020c00

08002eec <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <LL_AHB2_GRP1_EnableClock+0x34>)
 8002ef6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002efa:	4909      	ldr	r1, [pc, #36]	@ (8002f20 <LL_AHB2_GRP1_EnableClock+0x34>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <LL_AHB2_GRP1_EnableClock+0x34>)
 8002f06:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f10:	68fb      	ldr	r3, [r7, #12]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	44020c00 	.word	0x44020c00

08002f24 <LL_APB1_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <LL_APB1_GRP1_EnableClock+0x34>)
 8002f2e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002f32:	4909      	ldr	r1, [pc, #36]	@ (8002f58 <LL_APB1_GRP1_EnableClock+0x34>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8002f3c:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <LL_APB1_GRP1_EnableClock+0x34>)
 8002f3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	44020c00 	.word	0x44020c00

08002f5c <LL_APB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f64:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <LL_APB2_GRP1_EnableClock+0x34>)
 8002f66:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002f6a:	4909      	ldr	r1, [pc, #36]	@ (8002f90 <LL_APB2_GRP1_EnableClock+0x34>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <LL_APB2_GRP1_EnableClock+0x34>)
 8002f76:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	44020c00 	.word	0x44020c00

08002f94 <LL_APB3_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <LL_APB3_GRP1_EnableClock+0x34>)
 8002f9e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002fa2:	4909      	ldr	r1, [pc, #36]	@ (8002fc8 <LL_APB3_GRP1_EnableClock+0x34>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 30a8 	str.w	r3, [r1, #168]	@ 0xa8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <LL_APB3_GRP1_EnableClock+0x34>)
 8002fae:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	44020c00 	.word	0x44020c00

08002fcc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <LL_FLASH_SetLatency+0x24>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 020f 	bic.w	r2, r3, #15
 8002fdc:	4904      	ldr	r1, [pc, #16]	@ (8002ff0 <LL_FLASH_SetLatency+0x24>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40022000 	.word	0x40022000

08002ff4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	@ (800300c <LL_FLASH_GetLatency+0x18>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40022000 	.word	0x40022000

08003010 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60da      	str	r2, [r3, #12]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_SPI_SetFIFOThreshold>:
  *         @arg @ref LL_SPI_FIFO_TH_15DATA
  *         @arg @ref LL_SPI_FIFO_TH_16DATA
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	609a      	str	r2, [r3, #8]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CFG2         SSOM          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	601a      	str	r2, [r3, #0]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	601a      	str	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	@ 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3308      	adds	r3, #8
 80030ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	075b      	lsls	r3, r3, #29
 80030de:	4313      	orrs	r3, r2
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3308      	adds	r3, #8
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	61ba      	str	r2, [r7, #24]
 80030ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6979      	ldr	r1, [r7, #20]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	613b      	str	r3, [r7, #16]
   return(result);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e4      	bne.n	80030c6 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	3724      	adds	r7, #36	@ 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800310a:	b480      	push	{r7}
 800310c:	b089      	sub	sp, #36	@ 0x24
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3308      	adds	r3, #8
 8003118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	60bb      	str	r3, [r7, #8]
   return(result);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	065b      	lsls	r3, r3, #25
 800312c:	4313      	orrs	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3308      	adds	r3, #8
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	61ba      	str	r2, [r7, #24]
 8003138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	613b      	str	r3, [r7, #16]
   return(result);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e4      	bne.n	8003114 <LL_USART_SetRXFIFOThreshold+0xa>
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	3724      	adds	r7, #36	@ 0x24
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_USART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	@ 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3308      	adds	r3, #8
 80031b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3308      	adds	r3, #8
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	61ba      	str	r2, [r7, #24]
 80031ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	613b      	str	r3, [r7, #16]
   return(result);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e7      	bne.n	80031ac <LL_USART_EnableDMAReq_RX+0x8>
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3724      	adds	r7, #36	@ 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3328      	adds	r3, #40	@ 0x28
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e002      	b.n	8003208 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3324      	adds	r3, #36	@ 0x24
 8003206:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8003208:	68fb      	ldr	r3, [r7, #12]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 0218 	bic.w	r2, r3, #24
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	609a      	str	r2, [r3, #8]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	611a      	str	r2, [r3, #16]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	615a      	str	r2, [r3, #20]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e0:	2003      	movs	r0, #3
 80032e2:	f7ff f927 	bl	8002534 <__NVIC_SetPriorityGrouping>

  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80032e6:	f7ff f949 	bl	800257c <__NVIC_GetPriorityGrouping>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2200      	movs	r2, #0
 80032ee:	210f      	movs	r1, #15
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f999 	bl	8002628 <NVIC_EncodePriority>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4619      	mov	r1, r3
 80032fa:	f06f 0001 	mvn.w	r0, #1
 80032fe:	f7ff f969 	bl	80025d4 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8003302:	f7ff f93b 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003306:	4603      	mov	r3, r0
 8003308:	2200      	movs	r2, #0
 800330a:	210f      	movs	r1, #15
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f98b 	bl	8002628 <NVIC_EncodePriority>
 8003312:	4603      	mov	r3, r0
 8003314:	4619      	mov	r1, r3
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	f7ff f95b 	bl	80025d4 <__NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 800331e:	f7ff fda7 	bl	8002e70 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003322:	f000 f831 	bl	8003388 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003326:	f000 f891 	bl	800344c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  LL_mDelay(200);
 800332a:	20c8      	movs	r0, #200	@ 0xc8
 800332c:	f006 fc94 	bl	8009c58 <LL_mDelay>
  MX_GPIO_Init();
 8003330:	f000 ffc2 	bl	80042b8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8003334:	f000 f8b1 	bl	800349a <MX_GPDMA1_Init>
  MX_SPI3_Init();
 8003338:	f000 fee6 	bl	8004108 <MX_SPI3_Init>
  MX_SPI6_Init();
 800333c:	f000 ff5c 	bl	80041f8 <MX_SPI6_Init>
  MX_LPUART1_UART_Init();
 8003340:	f000 f922 	bl	8003588 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8003344:	f000 f9ec 	bl	8003720 <MX_UART4_Init>
  MX_UART5_Init();
 8003348:	f000 fabe 	bl	80038c8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800334c:	f000 fc64 	bl	8003c18 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003350:	f000 fd36 	bl	8003dc0 <MX_USART6_UART_Init>
  MX_UART7_Init();
 8003354:	f000 fb8c 	bl	8003a70 <MX_UART7_Init>
  MX_USART11_UART_Init();
 8003358:	f000 fe04 	bl	8003f64 <MX_USART11_UART_Init>
  MX_CRC_Init();
 800335c:	f001 f804 	bl	8004368 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8003360:	f003 f92e 	bl	80065c0 <LCD_Init>
  xpt2046_init();
 8003364:	f003 fc00 	bl	8006b68 <xpt2046_init>

  memset(General_Buffer, 0, sizeof(General_Buffer));
 8003368:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 800336c:	2100      	movs	r1, #0
 800336e:	4805      	ldr	r0, [pc, #20]	@ (8003384 <main+0xa8>)
 8003370:	f00a f991 	bl	800d696 <memset>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003374:	f006 fd12 	bl	8009d9c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003378:	f7fd fdb2 	bl	8000ee0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800337c:	f006 fd34 	bl	8009de8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <main+0xa4>
 8003384:	20000224 	.word	0x20000224

08003388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800338c:	2005      	movs	r0, #5
 800338e:	f7ff fe1d 	bl	8002fcc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8003392:	bf00      	nop
 8003394:	f7ff fe2e 	bl	8002ff4 <LL_FLASH_GetLatency>
 8003398:	4603      	mov	r3, r0
 800339a:	2b05      	cmp	r3, #5
 800339c:	d1fa      	bne.n	8003394 <SystemClock_Config+0xc>
  {
  }

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE0);
 800339e:	2030      	movs	r0, #48	@ 0x30
 80033a0:	f7ff fd52 	bl	8002e48 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80033a4:	bf00      	nop
 80033a6:	f7ff fd73 	bl	8002e90 <LL_PWR_IsActiveFlag_VOS>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0fa      	beq.n	80033a6 <SystemClock_Config+0x1e>
  {
  }
  LL_RCC_HSE_EnableBypass();
 80033b0:	f7ff fa66 	bl	8002880 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_SetExternalClockType(LL_RCC_HSE_ANALOG_TYPE);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7ff fa97 	bl	80028e8 <LL_RCC_HSE_SetExternalClockType>
  LL_RCC_HSE_Enable();
 80033ba:	f7ff fa71 	bl	80028a0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80033be:	bf00      	nop
 80033c0:	f7ff fa7e 	bl	80028c0 <LL_RCC_HSE_IsReady>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d1fa      	bne.n	80033c0 <SystemClock_Config+0x38>
  {
  }

  LL_RCC_PLL1_SetSource(LL_RCC_PLL1SOURCE_HSE);
 80033ca:	2003      	movs	r0, #3
 80033cc:	f7ff fba8 	bl	8002b20 <LL_RCC_PLL1_SetSource>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 80033d0:	2003      	movs	r0, #3
 80033d2:	f7ff fc29 	bl	8002c28 <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7ff fc3c 	bl	8002c54 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(2);
 80033dc:	2002      	movs	r0, #2
 80033de:	f7ff fc0d 	bl	8002bfc <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(50);
 80033e2:	2032      	movs	r0, #50	@ 0x32
 80033e4:	f7ff fbb0 	bl	8002b48 <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 80033e8:	2002      	movs	r0, #2
 80033ea:	f7ff fbc5 	bl	8002b78 <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(2);
 80033ee:	2002      	movs	r0, #2
 80033f0:	f7ff fbd8 	bl	8002ba4 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(2);
 80033f4:	2002      	movs	r0, #2
 80033f6:	f7ff fbeb 	bl	8002bd0 <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1P_Enable();
 80033fa:	f7ff fb81 	bl	8002b00 <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1_Enable();
 80033fe:	f7ff fb5b 	bl	8002ab8 <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 8003402:	bf00      	nop
 8003404:	f7ff fb68 	bl	8002ad8 <LL_RCC_PLL1_IsReady>
 8003408:	4603      	mov	r3, r0
 800340a:	2b01      	cmp	r3, #1
 800340c:	d1fa      	bne.n	8003404 <SystemClock_Config+0x7c>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 800340e:	2003      	movs	r0, #3
 8003410:	f7ff fa7e 	bl	8002910 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 8003414:	bf00      	nop
 8003416:	f7ff fa8f 	bl	8002938 <LL_RCC_GetSysClkSource>
 800341a:	4603      	mov	r3, r0
 800341c:	2b18      	cmp	r3, #24
 800341e:	d1fa      	bne.n	8003416 <SystemClock_Config+0x8e>
  {
  }

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff fa97 	bl	8002954 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003426:	2000      	movs	r0, #0
 8003428:	f7ff faa8 	bl	800297c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800342c:	2000      	movs	r0, #0
 800342e:	f7ff fab9 	bl	80029a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_1);
 8003432:	2000      	movs	r0, #0
 8003434:	f7ff faca 	bl	80029cc <LL_RCC_SetAPB3Prescaler>

  LL_Init1msTick(250000000);
 8003438:	4803      	ldr	r0, [pc, #12]	@ (8003448 <SystemClock_Config+0xc0>)
 800343a:	f006 fbff 	bl	8009c3c <LL_Init1msTick>

  LL_SetSystemCoreClock(250000000);
 800343e:	4802      	ldr	r0, [pc, #8]	@ (8003448 <SystemClock_Config+0xc0>)
 8003440:	f006 fc32 	bl	8009ca8 <LL_SetSystemCoreClock>
}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}
 8003448:	0ee6b280 	.word	0x0ee6b280

0800344c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  LL_RCC_PLL2_SetSource(LL_RCC_PLL2SOURCE_HSE);
 8003450:	2003      	movs	r0, #3
 8003452:	f7ff fc39 	bl	8002cc8 <LL_RCC_PLL2_SetSource>
  LL_RCC_PLL2_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 8003456:	2003      	movs	r0, #3
 8003458:	f7ff fcca 	bl	8002df0 <LL_RCC_PLL2_SetVCOInputRange>
  LL_RCC_PLL2_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 800345c:	2000      	movs	r0, #0
 800345e:	f7ff fcdd 	bl	8002e1c <LL_RCC_PLL2_SetVCOOutputRange>
  LL_RCC_PLL2_SetM(2);
 8003462:	2002      	movs	r0, #2
 8003464:	f7ff fc44 	bl	8002cf0 <LL_RCC_PLL2_SetM>
  LL_RCC_PLL2_SetN(50);
 8003468:	2032      	movs	r0, #50	@ 0x32
 800346a:	f7ff fc57 	bl	8002d1c <LL_RCC_PLL2_SetN>
  LL_RCC_PLL2_SetP(2);
 800346e:	2002      	movs	r0, #2
 8003470:	f7ff fc6c 	bl	8002d4c <LL_RCC_PLL2_SetP>
  LL_RCC_PLL2_SetQ(2);
 8003474:	2002      	movs	r0, #2
 8003476:	f7ff fc7f 	bl	8002d78 <LL_RCC_PLL2_SetQ>
  LL_RCC_PLL2_SetR(2);
 800347a:	2002      	movs	r0, #2
 800347c:	f7ff fc92 	bl	8002da4 <LL_RCC_PLL2_SetR>
  LL_RCC_PLL2P_Enable();
 8003480:	f7ff fca6 	bl	8002dd0 <LL_RCC_PLL2P_Enable>
  LL_RCC_PLL2_Enable();
 8003484:	f7ff fbfc 	bl	8002c80 <LL_RCC_PLL2_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL2_IsReady() != 1)
 8003488:	bf00      	nop
 800348a:	f7ff fc09 	bl	8002ca0 <LL_RCC_PLL2_IsReady>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d1fa      	bne.n	800348a <PeriphCommonClock_Config+0x3e>
  {
  }

}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}

0800349a <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPDMA1);
 800349e:	2001      	movs	r0, #1
 80034a0:	f7ff fd08 	bl	8002eb4 <LL_AHB1_GRP1_EnableClock>

  /* GPDMA1 interrupt Init */
  NVIC_SetPriority(GPDMA1_Channel0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80034a4:	f7ff f86a 	bl	800257c <__NVIC_GetPriorityGrouping>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2200      	movs	r2, #0
 80034ac:	2105      	movs	r1, #5
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f8ba 	bl	8002628 <NVIC_EncodePriority>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4619      	mov	r1, r3
 80034b8:	201b      	movs	r0, #27
 80034ba:	f7ff f88b 	bl	80025d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80034be:	201b      	movs	r0, #27
 80034c0:	f7ff f86a 	bl	8002598 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */
	NVIC_SetPriority(GPDMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80034c4:	f7ff f85a 	bl	800257c <__NVIC_GetPriorityGrouping>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2200      	movs	r2, #0
 80034cc:	2105      	movs	r1, #5
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f8aa 	bl	8002628 <NVIC_EncodePriority>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4619      	mov	r1, r3
 80034d8:	201c      	movs	r0, #28
 80034da:	f7ff f87b 	bl	80025d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80034de:	201c      	movs	r0, #28
 80034e0:	f7ff f85a 	bl	8002598 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80034e4:	f7ff f84a 	bl	800257c <__NVIC_GetPriorityGrouping>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2200      	movs	r2, #0
 80034ec:	2105      	movs	r1, #5
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f89a 	bl	8002628 <NVIC_EncodePriority>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4619      	mov	r1, r3
 80034f8:	201d      	movs	r0, #29
 80034fa:	f7ff f86b 	bl	80025d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80034fe:	201d      	movs	r0, #29
 8003500:	f7ff f84a 	bl	8002598 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003504:	f7ff f83a 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003508:	4603      	mov	r3, r0
 800350a:	2200      	movs	r2, #0
 800350c:	2105      	movs	r1, #5
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff f88a 	bl	8002628 <NVIC_EncodePriority>
 8003514:	4603      	mov	r3, r0
 8003516:	4619      	mov	r1, r3
 8003518:	201e      	movs	r0, #30
 800351a:	f7ff f85b 	bl	80025d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 800351e:	201e      	movs	r0, #30
 8003520:	f7ff f83a 	bl	8002598 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003524:	f7ff f82a 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003528:	4603      	mov	r3, r0
 800352a:	2200      	movs	r2, #0
 800352c:	2105      	movs	r1, #5
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f87a 	bl	8002628 <NVIC_EncodePriority>
 8003534:	4603      	mov	r3, r0
 8003536:	4619      	mov	r1, r3
 8003538:	201f      	movs	r0, #31
 800353a:	f7ff f84b 	bl	80025d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 800353e:	201f      	movs	r0, #31
 8003540:	f7ff f82a 	bl	8002598 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003544:	f7ff f81a 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003548:	4603      	mov	r3, r0
 800354a:	2200      	movs	r2, #0
 800354c:	2105      	movs	r1, #5
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f86a 	bl	8002628 <NVIC_EncodePriority>
 8003554:	4603      	mov	r3, r0
 8003556:	4619      	mov	r1, r3
 8003558:	2020      	movs	r0, #32
 800355a:	f7ff f83b 	bl	80025d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 800355e:	2020      	movs	r0, #32
 8003560:	f7ff f81a 	bl	8002598 <__NVIC_EnableIRQ>

	NVIC_SetPriority(GPDMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003564:	f7ff f80a 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003568:	4603      	mov	r3, r0
 800356a:	2200      	movs	r2, #0
 800356c:	2105      	movs	r1, #5
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f85a 	bl	8002628 <NVIC_EncodePriority>
 8003574:	4603      	mov	r3, r0
 8003576:	4619      	mov	r1, r3
 8003578:	2021      	movs	r0, #33	@ 0x21
 800357a:	f7ff f82b 	bl	80025d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 800357e:	2021      	movs	r0, #33	@ 0x21
 8003580:	f7ff f80a 	bl	8002598 <__NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}

08003588 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0b2      	sub	sp, #200	@ 0xc8
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 800358e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003592:	2294      	movs	r2, #148	@ 0x94
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f00a f87d 	bl	800d696 <memset>

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800359c:	f107 0318 	add.w	r3, r7, #24
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
 80035ac:	615a      	str	r2, [r3, #20]
 80035ae:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	463b      	mov	r3, r7
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK3);
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7ff fa57 	bl	8002a74 <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB3_GRP1_EnableClock(LL_APB3_GRP1_PERIPH_LPUART1);
 80035c6:	2040      	movs	r0, #64	@ 0x40
 80035c8:	f7ff fce4 	bl	8002f94 <LL_APB3_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7ff fc8d 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA9   ------> LPUART1_TX
  PA10   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LPUART1_TX_RS485_5_Pin|LPUART1_RX_RS485_5_Pin;
 80035d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80035d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80035d8:	2302      	movs	r3, #2
 80035da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80035dc:	2300      	movs	r3, #0
 80035de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 80035e8:	2303      	movs	r3, #3
 80035ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ec:	463b      	mov	r3, r7
 80035ee:	4619      	mov	r1, r3
 80035f0:	4847      	ldr	r0, [pc, #284]	@ (8003710 <MX_LPUART1_UART_Init+0x188>)
 80035f2:	f004 fa42 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */
	DMA_InitStruct.SrcAddress = LL_LPUART_DMA_GetRegAddr(LPUART1, LL_LPUART_DMA_REG_DATA_RECEIVE);
 80035f6:	2101      	movs	r1, #1
 80035f8:	4846      	ldr	r0, [pc, #280]	@ (8003714 <MX_LPUART1_UART_Init+0x18c>)
 80035fa:	f7ff f92a 	bl	8002852 <LL_LPUART_DMA_GetRegAddr>
 80035fe:	4603      	mov	r3, r0
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
	DMA_InitStruct.DestAddress = (uint32_t)&LineX_RX_Buffer[Line5_BUF_Index];
 8003602:	4b45      	ldr	r3, [pc, #276]	@ (8003718 <MX_LPUART1_UART_Init+0x190>)
 8003604:	63bb      	str	r3, [r7, #56]	@ 0x38
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8003606:	2300      	movs	r3, #0
 8003608:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 800360a:	2300      	movs	r3, #0
 800360c:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 800360e:	2300      	movs	r3, #0
 8003610:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.SrcBurstLength = 1;
 8003612:	2301      	movs	r3, #1
 8003614:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DestBurstLength = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 800361a:	2300      	movs	r3, #0
 800361c:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 800361e:	2300      	movs	r3, #0
 8003620:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8003622:	2300      	movs	r3, #0
 8003624:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8003626:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800362a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800362c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003630:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8003632:	2364      	movs	r3, #100	@ 0x64
 8003634:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 800363c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003640:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8003642:	2300      	movs	r3, #0
 8003644:	673b      	str	r3, [r7, #112]	@ 0x70
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8003646:	2300      	movs	r3, #0
 8003648:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_LPUART1_RX;
 800364a:	232d      	movs	r3, #45	@ 0x2d
 800364c:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 800364e:	2300      	movs	r3, #0
 8003650:	67fb      	str	r3, [r7, #124]	@ 0x7c
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8003652:	2300      	movs	r3, #0
 8003654:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 800365e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8003672:	2300      	movs	r3, #0
 8003674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_4, &DMA_InitStruct);
 8003678:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800367c:	461a      	mov	r2, r3
 800367e:	2104      	movs	r1, #4
 8003680:	4826      	ldr	r0, [pc, #152]	@ (800371c <MX_LPUART1_UART_Init+0x194>)
 8003682:	f003 ff31 	bl	80074e8 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_4);
 8003686:	2104      	movs	r1, #4
 8003688:	4824      	ldr	r0, [pc, #144]	@ (800371c <MX_LPUART1_UART_Init+0x194>)
 800368a:	f7ff f821 	bl	80026d0 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_4);
 800368e:	2104      	movs	r1, #4
 8003690:	4822      	ldr	r0, [pc, #136]	@ (800371c <MX_LPUART1_UART_Init+0x194>)
 8003692:	f7fe fffd 	bl	8002690 <LL_DMA_EnableChannel>

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV8;
 8003696:	2304      	movs	r3, #4
 8003698:	61bb      	str	r3, [r7, #24]
  LPUART_InitStruct.BaudRate = 115200;
 800369a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800369e:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 80036a0:	2300      	movs	r3, #0
 80036a2:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80036ac:	230c      	movs	r3, #12
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80036b4:	f107 0318 	add.w	r3, r7, #24
 80036b8:	4619      	mov	r1, r3
 80036ba:	4816      	ldr	r0, [pc, #88]	@ (8003714 <MX_LPUART1_UART_Init+0x18c>)
 80036bc:	f004 faf4 	bl	8007ca8 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80036c0:	2100      	movs	r1, #0
 80036c2:	4814      	ldr	r0, [pc, #80]	@ (8003714 <MX_LPUART1_UART_Init+0x18c>)
 80036c4:	f7ff f844 	bl	8002750 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80036c8:	2100      	movs	r1, #0
 80036ca:	4812      	ldr	r0, [pc, #72]	@ (8003714 <MX_LPUART1_UART_Init+0x18c>)
 80036cc:	f7ff f867 	bl	800279e <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 80036d0:	4810      	ldr	r0, [pc, #64]	@ (8003714 <MX_LPUART1_UART_Init+0x18c>)
 80036d2:	f7ff f82d 	bl	8002730 <LL_LPUART_DisableFIFO>
  LL_LPUART_DisableOverrunDetect(LPUART1);
 80036d6:	480f      	ldr	r0, [pc, #60]	@ (8003714 <MX_LPUART1_UART_Init+0x18c>)
 80036d8:	f7ff f888 	bl	80027ec <LL_LPUART_DisableOverrunDetect>
  LL_LPUART_EnableDMAReq_RX(LPUART1);
 80036dc:	480d      	ldr	r0, [pc, #52]	@ (8003714 <MX_LPUART1_UART_Init+0x18c>)
 80036de:	f7ff f895 	bl	800280c <LL_LPUART_EnableDMAReq_RX>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 80036e2:	480c      	ldr	r0, [pc, #48]	@ (8003714 <MX_LPUART1_UART_Init+0x18c>)
 80036e4:	f7ff f814 	bl	8002710 <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 80036e8:	f7fe ff48 	bl	800257c <__NVIC_GetPriorityGrouping>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2200      	movs	r2, #0
 80036f0:	2106      	movs	r1, #6
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe ff98 	bl	8002628 <NVIC_EncodePriority>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4619      	mov	r1, r3
 80036fc:	203f      	movs	r0, #63	@ 0x3f
 80036fe:	f7fe ff69 	bl	80025d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 8003702:	203f      	movs	r0, #63	@ 0x3f
 8003704:	f7fe ff48 	bl	8002598 <__NVIC_EnableIRQ>

  /* USER CODE END LPUART1_Init 2 */

}
 8003708:	bf00      	nop
 800370a:	37c8      	adds	r7, #200	@ 0xc8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	42020000 	.word	0x42020000
 8003714:	44002400 	.word	0x44002400
 8003718:	20025bb4 	.word	0x20025bb4
 800371c:	40020000 	.word	0x40020000

08003720 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0b4      	sub	sp, #208	@ 0xd0
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8003726:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800372a:	2294      	movs	r2, #148	@ 0x94
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f009 ffb1 	bl	800d696 <memset>

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	2220      	movs	r2, #32
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f009 ffaa 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
 8003750:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART4_CLKSOURCE_PCLK1);
 8003752:	4858      	ldr	r0, [pc, #352]	@ (80038b4 <MX_UART4_Init+0x194>)
 8003754:	f7ff f983 	bl	8002a5e <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8003758:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800375c:	f7ff fbe2 	bl	8002f24 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8003760:	2008      	movs	r0, #8
 8003762:	f7ff fbc3 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PD11   ------> UART4_RX
  PD12   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = UART4_RX_RS485_3_Pin|UART4_TX_RS485_3_Pin;
 8003766:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800376a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800376c:	2302      	movs	r3, #2
 800376e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800377c:	2308      	movs	r3, #8
 800377e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	4619      	mov	r1, r3
 8003784:	484c      	ldr	r0, [pc, #304]	@ (80038b8 <MX_UART4_Init+0x198>)
 8003786:	f004 f978 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART4, LL_USART_DMA_REG_DATA_RECEIVE);
 800378a:	2101      	movs	r1, #1
 800378c:	484b      	ldr	r0, [pc, #300]	@ (80038bc <MX_UART4_Init+0x19c>)
 800378e:	f7ff fd2c 	bl	80031ea <LL_USART_DMA_GetRegAddr>
 8003792:	4603      	mov	r3, r0
 8003794:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&LineX_RX_Buffer[Line3_BUF_Index];
 8003796:	4b4a      	ldr	r3, [pc, #296]	@ (80038c0 <MX_UART4_Init+0x1a0>)
 8003798:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800379a:	2300      	movs	r3, #0
 800379c:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;;//LL_DMA_HWREQUEST_BLK
 800379e:	2300      	movs	r3, #0
 80037a0:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 80037a2:	2300      	movs	r3, #0
 80037a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 80037b6:	2300      	movs	r3, #0
 80037b8:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 80037ba:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80037be:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80037c0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80037c4:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 80037c6:	2364      	movs	r3, #100	@ 0x64
 80037c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 80037d0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80037d4:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 80037d6:	2300      	movs	r3, #0
 80037d8:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 80037da:	2300      	movs	r3, #0
 80037dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART4_RX;
 80037de:	231b      	movs	r3, #27
 80037e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 80037f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 800380a:	2300      	movs	r3, #0
 800380c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_2, &DMA_InitStruct);
 8003810:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003814:	461a      	mov	r2, r3
 8003816:	2102      	movs	r1, #2
 8003818:	482a      	ldr	r0, [pc, #168]	@ (80038c4 <MX_UART4_Init+0x1a4>)
 800381a:	f003 fe65 	bl	80074e8 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_2);
 800381e:	2102      	movs	r1, #2
 8003820:	4828      	ldr	r0, [pc, #160]	@ (80038c4 <MX_UART4_Init+0x1a4>)
 8003822:	f7fe ff55 	bl	80026d0 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_2);
 8003826:	2102      	movs	r1, #2
 8003828:	4826      	ldr	r0, [pc, #152]	@ (80038c4 <MX_UART4_Init+0x1a4>)
 800382a:	f7fe ff31 	bl	8002690 <LL_DMA_EnableChannel>

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 115200;
 8003832:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003836:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800383c:	2300      	movs	r3, #0
 800383e:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003844:	230c      	movs	r3, #12
 8003846:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003848:	2300      	movs	r3, #0
 800384a:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800384c:	2300      	movs	r3, #0
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART4, &UART_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	4819      	ldr	r0, [pc, #100]	@ (80038bc <MX_UART4_Init+0x19c>)
 8003858:	f006 f8ec 	bl	8009a34 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 800385c:	2100      	movs	r1, #0
 800385e:	4817      	ldr	r0, [pc, #92]	@ (80038bc <MX_UART4_Init+0x19c>)
 8003860:	f7ff fc2c 	bl	80030bc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8003864:	2100      	movs	r1, #0
 8003866:	4815      	ldr	r0, [pc, #84]	@ (80038bc <MX_UART4_Init+0x19c>)
 8003868:	f7ff fc4f 	bl	800310a <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART4);
 800386c:	4813      	ldr	r0, [pc, #76]	@ (80038bc <MX_UART4_Init+0x19c>)
 800386e:	f7ff fc15 	bl	800309c <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART4);
 8003872:	4812      	ldr	r0, [pc, #72]	@ (80038bc <MX_UART4_Init+0x19c>)
 8003874:	f7ff fc70 	bl	8003158 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART4);
 8003878:	4810      	ldr	r0, [pc, #64]	@ (80038bc <MX_UART4_Init+0x19c>)
 800387a:	f7ff fc7d 	bl	8003178 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART4);
 800387e:	480f      	ldr	r0, [pc, #60]	@ (80038bc <MX_UART4_Init+0x19c>)
 8003880:	f7ff fc90 	bl	80031a4 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART4);
 8003884:	480d      	ldr	r0, [pc, #52]	@ (80038bc <MX_UART4_Init+0x19c>)
 8003886:	f7ff fbf9 	bl	800307c <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 800388a:	f7fe fe77 	bl	800257c <__NVIC_GetPriorityGrouping>
 800388e:	4603      	mov	r3, r0
 8003890:	2200      	movs	r2, #0
 8003892:	2106      	movs	r1, #6
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fec7 	bl	8002628 <NVIC_EncodePriority>
 800389a:	4603      	mov	r3, r0
 800389c:	4619      	mov	r1, r3
 800389e:	203d      	movs	r0, #61	@ 0x3d
 80038a0:	f7fe fe98 	bl	80025d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80038a4:	203d      	movs	r0, #61	@ 0x3d
 80038a6:	f7fe fe77 	bl	8002598 <__NVIC_EnableIRQ>

  /* USER CODE END UART4_Init 2 */

}
 80038aa:	bf00      	nop
 80038ac:	37d0      	adds	r7, #208	@ 0xd0
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	07000900 	.word	0x07000900
 80038b8:	42020c00 	.word	0x42020c00
 80038bc:	40004c00 	.word	0x40004c00
 80038c0:	20025aec 	.word	0x20025aec
 80038c4:	40020000 	.word	0x40020000

080038c8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b0b4      	sub	sp, #208	@ 0xd0
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 80038ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80038d2:	2294      	movs	r2, #148	@ 0x94
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f009 fedd 	bl	800d696 <memset>

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	2220      	movs	r2, #32
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f009 fed6 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
 80038f8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART5_CLKSOURCE_PCLK1);
 80038fa:	4858      	ldr	r0, [pc, #352]	@ (8003a5c <MX_UART5_Init+0x194>)
 80038fc:	f7ff f8af 	bl	8002a5e <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8003900:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003904:	f7ff fb0e 	bl	8002f24 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003908:	2002      	movs	r0, #2
 800390a:	f7ff faef 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PB12   ------> UART5_RX
  PB13   ------> UART5_TX
  */
  GPIO_InitStruct.Pin = UART5_RX_RS485_2_Pin|UART5_TX_RS485_2_Pin;
 800390e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003912:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003914:	2302      	movs	r3, #2
 8003916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8003924:	230e      	movs	r3, #14
 8003926:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	4619      	mov	r1, r3
 800392c:	484c      	ldr	r0, [pc, #304]	@ (8003a60 <MX_UART5_Init+0x198>)
 800392e:	f004 f8a4 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN UART5_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART5, LL_USART_DMA_REG_DATA_RECEIVE);
 8003932:	2101      	movs	r1, #1
 8003934:	484b      	ldr	r0, [pc, #300]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003936:	f7ff fc58 	bl	80031ea <LL_USART_DMA_GetRegAddr>
 800393a:	4603      	mov	r3, r0
 800393c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&LineX_RX_Buffer[Line2_BUF_Index];
 800393e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a68 <MX_UART5_Init+0x1a0>)
 8003940:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8003942:	2300      	movs	r3, #0
 8003944:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8003946:	2300      	movs	r3, #0
 8003948:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 800394a:	2300      	movs	r3, #0
 800394c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8003956:	2300      	movs	r3, #0
 8003958:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 800395a:	2300      	movs	r3, #0
 800395c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 800395e:	2300      	movs	r3, #0
 8003960:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8003962:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003966:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8003968:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800396c:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 800396e:	2364      	movs	r3, #100	@ 0x64
 8003970:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8003978:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800397c:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 800397e:	2300      	movs	r3, #0
 8003980:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8003982:	2300      	movs	r3, #0
 8003984:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART5_RX;
 8003986:	231d      	movs	r3, #29
 8003988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 800399e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_1, &DMA_InitStruct);
 80039b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039bc:	461a      	mov	r2, r3
 80039be:	2101      	movs	r1, #1
 80039c0:	482a      	ldr	r0, [pc, #168]	@ (8003a6c <MX_UART5_Init+0x1a4>)
 80039c2:	f003 fd91 	bl	80074e8 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_1);
 80039c6:	2101      	movs	r1, #1
 80039c8:	4828      	ldr	r0, [pc, #160]	@ (8003a6c <MX_UART5_Init+0x1a4>)
 80039ca:	f7fe fe81 	bl	80026d0 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_1);
 80039ce:	2101      	movs	r1, #1
 80039d0:	4826      	ldr	r0, [pc, #152]	@ (8003a6c <MX_UART5_Init+0x1a4>)
 80039d2:	f7fe fe5d 	bl	8002690 <LL_DMA_EnableChannel>

  /* USER CODE END UART5_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 115200;
 80039da:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80039de:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80039ec:	230c      	movs	r3, #12
 80039ee:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART5, &UART_InitStruct);
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	4619      	mov	r1, r3
 80039fe:	4819      	ldr	r0, [pc, #100]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003a00:	f006 f818 	bl	8009a34 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART5, LL_USART_FIFOTHRESHOLD_1_8);
 8003a04:	2100      	movs	r1, #0
 8003a06:	4817      	ldr	r0, [pc, #92]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003a08:	f7ff fb58 	bl	80030bc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART5, LL_USART_FIFOTHRESHOLD_1_8);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4815      	ldr	r0, [pc, #84]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003a10:	f7ff fb7b 	bl	800310a <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART5);
 8003a14:	4813      	ldr	r0, [pc, #76]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003a16:	f7ff fb41 	bl	800309c <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART5);
 8003a1a:	4812      	ldr	r0, [pc, #72]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003a1c:	f7ff fb9c 	bl	8003158 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART5);
 8003a20:	4810      	ldr	r0, [pc, #64]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003a22:	f7ff fba9 	bl	8003178 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART5);
 8003a26:	480f      	ldr	r0, [pc, #60]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003a28:	f7ff fbbc 	bl	80031a4 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART5);
 8003a2c:	480d      	ldr	r0, [pc, #52]	@ (8003a64 <MX_UART5_Init+0x19c>)
 8003a2e:	f7ff fb25 	bl	800307c <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8003a32:	f7fe fda3 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2106      	movs	r1, #6
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fdf3 	bl	8002628 <NVIC_EncodePriority>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4619      	mov	r1, r3
 8003a46:	203e      	movs	r0, #62	@ 0x3e
 8003a48:	f7fe fdc4 	bl	80025d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8003a4c:	203e      	movs	r0, #62	@ 0x3e
 8003a4e:	f7fe fda3 	bl	8002598 <__NVIC_EnableIRQ>

  /* USER CODE END UART5_Init 2 */

}
 8003a52:	bf00      	nop
 8003a54:	37d0      	adds	r7, #208	@ 0xd0
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	07000c00 	.word	0x07000c00
 8003a60:	42020400 	.word	0x42020400
 8003a64:	40005000 	.word	0x40005000
 8003a68:	20025a88 	.word	0x20025a88
 8003a6c:	40020000 	.word	0x40020000

08003a70 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b0b4      	sub	sp, #208	@ 0xd0
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8003a76:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a7a:	2294      	movs	r2, #148	@ 0x94
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f009 fe09 	bl	800d696 <memset>

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	2220      	movs	r2, #32
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f009 fe02 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
 8003aa0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART7_CLKSOURCE_PCLK1);
 8003aa2:	4858      	ldr	r0, [pc, #352]	@ (8003c04 <MX_UART7_Init+0x194>)
 8003aa4:	f7fe ffdb 	bl	8002a5e <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 8003aa8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003aac:	f7ff fa3a 	bl	8002f24 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f7ff fa1b 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PA8   ------> UART7_RX
  PA15(JTDI)   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = UART7_RX_RS485_7_Pin|UART7_TX_RS485_7_Pin;
 8003ab6:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8003aba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003abc:	2302      	movs	r3, #2
 8003abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8003acc:	230b      	movs	r3, #11
 8003ace:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	1d3b      	adds	r3, r7, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	484c      	ldr	r0, [pc, #304]	@ (8003c08 <MX_UART7_Init+0x198>)
 8003ad6:	f003 ffd0 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN UART7_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(UART7, LL_USART_DMA_REG_DATA_RECEIVE);
 8003ada:	2101      	movs	r1, #1
 8003adc:	484b      	ldr	r0, [pc, #300]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003ade:	f7ff fb84 	bl	80031ea <LL_USART_DMA_GetRegAddr>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&LineX_RX_Buffer[Line7_BUF_Index];
 8003ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c10 <MX_UART7_Init+0x1a0>)
 8003ae8:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8003aea:	2300      	movs	r3, #0
 8003aec:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8003aee:	2300      	movs	r3, #0
 8003af0:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8003af2:	2300      	movs	r3, #0
 8003af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8003afa:	2301      	movs	r3, #1
 8003afc:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8003b06:	2300      	movs	r3, #0
 8003b08:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8003b0a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b0e:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8003b10:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003b14:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8003b16:	2364      	movs	r3, #100	@ 0x64
 8003b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8003b20:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003b24:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8003b26:	2300      	movs	r3, #0
 8003b28:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_UART7_RX;
 8003b2e:	2321      	movs	r3, #33	@ 0x21
 8003b30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8003b46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_6, &DMA_InitStruct);
 8003b60:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003b64:	461a      	mov	r2, r3
 8003b66:	2106      	movs	r1, #6
 8003b68:	482a      	ldr	r0, [pc, #168]	@ (8003c14 <MX_UART7_Init+0x1a4>)
 8003b6a:	f003 fcbd 	bl	80074e8 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_6);
 8003b6e:	2106      	movs	r1, #6
 8003b70:	4828      	ldr	r0, [pc, #160]	@ (8003c14 <MX_UART7_Init+0x1a4>)
 8003b72:	f7fe fdad 	bl	80026d0 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_6);
 8003b76:	2106      	movs	r1, #6
 8003b78:	4826      	ldr	r0, [pc, #152]	@ (8003c14 <MX_UART7_Init+0x1a4>)
 8003b7a:	f7fe fd89 	bl	8002690 <LL_DMA_EnableChannel>

  /* USER CODE END UART7_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.BaudRate = 115200;
 8003b82:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003b86:	623b      	str	r3, [r7, #32]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003b94:	230c      	movs	r3, #12
 8003b96:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(UART7, &UART_InitStruct);
 8003ba0:	f107 031c 	add.w	r3, r7, #28
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4819      	ldr	r0, [pc, #100]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003ba8:	f005 ff44 	bl	8009a34 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8003bac:	2100      	movs	r1, #0
 8003bae:	4817      	ldr	r0, [pc, #92]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003bb0:	f7ff fa84 	bl	80030bc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4815      	ldr	r0, [pc, #84]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003bb8:	f7ff faa7 	bl	800310a <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(UART7);
 8003bbc:	4813      	ldr	r0, [pc, #76]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003bbe:	f7ff fa6d 	bl	800309c <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(UART7);
 8003bc2:	4812      	ldr	r0, [pc, #72]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003bc4:	f7ff fac8 	bl	8003158 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(UART7);
 8003bc8:	4810      	ldr	r0, [pc, #64]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003bca:	f7ff fad5 	bl	8003178 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(UART7);
 8003bce:	480f      	ldr	r0, [pc, #60]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003bd0:	f7ff fae8 	bl	80031a4 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(UART7);
 8003bd4:	480d      	ldr	r0, [pc, #52]	@ (8003c0c <MX_UART7_Init+0x19c>)
 8003bd6:	f7ff fa51 	bl	800307c <LL_USART_Enable>
  /* USER CODE BEGIN UART7_Init 2 */
  NVIC_SetPriority(UART7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8003bda:	f7fe fccf 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2200      	movs	r2, #0
 8003be2:	2106      	movs	r1, #6
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fd1f 	bl	8002628 <NVIC_EncodePriority>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4619      	mov	r1, r3
 8003bee:	2062      	movs	r0, #98	@ 0x62
 8003bf0:	f7fe fcf0 	bl	80025d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART7_IRQn);
 8003bf4:	2062      	movs	r0, #98	@ 0x62
 8003bf6:	f7fe fccf 	bl	8002598 <__NVIC_EnableIRQ>

  /* USER CODE END UART7_Init 2 */

}
 8003bfa:	bf00      	nop
 8003bfc:	37d0      	adds	r7, #208	@ 0xd0
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	07001200 	.word	0x07001200
 8003c08:	42020000 	.word	0x42020000
 8003c0c:	40007800 	.word	0x40007800
 8003c10:	20025c7c 	.word	0x20025c7c
 8003c14:	40020000 	.word	0x40020000

08003c18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b0b4      	sub	sp, #208	@ 0xd0
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8003c1e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c22:	2294      	movs	r2, #148	@ 0x94
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f009 fd35 	bl	800d696 <memset>

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003c2c:	f107 031c 	add.w	r3, r7, #28
 8003c30:	2220      	movs	r2, #32
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f009 fd2e 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	611a      	str	r2, [r3, #16]
 8003c48:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 8003c4a:	4858      	ldr	r0, [pc, #352]	@ (8003dac <MX_USART3_UART_Init+0x194>)
 8003c4c:	f7fe fefc 	bl	8002a48 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8003c50:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003c54:	f7ff f966 	bl	8002f24 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f7ff f947 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = UART3_TX_RS485_1_Pin|UART3_RX_RS485_1_Pin;
 8003c5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c64:	2302      	movs	r3, #2
 8003c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003c74:	2307      	movs	r3, #7
 8003c76:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	484c      	ldr	r0, [pc, #304]	@ (8003db0 <MX_USART3_UART_Init+0x198>)
 8003c7e:	f003 fefc 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */
  DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART3, LL_USART_DMA_REG_DATA_RECEIVE);
 8003c82:	2101      	movs	r1, #1
 8003c84:	484b      	ldr	r0, [pc, #300]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003c86:	f7ff fab0 	bl	80031ea <LL_USART_DMA_GetRegAddr>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  DMA_InitStruct.DestAddress = (uint32_t)&LineX_RX_Buffer[Line1_BUF_Index];
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003db8 <MX_USART3_UART_Init+0x1a0>)
 8003c90:	643b      	str	r3, [r7, #64]	@ 0x40
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8003c92:	2300      	movs	r3, #0
 8003c94:	647b      	str	r3, [r7, #68]	@ 0x44
  DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8003c96:	2300      	movs	r3, #0
 8003c98:	64bb      	str	r3, [r7, #72]	@ 0x48
  DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  DMA_InitStruct.SrcBurstLength = 1;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	653b      	str	r3, [r7, #80]	@ 0x50
  DMA_InitStruct.DestBurstLength = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	657b      	str	r3, [r7, #84]	@ 0x54
  DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
  DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	663b      	str	r3, [r7, #96]	@ 0x60
  DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8003cb2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003cb6:	667b      	str	r3, [r7, #100]	@ 0x64
  DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8003cb8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8003cbe:	2364      	movs	r3, #100	@ 0x64
 8003cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8003cc8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003ccc:	677b      	str	r3, [r7, #116]	@ 0x74
  DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
  DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART3_RX;
 8003cd6:	2319      	movs	r3, #25
 8003cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
  DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8003cee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_0, &DMA_InitStruct);
 8003d08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2100      	movs	r1, #0
 8003d10:	482a      	ldr	r0, [pc, #168]	@ (8003dbc <MX_USART3_UART_Init+0x1a4>)
 8003d12:	f003 fbe9 	bl	80074e8 <LL_DMA_Init>

  LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_0);
 8003d16:	2100      	movs	r1, #0
 8003d18:	4828      	ldr	r0, [pc, #160]	@ (8003dbc <MX_USART3_UART_Init+0x1a4>)
 8003d1a:	f7fe fcd9 	bl	80026d0 <LL_DMA_EnableIT_TC>

  LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_0);
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4826      	ldr	r0, [pc, #152]	@ (8003dbc <MX_USART3_UART_Init+0x1a4>)
 8003d22:	f7fe fcb5 	bl	8002690 <LL_DMA_EnableChannel>

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 115200;
 8003d2a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003d2e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003d30:	2300      	movs	r3, #0
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003d3c:	230c      	movs	r3, #12
 8003d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003d44:	2300      	movs	r3, #0
 8003d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART3, &USART_InitStruct);
 8003d48:	f107 031c 	add.w	r3, r7, #28
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4819      	ldr	r0, [pc, #100]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003d50:	f005 fe70 	bl	8009a34 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8003d54:	2100      	movs	r1, #0
 8003d56:	4817      	ldr	r0, [pc, #92]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003d58:	f7ff f9b0 	bl	80030bc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4815      	ldr	r0, [pc, #84]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003d60:	f7ff f9d3 	bl	800310a <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 8003d64:	4813      	ldr	r0, [pc, #76]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003d66:	f7ff f999 	bl	800309c <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART3);
 8003d6a:	4812      	ldr	r0, [pc, #72]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003d6c:	f7ff f9f4 	bl	8003158 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART3);
 8003d70:	4810      	ldr	r0, [pc, #64]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003d72:	f7ff fa01 	bl	8003178 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART3);
 8003d76:	480f      	ldr	r0, [pc, #60]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003d78:	f7ff fa14 	bl	80031a4 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART3);
 8003d7c:	480d      	ldr	r0, [pc, #52]	@ (8003db4 <MX_USART3_UART_Init+0x19c>)
 8003d7e:	f7ff f97d 	bl	800307c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8003d82:	f7fe fbfb 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2106      	movs	r1, #6
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fc4b 	bl	8002628 <NVIC_EncodePriority>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4619      	mov	r1, r3
 8003d96:	203c      	movs	r0, #60	@ 0x3c
 8003d98:	f7fe fc1c 	bl	80025d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8003d9c:	203c      	movs	r0, #60	@ 0x3c
 8003d9e:	f7fe fbfb 	bl	8002598 <__NVIC_EnableIRQ>

  /* USER CODE END USART3_Init 2 */

}
 8003da2:	bf00      	nop
 8003da4:	37d0      	adds	r7, #208	@ 0xd0
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	07000600 	.word	0x07000600
 8003db0:	42020400 	.word	0x42020400
 8003db4:	40004800 	.word	0x40004800
 8003db8:	20025a24 	.word	0x20025a24
 8003dbc:	40020000 	.word	0x40020000

08003dc0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b0b4      	sub	sp, #208	@ 0xd0
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8003dc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003dca:	2294      	movs	r2, #148	@ 0x94
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f009 fc61 	bl	800d696 <memset>

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003dd4:	f107 031c 	add.w	r3, r7, #28
 8003dd8:	2220      	movs	r2, #32
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f009 fc5a 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	611a      	str	r2, [r3, #16]
 8003df0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART6_CLKSOURCE_PCLK1);
 8003df2:	4857      	ldr	r0, [pc, #348]	@ (8003f50 <MX_USART6_UART_Init+0x190>)
 8003df4:	f7fe fe28 	bl	8002a48 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART6);
 8003df8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8003dfc:	f7ff f892 	bl	8002f24 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8003e00:	2004      	movs	r0, #4
 8003e02:	f7ff f873 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = UART6_TX_RS485_4_Pin|UART6_RX_RS485_4_Pin;
 8003e06:	23c0      	movs	r3, #192	@ 0xc0
 8003e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003e1a:	2307      	movs	r3, #7
 8003e1c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	484c      	ldr	r0, [pc, #304]	@ (8003f54 <MX_USART6_UART_Init+0x194>)
 8003e24:	f003 fe29 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN USART6_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART6, LL_USART_DMA_REG_DATA_RECEIVE);
 8003e28:	2101      	movs	r1, #1
 8003e2a:	484b      	ldr	r0, [pc, #300]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003e2c:	f7ff f9dd 	bl	80031ea <LL_USART_DMA_GetRegAddr>
 8003e30:	4603      	mov	r3, r0
 8003e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&LineX_RX_Buffer[Line4_BUF_Index];
 8003e34:	4b49      	ldr	r3, [pc, #292]	@ (8003f5c <MX_USART6_UART_Init+0x19c>)
 8003e36:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8003e40:	2300      	movs	r3, #0
 8003e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8003e44:	2301      	movs	r3, #1
 8003e46:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8003e54:	2300      	movs	r3, #0
 8003e56:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8003e58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003e5c:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8003e5e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003e62:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8003e64:	2364      	movs	r3, #100	@ 0x64
 8003e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8003e6e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003e72:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8003e74:	2300      	movs	r3, #0
 8003e76:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART6_RX;
 8003e7c:	231f      	movs	r3, #31
 8003e7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8003e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_3, &DMA_InitStruct);
 8003eae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2103      	movs	r1, #3
 8003eb6:	482a      	ldr	r0, [pc, #168]	@ (8003f60 <MX_USART6_UART_Init+0x1a0>)
 8003eb8:	f003 fb16 	bl	80074e8 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_3);
 8003ebc:	2103      	movs	r1, #3
 8003ebe:	4828      	ldr	r0, [pc, #160]	@ (8003f60 <MX_USART6_UART_Init+0x1a0>)
 8003ec0:	f7fe fc06 	bl	80026d0 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_3);
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	4826      	ldr	r0, [pc, #152]	@ (8003f60 <MX_USART6_UART_Init+0x1a0>)
 8003ec8:	f7fe fbe2 	bl	8002690 <LL_DMA_EnableChannel>

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 115200;
 8003ed0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003ed4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003eda:	2300      	movs	r3, #0
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003eea:	2300      	movs	r3, #0
 8003eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART6, &USART_InitStruct);
 8003eee:	f107 031c 	add.w	r3, r7, #28
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4818      	ldr	r0, [pc, #96]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003ef6:	f005 fd9d 	bl	8009a34 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8003efa:	2100      	movs	r1, #0
 8003efc:	4816      	ldr	r0, [pc, #88]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003efe:	f7ff f8dd 	bl	80030bc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8003f02:	2100      	movs	r1, #0
 8003f04:	4814      	ldr	r0, [pc, #80]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003f06:	f7ff f900 	bl	800310a <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8003f0a:	4813      	ldr	r0, [pc, #76]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003f0c:	f7ff f8c6 	bl	800309c <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART6);
 8003f10:	4811      	ldr	r0, [pc, #68]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003f12:	f7ff f921 	bl	8003158 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART6);
 8003f16:	4810      	ldr	r0, [pc, #64]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003f18:	f7ff f92e 	bl	8003178 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART6);
 8003f1c:	480e      	ldr	r0, [pc, #56]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003f1e:	f7ff f941 	bl	80031a4 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART6);
 8003f22:	480d      	ldr	r0, [pc, #52]	@ (8003f58 <MX_USART6_UART_Init+0x198>)
 8003f24:	f7ff f8aa 	bl	800307c <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8003f28:	f7fe fb28 	bl	800257c <__NVIC_GetPriorityGrouping>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2106      	movs	r1, #6
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fb78 	bl	8002628 <NVIC_EncodePriority>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	2055      	movs	r0, #85	@ 0x55
 8003f3e:	f7fe fb49 	bl	80025d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8003f42:	2055      	movs	r0, #85	@ 0x55
 8003f44:	f7fe fb28 	bl	8002598 <__NVIC_EnableIRQ>

  /* USER CODE END USART6_Init 2 */

}
 8003f48:	bf00      	nop
 8003f4a:	37d0      	adds	r7, #208	@ 0xd0
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	07000f00 	.word	0x07000f00
 8003f54:	42020800 	.word	0x42020800
 8003f58:	40006400 	.word	0x40006400
 8003f5c:	20025b50 	.word	0x20025b50
 8003f60:	40020000 	.word	0x40020000

08003f64 <MX_USART11_UART_Init>:
  * @brief USART11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART11_UART_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b0b4      	sub	sp, #208	@ 0xd0
 8003f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART11_Init 0 */
	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8003f6a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003f6e:	2294      	movs	r2, #148	@ 0x94
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f009 fb8f 	bl	800d696 <memset>

  /* USER CODE END USART11_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003f78:	f107 031c 	add.w	r3, r7, #28
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f009 fb88 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
 8003f94:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART11_CLKSOURCE_PCLK1);
 8003f96:	4857      	ldr	r0, [pc, #348]	@ (80040f4 <MX_USART11_UART_Init+0x190>)
 8003f98:	f7fe fd56 	bl	8002a48 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART11);
 8003f9c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003fa0:	f7fe ffc0 	bl	8002f24 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	f7fe ffa1 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**USART11 GPIO Configuration
  PA6   ------> USART11_TX
  PA7   ------> USART11_RX
  */
  GPIO_InitStruct.Pin = UART11_TX_RS485_6_Pin|UART11_RX_RS485_6_Pin;
 8003faa:	23c0      	movs	r3, #192	@ 0xc0
 8003fac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003fbe:	2307      	movs	r3, #7
 8003fc0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	484c      	ldr	r0, [pc, #304]	@ (80040f8 <MX_USART11_UART_Init+0x194>)
 8003fc8:	f003 fd57 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN USART11_Init 1 */
	DMA_InitStruct.SrcAddress = LL_USART_DMA_GetRegAddr(USART11, LL_USART_DMA_REG_DATA_RECEIVE);
 8003fcc:	2101      	movs	r1, #1
 8003fce:	484b      	ldr	r0, [pc, #300]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 8003fd0:	f7ff f90b 	bl	80031ea <LL_USART_DMA_GetRegAddr>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	DMA_InitStruct.DestAddress = (uint32_t)&LineX_RX_Buffer[Line6_BUF_Index];
 8003fd8:	4b49      	ldr	r3, [pc, #292]	@ (8004100 <MX_USART11_UART_Init+0x19c>)
 8003fda:	643b      	str	r3, [r7, #64]	@ 0x40
	DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44
	DMA_InitStruct.BlkHWRequest = LL_DMA_HWREQUEST_SINGLEBURST;//LL_DMA_HWREQUEST_SINGLEBURST;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
	DMA_InitStruct.DataAlignment = LL_DMA_DATA_ALIGN_ZEROPADD;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	DMA_InitStruct.SrcBurstLength = 1;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	653b      	str	r3, [r7, #80]	@ 0x50
	DMA_InitStruct.DestBurstLength = 1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	657b      	str	r3, [r7, #84]	@ 0x54
	DMA_InitStruct.SrcDataWidth = LL_DMA_SRC_DATAWIDTH_BYTE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
	DMA_InitStruct.DestDataWidth = LL_DMA_DEST_DATAWIDTH_BYTE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	DMA_InitStruct.SrcIncMode = LL_DMA_SRC_FIXED;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	663b      	str	r3, [r7, #96]	@ 0x60
	DMA_InitStruct.DestIncMode = LL_DMA_DEST_INCREMENT;
 8003ffc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004000:	667b      	str	r3, [r7, #100]	@ 0x64
	DMA_InitStruct.Priority = LL_DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8004002:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004006:	66bb      	str	r3, [r7, #104]	@ 0x68
	DMA_InitStruct.BlkDataLength = Line_BUF_Size; //sizeof(RX_Buffer);//0x00000000U;
 8004008:	2364      	movs	r3, #100	@ 0x64
 800400a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	DMA_InitStruct.Mode = LL_DMA_NORMAL;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	DMA_InitStruct.TriggerMode = LL_DMA_TRIGM_SINGLBURST_TRANSFER;//LL_DMA_TRIGM_BLK_TRANSFER;
 8004012:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004016:	677b      	str	r3, [r7, #116]	@ 0x74
	DMA_InitStruct.TriggerPolarity = LL_DMA_TRIG_POLARITY_MASKED;//LL_DMA_TRIG_POLARITY_RISING;
 8004018:	2300      	movs	r3, #0
 800401a:	67bb      	str	r3, [r7, #120]	@ 0x78
	DMA_InitStruct.TriggerSelection = 0x00000000U;//LL_GPDMA1_TRIGGER_GPDMA1_CH0_TCF;
 800401c:	2300      	movs	r3, #0
 800401e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DMA_InitStruct.Request = LL_GPDMA1_REQUEST_USART11_RX;
 8004020:	2329      	movs	r3, #41	@ 0x29
 8004022:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	DMA_InitStruct.TransferEventMode = LL_DMA_TCEM_BLK_TRANSFER;
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	//  DMA_InitStruct.Mode = LL_DMA_NORMAL;
	DMA_InitStruct.SrcAllocatedPort = LL_DMA_SRC_ALLOCATED_PORT0;
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	DMA_InitStruct.DestAllocatedPort = LL_DMA_DEST_ALLOCATED_PORT0;
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	DMA_InitStruct.LinkAllocatedPort = LL_DMA_LINK_ALLOCATED_PORT1;
 8004038:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800403c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	DMA_InitStruct.LinkStepMode = LL_DMA_LSM_FULL_EXECUTION;
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	DMA_InitStruct.LinkedListBaseAddr = 0x00000000U;
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	DMA_InitStruct.LinkedListAddrOffset = 0x00000000U;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	LL_DMA_Init(GPDMA1, LL_DMA_CHANNEL_5, &DMA_InitStruct);
 8004052:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004056:	461a      	mov	r2, r3
 8004058:	2105      	movs	r1, #5
 800405a:	482a      	ldr	r0, [pc, #168]	@ (8004104 <MX_USART11_UART_Init+0x1a0>)
 800405c:	f003 fa44 	bl	80074e8 <LL_DMA_Init>

	LL_DMA_EnableIT_TC(GPDMA1, LL_DMA_CHANNEL_5);
 8004060:	2105      	movs	r1, #5
 8004062:	4828      	ldr	r0, [pc, #160]	@ (8004104 <MX_USART11_UART_Init+0x1a0>)
 8004064:	f7fe fb34 	bl	80026d0 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(GPDMA1, LL_DMA_CHANNEL_5);
 8004068:	2105      	movs	r1, #5
 800406a:	4826      	ldr	r0, [pc, #152]	@ (8004104 <MX_USART11_UART_Init+0x1a0>)
 800406c:	f7fe fb10 	bl	8002690 <LL_DMA_EnableChannel>

  /* USER CODE END USART11_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.BaudRate = 115200;
 8004074:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004078:	623b      	str	r3, [r7, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800407e:	2300      	movs	r3, #0
 8004080:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004082:	2300      	movs	r3, #0
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004086:	230c      	movs	r3, #12
 8004088:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800408a:	2300      	movs	r3, #0
 800408c:	637b      	str	r3, [r7, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800408e:	2300      	movs	r3, #0
 8004090:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_USART_Init(USART11, &USART_InitStruct);
 8004092:	f107 031c 	add.w	r3, r7, #28
 8004096:	4619      	mov	r1, r3
 8004098:	4818      	ldr	r0, [pc, #96]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 800409a:	f005 fccb 	bl	8009a34 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART11, LL_USART_FIFOTHRESHOLD_1_8);
 800409e:	2100      	movs	r1, #0
 80040a0:	4816      	ldr	r0, [pc, #88]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 80040a2:	f7ff f80b 	bl	80030bc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART11, LL_USART_FIFOTHRESHOLD_1_8);
 80040a6:	2100      	movs	r1, #0
 80040a8:	4814      	ldr	r0, [pc, #80]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 80040aa:	f7ff f82e 	bl	800310a <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART11);
 80040ae:	4813      	ldr	r0, [pc, #76]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 80040b0:	f7fe fff4 	bl	800309c <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART11);
 80040b4:	4811      	ldr	r0, [pc, #68]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 80040b6:	f7ff f84f 	bl	8003158 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART11);
 80040ba:	4810      	ldr	r0, [pc, #64]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 80040bc:	f7ff f85c 	bl	8003178 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART11);
 80040c0:	480e      	ldr	r0, [pc, #56]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 80040c2:	f7ff f86f 	bl	80031a4 <LL_USART_EnableDMAReq_RX>
  LL_USART_Enable(USART11);
 80040c6:	480d      	ldr	r0, [pc, #52]	@ (80040fc <MX_USART11_UART_Init+0x198>)
 80040c8:	f7fe ffd8 	bl	800307c <LL_USART_Enable>
  /* USER CODE BEGIN USART11_Init 2 */
  NVIC_SetPriority(USART11_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 80040cc:	f7fe fa56 	bl	800257c <__NVIC_GetPriorityGrouping>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2200      	movs	r2, #0
 80040d4:	2106      	movs	r1, #6
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe faa6 	bl	8002628 <NVIC_EncodePriority>
 80040dc:	4603      	mov	r3, r0
 80040de:	4619      	mov	r1, r3
 80040e0:	2057      	movs	r0, #87	@ 0x57
 80040e2:	f7fe fa77 	bl	80025d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART11_IRQn);
 80040e6:	2057      	movs	r0, #87	@ 0x57
 80040e8:	f7fe fa56 	bl	8002598 <__NVIC_EnableIRQ>

  /* USER CODE END USART11_Init 2 */

}
 80040ec:	bf00      	nop
 80040ee:	37d0      	adds	r7, #208	@ 0xd0
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	07000004 	.word	0x07000004
 80040f8:	42020000 	.word	0x42020000
 80040fc:	40006c00 	.word	0x40006c00
 8004100:	20025c18 	.word	0x20025c18
 8004104:	40020000 	.word	0x40020000

08004108 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b0b6      	sub	sp, #216	@ 0xd8
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800410e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8004112:	2228      	movs	r2, #40	@ 0x28
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f009 fabd 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	615a      	str	r2, [r3, #20]
  LL_DMA_InitTypeDef DMA_InitStruct = {0};
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	2294      	movs	r2, #148	@ 0x94
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f009 faae 	bl	800d696 <memset>

  LL_RCC_SetSPIClockSource(LL_RCC_SPI3_CLKSOURCE_PLL2P);
 800413a:	482c      	ldr	r0, [pc, #176]	@ (80041ec <MX_SPI3_Init+0xe4>)
 800413c:	f7fe fcb0 	bl	8002aa0 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004140:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004144:	f7fe feee 	bl	8002f24 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004148:	2004      	movs	r0, #4
 800414a:	f7fe fecf 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800414e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004152:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004156:	2302      	movs	r3, #2
 8004158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800416e:	2306      	movs	r3, #6
 8004170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004174:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004178:	4619      	mov	r1, r3
 800417a:	481d      	ldr	r0, [pc, #116]	@ (80041f0 <MX_SPI3_Init+0xe8>)
 800417c:	f003 fc7d 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
    SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004186:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800418a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT; //LL_SPI_DATAWIDTH_16BIT;
 800418e:	2307      	movs	r3, #7
 8004190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80041a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80041a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80041a8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80041ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	SPI_InitStruct.CRCPoly = 0x7;
 80041bc:	2307      	movs	r3, #7
 80041be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	LL_SPI_Init(SPI3, &SPI_InitStruct);
 80041c2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80041c6:	4619      	mov	r1, r3
 80041c8:	480a      	ldr	r0, [pc, #40]	@ (80041f4 <MX_SPI3_Init+0xec>)
 80041ca:	f005 fb17 	bl	80097fc <LL_SPI_Init>
	LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80041ce:	2100      	movs	r1, #0
 80041d0:	4808      	ldr	r0, [pc, #32]	@ (80041f4 <MX_SPI3_Init+0xec>)
 80041d2:	f7fe ff1d 	bl	8003010 <LL_SPI_SetStandard>
	LL_SPI_EnableNSSPulseMgt(SPI3);
 80041d6:	4807      	ldr	r0, [pc, #28]	@ (80041f4 <MX_SPI3_Init+0xec>)
 80041d8:	f7fe ff40 	bl	800305c <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 80041dc:	2100      	movs	r1, #0
 80041de:	4805      	ldr	r0, [pc, #20]	@ (80041f4 <MX_SPI3_Init+0xec>)
 80041e0:	f7fe ff29 	bl	8003036 <LL_SPI_SetFIFOThreshold>
  //LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
  //LL_SPI_DMA_GetTxRegAddr(const SPI_TypeDef *SPIx)
  //LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
  /* USER CODE END SPI3_Init 2 */

}
 80041e4:	bf00      	nop
 80041e6:	37d8      	adds	r7, #216	@ 0xd8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	07010608 	.word	0x07010608
 80041f0:	42020800 	.word	0x42020800
 80041f4:	40003c00 	.word	0x40003c00

080041f8 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b090      	sub	sp, #64	@ 0x40
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80041fe:	f107 0318 	add.w	r3, r7, #24
 8004202:	2228      	movs	r2, #40	@ 0x28
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f009 fa45 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	463b      	mov	r3, r7
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	611a      	str	r2, [r3, #16]
 800421a:	615a      	str	r2, [r3, #20]

  LL_RCC_SetSPIClockSource(LL_RCC_SPI6_CLKSOURCE_PCLK2);
 800421c:	4823      	ldr	r0, [pc, #140]	@ (80042ac <MX_SPI6_Init+0xb4>)
 800421e:	f7fe fc3f 	bl	8002aa0 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI6);
 8004222:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004226:	f7fe fe99 	bl	8002f5c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800422a:	2002      	movs	r0, #2
 800422c:	f7fe fe5e 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PB3(JTDO/TRACESWO)   ------> SPI6_SCK
  PB4(NJTRST)   ------> SPI6_MISO
  PB5   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8004230:	2338      	movs	r3, #56	@ 0x38
 8004232:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004234:	2302      	movs	r3, #2
 8004236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004244:	2308      	movs	r3, #8
 8004246:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004248:	463b      	mov	r3, r7
 800424a:	4619      	mov	r1, r3
 800424c:	4818      	ldr	r0, [pc, #96]	@ (80042b0 <MX_SPI6_Init+0xb8>)
 800424e:	f003 fc14 	bl	8007a7a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004256:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800425a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800425c:	2307      	movs	r3, #7
 800425e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8004260:	2300      	movs	r3, #0
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8004264:	2300      	movs	r3, #0
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004268:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 800426e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004272:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004274:	2300      	movs	r3, #0
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004278:	2300      	movs	r3, #0
 800427a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 0x7;
 800427c:	2307      	movs	r3, #7
 800427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 8004280:	f107 0318 	add.w	r3, r7, #24
 8004284:	4619      	mov	r1, r3
 8004286:	480b      	ldr	r0, [pc, #44]	@ (80042b4 <MX_SPI6_Init+0xbc>)
 8004288:	f005 fab8 	bl	80097fc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 800428c:	2100      	movs	r1, #0
 800428e:	4809      	ldr	r0, [pc, #36]	@ (80042b4 <MX_SPI6_Init+0xbc>)
 8004290:	f7fe febe 	bl	8003010 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 8004294:	4807      	ldr	r0, [pc, #28]	@ (80042b4 <MX_SPI6_Init+0xbc>)
 8004296:	f7fe fee1 	bl	800305c <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_SetFIFOThreshold(SPI6, LL_SPI_FIFO_TH_01DATA);
 800429a:	2100      	movs	r1, #0
 800429c:	4805      	ldr	r0, [pc, #20]	@ (80042b4 <MX_SPI6_Init+0xbc>)
 800429e:	f7fe feca 	bl	8003036 <LL_SPI_SetFIFOThreshold>
  /* USER CODE END SPI6_Init 2 */

}
 80042a2:	bf00      	nop
 80042a4:	3740      	adds	r7, #64	@ 0x40
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	07000f08 	.word	0x07000f08
 80042b0:	42020400 	.word	0x42020400
 80042b4:	40015000 	.word	0x40015000

080042b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042be:	463b      	mov	r3, r7
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
 80042cc:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80042ce:	2004      	movs	r0, #4
 80042d0:	f7fe fe0c 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80042d4:	2080      	movs	r0, #128	@ 0x80
 80042d6:	f7fe fe09 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80042da:	2001      	movs	r0, #1
 80042dc:	f7fe fe06 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80042e0:	2002      	movs	r0, #2
 80042e2:	f7fe fe03 	bl	8002eec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80042e6:	2008      	movs	r0, #8
 80042e8:	f7fe fe00 	bl	8002eec <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, SPI_TFT_CS_Pin|TFT_RS_Pin|Touch_CS_Pin|RS485_2_DE_Pin
 80042ec:	f244 3103 	movw	r1, #17155	@ 0x4303
 80042f0:	481b      	ldr	r0, [pc, #108]	@ (8004360 <MX_GPIO_Init+0xa8>)
 80042f2:	f7fe ff90 	bl	8003216 <LL_GPIO_ResetOutputPin>
                          |RS485_5_DE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, RS485_1_DE_Pin|RS485_6_DE_Pin|RS485_7_DE_Pin|RS485_3_DE_Pin
 80042f6:	f24c 0107 	movw	r1, #49159	@ 0xc007
 80042fa:	481a      	ldr	r0, [pc, #104]	@ (8004364 <MX_GPIO_Init+0xac>)
 80042fc:	f7fe ff8b 	bl	8003216 <LL_GPIO_ResetOutputPin>
                          |RS485_4_DE_Pin);

  /**/
  GPIO_InitStruct.Pin = SPI_TFT_CS_Pin|TFT_RS_Pin|Touch_CS_Pin|RS485_2_DE_Pin
 8004300:	f244 3303 	movw	r3, #17155	@ 0x4303
 8004304:	603b      	str	r3, [r7, #0]
                          |RS485_5_DE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004306:	2301      	movs	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800430a:	2302      	movs	r3, #2
 800430c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004316:	463b      	mov	r3, r7
 8004318:	4619      	mov	r1, r3
 800431a:	4811      	ldr	r0, [pc, #68]	@ (8004360 <MX_GPIO_Init+0xa8>)
 800431c:	f003 fbad 	bl	8007a7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Touch_IRQ_Pin;
 8004320:	2304      	movs	r3, #4
 8004322:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004324:	2300      	movs	r3, #0
 8004326:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004328:	2301      	movs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Touch_IRQ_GPIO_Port, &GPIO_InitStruct);
 800432c:	463b      	mov	r3, r7
 800432e:	4619      	mov	r1, r3
 8004330:	480b      	ldr	r0, [pc, #44]	@ (8004360 <MX_GPIO_Init+0xa8>)
 8004332:	f003 fba2 	bl	8007a7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RS485_1_DE_Pin|RS485_6_DE_Pin|RS485_7_DE_Pin|RS485_3_DE_Pin
 8004336:	f24c 0307 	movw	r3, #49159	@ 0xc007
 800433a:	603b      	str	r3, [r7, #0]
                          |RS485_4_DE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800433c:	2301      	movs	r3, #1
 800433e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004340:	2302      	movs	r3, #2
 8004342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434c:	463b      	mov	r3, r7
 800434e:	4619      	mov	r1, r3
 8004350:	4804      	ldr	r0, [pc, #16]	@ (8004364 <MX_GPIO_Init+0xac>)
 8004352:	f003 fb92 	bl	8007a7a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004356:	bf00      	nop
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	42020800 	.word	0x42020800
 8004364:	42020400 	.word	0x42020400

08004368 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800436c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004370:	f7fe fda0 	bl	8002eb4 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 8004374:	2100      	movs	r1, #0
 8004376:	480b      	ldr	r0, [pc, #44]	@ (80043a4 <MX_CRC_Init+0x3c>)
 8004378:	f7fe ff6e 	bl	8003258 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 800437c:	2100      	movs	r1, #0
 800437e:	4809      	ldr	r0, [pc, #36]	@ (80043a4 <MX_CRC_Init+0x3c>)
 8004380:	f7fe ff7d 	bl	800327e <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 8004384:	f04f 31ff 	mov.w	r1, #4294967295
 8004388:	4806      	ldr	r0, [pc, #24]	@ (80043a4 <MX_CRC_Init+0x3c>)
 800438a:	f7fe ff8b 	bl	80032a4 <LL_CRC_SetInitialData>
  LL_CRC_SetPolynomialCoef(CRC, 0x1021);
 800438e:	f241 0121 	movw	r1, #4129	@ 0x1021
 8004392:	4804      	ldr	r0, [pc, #16]	@ (80043a4 <MX_CRC_Init+0x3c>)
 8004394:	f7fe ff94 	bl	80032c0 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_16B);
 8004398:	2108      	movs	r1, #8
 800439a:	4802      	ldr	r0, [pc, #8]	@ (80043a4 <MX_CRC_Init+0x3c>)
 800439c:	f7fe ff49 	bl	8003232 <LL_CRC_SetPolynomialSize>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80043a0:	bf00      	nop
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023000 	.word	0x40023000

080043a8 <LL_DMA_EnableChannel>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80043b6:	4a0b      	ldr	r2, [pc, #44]	@ (80043e4 <LL_DMA_EnableChannel+0x3c>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	4907      	ldr	r1, [pc, #28]	@ (80043e4 <LL_DMA_EnableChannel+0x3c>)
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	440a      	add	r2, r1
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6153      	str	r3, [r2, #20]
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	0800fb28 	.word	0x0800fb28

080043e8 <LL_DMA_DisableChannel>:
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR,
 80043f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004424 <LL_DMA_DisableChannel+0x3c>)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4907      	ldr	r1, [pc, #28]	@ (8004424 <LL_DMA_DisableChannel+0x3c>)
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	440a      	add	r2, r1
 8004410:	f043 0306 	orr.w	r3, r3, #6
 8004414:	6153      	str	r3, [r2, #20]
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	0800fb28 	.word	0x0800fb28

08004428 <LL_DMA_SuspendChannel>:
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_SUSP);
 8004436:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <LL_DMA_SuspendChannel+0x3c>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	4907      	ldr	r1, [pc, #28]	@ (8004464 <LL_DMA_SuspendChannel+0x3c>)
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	440a      	add	r2, r1
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6153      	str	r3, [r2, #20]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	0800fb28 	.word	0x0800fb28

08004468 <LL_DMA_SetBlkDataLength>:
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BNDT,
 8004478:	4a0c      	ldr	r2, [pc, #48]	@ (80044ac <LL_DMA_SetBlkDataLength+0x44>)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	4413      	add	r3, r2
 8004484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	041b      	lsls	r3, r3, #16
 800448a:	4908      	ldr	r1, [pc, #32]	@ (80044ac <LL_DMA_SetBlkDataLength+0x44>)
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	440a      	add	r2, r1
 8004496:	4611      	mov	r1, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4313      	orrs	r3, r2
 800449c:	648b      	str	r3, [r1, #72]	@ 0x48
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	0800fb28 	.word	0x0800fb28

080044b0 <LL_DMA_SetDestAddress>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 80044c0:	4a07      	ldr	r2, [pc, #28]	@ (80044e0 <LL_DMA_SetDestAddress+0x30>)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4413      	add	r3, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6513      	str	r3, [r2, #80]	@ 0x50
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	0800fb28 	.word	0x0800fb28

080044e4 <LL_DMA_ClearFlag_SUSP>:
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_SUSPF);
 80044f2:	4a08      	ldr	r2, [pc, #32]	@ (8004514 <LL_DMA_ClearFlag_SUSP+0x30>)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	461a      	mov	r2, r3
 8004500:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004504:	60d3      	str	r3, [r2, #12]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	0800fb28 	.word	0x0800fb28

08004518 <LL_DMA_ClearFlag_HT>:
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_HTF);
 8004526:	4a08      	ldr	r2, [pc, #32]	@ (8004548 <LL_DMA_ClearFlag_HT+0x30>)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	461a      	mov	r2, r3
 8004534:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004538:	60d3      	str	r3, [r2, #12]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	0800fb28 	.word	0x0800fb28

0800454c <LL_DMA_ClearFlag_TC>:
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60fb      	str	r3, [r7, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CFCR, DMA_CFCR_TCF);
 800455a:	4a08      	ldr	r2, [pc, #32]	@ (800457c <LL_DMA_ClearFlag_TC+0x30>)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	461a      	mov	r2, r3
 8004568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800456c:	60d3      	str	r3, [r2, #12]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	0800fb28 	.word	0x0800fb28

08004580 <LL_DMA_EnableIT_TC>:
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800458e:	4a0b      	ldr	r2, [pc, #44]	@ (80045bc <LL_DMA_EnableIT_TC+0x3c>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	4907      	ldr	r1, [pc, #28]	@ (80045bc <LL_DMA_EnableIT_TC+0x3c>)
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	440a      	add	r2, r1
 80045a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ac:	6153      	str	r3, [r2, #20]
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	0800fb28 	.word	0x0800fb28

080045c0 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80045ce:	4a0b      	ldr	r2, [pc, #44]	@ (80045fc <LL_DMA_DisableIT_TC+0x3c>)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	4907      	ldr	r1, [pc, #28]	@ (80045fc <LL_DMA_DisableIT_TC+0x3c>)
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	440a      	add	r2, r1
 80045e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ec:	6153      	str	r3, [r2, #20]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	0800fb28 	.word	0x0800fb28

08004600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004604:	bf00      	nop
 8004606:	e7fd      	b.n	8004604 <NMI_Handler+0x4>

08004608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800460c:	bf00      	nop
 800460e:	e7fd      	b.n	800460c <HardFault_Handler+0x4>

08004610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <MemManage_Handler+0x4>

08004618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <BusFault_Handler+0x4>

08004620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <UsageFault_Handler+0x4>

08004628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */
	//LL_DMA_IsActiveFlag_TC(GPDMA1, LL_DMA_CHANNEL_0)

	LL_DMA_DisableIT_TC(Line1_DMA, Line1_DMA_CH);
 800463c:	2100      	movs	r1, #0
 800463e:	4816      	ldr	r0, [pc, #88]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 8004640:	f7ff ffbe 	bl	80045c0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line1_DMA, Line1_DMA_CH);
 8004644:	2100      	movs	r1, #0
 8004646:	4814      	ldr	r0, [pc, #80]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 8004648:	f7ff feee 	bl	8004428 <LL_DMA_SuspendChannel>
		//LL_DMA_IsActiveFlag_SUSP(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_DisableChannel(Line1_DMA, Line1_DMA_CH);
 800464c:	2100      	movs	r1, #0
 800464e:	4812      	ldr	r0, [pc, #72]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 8004650:	f7ff feca 	bl	80043e8 <LL_DMA_DisableChannel>
		//LL_DMA_IsEnabledChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_ClearFlag_HT(Line1_DMA, Line1_DMA_CH);
 8004654:	2100      	movs	r1, #0
 8004656:	4810      	ldr	r0, [pc, #64]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 8004658:	f7ff ff5e 	bl	8004518 <LL_DMA_ClearFlag_HT>
		LL_DMA_ClearFlag_TC(Line1_DMA, Line1_DMA_CH);
 800465c:	2100      	movs	r1, #0
 800465e:	480e      	ldr	r0, [pc, #56]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 8004660:	f7ff ff74 	bl	800454c <LL_DMA_ClearFlag_TC>
		LL_DMA_ClearFlag_SUSP(Line1_DMA, Line1_DMA_CH);
 8004664:	2100      	movs	r1, #0
 8004666:	480c      	ldr	r0, [pc, #48]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 8004668:	f7ff ff3c 	bl	80044e4 <LL_DMA_ClearFlag_SUSP>
		//LL_DMA_ResetChannel(GPDMA1, LL_DMA_CHANNEL_0);
		//LL_DMA_SuspendChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_IsSuspendedChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		//LL_DMA_ResumeChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
		LL_DMA_SetDestAddress(Line1_DMA, Line1_DMA_CH, &LineX_RX_Buffer[Line1_BUF_Index]);
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <GPDMA1_Channel0_IRQHandler+0x64>)
 800466e:	461a      	mov	r2, r3
 8004670:	2100      	movs	r1, #0
 8004672:	4809      	ldr	r0, [pc, #36]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 8004674:	f7ff ff1c 	bl	80044b0 <LL_DMA_SetDestAddress>
		LL_DMA_SetBlkDataLength(Line1_DMA, Line1_DMA_CH, Line_BUF_Size);
 8004678:	2264      	movs	r2, #100	@ 0x64
 800467a:	2100      	movs	r1, #0
 800467c:	4806      	ldr	r0, [pc, #24]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 800467e:	f7ff fef3 	bl	8004468 <LL_DMA_SetBlkDataLength>
		//LL_DMA_GetBlkDataLength(const DMA_TypeDef *DMAx, uint32_t Channel)

		LL_DMA_EnableIT_TC(Line1_DMA, Line1_DMA_CH);
 8004682:	2100      	movs	r1, #0
 8004684:	4804      	ldr	r0, [pc, #16]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 8004686:	f7ff ff7b 	bl	8004580 <LL_DMA_EnableIT_TC>
		LL_DMA_EnableChannel(Line1_DMA, Line1_DMA_CH);
 800468a:	2100      	movs	r1, #0
 800468c:	4802      	ldr	r0, [pc, #8]	@ (8004698 <GPDMA1_Channel0_IRQHandler+0x60>)
 800468e:	f7ff fe8b 	bl	80043a8 <LL_DMA_EnableChannel>
  /* USER CODE END GPDMA1_Channel0_IRQn 0 */

  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40020000 	.word	0x40020000
 800469c:	20025a24 	.word	0x20025a24

080046a0 <GPDMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void GPDMA1_Channel1_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line2_DMA, Line2_DMA_CH);
 80046a4:	2101      	movs	r1, #1
 80046a6:	4816      	ldr	r0, [pc, #88]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046a8:	f7ff ff8a 	bl	80045c0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line2_DMA, Line2_DMA_CH);
 80046ac:	2101      	movs	r1, #1
 80046ae:	4814      	ldr	r0, [pc, #80]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046b0:	f7ff feba 	bl	8004428 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line2_DMA, Line2_DMA_CH);
 80046b4:	2101      	movs	r1, #1
 80046b6:	4812      	ldr	r0, [pc, #72]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046b8:	f7ff fe96 	bl	80043e8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line2_DMA, Line2_DMA_CH);
 80046bc:	2101      	movs	r1, #1
 80046be:	4810      	ldr	r0, [pc, #64]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046c0:	f7ff ff2a 	bl	8004518 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line2_DMA, Line2_DMA_CH);
 80046c4:	2101      	movs	r1, #1
 80046c6:	480e      	ldr	r0, [pc, #56]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046c8:	f7ff ff40 	bl	800454c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line2_DMA, Line2_DMA_CH);
 80046cc:	2101      	movs	r1, #1
 80046ce:	480c      	ldr	r0, [pc, #48]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046d0:	f7ff ff08 	bl	80044e4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line2_DMA, Line2_DMA_CH, &LineX_RX_Buffer[Line2_BUF_Index]);
 80046d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <GPDMA1_Channel1_IRQHandler+0x64>)
 80046d6:	461a      	mov	r2, r3
 80046d8:	2101      	movs	r1, #1
 80046da:	4809      	ldr	r0, [pc, #36]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046dc:	f7ff fee8 	bl	80044b0 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line2_DMA, Line2_DMA_CH, Line_BUF_Size);
 80046e0:	2264      	movs	r2, #100	@ 0x64
 80046e2:	2101      	movs	r1, #1
 80046e4:	4806      	ldr	r0, [pc, #24]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046e6:	f7ff febf 	bl	8004468 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line2_DMA, Line2_DMA_CH);
 80046ea:	2101      	movs	r1, #1
 80046ec:	4804      	ldr	r0, [pc, #16]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046ee:	f7ff ff47 	bl	8004580 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line2_DMA, Line2_DMA_CH);
 80046f2:	2101      	movs	r1, #1
 80046f4:	4802      	ldr	r0, [pc, #8]	@ (8004700 <GPDMA1_Channel1_IRQHandler+0x60>)
 80046f6:	f7ff fe57 	bl	80043a8 <LL_DMA_EnableChannel>
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40020000 	.word	0x40020000
 8004704:	20025a88 	.word	0x20025a88

08004708 <GPDMA1_Channel2_IRQHandler>:

void GPDMA1_Channel2_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line3_DMA, Line3_DMA_CH);
 800470c:	2102      	movs	r1, #2
 800470e:	4816      	ldr	r0, [pc, #88]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 8004710:	f7ff ff56 	bl	80045c0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line3_DMA, Line3_DMA_CH);
 8004714:	2102      	movs	r1, #2
 8004716:	4814      	ldr	r0, [pc, #80]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 8004718:	f7ff fe86 	bl	8004428 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line3_DMA, Line3_DMA_CH);
 800471c:	2102      	movs	r1, #2
 800471e:	4812      	ldr	r0, [pc, #72]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 8004720:	f7ff fe62 	bl	80043e8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line3_DMA, Line3_DMA_CH);
 8004724:	2102      	movs	r1, #2
 8004726:	4810      	ldr	r0, [pc, #64]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 8004728:	f7ff fef6 	bl	8004518 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line3_DMA, Line3_DMA_CH);
 800472c:	2102      	movs	r1, #2
 800472e:	480e      	ldr	r0, [pc, #56]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 8004730:	f7ff ff0c 	bl	800454c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line3_DMA, Line3_DMA_CH);
 8004734:	2102      	movs	r1, #2
 8004736:	480c      	ldr	r0, [pc, #48]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 8004738:	f7ff fed4 	bl	80044e4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line3_DMA, Line3_DMA_CH, &LineX_RX_Buffer[Line3_BUF_Index]);
 800473c:	4b0b      	ldr	r3, [pc, #44]	@ (800476c <GPDMA1_Channel2_IRQHandler+0x64>)
 800473e:	461a      	mov	r2, r3
 8004740:	2102      	movs	r1, #2
 8004742:	4809      	ldr	r0, [pc, #36]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 8004744:	f7ff feb4 	bl	80044b0 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line3_DMA, Line3_DMA_CH, Line_BUF_Size);
 8004748:	2264      	movs	r2, #100	@ 0x64
 800474a:	2102      	movs	r1, #2
 800474c:	4806      	ldr	r0, [pc, #24]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 800474e:	f7ff fe8b 	bl	8004468 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line3_DMA, Line3_DMA_CH);
 8004752:	2102      	movs	r1, #2
 8004754:	4804      	ldr	r0, [pc, #16]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 8004756:	f7ff ff13 	bl	8004580 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line3_DMA, Line3_DMA_CH);
 800475a:	2102      	movs	r1, #2
 800475c:	4802      	ldr	r0, [pc, #8]	@ (8004768 <GPDMA1_Channel2_IRQHandler+0x60>)
 800475e:	f7ff fe23 	bl	80043a8 <LL_DMA_EnableChannel>
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40020000 	.word	0x40020000
 800476c:	20025aec 	.word	0x20025aec

08004770 <GPDMA1_Channel3_IRQHandler>:

void GPDMA1_Channel3_IRQHandler(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line4_DMA, Line4_DMA_CH);
 8004774:	2103      	movs	r1, #3
 8004776:	4816      	ldr	r0, [pc, #88]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8004778:	f7ff ff22 	bl	80045c0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line4_DMA, Line4_DMA_CH);
 800477c:	2103      	movs	r1, #3
 800477e:	4814      	ldr	r0, [pc, #80]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8004780:	f7ff fe52 	bl	8004428 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line4_DMA, Line4_DMA_CH);
 8004784:	2103      	movs	r1, #3
 8004786:	4812      	ldr	r0, [pc, #72]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8004788:	f7ff fe2e 	bl	80043e8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line4_DMA, Line4_DMA_CH);
 800478c:	2103      	movs	r1, #3
 800478e:	4810      	ldr	r0, [pc, #64]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8004790:	f7ff fec2 	bl	8004518 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line4_DMA, Line4_DMA_CH);
 8004794:	2103      	movs	r1, #3
 8004796:	480e      	ldr	r0, [pc, #56]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 8004798:	f7ff fed8 	bl	800454c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line4_DMA, Line4_DMA_CH);
 800479c:	2103      	movs	r1, #3
 800479e:	480c      	ldr	r0, [pc, #48]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 80047a0:	f7ff fea0 	bl	80044e4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line4_DMA, Line4_DMA_CH, &LineX_RX_Buffer[Line4_BUF_Index]);
 80047a4:	4b0b      	ldr	r3, [pc, #44]	@ (80047d4 <GPDMA1_Channel3_IRQHandler+0x64>)
 80047a6:	461a      	mov	r2, r3
 80047a8:	2103      	movs	r1, #3
 80047aa:	4809      	ldr	r0, [pc, #36]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 80047ac:	f7ff fe80 	bl	80044b0 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line4_DMA, Line4_DMA_CH, Line_BUF_Size);
 80047b0:	2264      	movs	r2, #100	@ 0x64
 80047b2:	2103      	movs	r1, #3
 80047b4:	4806      	ldr	r0, [pc, #24]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 80047b6:	f7ff fe57 	bl	8004468 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line4_DMA, Line4_DMA_CH);
 80047ba:	2103      	movs	r1, #3
 80047bc:	4804      	ldr	r0, [pc, #16]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 80047be:	f7ff fedf 	bl	8004580 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line4_DMA, Line4_DMA_CH);
 80047c2:	2103      	movs	r1, #3
 80047c4:	4802      	ldr	r0, [pc, #8]	@ (80047d0 <GPDMA1_Channel3_IRQHandler+0x60>)
 80047c6:	f7ff fdef 	bl	80043a8 <LL_DMA_EnableChannel>
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40020000 	.word	0x40020000
 80047d4:	20025b50 	.word	0x20025b50

080047d8 <GPDMA1_Channel4_IRQHandler>:

void GPDMA1_Channel4_IRQHandler(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line5_DMA, Line5_DMA_CH);
 80047dc:	2104      	movs	r1, #4
 80047de:	4816      	ldr	r0, [pc, #88]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 80047e0:	f7ff feee 	bl	80045c0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line5_DMA, Line5_DMA_CH);
 80047e4:	2104      	movs	r1, #4
 80047e6:	4814      	ldr	r0, [pc, #80]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 80047e8:	f7ff fe1e 	bl	8004428 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line5_DMA, Line5_DMA_CH);
 80047ec:	2104      	movs	r1, #4
 80047ee:	4812      	ldr	r0, [pc, #72]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 80047f0:	f7ff fdfa 	bl	80043e8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line5_DMA, Line5_DMA_CH);
 80047f4:	2104      	movs	r1, #4
 80047f6:	4810      	ldr	r0, [pc, #64]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 80047f8:	f7ff fe8e 	bl	8004518 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line5_DMA, Line5_DMA_CH);
 80047fc:	2104      	movs	r1, #4
 80047fe:	480e      	ldr	r0, [pc, #56]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 8004800:	f7ff fea4 	bl	800454c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line5_DMA, Line5_DMA_CH);
 8004804:	2104      	movs	r1, #4
 8004806:	480c      	ldr	r0, [pc, #48]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 8004808:	f7ff fe6c 	bl	80044e4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line5_DMA, Line5_DMA_CH, &LineX_RX_Buffer[Line5_BUF_Index]);
 800480c:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <GPDMA1_Channel4_IRQHandler+0x64>)
 800480e:	461a      	mov	r2, r3
 8004810:	2104      	movs	r1, #4
 8004812:	4809      	ldr	r0, [pc, #36]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 8004814:	f7ff fe4c 	bl	80044b0 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line5_DMA, Line5_DMA_CH, Line_BUF_Size);
 8004818:	2264      	movs	r2, #100	@ 0x64
 800481a:	2104      	movs	r1, #4
 800481c:	4806      	ldr	r0, [pc, #24]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 800481e:	f7ff fe23 	bl	8004468 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line5_DMA, Line5_DMA_CH);
 8004822:	2104      	movs	r1, #4
 8004824:	4804      	ldr	r0, [pc, #16]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 8004826:	f7ff feab 	bl	8004580 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line5_DMA, Line5_DMA_CH);
 800482a:	2104      	movs	r1, #4
 800482c:	4802      	ldr	r0, [pc, #8]	@ (8004838 <GPDMA1_Channel4_IRQHandler+0x60>)
 800482e:	f7ff fdbb 	bl	80043a8 <LL_DMA_EnableChannel>
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40020000 	.word	0x40020000
 800483c:	20025bb4 	.word	0x20025bb4

08004840 <GPDMA1_Channel5_IRQHandler>:

void GPDMA1_Channel5_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line6_DMA, Line6_DMA_CH);
 8004844:	2105      	movs	r1, #5
 8004846:	4816      	ldr	r0, [pc, #88]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 8004848:	f7ff feba 	bl	80045c0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line6_DMA, Line6_DMA_CH);
 800484c:	2105      	movs	r1, #5
 800484e:	4814      	ldr	r0, [pc, #80]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 8004850:	f7ff fdea 	bl	8004428 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line6_DMA, Line6_DMA_CH);
 8004854:	2105      	movs	r1, #5
 8004856:	4812      	ldr	r0, [pc, #72]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 8004858:	f7ff fdc6 	bl	80043e8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line6_DMA, Line6_DMA_CH);
 800485c:	2105      	movs	r1, #5
 800485e:	4810      	ldr	r0, [pc, #64]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 8004860:	f7ff fe5a 	bl	8004518 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line6_DMA, Line6_DMA_CH);
 8004864:	2105      	movs	r1, #5
 8004866:	480e      	ldr	r0, [pc, #56]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 8004868:	f7ff fe70 	bl	800454c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line6_DMA, Line6_DMA_CH);
 800486c:	2105      	movs	r1, #5
 800486e:	480c      	ldr	r0, [pc, #48]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 8004870:	f7ff fe38 	bl	80044e4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line6_DMA, Line6_DMA_CH, &LineX_RX_Buffer[Line6_BUF_Index]);
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <GPDMA1_Channel5_IRQHandler+0x64>)
 8004876:	461a      	mov	r2, r3
 8004878:	2105      	movs	r1, #5
 800487a:	4809      	ldr	r0, [pc, #36]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 800487c:	f7ff fe18 	bl	80044b0 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line6_DMA, Line6_DMA_CH, Line_BUF_Size);
 8004880:	2264      	movs	r2, #100	@ 0x64
 8004882:	2105      	movs	r1, #5
 8004884:	4806      	ldr	r0, [pc, #24]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 8004886:	f7ff fdef 	bl	8004468 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line6_DMA, Line6_DMA_CH);
 800488a:	2105      	movs	r1, #5
 800488c:	4804      	ldr	r0, [pc, #16]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 800488e:	f7ff fe77 	bl	8004580 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line6_DMA, Line6_DMA_CH);
 8004892:	2105      	movs	r1, #5
 8004894:	4802      	ldr	r0, [pc, #8]	@ (80048a0 <GPDMA1_Channel5_IRQHandler+0x60>)
 8004896:	f7ff fd87 	bl	80043a8 <LL_DMA_EnableChannel>
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40020000 	.word	0x40020000
 80048a4:	20025c18 	.word	0x20025c18

080048a8 <GPDMA1_Channel6_IRQHandler>:

void GPDMA1_Channel6_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0

	LL_DMA_DisableIT_TC(Line7_DMA, Line7_DMA_CH);
 80048ac:	2106      	movs	r1, #6
 80048ae:	4816      	ldr	r0, [pc, #88]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048b0:	f7ff fe86 	bl	80045c0 <LL_DMA_DisableIT_TC>
	LL_DMA_SuspendChannel(Line7_DMA, Line7_DMA_CH);
 80048b4:	2106      	movs	r1, #6
 80048b6:	4814      	ldr	r0, [pc, #80]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048b8:	f7ff fdb6 	bl	8004428 <LL_DMA_SuspendChannel>
	LL_DMA_DisableChannel(Line7_DMA, Line7_DMA_CH);
 80048bc:	2106      	movs	r1, #6
 80048be:	4812      	ldr	r0, [pc, #72]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048c0:	f7ff fd92 	bl	80043e8 <LL_DMA_DisableChannel>

	LL_DMA_ClearFlag_HT(Line7_DMA, Line7_DMA_CH);
 80048c4:	2106      	movs	r1, #6
 80048c6:	4810      	ldr	r0, [pc, #64]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048c8:	f7ff fe26 	bl	8004518 <LL_DMA_ClearFlag_HT>
	LL_DMA_ClearFlag_TC(Line7_DMA, Line7_DMA_CH);
 80048cc:	2106      	movs	r1, #6
 80048ce:	480e      	ldr	r0, [pc, #56]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048d0:	f7ff fe3c 	bl	800454c <LL_DMA_ClearFlag_TC>
	LL_DMA_ClearFlag_SUSP(Line7_DMA, Line7_DMA_CH);
 80048d4:	2106      	movs	r1, #6
 80048d6:	480c      	ldr	r0, [pc, #48]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048d8:	f7ff fe04 	bl	80044e4 <LL_DMA_ClearFlag_SUSP>

	LL_DMA_SetDestAddress(Line7_DMA, Line7_DMA_CH, &LineX_RX_Buffer[Line7_BUF_Index]);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <GPDMA1_Channel6_IRQHandler+0x64>)
 80048de:	461a      	mov	r2, r3
 80048e0:	2106      	movs	r1, #6
 80048e2:	4809      	ldr	r0, [pc, #36]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048e4:	f7ff fde4 	bl	80044b0 <LL_DMA_SetDestAddress>
	LL_DMA_SetBlkDataLength(Line7_DMA, Line7_DMA_CH, Line_BUF_Size);
 80048e8:	2264      	movs	r2, #100	@ 0x64
 80048ea:	2106      	movs	r1, #6
 80048ec:	4806      	ldr	r0, [pc, #24]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048ee:	f7ff fdbb 	bl	8004468 <LL_DMA_SetBlkDataLength>

	LL_DMA_EnableIT_TC(Line7_DMA, Line7_DMA_CH);
 80048f2:	2106      	movs	r1, #6
 80048f4:	4804      	ldr	r0, [pc, #16]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048f6:	f7ff fe43 	bl	8004580 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(Line7_DMA, Line7_DMA_CH);
 80048fa:	2106      	movs	r1, #6
 80048fc:	4802      	ldr	r0, [pc, #8]	@ (8004908 <GPDMA1_Channel6_IRQHandler+0x60>)
 80048fe:	f7ff fd53 	bl	80043a8 <LL_DMA_EnableChannel>
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40020000 	.word	0x40020000
 800490c:	20025c7c 	.word	0x20025c7c

08004910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return 1;
 8004914:	2301      	movs	r3, #1
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_kill>:

int _kill(int pid, int sig)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800492a:	f008 ff07 	bl	800d73c <__errno>
 800492e:	4603      	mov	r3, r0
 8004930:	2216      	movs	r2, #22
 8004932:	601a      	str	r2, [r3, #0]
  return -1;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <_exit>:

void _exit (int status)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004948:	f04f 31ff 	mov.w	r1, #4294967295
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ffe7 	bl	8004920 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <_exit+0x12>

08004956 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e00a      	b.n	800497e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004968:	f3af 8000 	nop.w
 800496c:	4601      	mov	r1, r0
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	60ba      	str	r2, [r7, #8]
 8004974:	b2ca      	uxtb	r2, r1
 8004976:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3301      	adds	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	429a      	cmp	r2, r3
 8004984:	dbf0      	blt.n	8004968 <_read+0x12>
  }

  return len;
 8004986:	687b      	ldr	r3, [r7, #4]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e009      	b.n	80049b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	60ba      	str	r2, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3301      	adds	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	dbf1      	blt.n	80049a2 <_write+0x12>
  }
  return len;
 80049be:	687b      	ldr	r3, [r7, #4]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_close>:

int _close(int file)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049f0:	605a      	str	r2, [r3, #4]
  return 0;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <_isatty>:

int _isatty(int file)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a08:	2301      	movs	r3, #1
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a38:	4a14      	ldr	r2, [pc, #80]	@ (8004a8c <_sbrk+0x5c>)
 8004a3a:	4b15      	ldr	r3, [pc, #84]	@ (8004a90 <_sbrk+0x60>)
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a44:	4b13      	ldr	r3, [pc, #76]	@ (8004a94 <_sbrk+0x64>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a4c:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <_sbrk+0x64>)
 8004a4e:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <_sbrk+0x68>)
 8004a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a52:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <_sbrk+0x64>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d207      	bcs.n	8004a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a60:	f008 fe6c 	bl	800d73c <__errno>
 8004a64:	4603      	mov	r3, r0
 8004a66:	220c      	movs	r2, #12
 8004a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	e009      	b.n	8004a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a70:	4b08      	ldr	r3, [pc, #32]	@ (8004a94 <_sbrk+0x64>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a76:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <_sbrk+0x64>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <_sbrk+0x64>)
 8004a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a82:	68fb      	ldr	r3, [r7, #12]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	200a0000 	.word	0x200a0000
 8004a90:	00000400 	.word	0x00000400
 8004a94:	20025e0c 	.word	0x20025e0c
 8004a98:	20028b08 	.word	0x20028b08

08004a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a9c:	480d      	ldr	r0, [pc, #52]	@ (8004ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004aa0:	f000 f8c6 	bl	8004c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004aa4:	480c      	ldr	r0, [pc, #48]	@ (8004ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004aa6:	490d      	ldr	r1, [pc, #52]	@ (8004adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae0 <LoopForever+0xe>)
  movs r3, #0
 8004aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004aac:	e002      	b.n	8004ab4 <LoopCopyDataInit>

08004aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ab2:	3304      	adds	r3, #4

08004ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ab8:	d3f9      	bcc.n	8004aae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004abc:	4c0a      	ldr	r4, [pc, #40]	@ (8004ae8 <LoopForever+0x16>)
  movs r3, #0
 8004abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ac0:	e001      	b.n	8004ac6 <LoopFillZerobss>

08004ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ac4:	3204      	adds	r2, #4

08004ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ac8:	d3fb      	bcc.n	8004ac2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004aca:	f008 fe3d 	bl	800d748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ace:	f7fe fc05 	bl	80032dc <main>

08004ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ad2:	e7fe      	b.n	8004ad2 <LoopForever>
  ldr   r0, =_estack
 8004ad4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004adc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004ae0:	080116b8 	.word	0x080116b8
  ldr r2, =_sbss
 8004ae4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8004ae8:	20028b04 	.word	0x20028b04

08004aec <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004aec:	e7fe      	b.n	8004aec <ADC1_IRQHandler>

08004aee <LL_CRC_ResetCRCCalculationUnit>:
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f043 0201 	orr.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	609a      	str	r2, [r3, #8]
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_CRC_FeedData8>:
  * @param  CRCx CRC Instance
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	701a      	strb	r2, [r3, #0]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(const CRC_TypeDef *CRCx)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <Message_Maker>:
		.New = 0,
		.Changed = 0
};

void Message_Maker(MSG_Frame_t *MSG, uint8_t *PCKT_X, uint8_t Bit_Reset_CMD, uint8_t Bit_CMD)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	4611      	mov	r1, r2
 8004b54:	461a      	mov	r2, r3
 8004b56:	460b      	mov	r3, r1
 8004b58:	71fb      	strb	r3, [r7, #7]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	71bb      	strb	r3, [r7, #6]
	uint16_t L = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	83fb      	strh	r3, [r7, #30]
	uint16_t CRC_Result = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	83bb      	strh	r3, [r7, #28]
	uint8_t *P = (uint8_t *)&MSG;
 8004b66:	f107 030c 	add.w	r3, r7, #12
 8004b6a:	61bb      	str	r3, [r7, #24]
	uint16_t X = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	82fb      	strh	r3, [r7, #22]

	MSG->Length = 0;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	729a      	strb	r2, [r3, #10]

	*PCKT_X = *PCKT_X & Bit_Reset_CMD;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	701a      	strb	r2, [r3, #0]
	*PCKT_X = *PCKT_X | Bit_CMD;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781a      	ldrb	r2, [r3, #0]
 8004b88:	79bb      	ldrb	r3, [r7, #6]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	701a      	strb	r2, [r3, #0]

	LL_CRC_ResetCRCCalculationUnit(CRC);
 8004b92:	4826      	ldr	r0, [pc, #152]	@ (8004c2c <Message_Maker+0xe4>)
 8004b94:	f7ff ffab 	bl	8004aee <LL_CRC_ResetCRCCalculationUnit>
//	X = MSG->PCKT_3; X=X<<8; X = X | MSG->PCKT_2;
//	LL_CRC_FeedData16(CRC, X);
//	X = MSG->PCKT_5; X=X<<8; X = X | MSG->PCKT_4;
//	LL_CRC_FeedData16(CRC, X);

	LL_CRC_FeedData8(CRC, MSG->Start); LL_CRC_FeedData8(CRC, MSG->ID);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4823      	ldr	r0, [pc, #140]	@ (8004c2c <Message_Maker+0xe4>)
 8004ba0:	f7ff ffb5 	bl	8004b0e <LL_CRC_FeedData8>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4820      	ldr	r0, [pc, #128]	@ (8004c2c <Message_Maker+0xe4>)
 8004bac:	f7ff ffaf 	bl	8004b0e <LL_CRC_FeedData8>
	LL_CRC_FeedData8(CRC, MSG->PCKT_0); LL_CRC_FeedData8(CRC, MSG->PCKT_1); LL_CRC_FeedData8(CRC, MSG->PCKT_2);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	789b      	ldrb	r3, [r3, #2]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	481d      	ldr	r0, [pc, #116]	@ (8004c2c <Message_Maker+0xe4>)
 8004bb8:	f7ff ffa9 	bl	8004b0e <LL_CRC_FeedData8>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	78db      	ldrb	r3, [r3, #3]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	481a      	ldr	r0, [pc, #104]	@ (8004c2c <Message_Maker+0xe4>)
 8004bc4:	f7ff ffa3 	bl	8004b0e <LL_CRC_FeedData8>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	791b      	ldrb	r3, [r3, #4]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4817      	ldr	r0, [pc, #92]	@ (8004c2c <Message_Maker+0xe4>)
 8004bd0:	f7ff ff9d 	bl	8004b0e <LL_CRC_FeedData8>
	LL_CRC_FeedData8(CRC, MSG->PCKT_3); LL_CRC_FeedData8(CRC, MSG->PCKT_4); LL_CRC_FeedData8(CRC, MSG->PCKT_5);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	795b      	ldrb	r3, [r3, #5]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4814      	ldr	r0, [pc, #80]	@ (8004c2c <Message_Maker+0xe4>)
 8004bdc:	f7ff ff97 	bl	8004b0e <LL_CRC_FeedData8>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	799b      	ldrb	r3, [r3, #6]
 8004be4:	4619      	mov	r1, r3
 8004be6:	4811      	ldr	r0, [pc, #68]	@ (8004c2c <Message_Maker+0xe4>)
 8004be8:	f7ff ff91 	bl	8004b0e <LL_CRC_FeedData8>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	79db      	ldrb	r3, [r3, #7]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	480e      	ldr	r0, [pc, #56]	@ (8004c2c <Message_Maker+0xe4>)
 8004bf4:	f7ff ff8b 	bl	8004b0e <LL_CRC_FeedData8>

	CRC_Result = LL_CRC_ReadData16(CRC);
 8004bf8:	480c      	ldr	r0, [pc, #48]	@ (8004c2c <Message_Maker+0xe4>)
 8004bfa:	f7ff ff97 	bl	8004b2c <LL_CRC_ReadData16>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	83bb      	strh	r3, [r7, #28]

	MSG->CRC_2 = (uint8_t)CRC_Result;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8bba      	ldrh	r2, [r7, #28]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	725a      	strb	r2, [r3, #9]
	MSG->CRC_1 = (uint8_t)(CRC_Result>>8);
 8004c0a:	8bbb      	ldrh	r3, [r7, #28]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	721a      	strb	r2, [r3, #8]

	MSG->Length = sizeof(MSG->Start) + sizeof(MSG->ID) +
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	220a      	movs	r2, #10
 8004c1a:	729a      	strb	r2, [r3, #10]
	sizeof(MSG->PCKT_0) + sizeof(MSG->PCKT_1) + sizeof(MSG->PCKT_2) +
	sizeof(MSG->PCKT_3) + sizeof(MSG->PCKT_4) + sizeof(MSG->PCKT_5) +
	sizeof(MSG->CRC_1) + sizeof(MSG->CRC_2);

	MSG->New = 1;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	72da      	strb	r2, [r3, #11]

}
 8004c22:	bf00      	nop
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023000 	.word	0x40023000

08004c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004c36:	4b35      	ldr	r3, [pc, #212]	@ (8004d0c <SystemInit+0xdc>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	4a33      	ldr	r2, [pc, #204]	@ (8004d0c <SystemInit+0xdc>)
 8004c3e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8004c46:	4b32      	ldr	r3, [pc, #200]	@ (8004d10 <SystemInit+0xe0>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004c4c:	4b30      	ldr	r3, [pc, #192]	@ (8004d10 <SystemInit+0xe0>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004c52:	4b2f      	ldr	r3, [pc, #188]	@ (8004d10 <SystemInit+0xe0>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8004c58:	4b2d      	ldr	r3, [pc, #180]	@ (8004d10 <SystemInit+0xe0>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	492c      	ldr	r1, [pc, #176]	@ (8004d10 <SystemInit+0xe0>)
 8004c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d14 <SystemInit+0xe4>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8004c64:	4b2a      	ldr	r3, [pc, #168]	@ (8004d10 <SystemInit+0xe0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8004c6a:	4b29      	ldr	r3, [pc, #164]	@ (8004d10 <SystemInit+0xe0>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8004c70:	4b27      	ldr	r3, [pc, #156]	@ (8004d10 <SystemInit+0xe0>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8004c76:	4b26      	ldr	r3, [pc, #152]	@ (8004d10 <SystemInit+0xe0>)
 8004c78:	4a27      	ldr	r2, [pc, #156]	@ (8004d18 <SystemInit+0xe8>)
 8004c7a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8004c7c:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <SystemInit+0xe0>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8004c82:	4b23      	ldr	r3, [pc, #140]	@ (8004d10 <SystemInit+0xe0>)
 8004c84:	4a24      	ldr	r2, [pc, #144]	@ (8004d18 <SystemInit+0xe8>)
 8004c86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <SystemInit+0xe0>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8004c8e:	4b20      	ldr	r3, [pc, #128]	@ (8004d10 <SystemInit+0xe0>)
 8004c90:	4a21      	ldr	r2, [pc, #132]	@ (8004d18 <SystemInit+0xe8>)
 8004c92:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8004c94:	4b1e      	ldr	r3, [pc, #120]	@ (8004d10 <SystemInit+0xe0>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d10 <SystemInit+0xe0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <SystemInit+0xe0>)
 8004ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d10 <SystemInit+0xe0>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004cac:	4b17      	ldr	r3, [pc, #92]	@ (8004d0c <SystemInit+0xdc>)
 8004cae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004cb2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8004cb4:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <SystemInit+0xec>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8004cbc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8004cc4:	d003      	beq.n	8004cce <SystemInit+0x9e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004ccc:	d117      	bne.n	8004cfe <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8004cce:	4b13      	ldr	r3, [pc, #76]	@ (8004d1c <SystemInit+0xec>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8004cda:	4b10      	ldr	r3, [pc, #64]	@ (8004d1c <SystemInit+0xec>)
 8004cdc:	4a10      	ldr	r2, [pc, #64]	@ (8004d20 <SystemInit+0xf0>)
 8004cde:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d1c <SystemInit+0xec>)
 8004ce2:	4a10      	ldr	r2, [pc, #64]	@ (8004d24 <SystemInit+0xf4>)
 8004ce4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <SystemInit+0xec>)
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4a0c      	ldr	r2, [pc, #48]	@ (8004d1c <SystemInit+0xec>)
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <SystemInit+0xec>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <SystemInit+0xec>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	61d3      	str	r3, [r2, #28]
  }
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	e000ed00 	.word	0xe000ed00
 8004d10:	44020c00 	.word	0x44020c00
 8004d14:	eae2eae3 	.word	0xeae2eae3
 8004d18:	01010280 	.word	0x01010280
 8004d1c:	40022000 	.word	0x40022000
 8004d20:	08192a3b 	.word	0x08192a3b
 8004d24:	4c5d6e7f 	.word	0x4c5d6e7f

08004d28 <GUI_DrawPoint>:
                y:the y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
********************************************************************/
void GUI_DrawPoint(u16 x,u16 y,u16 color)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	80fb      	strh	r3, [r7, #6]
 8004d32:	460b      	mov	r3, r1
 8004d34:	80bb      	strh	r3, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);//���ù��λ�� 
 8004d3a:	88ba      	ldrh	r2, [r7, #4]
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f001 fdb1 	bl	80068a8 <LCD_SetCursor>
	Lcd_WriteData_16Bit(color); 
 8004d46:	887b      	ldrh	r3, [r7, #2]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 fbbd 	bl	80064c8 <Lcd_WriteData_16Bit>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
{
 8004d56:	b590      	push	{r4, r7, lr}
 8004d58:	b08d      	sub	sp, #52	@ 0x34
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	4608      	mov	r0, r1
 8004d60:	4611      	mov	r1, r2
 8004d62:	461a      	mov	r2, r3
 8004d64:	4623      	mov	r3, r4
 8004d66:	80fb      	strh	r3, [r7, #6]
 8004d68:	4603      	mov	r3, r0
 8004d6a:	80bb      	strh	r3, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
 8004d70:	4613      	mov	r3, r2
 8004d72:	803b      	strh	r3, [r7, #0]
	u16 t; 
	int xerr=0,yerr=0,delta_x,delta_y,distance; 
 8004d74:	2300      	movs	r3, #0
 8004d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol; 

	delta_x=x2-x1; //������������ 
 8004d7c:	887a      	ldrh	r2, [r7, #2]
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1; 
 8004d84:	883a      	ldrh	r2, [r7, #0]
 8004d86:	88bb      	ldrh	r3, [r7, #4]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	61fb      	str	r3, [r7, #28]
	uRow=x1; 
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	60fb      	str	r3, [r7, #12]
	uCol=y1; 
 8004d90:	88bb      	ldrh	r3, [r7, #4]
 8004d92:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ������� 
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dd02      	ble.n	8004da0 <LCD_DrawLine+0x4a>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e00b      	b.n	8004db8 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ�� 
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <LCD_DrawLine+0x56>
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e005      	b.n	8004db8 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;} 
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	425b      	negs	r3, r3
 8004db6:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1; 
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dd02      	ble.n	8004dc4 <LCD_DrawLine+0x6e>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	e00b      	b.n	8004ddc <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ�� 
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <LCD_DrawLine+0x7a>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e005      	b.n	8004ddc <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;} 
 8004dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	425b      	negs	r3, r3
 8004dda:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ�������������� 
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	dd02      	ble.n	8004dea <LCD_DrawLine+0x94>
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	e001      	b.n	8004dee <LCD_DrawLine+0x98>
	else distance=delta_y; 
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//������� 
 8004dee:	2300      	movs	r3, #0
 8004df0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004df2:	e02b      	b.n	8004e4c <LCD_DrawLine+0xf6>
	{  
		//LCD_DrawPoint(uRow,uCol);//����
		GUI_DrawPoint(uRow,uCol, color);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	b291      	uxth	r1, r2
 8004dfc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff ff91 	bl	8004d28 <GUI_DrawPoint>
		xerr+=delta_x ; 
 8004e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ; 
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance) 
 8004e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	dd07      	ble.n	8004e2e <LCD_DrawLine+0xd8>
		{ 
			xerr-=distance; 
 8004e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx; 
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
		} 
		if(yerr>distance) 
 8004e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	dd07      	ble.n	8004e46 <LCD_DrawLine+0xf0>
		{ 
			yerr-=distance; 
 8004e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy; 
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//������� 
 8004e46:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004e48:	3301      	adds	r3, #1
 8004e4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004e4c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	3301      	adds	r3, #1
 8004e52:	429a      	cmp	r2, r3
 8004e54:	ddce      	ble.n	8004df4 <LCD_DrawLine+0x9e>
		} 
	}  
} 
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	3734      	adds	r7, #52	@ 0x34
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}

08004e60 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{  
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4623      	mov	r3, r4
 8004e70:	80fb      	strh	r3, [r7, #6]
 8004e72:	4603      	mov	r3, r0
 8004e74:	80bb      	strh	r3, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	807b      	strh	r3, [r7, #2]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;      
 8004e7e:	4b62      	ldr	r3, [pc, #392]	@ (8005008 <LCD_ShowChar+0x1a8>)
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	817b      	strh	r3, [r7, #10]
		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8004e84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e88:	3b20      	subs	r3, #32
 8004e8a:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8004e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29c      	uxth	r4, r3
 8004ea2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	88bb      	ldrh	r3, [r7, #4]
 8004eaa:	4413      	add	r3, r2
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	88b9      	ldrh	r1, [r7, #4]
 8004eb4:	88f8      	ldrh	r0, [r7, #6]
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	f001 fca2 	bl	8006800 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8004ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d143      	bne.n	8004f4c <LCD_ShowChar+0xec>
	{		
		for(pos=0;pos<size;pos++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73bb      	strb	r3, [r7, #14]
 8004ec8:	e03a      	b.n	8004f40 <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8004eca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d10c      	bne.n	8004eec <LCD_ShowChar+0x8c>
 8004ed2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ed6:	7bb9      	ldrb	r1, [r7, #14]
 8004ed8:	484c      	ldr	r0, [pc, #304]	@ (800500c <LCD_ShowChar+0x1ac>)
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4403      	add	r3, r0
 8004ee4:	440b      	add	r3, r1
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	e008      	b.n	8004efe <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8004eec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ef0:	7bbb      	ldrb	r3, [r7, #14]
 8004ef2:	4947      	ldr	r1, [pc, #284]	@ (8005010 <LCD_ShowChar+0x1b0>)
 8004ef4:	0112      	lsls	r2, r2, #4
 8004ef6:	440a      	add	r2, r1
 8004ef8:	4413      	add	r3, r2
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	737b      	strb	r3, [r7, #13]
 8004f02:	e013      	b.n	8004f2c <LCD_ShowChar+0xcc>
		    {                 
		        if(temp&0x01)Lcd_WriteData_16Bit(fc); 
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <LCD_ShowChar+0xb8>
 8004f0e:	887b      	ldrh	r3, [r7, #2]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fad9 	bl	80064c8 <Lcd_WriteData_16Bit>
 8004f16:	e003      	b.n	8004f20 <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc); 
 8004f18:	883b      	ldrh	r3, [r7, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fad4 	bl	80064c8 <Lcd_WriteData_16Bit>
				temp>>=1; 
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8004f26:	7b7b      	ldrb	r3, [r7, #13]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	737b      	strb	r3, [r7, #13]
 8004f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	7b7a      	ldrb	r2, [r7, #13]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d3e4      	bcc.n	8004f04 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	73bb      	strb	r3, [r7, #14]
 8004f40:	7bba      	ldrb	r2, [r7, #14]
 8004f42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3bf      	bcc.n	8004eca <LCD_ShowChar+0x6a>
 8004f4a:	e049      	b.n	8004fe0 <LCD_ShowChar+0x180>
		    }
			
		}	
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	73bb      	strb	r3, [r7, #14]
 8004f50:	e041      	b.n	8004fd6 <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8004f52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	d10c      	bne.n	8004f74 <LCD_ShowChar+0x114>
 8004f5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004f5e:	7bb9      	ldrb	r1, [r7, #14]
 8004f60:	482a      	ldr	r0, [pc, #168]	@ (800500c <LCD_ShowChar+0x1ac>)
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4403      	add	r3, r0
 8004f6c:	440b      	add	r3, r1
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	73fb      	strb	r3, [r7, #15]
 8004f72:	e008      	b.n	8004f86 <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 8004f74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	4925      	ldr	r1, [pc, #148]	@ (8005010 <LCD_ShowChar+0x1b0>)
 8004f7c:	0112      	lsls	r2, r2, #4
 8004f7e:	440a      	add	r2, r1
 8004f80:	4413      	add	r3, r2
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	737b      	strb	r3, [r7, #13]
 8004f8a:	e01a      	b.n	8004fc2 <LCD_ShowChar+0x162>
		    {   
				POINT_COLOR=fc;              
 8004f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005008 <LCD_ShowChar+0x1a8>)
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����    
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00c      	beq.n	8004fb6 <LCD_ShowChar+0x156>
 8004f9c:	7b7b      	ldrb	r3, [r7, #13]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	b298      	uxth	r0, r3
 8004fa6:	7bbb      	ldrb	r3, [r7, #14]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	88bb      	ldrh	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f001 faa7 	bl	8006504 <LCD_DrawPoint>
		        temp>>=1; 
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8004fbc:	7b7b      	ldrb	r3, [r7, #13]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	737b      	strb	r3, [r7, #13]
 8004fc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	7b7a      	ldrb	r2, [r7, #13]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d3dd      	bcc.n	8004f8c <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8004fd0:	7bbb      	ldrb	r3, [r7, #14]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	73bb      	strb	r3, [r7, #14]
 8004fd6:	7bba      	ldrb	r2, [r7, #14]
 8004fd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d3b8      	bcc.n	8004f52 <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 8004fe0:	4a09      	ldr	r2, [pc, #36]	@ (8005008 <LCD_ShowChar+0x1a8>)
 8004fe2:	897b      	ldrh	r3, [r7, #10]
 8004fe4:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��    	   	 	  
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8005014 <LCD_ShowChar+0x1b4>)
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <LCD_ShowChar+0x1b4>)
 8004ff0:	885b      	ldrh	r3, [r3, #2]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f001 fc01 	bl	8006800 <LCD_SetWindows>
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bd90      	pop	{r4, r7, pc}
 8005006:	bf00      	nop
 8005008:	20025e2a 	.word	0x20025e2a
 800500c:	0800fc1c 	.word	0x0800fc1c
 8005010:	08010090 	.word	0x08010090
 8005014:	20025e1c 	.word	0x20025e1c

08005018 <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	4604      	mov	r4, r0
 8005020:	4608      	mov	r0, r1
 8005022:	4611      	mov	r1, r2
 8005024:	461a      	mov	r2, r3
 8005026:	4623      	mov	r3, r4
 8005028:	80fb      	strh	r3, [r7, #6]
 800502a:	4603      	mov	r3, r0
 800502c:	80bb      	strh	r3, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	807b      	strh	r3, [r7, #2]
 8005032:	4613      	mov	r3, r2
 8005034:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//�Զ�ͳ�ƺ�����Ŀ
 800503a:	233e      	movs	r3, #62	@ 0x3e
 800503c:	813b      	strh	r3, [r7, #8]
	
			
	for (k=0;k<HZnum;k++) 
 800503e:	2300      	movs	r3, #0
 8005040:	81bb      	strh	r3, [r7, #12]
 8005042:	e084      	b.n	800514e <GUI_DrawFont16+0x136>
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8005044:	89ba      	ldrh	r2, [r7, #12]
 8005046:	494c      	ldr	r1, [pc, #304]	@ (8005178 <GUI_DrawFont16+0x160>)
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	4413      	add	r3, r2
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	440b      	add	r3, r1
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d174      	bne.n	8005146 <GUI_DrawFont16+0x12e>
 800505c:	89ba      	ldrh	r2, [r7, #12]
 800505e:	4946      	ldr	r1, [pc, #280]	@ (8005178 <GUI_DrawFont16+0x160>)
 8005060:	4613      	mov	r3, r2
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	4413      	add	r3, r2
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	440b      	add	r3, r1
 800506a:	3301      	adds	r3, #1
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	3301      	adds	r3, #1
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d166      	bne.n	8005146 <GUI_DrawFont16+0x12e>
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	330f      	adds	r3, #15
 800507c:	b29a      	uxth	r2, r3
 800507e:	88bb      	ldrh	r3, [r7, #4]
 8005080:	330f      	adds	r3, #15
 8005082:	b29b      	uxth	r3, r3
 8005084:	88b9      	ldrh	r1, [r7, #4]
 8005086:	88f8      	ldrh	r0, [r7, #6]
 8005088:	f001 fbba 	bl	8006800 <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e056      	b.n	8005140 <GUI_DrawFont16+0x128>
		    {
				for(j=0;j<8;j++)
 8005092:	2300      	movs	r3, #0
 8005094:	73bb      	strb	r3, [r7, #14]
 8005096:	e04d      	b.n	8005134 <GUI_DrawFont16+0x11c>
		    	{	
					if(!mode) //�ǵ��ӷ�ʽ
 8005098:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d11c      	bne.n	80050da <GUI_DrawFont16+0xc2>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80050a0:	89ba      	ldrh	r2, [r7, #12]
 80050a2:	7bf9      	ldrb	r1, [r7, #15]
 80050a4:	4834      	ldr	r0, [pc, #208]	@ (8005178 <GUI_DrawFont16+0x160>)
 80050a6:	4613      	mov	r3, r2
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	4413      	add	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	4403      	add	r3, r0
 80050b0:	440b      	add	r3, r1
 80050b2:	3302      	adds	r3, #2
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	4619      	mov	r1, r3
 80050b8:	7bbb      	ldrb	r3, [r7, #14]
 80050ba:	2280      	movs	r2, #128	@ 0x80
 80050bc:	fa42 f303 	asr.w	r3, r2, r3
 80050c0:	400b      	ands	r3, r1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <GUI_DrawFont16+0xb8>
 80050c6:	887b      	ldrh	r3, [r7, #2]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 f9fd 	bl	80064c8 <Lcd_WriteData_16Bit>
 80050ce:	e02e      	b.n	800512e <GUI_DrawFont16+0x116>
						else Lcd_WriteData_16Bit(bc);
 80050d0:	883b      	ldrh	r3, [r7, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 f9f8 	bl	80064c8 <Lcd_WriteData_16Bit>
 80050d8:	e029      	b.n	800512e <GUI_DrawFont16+0x116>
					}
					else
					{
						POINT_COLOR=fc;
 80050da:	4a28      	ldr	r2, [pc, #160]	@ (800517c <GUI_DrawFont16+0x164>)
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	8013      	strh	r3, [r2, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 80050e0:	89ba      	ldrh	r2, [r7, #12]
 80050e2:	7bf9      	ldrb	r1, [r7, #15]
 80050e4:	4824      	ldr	r0, [pc, #144]	@ (8005178 <GUI_DrawFont16+0x160>)
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	4413      	add	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4403      	add	r3, r0
 80050f0:	440b      	add	r3, r1
 80050f2:	3302      	adds	r3, #2
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	4619      	mov	r1, r3
 80050f8:	7bbb      	ldrb	r3, [r7, #14]
 80050fa:	2280      	movs	r2, #128	@ 0x80
 80050fc:	fa42 f303 	asr.w	r3, r2, r3
 8005100:	400b      	ands	r3, r1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <GUI_DrawFont16+0xfa>
 8005106:	88ba      	ldrh	r2, [r7, #4]
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f001 f9f9 	bl	8006504 <LCD_DrawPoint>
						x++;
 8005112:	88fb      	ldrh	r3, [r7, #6]
 8005114:	3301      	adds	r3, #1
 8005116:	80fb      	strh	r3, [r7, #6]
						if((x-x0)==16)
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	897b      	ldrh	r3, [r7, #10]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b10      	cmp	r3, #16
 8005120:	d105      	bne.n	800512e <GUI_DrawFont16+0x116>
						{
							x=x0;
 8005122:	897b      	ldrh	r3, [r7, #10]
 8005124:	80fb      	strh	r3, [r7, #6]
							y++;
 8005126:	88bb      	ldrh	r3, [r7, #4]
 8005128:	3301      	adds	r3, #1
 800512a:	80bb      	strh	r3, [r7, #4]
							break;
 800512c:	e005      	b.n	800513a <GUI_DrawFont16+0x122>
				for(j=0;j<8;j++)
 800512e:	7bbb      	ldrb	r3, [r7, #14]
 8005130:	3301      	adds	r3, #1
 8005132:	73bb      	strb	r3, [r7, #14]
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	2b07      	cmp	r3, #7
 8005138:	d9ae      	bls.n	8005098 <GUI_DrawFont16+0x80>
		    for(i=0;i<16*2;i++)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3301      	adds	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b1f      	cmp	r3, #31
 8005144:	d9a5      	bls.n	8005092 <GUI_DrawFont16+0x7a>
				
			}
			
			
		}				  	
		continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 8005146:	bf00      	nop
	for (k=0;k<HZnum;k++) 
 8005148:	89bb      	ldrh	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	81bb      	strh	r3, [r7, #12]
 800514e:	89ba      	ldrh	r2, [r7, #12]
 8005150:	893b      	ldrh	r3, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	f4ff af76 	bcc.w	8005044 <GUI_DrawFont16+0x2c>
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <GUI_DrawFont16+0x168>)
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <GUI_DrawFont16+0x168>)
 8005162:	885b      	ldrh	r3, [r3, #2]
 8005164:	3b01      	subs	r3, #1
 8005166:	b29b      	uxth	r3, r3
 8005168:	2100      	movs	r1, #0
 800516a:	2000      	movs	r0, #0
 800516c:	f001 fb48 	bl	8006800 <LCD_SetWindows>
} 
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}
 8005178:	08010680 	.word	0x08010680
 800517c:	20025e2a 	.word	0x20025e2a
 8005180:	20025e1c 	.word	0x20025e1c

08005184 <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	4611      	mov	r1, r2
 8005190:	461a      	mov	r2, r3
 8005192:	4623      	mov	r3, r4
 8005194:	80fb      	strh	r3, [r7, #6]
 8005196:	4603      	mov	r3, r0
 8005198:	80bb      	strh	r3, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	807b      	strh	r3, [r7, #2]
 800519e:	4613      	mov	r3, r2
 80051a0:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 80051a6:	2307      	movs	r3, #7
 80051a8:	813b      	strh	r3, [r7, #8]
		
			for (k=0;k<HZnum;k++) 
 80051aa:	2300      	movs	r3, #0
 80051ac:	81bb      	strh	r3, [r7, #12]
 80051ae:	e080      	b.n	80052b2 <GUI_DrawFont24+0x12e>
			{
			  if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 80051b0:	89bb      	ldrh	r3, [r7, #12]
 80051b2:	4a4a      	ldr	r2, [pc, #296]	@ (80052dc <GUI_DrawFont24+0x158>)
 80051b4:	214a      	movs	r1, #74	@ 0x4a
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d171      	bne.n	80052aa <GUI_DrawFont24+0x126>
 80051c6:	89bb      	ldrh	r3, [r7, #12]
 80051c8:	4a44      	ldr	r2, [pc, #272]	@ (80052dc <GUI_DrawFont24+0x158>)
 80051ca:	214a      	movs	r1, #74	@ 0x4a
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	3301      	adds	r3, #1
 80051d4:	781a      	ldrb	r2, [r3, #0]
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	3301      	adds	r3, #1
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d164      	bne.n	80052aa <GUI_DrawFont24+0x126>
			  { 	LCD_SetWindows(x,y,x+24-1,y+24-1);
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	3317      	adds	r3, #23
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	88bb      	ldrh	r3, [r7, #4]
 80051e8:	3317      	adds	r3, #23
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	88b9      	ldrh	r1, [r7, #4]
 80051ee:	88f8      	ldrh	r0, [r7, #6]
 80051f0:	f001 fb06 	bl	8006800 <LCD_SetWindows>
				    for(i=0;i<24*3;i++)
 80051f4:	2300      	movs	r3, #0
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	e054      	b.n	80052a4 <GUI_DrawFont24+0x120>
				    {
							for(j=0;j<8;j++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	73bb      	strb	r3, [r7, #14]
 80051fe:	e04b      	b.n	8005298 <GUI_DrawFont24+0x114>
							{
								if(!mode) //�ǵ��ӷ�ʽ
 8005200:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11b      	bne.n	8005240 <GUI_DrawFont24+0xbc>
								{
									if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8005208:	89ba      	ldrh	r2, [r7, #12]
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	4933      	ldr	r1, [pc, #204]	@ (80052dc <GUI_DrawFont24+0x158>)
 800520e:	204a      	movs	r0, #74	@ 0x4a
 8005210:	fb00 f202 	mul.w	r2, r0, r2
 8005214:	440a      	add	r2, r1
 8005216:	4413      	add	r3, r2
 8005218:	3302      	adds	r3, #2
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	2280      	movs	r2, #128	@ 0x80
 8005222:	fa42 f303 	asr.w	r3, r2, r3
 8005226:	400b      	ands	r3, r1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <GUI_DrawFont24+0xb2>
 800522c:	887b      	ldrh	r3, [r7, #2]
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f94a 	bl	80064c8 <Lcd_WriteData_16Bit>
 8005234:	e02d      	b.n	8005292 <GUI_DrawFont24+0x10e>
									else Lcd_WriteData_16Bit(bc);
 8005236:	883b      	ldrh	r3, [r7, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f001 f945 	bl	80064c8 <Lcd_WriteData_16Bit>
 800523e:	e028      	b.n	8005292 <GUI_DrawFont24+0x10e>
								}
							else
							{
								POINT_COLOR=fc;
 8005240:	4a27      	ldr	r2, [pc, #156]	@ (80052e0 <GUI_DrawFont24+0x15c>)
 8005242:	887b      	ldrh	r3, [r7, #2]
 8005244:	8013      	strh	r3, [r2, #0]
								if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8005246:	89ba      	ldrh	r2, [r7, #12]
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	4924      	ldr	r1, [pc, #144]	@ (80052dc <GUI_DrawFont24+0x158>)
 800524c:	204a      	movs	r0, #74	@ 0x4a
 800524e:	fb00 f202 	mul.w	r2, r0, r2
 8005252:	440a      	add	r2, r1
 8005254:	4413      	add	r3, r2
 8005256:	3302      	adds	r3, #2
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	2280      	movs	r2, #128	@ 0x80
 8005260:	fa42 f303 	asr.w	r3, r2, r3
 8005264:	400b      	ands	r3, r1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <GUI_DrawFont24+0xf2>
 800526a:	88ba      	ldrh	r2, [r7, #4]
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f001 f947 	bl	8006504 <LCD_DrawPoint>
								x++;
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	3301      	adds	r3, #1
 800527a:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==24)
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	897b      	ldrh	r3, [r7, #10]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b18      	cmp	r3, #24
 8005284:	d105      	bne.n	8005292 <GUI_DrawFont24+0x10e>
								{
									x=x0;
 8005286:	897b      	ldrh	r3, [r7, #10]
 8005288:	80fb      	strh	r3, [r7, #6]
									y++;
 800528a:	88bb      	ldrh	r3, [r7, #4]
 800528c:	3301      	adds	r3, #1
 800528e:	80bb      	strh	r3, [r7, #4]
									break;
 8005290:	e005      	b.n	800529e <GUI_DrawFont24+0x11a>
							for(j=0;j<8;j++)
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	3301      	adds	r3, #1
 8005296:	73bb      	strb	r3, [r7, #14]
 8005298:	7bbb      	ldrb	r3, [r7, #14]
 800529a:	2b07      	cmp	r3, #7
 800529c:	d9b0      	bls.n	8005200 <GUI_DrawFont24+0x7c>
				    for(i=0;i<24*3;i++)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	3301      	adds	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b47      	cmp	r3, #71	@ 0x47
 80052a8:	d9a7      	bls.n	80051fa <GUI_DrawFont24+0x76>
						}
					}
					
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 80052aa:	bf00      	nop
			for (k=0;k<HZnum;k++) 
 80052ac:	89bb      	ldrh	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	81bb      	strh	r3, [r7, #12]
 80052b2:	89ba      	ldrh	r2, [r7, #12]
 80052b4:	893b      	ldrh	r3, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	f4ff af7a 	bcc.w	80051b0 <GUI_DrawFont24+0x2c>
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 80052bc:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <GUI_DrawFont24+0x160>)
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	4b07      	ldr	r3, [pc, #28]	@ (80052e4 <GUI_DrawFont24+0x160>)
 80052c6:	885b      	ldrh	r3, [r3, #2]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2100      	movs	r1, #0
 80052ce:	2000      	movs	r0, #0
 80052d0:	f001 fa96 	bl	8006800 <LCD_SetWindows>
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}
 80052dc:	08010ebc 	.word	0x08010ebc
 80052e0:	20025e2a 	.word	0x20025e2a
 80052e4:	20025e1c 	.word	0x20025e1c

080052e8 <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4604      	mov	r4, r0
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4623      	mov	r3, r4
 80052f8:	80fb      	strh	r3, [r7, #6]
 80052fa:	4603      	mov	r3, r0
 80052fc:	80bb      	strh	r3, [r7, #4]
 80052fe:	460b      	mov	r3, r1
 8005300:	807b      	strh	r3, [r7, #2]
 8005302:	4613      	mov	r3, r2
 8005304:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//�Զ�ͳ�ƺ�����Ŀ
 800530a:	2304      	movs	r3, #4
 800530c:	813b      	strh	r3, [r7, #8]
	for (k=0;k<HZnum;k++) 
 800530e:	2300      	movs	r3, #0
 8005310:	81bb      	strh	r3, [r7, #12]
 8005312:	e085      	b.n	8005420 <GUI_DrawFont32+0x138>
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8005314:	89ba      	ldrh	r2, [r7, #12]
 8005316:	494d      	ldr	r1, [pc, #308]	@ (800544c <GUI_DrawFont32+0x164>)
 8005318:	4613      	mov	r3, r2
 800531a:	019b      	lsls	r3, r3, #6
 800531c:	4413      	add	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	440b      	add	r3, r1
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d175      	bne.n	8005418 <GUI_DrawFont32+0x130>
 800532c:	89ba      	ldrh	r2, [r7, #12]
 800532e:	4947      	ldr	r1, [pc, #284]	@ (800544c <GUI_DrawFont32+0x164>)
 8005330:	4613      	mov	r3, r2
 8005332:	019b      	lsls	r3, r3, #6
 8005334:	4413      	add	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	440b      	add	r3, r1
 800533a:	3301      	adds	r3, #1
 800533c:	781a      	ldrb	r2, [r3, #0]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	3301      	adds	r3, #1
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d167      	bne.n	8005418 <GUI_DrawFont32+0x130>
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	331f      	adds	r3, #31
 800534c:	b29a      	uxth	r2, r3
 800534e:	88bb      	ldrh	r3, [r7, #4]
 8005350:	331f      	adds	r3, #31
 8005352:	b29b      	uxth	r3, r3
 8005354:	88b9      	ldrh	r1, [r7, #4]
 8005356:	88f8      	ldrh	r0, [r7, #6]
 8005358:	f001 fa52 	bl	8006800 <LCD_SetWindows>
				    for(i=0;i<32*4;i++)
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
 8005360:	e056      	b.n	8005410 <GUI_DrawFont32+0x128>
				    {
						for(j=0;j<8;j++)
 8005362:	2300      	movs	r3, #0
 8005364:	73bb      	strb	r3, [r7, #14]
 8005366:	e04d      	b.n	8005404 <GUI_DrawFont32+0x11c>
				    	{
							if(!mode) //�ǵ��ӷ�ʽ
 8005368:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11c      	bne.n	80053aa <GUI_DrawFont32+0xc2>
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8005370:	89ba      	ldrh	r2, [r7, #12]
 8005372:	7bf9      	ldrb	r1, [r7, #15]
 8005374:	4835      	ldr	r0, [pc, #212]	@ (800544c <GUI_DrawFont32+0x164>)
 8005376:	4613      	mov	r3, r2
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	4413      	add	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4403      	add	r3, r0
 8005380:	440b      	add	r3, r1
 8005382:	3302      	adds	r3, #2
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	4619      	mov	r1, r3
 8005388:	7bbb      	ldrb	r3, [r7, #14]
 800538a:	2280      	movs	r2, #128	@ 0x80
 800538c:	fa42 f303 	asr.w	r3, r2, r3
 8005390:	400b      	ands	r3, r1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d004      	beq.n	80053a0 <GUI_DrawFont32+0xb8>
 8005396:	887b      	ldrh	r3, [r7, #2]
 8005398:	4618      	mov	r0, r3
 800539a:	f001 f895 	bl	80064c8 <Lcd_WriteData_16Bit>
 800539e:	e02e      	b.n	80053fe <GUI_DrawFont32+0x116>
								else Lcd_WriteData_16Bit(bc);
 80053a0:	883b      	ldrh	r3, [r7, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 f890 	bl	80064c8 <Lcd_WriteData_16Bit>
 80053a8:	e029      	b.n	80053fe <GUI_DrawFont32+0x116>
							}
							else
							{
								POINT_COLOR=fc;
 80053aa:	4a29      	ldr	r2, [pc, #164]	@ (8005450 <GUI_DrawFont32+0x168>)
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	8013      	strh	r3, [r2, #0]
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 80053b0:	89ba      	ldrh	r2, [r7, #12]
 80053b2:	7bf9      	ldrb	r1, [r7, #15]
 80053b4:	4825      	ldr	r0, [pc, #148]	@ (800544c <GUI_DrawFont32+0x164>)
 80053b6:	4613      	mov	r3, r2
 80053b8:	019b      	lsls	r3, r3, #6
 80053ba:	4413      	add	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4403      	add	r3, r0
 80053c0:	440b      	add	r3, r1
 80053c2:	3302      	adds	r3, #2
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	4619      	mov	r1, r3
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	2280      	movs	r2, #128	@ 0x80
 80053cc:	fa42 f303 	asr.w	r3, r2, r3
 80053d0:	400b      	ands	r3, r1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <GUI_DrawFont32+0xfa>
 80053d6:	88ba      	ldrh	r2, [r7, #4]
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	4611      	mov	r1, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 f891 	bl	8006504 <LCD_DrawPoint>
								x++;
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	3301      	adds	r3, #1
 80053e6:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==32)
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	897b      	ldrh	r3, [r7, #10]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d105      	bne.n	80053fe <GUI_DrawFont32+0x116>
								{
									x=x0;
 80053f2:	897b      	ldrh	r3, [r7, #10]
 80053f4:	80fb      	strh	r3, [r7, #6]
									y++;
 80053f6:	88bb      	ldrh	r3, [r7, #4]
 80053f8:	3301      	adds	r3, #1
 80053fa:	80bb      	strh	r3, [r7, #4]
									break;
 80053fc:	e005      	b.n	800540a <GUI_DrawFont32+0x122>
						for(j=0;j<8;j++)
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	3301      	adds	r3, #1
 8005402:	73bb      	strb	r3, [r7, #14]
 8005404:	7bbb      	ldrb	r3, [r7, #14]
 8005406:	2b07      	cmp	r3, #7
 8005408:	d9ae      	bls.n	8005368 <GUI_DrawFont32+0x80>
				    for(i=0;i<32*4;i++)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3301      	adds	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
 8005410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	daa4      	bge.n	8005362 <GUI_DrawFont32+0x7a>
						}
					}
					
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
 8005418:	bf00      	nop
	for (k=0;k<HZnum;k++) 
 800541a:	89bb      	ldrh	r3, [r7, #12]
 800541c:	3301      	adds	r3, #1
 800541e:	81bb      	strh	r3, [r7, #12]
 8005420:	89ba      	ldrh	r2, [r7, #12]
 8005422:	893b      	ldrh	r3, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	f4ff af75 	bcc.w	8005314 <GUI_DrawFont32+0x2c>
			}
	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 800542a:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <GUI_DrawFont32+0x16c>)
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	4b08      	ldr	r3, [pc, #32]	@ (8005454 <GUI_DrawFont32+0x16c>)
 8005434:	885b      	ldrh	r3, [r3, #2]
 8005436:	3b01      	subs	r3, #1
 8005438:	b29b      	uxth	r3, r3
 800543a:	2100      	movs	r1, #0
 800543c:	2000      	movs	r0, #0
 800543e:	f001 f9df 	bl	8006800 <LCD_SetWindows>
} 
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bd90      	pop	{r4, r7, pc}
 800544a:	bf00      	nop
 800544c:	080110c4 	.word	0x080110c4
 8005450:	20025e2a 	.word	0x20025e2a
 8005454:	20025e1c 	.word	0x20025e1c

08005458 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/	   		   
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{					
 8005458:	b5b0      	push	{r4, r5, r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af04      	add	r7, sp, #16
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	4611      	mov	r1, r2
 8005464:	461a      	mov	r2, r3
 8005466:	4623      	mov	r3, r4
 8005468:	80fb      	strh	r3, [r7, #6]
 800546a:	4603      	mov	r3, r0
 800546c:	80bb      	strh	r3, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	807b      	strh	r3, [r7, #2]
 8005472:	4613      	mov	r3, r2
 8005474:	803b      	strh	r3, [r7, #0]
	u16 x0=x;							  	  
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ��������� 
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 800547e:	e0af      	b.n	80055e0 <Show_Str+0x188>
    { 
        if(!bHz)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d161      	bne.n	800554a <Show_Str+0xf2>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size)) 
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	4b5b      	ldr	r3, [pc, #364]	@ (80055f8 <Show_Str+0x1a0>)
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	1acb      	subs	r3, r1, r3
 8005498:	429a      	cmp	r2, r3
 800549a:	f300 80a7 	bgt.w	80055ec <Show_Str+0x194>
 800549e:	88ba      	ldrh	r2, [r7, #4]
 80054a0:	4b55      	ldr	r3, [pc, #340]	@ (80055f8 <Show_Str+0x1a0>)
 80054a2:	885b      	ldrh	r3, [r3, #2]
 80054a4:	4619      	mov	r1, r3
 80054a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054aa:	1acb      	subs	r3, r1, r3
 80054ac:	429a      	cmp	r2, r3
 80054ae:	f300 809d 	bgt.w	80055ec <Show_Str+0x194>
			return; 
	        if(*str>0x80)bHz=1;//���� 
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b80      	cmp	r3, #128	@ 0x80
 80054b8:	d902      	bls.n	80054c0 <Show_Str+0x68>
 80054ba:	2301      	movs	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
 80054be:	e08f      	b.n	80055e0 <Show_Str+0x188>
	        else              //�ַ�
	        {          
		        if(*str==0x0D)//���з���
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b0d      	cmp	r3, #13
 80054c6:	d10b      	bne.n	80054e0 <Show_Str+0x88>
		        {         
		            y+=size;
 80054c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	88bb      	ldrh	r3, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	80bb      	strh	r3, [r7, #4]
					x=x0;
 80054d4:	89bb      	ldrh	r3, [r7, #12]
 80054d6:	80fb      	strh	r3, [r7, #6]
		            str++; 
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	3301      	adds	r3, #1
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	e030      	b.n	8005542 <Show_Str+0xea>
		        }  
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 80054e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d913      	bls.n	8005510 <Show_Str+0xb8>
					{  
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	883d      	ldrh	r5, [r7, #0]
 80054ee:	887c      	ldrh	r4, [r7, #2]
 80054f0:	88b9      	ldrh	r1, [r7, #4]
 80054f2:	88f8      	ldrh	r0, [r7, #6]
 80054f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80054f8:	9202      	str	r2, [sp, #8]
 80054fa:	2210      	movs	r2, #16
 80054fc:	9201      	str	r2, [sp, #4]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	462b      	mov	r3, r5
 8005502:	4622      	mov	r2, r4
 8005504:	f7ff fcac 	bl	8004e60 <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ�� 
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	3308      	adds	r3, #8
 800550c:	80fb      	strh	r3, [r7, #6]
 800550e:	e018      	b.n	8005542 <Show_Str+0xea>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	883d      	ldrh	r5, [r7, #0]
 8005516:	887c      	ldrh	r4, [r7, #2]
 8005518:	88b9      	ldrh	r1, [r7, #4]
 800551a:	88f8      	ldrh	r0, [r7, #6]
 800551c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005520:	9202      	str	r2, [sp, #8]
 8005522:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005526:	9201      	str	r2, [sp, #4]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	462b      	mov	r3, r5
 800552c:	4622      	mov	r2, r4
 800552e:	f7ff fc97 	bl	8004e60 <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ�� 
 8005532:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	4413      	add	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
					}
				} 
				str++; 
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	3301      	adds	r3, #1
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	e04a      	b.n	80055e0 <Show_Str+0x188>
		        
	        }
        }else//���� 
        {   
			if(x>(lcddev.width-size)||y>(lcddev.height-size)) 
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	4b2a      	ldr	r3, [pc, #168]	@ (80055f8 <Show_Str+0x1a0>)
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	4619      	mov	r1, r3
 8005552:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005556:	1acb      	subs	r3, r1, r3
 8005558:	429a      	cmp	r2, r3
 800555a:	dc49      	bgt.n	80055f0 <Show_Str+0x198>
 800555c:	88ba      	ldrh	r2, [r7, #4]
 800555e:	4b26      	ldr	r3, [pc, #152]	@ (80055f8 <Show_Str+0x1a0>)
 8005560:	885b      	ldrh	r3, [r3, #2]
 8005562:	4619      	mov	r1, r3
 8005564:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005568:	1acb      	subs	r3, r1, r3
 800556a:	429a      	cmp	r2, r3
 800556c:	dc40      	bgt.n	80055f0 <Show_Str+0x198>
			return;  
            bHz=0;//�к��ֿ�    
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
			if(size==32)
 8005572:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005576:	2b20      	cmp	r3, #32
 8005578:	d10c      	bne.n	8005594 <Show_Str+0x13c>
			GUI_DrawFont32(x,y,fc,bc,str,mode);	 	
 800557a:	883c      	ldrh	r4, [r7, #0]
 800557c:	887a      	ldrh	r2, [r7, #2]
 800557e:	88b9      	ldrh	r1, [r7, #4]
 8005580:	88f8      	ldrh	r0, [r7, #6]
 8005582:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4623      	mov	r3, r4
 800558e:	f7ff feab 	bl	80052e8 <GUI_DrawFont32>
 8005592:	e01c      	b.n	80055ce <Show_Str+0x176>
			else if(size==24)
 8005594:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005598:	2b18      	cmp	r3, #24
 800559a:	d10c      	bne.n	80055b6 <Show_Str+0x15e>
			GUI_DrawFont24(x,y,fc,bc,str,mode);	
 800559c:	883c      	ldrh	r4, [r7, #0]
 800559e:	887a      	ldrh	r2, [r7, #2]
 80055a0:	88b9      	ldrh	r1, [r7, #4]
 80055a2:	88f8      	ldrh	r0, [r7, #6]
 80055a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4623      	mov	r3, r4
 80055b0:	f7ff fde8 	bl	8005184 <GUI_DrawFont24>
 80055b4:	e00b      	b.n	80055ce <Show_Str+0x176>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 80055b6:	883c      	ldrh	r4, [r7, #0]
 80055b8:	887a      	ldrh	r2, [r7, #2]
 80055ba:	88b9      	ldrh	r1, [r7, #4]
 80055bc:	88f8      	ldrh	r0, [r7, #6]
 80055be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4623      	mov	r3, r4
 80055ca:	f7ff fd25 	bl	8005018 <GUI_DrawFont16>
				
	        str+=2; 
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	3302      	adds	r3, #2
 80055d2:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��	    
 80055d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055d8:	b29a      	uxth	r2, r3
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	4413      	add	r3, r2
 80055de:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f47f af4b 	bne.w	8005480 <Show_Str+0x28>
 80055ea:	e002      	b.n	80055f2 <Show_Str+0x19a>
			return; 
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <Show_Str+0x19a>
			return;  
 80055f0:	bf00      	nop
        }						 
    }   
}
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bdb0      	pop	{r4, r5, r7, pc}
 80055f8:	20025e1c 	.word	0x20025e1c

080055fc <LL_GPIO_SetOutputPin>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	619a      	str	r2, [r3, #24]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <LL_GPIO_ResetOutputPin>:
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <LL_USART_IsActiveFlag_TC>:
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b40      	cmp	r3, #64	@ 0x40
 8005646:	d101      	bne.n	800564c <LL_USART_IsActiveFlag_TC+0x18>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <LL_USART_IsActiveFlag_TC+0x1a>
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566a:	2b80      	cmp	r3, #128	@ 0x80
 800566c:	d101      	bne.n	8005672 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_USART_ClearFlag_TC>:
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2240      	movs	r2, #64	@ 0x40
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_LPUART_IsActiveFlag_TC>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c8:	2b40      	cmp	r3, #64	@ 0x40
 80056ca:	d101      	bne.n	80056d0 <LL_LPUART_IsActiveFlag_TC+0x18>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <LL_LPUART_IsActiveFlag_TC+0x1a>
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ee:	2b80      	cmp	r3, #128	@ 0x80
 80056f0:	d101      	bne.n	80056f6 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <LL_LPUART_ClearFlag_TC>:
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2240      	movs	r2, #64	@ 0x40
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <RS485_Set_Line_Driver_Receiver>:
//	USART_Cmd(USART3, ENABLE);
}

//------------------------------------------------------------------------------
void RS485_Set_Line_Driver_Receiver(u8 Line, u8 D_R)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	460a      	mov	r2, r1
 8005746:	71fb      	strb	r3, [r7, #7]
 8005748:	4613      	mov	r3, r2
 800574a:	71bb      	strb	r3, [r7, #6]
	delay_m(100);
 800574c:	2064      	movs	r0, #100	@ 0x64
 800574e:	f000 fe22 	bl	8006396 <delay_m>
	
	if(RS485_SingleEnded_Network == Single_Ended)
 8005752:	4ba7      	ldr	r3, [pc, #668]	@ (80059f0 <RS485_Set_Line_Driver_Receiver+0x2b4>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f040 808c 	bne.w	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
	{
		if(Line == 1)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d10f      	bne.n	8005782 <RS485_Set_Line_Driver_Receiver+0x46>
		{
			if(D_R == Driver)
 8005762:	79bb      	ldrb	r3, [r7, #6]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d104      	bne.n	8005772 <RS485_Set_Line_Driver_Receiver+0x36>
			{
				LL_GPIO_SetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 8005768:	2101      	movs	r1, #1
 800576a:	48a2      	ldr	r0, [pc, #648]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800576c:	f7ff ff46 	bl	80055fc <LL_GPIO_SetOutputPin>
 8005770:	e080      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
			
			else if(D_R == Receiver)
 8005772:	79bb      	ldrb	r3, [r7, #6]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d17d      	bne.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 8005778:	2101      	movs	r1, #1
 800577a:	489e      	ldr	r0, [pc, #632]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800577c:	f7ff ff4c 	bl	8005618 <LL_GPIO_ResetOutputPin>
 8005780:	e078      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}
		
		else if(Line == 2)
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d111      	bne.n	80057ac <RS485_Set_Line_Driver_Receiver+0x70>
		{
			if(D_R == Driver)
 8005788:	79bb      	ldrb	r3, [r7, #6]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d105      	bne.n	800579a <RS485_Set_Line_Driver_Receiver+0x5e>
			{
				LL_GPIO_SetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 800578e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005792:	4899      	ldr	r0, [pc, #612]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 8005794:	f7ff ff32 	bl	80055fc <LL_GPIO_SetOutputPin>
 8005798:	e06c      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
			
			else if(D_R == Receiver)
 800579a:	79bb      	ldrb	r3, [r7, #6]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d169      	bne.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 80057a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057a4:	4894      	ldr	r0, [pc, #592]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80057a6:	f7ff ff37 	bl	8005618 <LL_GPIO_ResetOutputPin>
 80057aa:	e063      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}
		
		else if(Line == 3)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d111      	bne.n	80057d6 <RS485_Set_Line_Driver_Receiver+0x9a>
		{
			if(D_R == Driver)
 80057b2:	79bb      	ldrb	r3, [r7, #6]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d105      	bne.n	80057c4 <RS485_Set_Line_Driver_Receiver+0x88>
			{
				LL_GPIO_SetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80057b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80057bc:	488d      	ldr	r0, [pc, #564]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80057be:	f7ff ff1d 	bl	80055fc <LL_GPIO_SetOutputPin>
 80057c2:	e057      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}

			else if(D_R == Receiver)
 80057c4:	79bb      	ldrb	r3, [r7, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d154      	bne.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80057ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80057ce:	4889      	ldr	r0, [pc, #548]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80057d0:	f7ff ff22 	bl	8005618 <LL_GPIO_ResetOutputPin>
 80057d4:	e04e      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}

		else if(Line == 4)
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d111      	bne.n	8005800 <RS485_Set_Line_Driver_Receiver+0xc4>
		{
			if(D_R == Driver)
 80057dc:	79bb      	ldrb	r3, [r7, #6]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d105      	bne.n	80057ee <RS485_Set_Line_Driver_Receiver+0xb2>
			{
				LL_GPIO_SetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 80057e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057e6:	4883      	ldr	r0, [pc, #524]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80057e8:	f7ff ff08 	bl	80055fc <LL_GPIO_SetOutputPin>
 80057ec:	e042      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}

			else if(D_R == Receiver)
 80057ee:	79bb      	ldrb	r3, [r7, #6]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d13f      	bne.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 80057f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057f8:	487e      	ldr	r0, [pc, #504]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80057fa:	f7ff ff0d 	bl	8005618 <LL_GPIO_ResetOutputPin>
 80057fe:	e039      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}

		else if(Line == 5)
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b05      	cmp	r3, #5
 8005804:	d111      	bne.n	800582a <RS485_Set_Line_Driver_Receiver+0xee>
		{
			if(D_R == Driver)
 8005806:	79bb      	ldrb	r3, [r7, #6]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d105      	bne.n	8005818 <RS485_Set_Line_Driver_Receiver+0xdc>
			{
				LL_GPIO_SetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 800580c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005810:	4879      	ldr	r0, [pc, #484]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 8005812:	f7ff fef3 	bl	80055fc <LL_GPIO_SetOutputPin>
 8005816:	e02d      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
			
			else if(D_R == Receiver)
 8005818:	79bb      	ldrb	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d12a      	bne.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 800581e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005822:	4875      	ldr	r0, [pc, #468]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 8005824:	f7ff fef8 	bl	8005618 <LL_GPIO_ResetOutputPin>
 8005828:	e024      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}

		else if(Line == 6)
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d10f      	bne.n	8005850 <RS485_Set_Line_Driver_Receiver+0x114>
		{
			if(D_R == Driver)
 8005830:	79bb      	ldrb	r3, [r7, #6]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d104      	bne.n	8005840 <RS485_Set_Line_Driver_Receiver+0x104>
			{
				LL_GPIO_SetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8005836:	2102      	movs	r1, #2
 8005838:	486e      	ldr	r0, [pc, #440]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800583a:	f7ff fedf 	bl	80055fc <LL_GPIO_SetOutputPin>
 800583e:	e019      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}

			else if(D_R == Receiver)
 8005840:	79bb      	ldrb	r3, [r7, #6]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d116      	bne.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8005846:	2102      	movs	r1, #2
 8005848:	486a      	ldr	r0, [pc, #424]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800584a:	f7ff fee5 	bl	8005618 <LL_GPIO_ResetOutputPin>
 800584e:	e011      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}
		}

		else if(Line == 7)
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b07      	cmp	r3, #7
 8005854:	d10e      	bne.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
		{
			if(D_R == Driver)
 8005856:	79bb      	ldrb	r3, [r7, #6]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d104      	bne.n	8005866 <RS485_Set_Line_Driver_Receiver+0x12a>
			{
				LL_GPIO_SetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 800585c:	2104      	movs	r1, #4
 800585e:	4865      	ldr	r0, [pc, #404]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8005860:	f7ff fecc 	bl	80055fc <LL_GPIO_SetOutputPin>
 8005864:	e006      	b.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			}

			else if(D_R == Receiver)
 8005866:	79bb      	ldrb	r3, [r7, #6]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d103      	bne.n	8005874 <RS485_Set_Line_Driver_Receiver+0x138>
			{
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 800586c:	2104      	movs	r1, #4
 800586e:	4861      	ldr	r0, [pc, #388]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8005870:	f7ff fed2 	bl	8005618 <LL_GPIO_ResetOutputPin>
			}
		}
	}
	//------------
	if(RS485_SingleEnded_Network == Network)
 8005874:	4b5e      	ldr	r3, [pc, #376]	@ (80059f0 <RS485_Set_Line_Driver_Receiver+0x2b4>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b01      	cmp	r3, #1
 800587a:	f040 8156 	bne.w	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
	{
		if(Line == 1)
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d12c      	bne.n	80058de <RS485_Set_Line_Driver_Receiver+0x1a2>
		{
			if(D_R == Driver)
 8005884:	79bb      	ldrb	r3, [r7, #6]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d120      	bne.n	80058cc <RS485_Set_Line_Driver_Receiver+0x190>
			{
				//LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 800588a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800588e:	485a      	ldr	r0, [pc, #360]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 8005890:	f7ff fec2 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 8005894:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005898:	4856      	ldr	r0, [pc, #344]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800589a:	f7ff febd 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 800589e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058a2:	4854      	ldr	r0, [pc, #336]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80058a4:	f7ff feb8 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 80058a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80058ac:	4852      	ldr	r0, [pc, #328]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80058ae:	f7ff feb3 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 80058b2:	2102      	movs	r1, #2
 80058b4:	484f      	ldr	r0, [pc, #316]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80058b6:	f7ff feaf 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 80058ba:	2104      	movs	r1, #4
 80058bc:	484d      	ldr	r0, [pc, #308]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80058be:	f7ff feab 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 80058c2:	2101      	movs	r1, #1
 80058c4:	484b      	ldr	r0, [pc, #300]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80058c6:	f7ff fe99 	bl	80055fc <LL_GPIO_SetOutputPin>
			{
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
			}
		}
	}
}
 80058ca:	e12e      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 80058cc:	79bb      	ldrb	r3, [r7, #6]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 812b 	bne.w	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 80058d4:	2101      	movs	r1, #1
 80058d6:	4847      	ldr	r0, [pc, #284]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80058d8:	f7ff fe9e 	bl	8005618 <LL_GPIO_ResetOutputPin>
}
 80058dc:	e125      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 2)
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d12d      	bne.n	8005940 <RS485_Set_Line_Driver_Receiver+0x204>
			if(D_R == Driver)
 80058e4:	79bb      	ldrb	r3, [r7, #6]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d120      	bne.n	800592c <RS485_Set_Line_Driver_Receiver+0x1f0>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 80058ea:	2101      	movs	r1, #1
 80058ec:	4841      	ldr	r0, [pc, #260]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80058ee:	f7ff fe93 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80058f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80058f6:	483f      	ldr	r0, [pc, #252]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80058f8:	f7ff fe8e 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 80058fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005900:	483c      	ldr	r0, [pc, #240]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8005902:	f7ff fe89 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8005906:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800590a:	483b      	ldr	r0, [pc, #236]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 800590c:	f7ff fe84 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8005910:	2102      	movs	r1, #2
 8005912:	4838      	ldr	r0, [pc, #224]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8005914:	f7ff fe80 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 8005918:	2104      	movs	r1, #4
 800591a:	4836      	ldr	r0, [pc, #216]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800591c:	f7ff fe7c 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8005920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005924:	4834      	ldr	r0, [pc, #208]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 8005926:	f7ff fe69 	bl	80055fc <LL_GPIO_SetOutputPin>
}
 800592a:	e0fe      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 800592c:	79bb      	ldrb	r3, [r7, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 80fb 	bne.w	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8005934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005938:	482f      	ldr	r0, [pc, #188]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 800593a:	f7ff fe6d 	bl	8005618 <LL_GPIO_ResetOutputPin>
}
 800593e:	e0f4      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 3)
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	2b03      	cmp	r3, #3
 8005944:	d12d      	bne.n	80059a2 <RS485_Set_Line_Driver_Receiver+0x266>
			if(D_R == Driver)
 8005946:	79bb      	ldrb	r3, [r7, #6]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d120      	bne.n	800598e <RS485_Set_Line_Driver_Receiver+0x252>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 800594c:	2101      	movs	r1, #1
 800594e:	4829      	ldr	r0, [pc, #164]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8005950:	f7ff fe62 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8005954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005958:	4827      	ldr	r0, [pc, #156]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 800595a:	f7ff fe5d 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 800595e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005962:	4824      	ldr	r0, [pc, #144]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8005964:	f7ff fe58 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8005968:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800596c:	4822      	ldr	r0, [pc, #136]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 800596e:	f7ff fe53 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8005972:	2102      	movs	r1, #2
 8005974:	481f      	ldr	r0, [pc, #124]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8005976:	f7ff fe4f 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 800597a:	2104      	movs	r1, #4
 800597c:	481d      	ldr	r0, [pc, #116]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800597e:	f7ff fe4b 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 8005982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005986:	481b      	ldr	r0, [pc, #108]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 8005988:	f7ff fe38 	bl	80055fc <LL_GPIO_SetOutputPin>
}
 800598c:	e0cd      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 800598e:	79bb      	ldrb	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f040 80ca 	bne.w	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 8005996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800599a:	4816      	ldr	r0, [pc, #88]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 800599c:	f7ff fe3c 	bl	8005618 <LL_GPIO_ResetOutputPin>
}
 80059a0:	e0c3      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 4)
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d133      	bne.n	8005a10 <RS485_Set_Line_Driver_Receiver+0x2d4>
			if(D_R == Driver)
 80059a8:	79bb      	ldrb	r3, [r7, #6]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d126      	bne.n	80059fc <RS485_Set_Line_Driver_Receiver+0x2c0>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 80059ae:	2101      	movs	r1, #1
 80059b0:	4810      	ldr	r0, [pc, #64]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80059b2:	f7ff fe31 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 80059b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059ba:	480f      	ldr	r0, [pc, #60]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80059bc:	f7ff fe2c 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 80059c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059c4:	480b      	ldr	r0, [pc, #44]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80059c6:	f7ff fe27 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 80059ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059ce:	480a      	ldr	r0, [pc, #40]	@ (80059f8 <RS485_Set_Line_Driver_Receiver+0x2bc>)
 80059d0:	f7ff fe22 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 80059d4:	2102      	movs	r1, #2
 80059d6:	4807      	ldr	r0, [pc, #28]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80059d8:	f7ff fe1e 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 80059dc:	2104      	movs	r1, #4
 80059de:	4805      	ldr	r0, [pc, #20]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80059e0:	f7ff fe1a 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 80059e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059e8:	4802      	ldr	r0, [pc, #8]	@ (80059f4 <RS485_Set_Line_Driver_Receiver+0x2b8>)
 80059ea:	f7ff fe07 	bl	80055fc <LL_GPIO_SetOutputPin>
}
 80059ee:	e09c      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
 80059f0:	20025e12 	.word	0x20025e12
 80059f4:	42020400 	.word	0x42020400
 80059f8:	42020800 	.word	0x42020800
			else if(D_R == Receiver)
 80059fc:	79bb      	ldrb	r3, [r7, #6]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 8093 	bne.w	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8005a04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a08:	484a      	ldr	r0, [pc, #296]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a0a:	f7ff fe05 	bl	8005618 <LL_GPIO_ResetOutputPin>
}
 8005a0e:	e08c      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 5)
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d12c      	bne.n	8005a70 <RS485_Set_Line_Driver_Receiver+0x334>
			if(D_R == Driver)
 8005a16:	79bb      	ldrb	r3, [r7, #6]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d120      	bne.n	8005a5e <RS485_Set_Line_Driver_Receiver+0x322>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4845      	ldr	r0, [pc, #276]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a20:	f7ff fdfa 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8005a24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a28:	4843      	ldr	r0, [pc, #268]	@ (8005b38 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8005a2a:	f7ff fdf5 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 8005a2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a32:	4840      	ldr	r0, [pc, #256]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a34:	f7ff fdf0 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8005a38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a3c:	483d      	ldr	r0, [pc, #244]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a3e:	f7ff fdeb 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8005a42:	2102      	movs	r1, #2
 8005a44:	483b      	ldr	r0, [pc, #236]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a46:	f7ff fde7 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	4839      	ldr	r0, [pc, #228]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a4e:	f7ff fde3 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8005a52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a56:	4838      	ldr	r0, [pc, #224]	@ (8005b38 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8005a58:	f7ff fdd0 	bl	80055fc <LL_GPIO_SetOutputPin>
}
 8005a5c:	e065      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 8005a5e:	79bb      	ldrb	r3, [r7, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d162      	bne.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8005a64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a68:	4833      	ldr	r0, [pc, #204]	@ (8005b38 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8005a6a:	f7ff fdd5 	bl	8005618 <LL_GPIO_ResetOutputPin>
}
 8005a6e:	e05c      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 6)
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d12b      	bne.n	8005ace <RS485_Set_Line_Driver_Receiver+0x392>
			if(D_R == Driver)
 8005a76:	79bb      	ldrb	r3, [r7, #6]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d120      	bne.n	8005abe <RS485_Set_Line_Driver_Receiver+0x382>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	482d      	ldr	r0, [pc, #180]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a80:	f7ff fdca 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8005a84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a88:	482b      	ldr	r0, [pc, #172]	@ (8005b38 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8005a8a:	f7ff fdc5 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 8005a8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a92:	4828      	ldr	r0, [pc, #160]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a94:	f7ff fdc0 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8005a98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a9c:	4825      	ldr	r0, [pc, #148]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005a9e:	f7ff fdbb 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8005aa2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005aa6:	4824      	ldr	r0, [pc, #144]	@ (8005b38 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8005aa8:	f7ff fdb6 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 8005aac:	2104      	movs	r1, #4
 8005aae:	4821      	ldr	r0, [pc, #132]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005ab0:	f7ff fdb2 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	481f      	ldr	r0, [pc, #124]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005ab8:	f7ff fda0 	bl	80055fc <LL_GPIO_SetOutputPin>
}
 8005abc:	e035      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 8005abe:	79bb      	ldrb	r3, [r7, #6]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d132      	bne.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	481b      	ldr	r0, [pc, #108]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005ac8:	f7ff fda6 	bl	8005618 <LL_GPIO_ResetOutputPin>
}
 8005acc:	e02d      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
		else if(Line == 7)
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	2b07      	cmp	r3, #7
 8005ad2:	d12a      	bne.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
			if(D_R == Driver)
 8005ad4:	79bb      	ldrb	r3, [r7, #6]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d120      	bne.n	8005b1c <RS485_Set_Line_Driver_Receiver+0x3e0>
				LL_GPIO_ResetOutputPin(Line1_DR_Port, Line1_DR_Pin);
 8005ada:	2101      	movs	r1, #1
 8005adc:	4815      	ldr	r0, [pc, #84]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005ade:	f7ff fd9b 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line2_DR_Port, Line2_DR_Pin);
 8005ae2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ae6:	4814      	ldr	r0, [pc, #80]	@ (8005b38 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8005ae8:	f7ff fd96 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line3_DR_Port, Line3_DR_Pin);
 8005aec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005af0:	4810      	ldr	r0, [pc, #64]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005af2:	f7ff fd91 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line4_DR_Port, Line4_DR_Pin);
 8005af6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005afa:	480e      	ldr	r0, [pc, #56]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005afc:	f7ff fd8c 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line5_DR_Port, Line5_DR_Pin);
 8005b00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b04:	480c      	ldr	r0, [pc, #48]	@ (8005b38 <RS485_Set_Line_Driver_Receiver+0x3fc>)
 8005b06:	f7ff fd87 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(Line6_DR_Port, Line6_DR_Pin);
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	4809      	ldr	r0, [pc, #36]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005b0e:	f7ff fd83 	bl	8005618 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 8005b12:	2104      	movs	r1, #4
 8005b14:	4807      	ldr	r0, [pc, #28]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005b16:	f7ff fd71 	bl	80055fc <LL_GPIO_SetOutputPin>
}
 8005b1a:	e006      	b.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
			else if(D_R == Receiver)
 8005b1c:	79bb      	ldrb	r3, [r7, #6]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d103      	bne.n	8005b2a <RS485_Set_Line_Driver_Receiver+0x3ee>
				LL_GPIO_ResetOutputPin(Line7_DR_Port, Line7_DR_Pin);
 8005b22:	2104      	movs	r1, #4
 8005b24:	4803      	ldr	r0, [pc, #12]	@ (8005b34 <RS485_Set_Line_Driver_Receiver+0x3f8>)
 8005b26:	f7ff fd77 	bl	8005618 <LL_GPIO_ResetOutputPin>
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	42020400 	.word	0x42020400
 8005b38:	42020800 	.word	0x42020800

08005b3c <RS485_Tx>:

//------------------------------------------------------------------------------
void RS485_Tx(u8 Line, char *MSG, u16 MSG_Length)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b0d6      	sub	sp, #344	@ 0x158
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005b46:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005b4a:	6019      	str	r1, [r3, #0]
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005b52:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8005b56:	4602      	mov	r2, r0
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005b5e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005b62:	460a      	mov	r2, r1
 8005b64:	801a      	strh	r2, [r3, #0]
	//char Str[100] = "...";
	const char Header_MSG[110] = "\r\n-----\r\nMessage from MPM controller on %s.\r\nMessage length: %u bytes\r\nCRC-32: %u\r\n\r\n\0\0";
 8005b66:	4ab9      	ldr	r2, [pc, #740]	@ (8005e4c <RS485_Tx+0x310>)
 8005b68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	2258      	movs	r2, #88	@ 0x58
 8005b70:	4618      	mov	r0, r3
 8005b72:	f007 fe1e 	bl	800d7b2 <memcpy>
 8005b76:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	605a      	str	r2, [r3, #4]
 8005b80:	609a      	str	r2, [r3, #8]
 8005b82:	60da      	str	r2, [r3, #12]
 8005b84:	611a      	str	r2, [r3, #16]
 8005b86:	829a      	strh	r2, [r3, #20]
	char Header[200] = ".";
 8005b88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005b8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005b90:	222e      	movs	r2, #46	@ 0x2e
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	3304      	adds	r3, #4
 8005b96:	22c4      	movs	r2, #196	@ 0xc4
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f007 fd7b 	bl	800d696 <memset>
	char *Pointer = Header;
 8005ba0:	f107 030c 	add.w	r3, r7, #12
 8005ba4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	//unsigned int CRC_MSG = CRC_Message_Calculator(MSG, MSG_Length);
	unsigned int CRC_MSG = 65535; //crc32_check (MSG, MSG_Length);
 8005ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bac:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
	unsigned int Checksum = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
//			Checksum
//			MSG++;
//			MSG_Length--;
//		}

		if(Line == 1)
 8005bb6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005bba:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d15b      	bne.n	8005c7c <RS485_Tx+0x140>
		{
			if(Line1_Working == 1) {return;}
 8005bc4:	4ba2      	ldr	r3, [pc, #648]	@ (8005e50 <RS485_Tx+0x314>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	f000 82b5 	beq.w	8006138 <RS485_Tx+0x5fc>
			RS485_Set_Line_Driver_Receiver(1, Driver);
 8005bce:	2101      	movs	r1, #1
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f7ff fdb3 	bl	800573c <RS485_Set_Line_Driver_Receiver>
			sprintf(Header, Header_MSG, "Line1 (RS485-1)", MSG_Length, CRC_MSG);
 8005bd6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005bda:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005bde:	881a      	ldrh	r2, [r3, #0]
 8005be0:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8005be4:	f107 000c 	add.w	r0, r7, #12
 8005be8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	4a98      	ldr	r2, [pc, #608]	@ (8005e54 <RS485_Tx+0x318>)
 8005bf2:	f007 fced 	bl	800d5d0 <siprintf>
//				while(LL_USART_IsActiveFlag_TC(Line1_UART) == RESET) {__NOP();}
//				LL_USART_ClearFlag_TC(Line1_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8005bf6:	e031      	b.n	8005c5c <RS485_Tx+0x120>
			{
				while(LL_USART_IsActiveFlag_TXE(Line1_UART) == RESET) {__NOP();}
 8005bf8:	bf00      	nop
 8005bfa:	4897      	ldr	r0, [pc, #604]	@ (8005e58 <RS485_Tx+0x31c>)
 8005bfc:	f7ff fd2d 	bl	800565a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f8      	beq.n	8005bf8 <RS485_Tx+0xbc>
				LL_USART_TransmitData8(Line1_UART, *MSG);//'A'
 8005c06:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005c0a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	4619      	mov	r1, r3
 8005c14:	4890      	ldr	r0, [pc, #576]	@ (8005e58 <RS485_Tx+0x31c>)
 8005c16:	f7ff fd40 	bl	800569a <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TC(Line1_UART) == RESET) {__NOP();}
 8005c1a:	e000      	b.n	8005c1e <RS485_Tx+0xe2>
 8005c1c:	bf00      	nop
 8005c1e:	488e      	ldr	r0, [pc, #568]	@ (8005e58 <RS485_Tx+0x31c>)
 8005c20:	f7ff fd08 	bl	8005634 <LL_USART_IsActiveFlag_TC>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f8      	beq.n	8005c1c <RS485_Tx+0xe0>
				LL_USART_ClearFlag_TC(Line1_UART);
 8005c2a:	488b      	ldr	r0, [pc, #556]	@ (8005e58 <RS485_Tx+0x31c>)
 8005c2c:	f7ff fd28 	bl	8005680 <LL_USART_ClearFlag_TC>
				MSG++;
 8005c30:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005c34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005c38:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8005c3c:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	3201      	adds	r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8005c46:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005c4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005c4e:	881a      	ldrh	r2, [r3, #0]
 8005c50:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005c54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8005c5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005c60:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1c7      	bne.n	8005bfa <RS485_Tx+0xbe>
			}

			while(LL_USART_IsActiveFlag_TXE(Line1_UART) == RESET) {__NOP();}
 8005c6a:	e000      	b.n	8005c6e <RS485_Tx+0x132>
 8005c6c:	bf00      	nop
 8005c6e:	487a      	ldr	r0, [pc, #488]	@ (8005e58 <RS485_Tx+0x31c>)
 8005c70:	f7ff fcf3 	bl	800565a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f8      	beq.n	8005c6c <RS485_Tx+0x130>
 8005c7a:	e26a      	b.n	8006152 <RS485_Tx+0x616>
			//delay_m(10);
		}
		//------------
		else if(Line == 2)
 8005c7c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005c80:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d15b      	bne.n	8005d42 <RS485_Tx+0x206>
		{
			if(Line2_Working == 1) {return;}
 8005c8a:	4b74      	ldr	r3, [pc, #464]	@ (8005e5c <RS485_Tx+0x320>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	f000 8254 	beq.w	800613c <RS485_Tx+0x600>
			RS485_Set_Line_Driver_Receiver(2, Driver);
 8005c94:	2101      	movs	r1, #1
 8005c96:	2002      	movs	r0, #2
 8005c98:	f7ff fd50 	bl	800573c <RS485_Set_Line_Driver_Receiver>
			sprintf(Header, Header_MSG, "Line2 (RS485-2)", MSG_Length, CRC_MSG);
 8005c9c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005ca0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005ca4:	881a      	ldrh	r2, [r3, #0]
 8005ca6:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8005caa:	f107 000c 	add.w	r0, r7, #12
 8005cae:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	4a6a      	ldr	r2, [pc, #424]	@ (8005e60 <RS485_Tx+0x324>)
 8005cb8:	f007 fc8a 	bl	800d5d0 <siprintf>
//				while(LL_USART_IsActiveFlag_TC(Line2_UART) == RESET) {__NOP();}
//				LL_USART_ClearFlag_TC(Line2_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8005cbc:	e031      	b.n	8005d22 <RS485_Tx+0x1e6>
			{
				while(LL_USART_IsActiveFlag_TXE(Line2_UART) == RESET) {__NOP();}
 8005cbe:	bf00      	nop
 8005cc0:	4868      	ldr	r0, [pc, #416]	@ (8005e64 <RS485_Tx+0x328>)
 8005cc2:	f7ff fcca 	bl	800565a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f8      	beq.n	8005cbe <RS485_Tx+0x182>
				LL_USART_TransmitData8(Line2_UART, *MSG);//'B'
 8005ccc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005cd0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4862      	ldr	r0, [pc, #392]	@ (8005e64 <RS485_Tx+0x328>)
 8005cdc:	f7ff fcdd 	bl	800569a <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TC(Line2_UART) == RESET) {__NOP();}
 8005ce0:	e000      	b.n	8005ce4 <RS485_Tx+0x1a8>
 8005ce2:	bf00      	nop
 8005ce4:	485f      	ldr	r0, [pc, #380]	@ (8005e64 <RS485_Tx+0x328>)
 8005ce6:	f7ff fca5 	bl	8005634 <LL_USART_IsActiveFlag_TC>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f8      	beq.n	8005ce2 <RS485_Tx+0x1a6>
				LL_USART_ClearFlag_TC(Line2_UART);
 8005cf0:	485c      	ldr	r0, [pc, #368]	@ (8005e64 <RS485_Tx+0x328>)
 8005cf2:	f7ff fcc5 	bl	8005680 <LL_USART_ClearFlag_TC>
				MSG++;
 8005cf6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005cfa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005cfe:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8005d02:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	3201      	adds	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8005d0c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005d10:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005d14:	881a      	ldrh	r2, [r3, #0]
 8005d16:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005d1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8005d22:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005d26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1c7      	bne.n	8005cc0 <RS485_Tx+0x184>
			}

			while(LL_USART_IsActiveFlag_TXE(Line2_UART) == RESET) {__NOP();}
 8005d30:	e000      	b.n	8005d34 <RS485_Tx+0x1f8>
 8005d32:	bf00      	nop
 8005d34:	484b      	ldr	r0, [pc, #300]	@ (8005e64 <RS485_Tx+0x328>)
 8005d36:	f7ff fc90 	bl	800565a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f8      	beq.n	8005d32 <RS485_Tx+0x1f6>
 8005d40:	e207      	b.n	8006152 <RS485_Tx+0x616>
			//delay_m(10);
		}
		//------------
		else if(Line == 3)
 8005d42:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005d46:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d15b      	bne.n	8005e08 <RS485_Tx+0x2cc>
		{
			if(Line3_Working == 1) {return;}
 8005d50:	4b45      	ldr	r3, [pc, #276]	@ (8005e68 <RS485_Tx+0x32c>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	f000 81f3 	beq.w	8006140 <RS485_Tx+0x604>
			RS485_Set_Line_Driver_Receiver(3, Driver);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	2003      	movs	r0, #3
 8005d5e:	f7ff fced 	bl	800573c <RS485_Set_Line_Driver_Receiver>
			sprintf(Header, Header_MSG, "HV Line (RS485-3)", MSG_Length, CRC_MSG);
 8005d62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005d66:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005d6a:	881a      	ldrh	r2, [r3, #0]
 8005d6c:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8005d70:	f107 000c 	add.w	r0, r7, #12
 8005d74:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	4a3b      	ldr	r2, [pc, #236]	@ (8005e6c <RS485_Tx+0x330>)
 8005d7e:	f007 fc27 	bl	800d5d0 <siprintf>
//				while(LL_USART_IsActiveFlag_TC(Line3_UART) == RESET) {__NOP();}
//				LL_USART_ClearFlag_TC(Line3_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8005d82:	e031      	b.n	8005de8 <RS485_Tx+0x2ac>
			{
				while(LL_USART_IsActiveFlag_TXE(Line3_UART) == RESET) {__NOP();}
 8005d84:	bf00      	nop
 8005d86:	483a      	ldr	r0, [pc, #232]	@ (8005e70 <RS485_Tx+0x334>)
 8005d88:	f7ff fc67 	bl	800565a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f8      	beq.n	8005d84 <RS485_Tx+0x248>
				LL_USART_TransmitData8(Line3_UART, *MSG);//'C'
 8005d92:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005d96:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4833      	ldr	r0, [pc, #204]	@ (8005e70 <RS485_Tx+0x334>)
 8005da2:	f7ff fc7a 	bl	800569a <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TC(Line3_UART) == RESET) {__NOP();}
 8005da6:	e000      	b.n	8005daa <RS485_Tx+0x26e>
 8005da8:	bf00      	nop
 8005daa:	4831      	ldr	r0, [pc, #196]	@ (8005e70 <RS485_Tx+0x334>)
 8005dac:	f7ff fc42 	bl	8005634 <LL_USART_IsActiveFlag_TC>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f8      	beq.n	8005da8 <RS485_Tx+0x26c>
				LL_USART_ClearFlag_TC(Line3_UART);
 8005db6:	482e      	ldr	r0, [pc, #184]	@ (8005e70 <RS485_Tx+0x334>)
 8005db8:	f7ff fc62 	bl	8005680 <LL_USART_ClearFlag_TC>
				MSG++;
 8005dbc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005dc0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005dc4:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8005dc8:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	3201      	adds	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8005dd2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005dd6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005dda:	881a      	ldrh	r2, [r3, #0]
 8005ddc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005de0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005de4:	3a01      	subs	r2, #1
 8005de6:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8005de8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005dec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1c7      	bne.n	8005d86 <RS485_Tx+0x24a>
			}

			while(LL_USART_IsActiveFlag_TXE(Line3_UART) == RESET) {__NOP();}
 8005df6:	e000      	b.n	8005dfa <RS485_Tx+0x2be>
 8005df8:	bf00      	nop
 8005dfa:	481d      	ldr	r0, [pc, #116]	@ (8005e70 <RS485_Tx+0x334>)
 8005dfc:	f7ff fc2d 	bl	800565a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f8      	beq.n	8005df8 <RS485_Tx+0x2bc>
 8005e06:	e1a4      	b.n	8006152 <RS485_Tx+0x616>
			//delay_m(10);
		}
		//------------
		else if(Line == 4)
 8005e08:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005e0c:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d16e      	bne.n	8005ef4 <RS485_Tx+0x3b8>
		{
			if(Line4_Working == 1) {return;}
 8005e16:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <RS485_Tx+0x338>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	f000 8192 	beq.w	8006144 <RS485_Tx+0x608>
			RS485_Set_Line_Driver_Receiver(4, Driver);
 8005e20:	2101      	movs	r1, #1
 8005e22:	2004      	movs	r0, #4
 8005e24:	f7ff fc8a 	bl	800573c <RS485_Set_Line_Driver_Receiver>
			sprintf(Header, Header_MSG, "Line4 (RS485-4)", MSG_Length, CRC_MSG);
 8005e28:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005e2c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8005e36:	f107 000c 	add.w	r0, r7, #12
 8005e3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	4a0d      	ldr	r2, [pc, #52]	@ (8005e78 <RS485_Tx+0x33c>)
 8005e44:	f007 fbc4 	bl	800d5d0 <siprintf>
//				while(LL_USART_IsActiveFlag_TC(Line4_UART) == RESET) {__NOP();}
//				LL_USART_ClearFlag_TC(Line4_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8005e48:	e044      	b.n	8005ed4 <RS485_Tx+0x398>
 8005e4a:	bf00      	nop
 8005e4c:	0800f99c 	.word	0x0800f99c
 8005e50:	20025e13 	.word	0x20025e13
 8005e54:	0800f928 	.word	0x0800f928
 8005e58:	40004800 	.word	0x40004800
 8005e5c:	20025e14 	.word	0x20025e14
 8005e60:	0800f938 	.word	0x0800f938
 8005e64:	40005000 	.word	0x40005000
 8005e68:	20025e15 	.word	0x20025e15
 8005e6c:	0800f948 	.word	0x0800f948
 8005e70:	40004c00 	.word	0x40004c00
 8005e74:	20025e16 	.word	0x20025e16
 8005e78:	0800f95c 	.word	0x0800f95c
			{
				while(LL_USART_IsActiveFlag_TXE(Line4_UART) == RESET) {__NOP();}
 8005e7c:	bf00      	nop
 8005e7e:	48b7      	ldr	r0, [pc, #732]	@ (800615c <RS485_Tx+0x620>)
 8005e80:	f7ff fbeb 	bl	800565a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f8      	beq.n	8005e7c <RS485_Tx+0x340>
				LL_USART_TransmitData8(Line4_UART, 'D');//*MSG
 8005e8a:	2144      	movs	r1, #68	@ 0x44
 8005e8c:	48b3      	ldr	r0, [pc, #716]	@ (800615c <RS485_Tx+0x620>)
 8005e8e:	f7ff fc04 	bl	800569a <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TC(Line4_UART) == RESET) {__NOP();}
 8005e92:	e000      	b.n	8005e96 <RS485_Tx+0x35a>
 8005e94:	bf00      	nop
 8005e96:	48b1      	ldr	r0, [pc, #708]	@ (800615c <RS485_Tx+0x620>)
 8005e98:	f7ff fbcc 	bl	8005634 <LL_USART_IsActiveFlag_TC>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f8      	beq.n	8005e94 <RS485_Tx+0x358>
				LL_USART_ClearFlag_TC(Line4_UART);
 8005ea2:	48ae      	ldr	r0, [pc, #696]	@ (800615c <RS485_Tx+0x620>)
 8005ea4:	f7ff fbec 	bl	8005680 <LL_USART_ClearFlag_TC>
				MSG++;
 8005ea8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005eac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005eb0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8005eb4:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	3201      	adds	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8005ebe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005ec2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005ec6:	881a      	ldrh	r2, [r3, #0]
 8005ec8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005ecc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005ed0:	3a01      	subs	r2, #1
 8005ed2:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8005ed4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005ed8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1cd      	bne.n	8005e7e <RS485_Tx+0x342>
			}

			while(LL_USART_IsActiveFlag_TXE(Line4_UART) == RESET) {__NOP();}
 8005ee2:	e000      	b.n	8005ee6 <RS485_Tx+0x3aa>
 8005ee4:	bf00      	nop
 8005ee6:	489d      	ldr	r0, [pc, #628]	@ (800615c <RS485_Tx+0x620>)
 8005ee8:	f7ff fbb7 	bl	800565a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f8      	beq.n	8005ee4 <RS485_Tx+0x3a8>
 8005ef2:	e12e      	b.n	8006152 <RS485_Tx+0x616>
			//delay_m(10);
		}
		//------------
		else if(Line == 5)
 8005ef4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005ef8:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d155      	bne.n	8005fae <RS485_Tx+0x472>
		{
			if(Line5_Working == 1) {return;}
 8005f02:	4b97      	ldr	r3, [pc, #604]	@ (8006160 <RS485_Tx+0x624>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	f000 811e 	beq.w	8006148 <RS485_Tx+0x60c>
			RS485_Set_Line_Driver_Receiver(5, Driver);
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	2005      	movs	r0, #5
 8005f10:	f7ff fc14 	bl	800573c <RS485_Set_Line_Driver_Receiver>
			sprintf(Header, Header_MSG, "Line5 (RS485-5)", MSG_Length, CRC_MSG);
 8005f14:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005f18:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005f1c:	881a      	ldrh	r2, [r3, #0]
 8005f1e:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8005f22:	f107 000c 	add.w	r0, r7, #12
 8005f26:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	4a8d      	ldr	r2, [pc, #564]	@ (8006164 <RS485_Tx+0x628>)
 8005f30:	f007 fb4e 	bl	800d5d0 <siprintf>
//				while(LL_LPUART_IsActiveFlag_TC(Line5_UART) == RESET) {__NOP();}
//				LL_LPUART_ClearFlag_TC(Line5_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8005f34:	e02b      	b.n	8005f8e <RS485_Tx+0x452>
			{
				while(LL_LPUART_IsActiveFlag_TXE(Line5_UART) == RESET) {__NOP();}
 8005f36:	bf00      	nop
 8005f38:	488b      	ldr	r0, [pc, #556]	@ (8006168 <RS485_Tx+0x62c>)
 8005f3a:	f7ff fbd0 	bl	80056de <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f8      	beq.n	8005f36 <RS485_Tx+0x3fa>
				LL_LPUART_TransmitData8(Line5_UART, 'E');//*MSG
 8005f44:	2145      	movs	r1, #69	@ 0x45
 8005f46:	4888      	ldr	r0, [pc, #544]	@ (8006168 <RS485_Tx+0x62c>)
 8005f48:	f7ff fbe9 	bl	800571e <LL_LPUART_TransmitData8>
				while(LL_LPUART_IsActiveFlag_TC(Line5_UART) == RESET) {__NOP();}
 8005f4c:	e000      	b.n	8005f50 <RS485_Tx+0x414>
 8005f4e:	bf00      	nop
 8005f50:	4885      	ldr	r0, [pc, #532]	@ (8006168 <RS485_Tx+0x62c>)
 8005f52:	f7ff fbb1 	bl	80056b8 <LL_LPUART_IsActiveFlag_TC>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0f8      	beq.n	8005f4e <RS485_Tx+0x412>
				LL_LPUART_ClearFlag_TC(Line5_UART);
 8005f5c:	4882      	ldr	r0, [pc, #520]	@ (8006168 <RS485_Tx+0x62c>)
 8005f5e:	f7ff fbd1 	bl	8005704 <LL_LPUART_ClearFlag_TC>
				MSG++;
 8005f62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005f66:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005f6a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8005f6e:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	3201      	adds	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8005f78:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005f7c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005f80:	881a      	ldrh	r2, [r3, #0]
 8005f82:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005f86:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005f8a:	3a01      	subs	r2, #1
 8005f8c:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8005f8e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005f92:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1cd      	bne.n	8005f38 <RS485_Tx+0x3fc>
			}

			while(LL_LPUART_IsActiveFlag_TXE(Line5_UART) == RESET) {__NOP();}
 8005f9c:	e000      	b.n	8005fa0 <RS485_Tx+0x464>
 8005f9e:	bf00      	nop
 8005fa0:	4871      	ldr	r0, [pc, #452]	@ (8006168 <RS485_Tx+0x62c>)
 8005fa2:	f7ff fb9c 	bl	80056de <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f8      	beq.n	8005f9e <RS485_Tx+0x462>
 8005fac:	e0d1      	b.n	8006152 <RS485_Tx+0x616>
			//delay_m(10);
		}
		//------------
		else if(Line == 6)
 8005fae:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005fb2:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b06      	cmp	r3, #6
 8005fba:	d15b      	bne.n	8006074 <RS485_Tx+0x538>
		{
			if(Line6_Working == 1) {return;}
 8005fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800616c <RS485_Tx+0x630>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	f000 80c3 	beq.w	800614c <RS485_Tx+0x610>
			RS485_Set_Line_Driver_Receiver(6, Driver);
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	2006      	movs	r0, #6
 8005fca:	f7ff fbb7 	bl	800573c <RS485_Set_Line_Driver_Receiver>
			sprintf(Header, Header_MSG, "Line6 (RS485-6)", MSG_Length, CRC_MSG);
 8005fce:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8005fd2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8005fdc:	f107 000c 	add.w	r0, r7, #12
 8005fe0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	4a61      	ldr	r2, [pc, #388]	@ (8006170 <RS485_Tx+0x634>)
 8005fea:	f007 faf1 	bl	800d5d0 <siprintf>
//				while(LL_LPUART_IsActiveFlag_TC(Line6_UART) == RESET) {__NOP();}
//				LL_LPUART_ClearFlag_TC(Line6_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 8005fee:	e031      	b.n	8006054 <RS485_Tx+0x518>
			{
				while(LL_LPUART_IsActiveFlag_TXE(Line6_UART) == RESET) {__NOP();}
 8005ff0:	bf00      	nop
 8005ff2:	4860      	ldr	r0, [pc, #384]	@ (8006174 <RS485_Tx+0x638>)
 8005ff4:	f7ff fb73 	bl	80056de <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f8      	beq.n	8005ff0 <RS485_Tx+0x4b4>
				LL_USART_TransmitData8(Line6_UART, *MSG);//'F'
 8005ffe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006002:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	4859      	ldr	r0, [pc, #356]	@ (8006174 <RS485_Tx+0x638>)
 800600e:	f7ff fb44 	bl	800569a <LL_USART_TransmitData8>
				while(LL_LPUART_IsActiveFlag_TC(Line6_UART) == RESET) {__NOP();}
 8006012:	e000      	b.n	8006016 <RS485_Tx+0x4da>
 8006014:	bf00      	nop
 8006016:	4857      	ldr	r0, [pc, #348]	@ (8006174 <RS485_Tx+0x638>)
 8006018:	f7ff fb4e 	bl	80056b8 <LL_LPUART_IsActiveFlag_TC>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f8      	beq.n	8006014 <RS485_Tx+0x4d8>
				LL_LPUART_ClearFlag_TC(Line6_UART);
 8006022:	4854      	ldr	r0, [pc, #336]	@ (8006174 <RS485_Tx+0x638>)
 8006024:	f7ff fb6e 	bl	8005704 <LL_LPUART_ClearFlag_TC>
				MSG++;
 8006028:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800602c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006030:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8006034:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	3201      	adds	r2, #1
 800603c:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 800603e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006042:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006046:	881a      	ldrh	r2, [r3, #0]
 8006048:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800604c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006050:	3a01      	subs	r2, #1
 8006052:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006054:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006058:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1c7      	bne.n	8005ff2 <RS485_Tx+0x4b6>
			}

			while(LL_LPUART_IsActiveFlag_TXE(Line6_UART) == RESET) {__NOP();}
 8006062:	e000      	b.n	8006066 <RS485_Tx+0x52a>
 8006064:	bf00      	nop
 8006066:	4843      	ldr	r0, [pc, #268]	@ (8006174 <RS485_Tx+0x638>)
 8006068:	f7ff fb39 	bl	80056de <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f8      	beq.n	8006064 <RS485_Tx+0x528>
 8006072:	e06e      	b.n	8006152 <RS485_Tx+0x616>
			//delay_m(10);
		}
		//------------
		else if(Line == 7)
 8006074:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006078:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b07      	cmp	r3, #7
 8006080:	d167      	bne.n	8006152 <RS485_Tx+0x616>
		{
			if(Line7_Working == 1) {return;}
 8006082:	4b3d      	ldr	r3, [pc, #244]	@ (8006178 <RS485_Tx+0x63c>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d062      	beq.n	8006150 <RS485_Tx+0x614>
			RS485_Set_Line_Driver_Receiver(7, Driver);
 800608a:	2101      	movs	r1, #1
 800608c:	2007      	movs	r0, #7
 800608e:	f7ff fb55 	bl	800573c <RS485_Set_Line_Driver_Receiver>
			sprintf(Header, Header_MSG, "Line7 (RS485-7)", MSG_Length, CRC_MSG);
 8006092:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006096:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 80060a0:	f107 000c 	add.w	r0, r7, #12
 80060a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4613      	mov	r3, r2
 80060ac:	4a33      	ldr	r2, [pc, #204]	@ (800617c <RS485_Tx+0x640>)
 80060ae:	f007 fa8f 	bl	800d5d0 <siprintf>
//				while(LL_LPUART_IsActiveFlag_TC(Line7_UART) == RESET) {__NOP();}
//				LL_LPUART_ClearFlag_TC(Line7_UART);
//				Pointer++;
//			}

			while(MSG_Length)
 80060b2:	e031      	b.n	8006118 <RS485_Tx+0x5dc>
			{
				while(LL_LPUART_IsActiveFlag_TXE(Line7_UART) == RESET) {__NOP();}
 80060b4:	bf00      	nop
 80060b6:	4832      	ldr	r0, [pc, #200]	@ (8006180 <RS485_Tx+0x644>)
 80060b8:	f7ff fb11 	bl	80056de <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f8      	beq.n	80060b4 <RS485_Tx+0x578>
				LL_USART_TransmitData8(Line7_UART, *MSG);//'G'
 80060c2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80060c6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	4619      	mov	r1, r3
 80060d0:	482b      	ldr	r0, [pc, #172]	@ (8006180 <RS485_Tx+0x644>)
 80060d2:	f7ff fae2 	bl	800569a <LL_USART_TransmitData8>
				while(LL_LPUART_IsActiveFlag_TC(Line7_UART) == RESET) {__NOP();}
 80060d6:	e000      	b.n	80060da <RS485_Tx+0x59e>
 80060d8:	bf00      	nop
 80060da:	4829      	ldr	r0, [pc, #164]	@ (8006180 <RS485_Tx+0x644>)
 80060dc:	f7ff faec 	bl	80056b8 <LL_LPUART_IsActiveFlag_TC>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f8      	beq.n	80060d8 <RS485_Tx+0x59c>
				LL_LPUART_ClearFlag_TC(Line7_UART);
 80060e6:	4826      	ldr	r0, [pc, #152]	@ (8006180 <RS485_Tx+0x644>)
 80060e8:	f7ff fb0c 	bl	8005704 <LL_LPUART_ClearFlag_TC>
				MSG++;
 80060ec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80060f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80060f4:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80060f8:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	3201      	adds	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
				MSG_Length--;
 8006102:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006106:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800610a:	881a      	ldrh	r2, [r3, #0]
 800610c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006110:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006114:	3a01      	subs	r2, #1
 8006116:	801a      	strh	r2, [r3, #0]
			while(MSG_Length)
 8006118:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800611c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1c7      	bne.n	80060b6 <RS485_Tx+0x57a>
			}

			while(LL_LPUART_IsActiveFlag_TXE(Line7_UART) == RESET) {__NOP();}
 8006126:	e000      	b.n	800612a <RS485_Tx+0x5ee>
 8006128:	bf00      	nop
 800612a:	4815      	ldr	r0, [pc, #84]	@ (8006180 <RS485_Tx+0x644>)
 800612c:	f7ff fad7 	bl	80056de <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f8      	beq.n	8006128 <RS485_Tx+0x5ec>
 8006136:	e00c      	b.n	8006152 <RS485_Tx+0x616>
			if(Line1_Working == 1) {return;}
 8006138:	bf00      	nop
 800613a:	e00a      	b.n	8006152 <RS485_Tx+0x616>
			if(Line2_Working == 1) {return;}
 800613c:	bf00      	nop
 800613e:	e008      	b.n	8006152 <RS485_Tx+0x616>
			if(Line3_Working == 1) {return;}
 8006140:	bf00      	nop
 8006142:	e006      	b.n	8006152 <RS485_Tx+0x616>
			if(Line4_Working == 1) {return;}
 8006144:	bf00      	nop
 8006146:	e004      	b.n	8006152 <RS485_Tx+0x616>
			if(Line5_Working == 1) {return;}
 8006148:	bf00      	nop
 800614a:	e002      	b.n	8006152 <RS485_Tx+0x616>
			if(Line6_Working == 1) {return;}
 800614c:	bf00      	nop
 800614e:	e000      	b.n	8006152 <RS485_Tx+0x616>
			if(Line7_Working == 1) {return;}
 8006150:	bf00      	nop
			//delay_m(10);
		}
		
}
 8006152:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40006400 	.word	0x40006400
 8006160:	20025e17 	.word	0x20025e17
 8006164:	0800f96c 	.word	0x0800f96c
 8006168:	44002400 	.word	0x44002400
 800616c:	20025e18 	.word	0x20025e18
 8006170:	0800f97c 	.word	0x0800f97c
 8006174:	40006c00 	.word	0x40006c00
 8006178:	20025e19 	.word	0x20025e19
 800617c:	0800f98c 	.word	0x0800f98c
 8006180:	40007800 	.word	0x40007800

08006184 <LL_SPI_Enable>:
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f043 0201 	orr.w	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	601a      	str	r2, [r3, #0]
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <LL_SPI_Disable>:
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f023 0201 	bic.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <LL_SPI_StartMasterTransfer>:
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	601a      	str	r2, [r3, #0]
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <LL_SPI_SetDataWidth>:
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f023 021f 	bic.w	r2, r3, #31
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	609a      	str	r2, [r3, #8]
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b02      	cmp	r3, #2
 800621c:	d101      	bne.n	8006222 <LL_SPI_IsActiveFlag_TXP+0x18>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <LL_SPI_IsActiveFlag_TXP+0x1a>
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <LL_SPI_IsActiveFlag_TXC>:
  * @rmtoll SR           TXC           LL_SPI_IsActiveFlag_TXC
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXC(const SPI_TypeDef *SPIx)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006244:	d101      	bne.n	800624a <LL_SPI_IsActiveFlag_TXC+0x1a>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <LL_SPI_IsActiveFlag_TXC+0x1c>
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <LL_SPI_ClearFlag_EOT>:
  * @rmtoll IFCR         EOTC          LL_SPI_ClearFlag_EOT
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_EOT(SPI_TypeDef *SPIx)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->IFCR, SPI_IFCR_EOTC);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f043 0208 	orr.w	r2, r3, #8
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	619a      	str	r2, [r3, #24]
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3320      	adds	r3, #32
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	701a      	strb	r2, [r3, #0]
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spitxdr = ((__IO uint16_t *)&SPIx->TXDR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3320      	adds	r3, #32
 80062a8:	60fb      	str	r3, [r7, #12]
  *spitxdr = TxData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	887a      	ldrh	r2, [r7, #2]
 80062ae:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&SPIx->TXDR) = TxData;
#endif /* __GNUC__ */
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <SPI_WriteByte>:
 * @function   :Write a byte of data using STM32's hardware SPI
 * @parameters :TxData:Data to be written
 * @retvalue   :Data received by the bus
******************************************************************************/
u8 SPI_WriteByte(u8 TxData)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    //HAL_SPI_TransmitReceive(&SPI5_Handler,&TxData,&Rxdata,1, 1000);
    //LL_SPI_TransmitData8(SPI3, TxData);
    //LL_SPI_StartMasterTransfer(SPI3);
    LL_SPI_SetDataWidth(SPI3, LL_SPI_DATAWIDTH_8BIT);
 80062c6:	2107      	movs	r1, #7
 80062c8:	4813      	ldr	r0, [pc, #76]	@ (8006318 <SPI_WriteByte+0x5c>)
 80062ca:	f7ff ff8b 	bl	80061e4 <LL_SPI_SetDataWidth>
    //LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
    LL_SPI_Enable(SPI3);
 80062ce:	4812      	ldr	r0, [pc, #72]	@ (8006318 <SPI_WriteByte+0x5c>)
 80062d0:	f7ff ff58 	bl	8006184 <LL_SPI_Enable>
    //LL_SPI_SetTransferSize(SPI3, 0);
    if(LL_SPI_IsActiveFlag_TXP(SPI3) == 1)
 80062d4:	4810      	ldr	r0, [pc, #64]	@ (8006318 <SPI_WriteByte+0x5c>)
 80062d6:	f7ff ff98 	bl	800620a <LL_SPI_IsActiveFlag_TXP>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d104      	bne.n	80062ea <SPI_WriteByte+0x2e>
    {
    	LL_SPI_TransmitData8(SPI3, TxData);
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	4619      	mov	r1, r3
 80062e4:	480c      	ldr	r0, [pc, #48]	@ (8006318 <SPI_WriteByte+0x5c>)
 80062e6:	f7ff ffc7 	bl	8006278 <LL_SPI_TransmitData8>
    }
//    while(LL_SPI_IsActiveFlag_TXTF(SPI3) == 0)
//    {
//    	__NOP();
//    }
    LL_SPI_StartMasterTransfer(SPI3);
 80062ea:	480b      	ldr	r0, [pc, #44]	@ (8006318 <SPI_WriteByte+0x5c>)
 80062ec:	f7ff ff6a 	bl	80061c4 <LL_SPI_StartMasterTransfer>
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 80062f0:	e000      	b.n	80062f4 <SPI_WriteByte+0x38>
    {
    	__NOP();
 80062f2:	bf00      	nop
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 80062f4:	4808      	ldr	r0, [pc, #32]	@ (8006318 <SPI_WriteByte+0x5c>)
 80062f6:	f7ff ff9b 	bl	8006230 <LL_SPI_IsActiveFlag_TXC>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f8      	beq.n	80062f2 <SPI_WriteByte+0x36>
    }
    LL_SPI_ClearFlag_EOT(SPI3);
 8006300:	4805      	ldr	r0, [pc, #20]	@ (8006318 <SPI_WriteByte+0x5c>)
 8006302:	f7ff ffa9 	bl	8006258 <LL_SPI_ClearFlag_EOT>
    LL_SPI_Disable(SPI3);
 8006306:	4804      	ldr	r0, [pc, #16]	@ (8006318 <SPI_WriteByte+0x5c>)
 8006308:	f7ff ff4c 	bl	80061a4 <LL_SPI_Disable>
 	return Rxdata;           	     //�����յ�������			
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40003c00 	.word	0x40003c00

0800631c <SPI_WriteByte_16>:
////    GPIO_Initure.Alternate=GPIO_AF5_SPI5;           //����ΪSPI5
////    HAL_GPIO_Init(GPIOF,&GPIO_Initure);
//}
//******************************************************************************/
u8 SPI_WriteByte_16(u16 TxData)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	80fb      	strh	r3, [r7, #6]
    u8 Rxdata;
    //HAL_SPI_TransmitReceive(&SPI5_Handler,&TxData,&Rxdata,1, 1000);
    //LL_SPI_TransmitData8(SPI3, TxData);
    //LL_SPI_StartMasterTransfer(SPI3);
    LL_SPI_SetDataWidth(SPI3, LL_SPI_DATAWIDTH_16BIT);
 8006326:	210f      	movs	r1, #15
 8006328:	4813      	ldr	r0, [pc, #76]	@ (8006378 <SPI_WriteByte_16+0x5c>)
 800632a:	f7ff ff5b 	bl	80061e4 <LL_SPI_SetDataWidth>
    //LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_02DATA);
    LL_SPI_Enable(SPI3);
 800632e:	4812      	ldr	r0, [pc, #72]	@ (8006378 <SPI_WriteByte_16+0x5c>)
 8006330:	f7ff ff28 	bl	8006184 <LL_SPI_Enable>
    //LL_SPI_SetTransferSize(SPI3, 2);
    if(LL_SPI_IsActiveFlag_TXP(SPI3) == 1)
 8006334:	4810      	ldr	r0, [pc, #64]	@ (8006378 <SPI_WriteByte_16+0x5c>)
 8006336:	f7ff ff68 	bl	800620a <LL_SPI_IsActiveFlag_TXP>
 800633a:	4603      	mov	r3, r0
 800633c:	2b01      	cmp	r3, #1
 800633e:	d104      	bne.n	800634a <SPI_WriteByte_16+0x2e>
    {
    	LL_SPI_TransmitData16(SPI3, TxData);
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	4619      	mov	r1, r3
 8006344:	480c      	ldr	r0, [pc, #48]	@ (8006378 <SPI_WriteByte_16+0x5c>)
 8006346:	f7ff ffa7 	bl	8006298 <LL_SPI_TransmitData16>
    }
//    while(LL_SPI_IsActiveFlag_TXTF(SPI3) == 0)
//    {
//    	__NOP();
//    }
    LL_SPI_StartMasterTransfer(SPI3);
 800634a:	480b      	ldr	r0, [pc, #44]	@ (8006378 <SPI_WriteByte_16+0x5c>)
 800634c:	f7ff ff3a 	bl	80061c4 <LL_SPI_StartMasterTransfer>
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 8006350:	e000      	b.n	8006354 <SPI_WriteByte_16+0x38>
    {
    	__NOP();
 8006352:	bf00      	nop
    while( !( /*LL_SPI_IsActiveFlag_EOT(SPI3) &&*/ LL_SPI_IsActiveFlag_TXC(SPI3) ) )
 8006354:	4808      	ldr	r0, [pc, #32]	@ (8006378 <SPI_WriteByte_16+0x5c>)
 8006356:	f7ff ff6b 	bl	8006230 <LL_SPI_IsActiveFlag_TXC>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f8      	beq.n	8006352 <SPI_WriteByte_16+0x36>
    }
    LL_SPI_ClearFlag_EOT(SPI3);
 8006360:	4805      	ldr	r0, [pc, #20]	@ (8006378 <SPI_WriteByte_16+0x5c>)
 8006362:	f7ff ff79 	bl	8006258 <LL_SPI_ClearFlag_EOT>
    LL_SPI_Disable(SPI3);
 8006366:	4804      	ldr	r0, [pc, #16]	@ (8006378 <SPI_WriteByte_16+0x5c>)
 8006368:	f7ff ff1c 	bl	80061a4 <LL_SPI_Disable>
 	return Rxdata;           	     //�����յ�������
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40003c00 	.word	0x40003c00

0800637c <delay_ms>:
}

//��ʱnms
//nms:Ҫ��ʱ��ms��
void delay_ms(u16 nms)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	80fb      	strh	r3, [r7, #6]
//	u32 i;
//	for(i=0;i<nms;i++) delay_us(1000);
	LL_mDelay(nms);
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	4618      	mov	r0, r3
 800638a:	f003 fc65 	bl	8009c58 <LL_mDelay>
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <delay_m>:

void delay_m(int cnt)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
	int i,us;
	for(i = 0;i<cnt;i++)
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e00c      	b.n	80063be <delay_m+0x28>
	{
		us = 4000;
 80063a4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80063a8:	60bb      	str	r3, [r7, #8]
		while (us)     /* delay	*/
 80063aa:	e002      	b.n	80063b2 <delay_m+0x1c>
		{
			us--;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]
		while (us)     /* delay	*/
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f9      	bne.n	80063ac <delay_m+0x16>
	for(i = 0;i<cnt;i++)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	dbee      	blt.n	80063a4 <delay_m+0xe>
		}
	}
}
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <LL_GPIO_SetOutputPin>:
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	619a      	str	r2, [r3, #24]
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <LL_GPIO_ResetOutputPin>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{ 
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;     
 8006416:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800641a:	480a      	ldr	r0, [pc, #40]	@ (8006444 <LCD_WR_REG+0x38>)
 800641c:	f7ff ffe8 	bl	80063f0 <LL_GPIO_ResetOutputPin>
	 LCD_RS_CLR;	  
 8006420:	2101      	movs	r1, #1
 8006422:	4808      	ldr	r0, [pc, #32]	@ (8006444 <LCD_WR_REG+0x38>)
 8006424:	f7ff ffe4 	bl	80063f0 <LL_GPIO_ResetOutputPin>
   SPI_WriteByte(data);
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff ff46 	bl	80062bc <SPI_WriteByte>
   LCD_CS_SET;	
 8006430:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006434:	4803      	ldr	r0, [pc, #12]	@ (8006444 <LCD_WR_REG+0x38>)
 8006436:	f7ff ffcd 	bl	80063d4 <LL_GPIO_SetOutputPin>
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	42020800 	.word	0x42020800

08006448 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 8006452:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006456:	480a      	ldr	r0, [pc, #40]	@ (8006480 <LCD_WR_DATA+0x38>)
 8006458:	f7ff ffca 	bl	80063f0 <LL_GPIO_ResetOutputPin>
	 LCD_RS_SET;
 800645c:	2101      	movs	r1, #1
 800645e:	4808      	ldr	r0, [pc, #32]	@ (8006480 <LCD_WR_DATA+0x38>)
 8006460:	f7ff ffb8 	bl	80063d4 <LL_GPIO_SetOutputPin>
   SPI_WriteByte(data);
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ff28 	bl	80062bc <SPI_WriteByte>
   LCD_CS_SET;
 800646c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006470:	4803      	ldr	r0, [pc, #12]	@ (8006480 <LCD_WR_DATA+0x38>)
 8006472:	f7ff ffaf 	bl	80063d4 <LL_GPIO_SetOutputPin>
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	42020800 	.word	0x42020800

08006484 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{	
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	460a      	mov	r2, r1
 800648e:	71fb      	strb	r3, [r7, #7]
 8006490:	4613      	mov	r3, r2
 8006492:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff ffb8 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 800649c:	88bb      	ldrh	r3, [r7, #4]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ffd1 	bl	8006448 <LCD_WR_DATA>
}	   
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80064b4:	4b03      	ldr	r3, [pc, #12]	@ (80064c4 <LCD_WriteRAM_Prepare+0x14>)
 80064b6:	891b      	ldrh	r3, [r3, #8]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff ffa6 	bl	800640c <LCD_WR_REG>
}	 
 80064c0:	bf00      	nop
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20025e1c 	.word	0x20025e1c

080064c8 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 80064d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80064d6:	480a      	ldr	r0, [pc, #40]	@ (8006500 <Lcd_WriteData_16Bit+0x38>)
 80064d8:	f7ff ff8a 	bl	80063f0 <LL_GPIO_ResetOutputPin>
   LCD_RS_SET;  
 80064dc:	2101      	movs	r1, #1
 80064de:	4808      	ldr	r0, [pc, #32]	@ (8006500 <Lcd_WriteData_16Bit+0x38>)
 80064e0:	f7ff ff78 	bl	80063d4 <LL_GPIO_SetOutputPin>
//   SPI_WriteByte(Data>>8);
//	 SPI_WriteByte(Data);
	 SPI_WriteByte_16(Data);
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff ff18 	bl	800631c <SPI_WriteByte_16>
   LCD_CS_SET;
 80064ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80064f0:	4803      	ldr	r0, [pc, #12]	@ (8006500 <Lcd_WriteData_16Bit+0x38>)
 80064f2:	f7ff ff6f 	bl	80063d4 <LL_GPIO_SetOutputPin>
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	42020800 	.word	0x42020800

08006504 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	460a      	mov	r2, r1
 800650e:	80fb      	strh	r3, [r7, #6]
 8006510:	4613      	mov	r3, r2
 8006512:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 8006514:	88ba      	ldrh	r2, [r7, #4]
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f9c4 	bl	80068a8 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8006520:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <LCD_DrawPoint+0x30>)
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ffcf 	bl	80064c8 <Lcd_WriteData_16Bit>
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20025e2a 	.word	0x20025e2a

08006538 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8006542:	4b1d      	ldr	r3, [pc, #116]	@ (80065b8 <LCD_Clear+0x80>)
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	4b1b      	ldr	r3, [pc, #108]	@ (80065b8 <LCD_Clear+0x80>)
 800654c:	885b      	ldrh	r3, [r3, #2]
 800654e:	3b01      	subs	r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	2100      	movs	r1, #0
 8006554:	2000      	movs	r0, #0
 8006556:	f000 f953 	bl	8006800 <LCD_SetWindows>
	LCD_CS_CLR;
 800655a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800655e:	4817      	ldr	r0, [pc, #92]	@ (80065bc <LCD_Clear+0x84>)
 8006560:	f7ff ff46 	bl	80063f0 <LL_GPIO_ResetOutputPin>
	LCD_RS_SET;
 8006564:	2101      	movs	r1, #1
 8006566:	4815      	ldr	r0, [pc, #84]	@ (80065bc <LCD_Clear+0x84>)
 8006568:	f7ff ff34 	bl	80063d4 <LL_GPIO_SetOutputPin>
	for(i=0;i<lcddev.height;i++)
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e012      	b.n	8006598 <LCD_Clear+0x60>
	{
    for(m=0;m<lcddev.width;m++)
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	e006      	b.n	8006586 <LCD_Clear+0x4e>
    {	
			Lcd_WriteData_16Bit(Color);
 8006578:	88fb      	ldrh	r3, [r7, #6]
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff ffa4 	bl	80064c8 <Lcd_WriteData_16Bit>
    for(m=0;m<lcddev.width;m++)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	3301      	adds	r3, #1
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <LCD_Clear+0x80>)
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4293      	cmp	r3, r2
 8006590:	d3f2      	bcc.n	8006578 <LCD_Clear+0x40>
	for(i=0;i<lcddev.height;i++)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3301      	adds	r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <LCD_Clear+0x80>)
 800659a:	885b      	ldrh	r3, [r3, #2]
 800659c:	461a      	mov	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d3e6      	bcc.n	8006572 <LCD_Clear+0x3a>
		}
	}
	 LCD_CS_SET;
 80065a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80065a8:	4804      	ldr	r0, [pc, #16]	@ (80065bc <LCD_Clear+0x84>)
 80065aa:	f7ff ff13 	bl	80063d4 <LL_GPIO_SetOutputPin>
} 
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20025e1c 	.word	0x20025e1c
 80065bc:	42020800 	.word	0x42020800

080065c0 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
	//SPI5_Init();		   			        //��ʼ��SPI
//	SPI_SetSpeed(SPI_BAUDRATEPRESCALER_2); //����Ϊ45Mʱ��,����ģʽ
	//LCD_GPIOInit();//LCD GPIO��ʼ��
 	//LCD_RESET(); //LCD ��λ
//*************2.8inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 80065c4:	20cf      	movs	r0, #207	@ 0xcf
 80065c6:	f7ff ff21 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80065ca:	2000      	movs	r0, #0
 80065cc:	f7ff ff3c 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0xC9); //C1 
 80065d0:	20c9      	movs	r0, #201	@ 0xc9
 80065d2:	f7ff ff39 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 80065d6:	2030      	movs	r0, #48	@ 0x30
 80065d8:	f7ff ff36 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 80065dc:	20ed      	movs	r0, #237	@ 0xed
 80065de:	f7ff ff15 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 80065e2:	2064      	movs	r0, #100	@ 0x64
 80065e4:	f7ff ff30 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 80065e8:	2003      	movs	r0, #3
 80065ea:	f7ff ff2d 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 80065ee:	2012      	movs	r0, #18
 80065f0:	f7ff ff2a 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 80065f4:	2081      	movs	r0, #129	@ 0x81
 80065f6:	f7ff ff27 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 80065fa:	20e8      	movs	r0, #232	@ 0xe8
 80065fc:	f7ff ff06 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8006600:	2085      	movs	r0, #133	@ 0x85
 8006602:	f7ff ff21 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 8006606:	2010      	movs	r0, #16
 8006608:	f7ff ff1e 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 800660c:	207a      	movs	r0, #122	@ 0x7a
 800660e:	f7ff ff1b 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 8006612:	20cb      	movs	r0, #203	@ 0xcb
 8006614:	f7ff fefa 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8006618:	2039      	movs	r0, #57	@ 0x39
 800661a:	f7ff ff15 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 800661e:	202c      	movs	r0, #44	@ 0x2c
 8006620:	f7ff ff12 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006624:	2000      	movs	r0, #0
 8006626:	f7ff ff0f 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 800662a:	2034      	movs	r0, #52	@ 0x34
 800662c:	f7ff ff0c 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8006630:	2002      	movs	r0, #2
 8006632:	f7ff ff09 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 8006636:	20f7      	movs	r0, #247	@ 0xf7
 8006638:	f7ff fee8 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 800663c:	2020      	movs	r0, #32
 800663e:	f7ff ff03 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 8006642:	20ea      	movs	r0, #234	@ 0xea
 8006644:	f7ff fee2 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8006648:	2000      	movs	r0, #0
 800664a:	f7ff fefd 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800664e:	2000      	movs	r0, #0
 8006650:	f7ff fefa 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 8006654:	20c0      	movs	r0, #192	@ 0xc0
 8006656:	f7ff fed9 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 800665a:	201b      	movs	r0, #27
 800665c:	f7ff fef4 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 8006660:	20c1      	movs	r0, #193	@ 0xc1
 8006662:	f7ff fed3 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x00);   //SAP[2:0];BT[3:0] 01 
 8006666:	2000      	movs	r0, #0
 8006668:	f7ff feee 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 800666c:	20c5      	movs	r0, #197	@ 0xc5
 800666e:	f7ff fecd 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8006672:	2030      	movs	r0, #48	@ 0x30
 8006674:	f7ff fee8 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8006678:	2030      	movs	r0, #48	@ 0x30
 800667a:	f7ff fee5 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 800667e:	20c7      	movs	r0, #199	@ 0xc7
 8006680:	f7ff fec4 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 8006684:	20b7      	movs	r0, #183	@ 0xb7
 8006686:	f7ff fedf 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 800668a:	2036      	movs	r0, #54	@ 0x36
 800668c:	f7ff febe 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 8006690:	2008      	movs	r0, #8
 8006692:	f7ff fed9 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 8006696:	203a      	movs	r0, #58	@ 0x3a
 8006698:	f7ff feb8 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 800669c:	2055      	movs	r0, #85	@ 0x55
 800669e:	f7ff fed3 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 80066a2:	20b1      	movs	r0, #177	@ 0xb1
 80066a4:	f7ff feb2 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 80066a8:	2000      	movs	r0, #0
 80066aa:	f7ff fecd 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 80066ae:	201a      	movs	r0, #26
 80066b0:	f7ff feca 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 80066b4:	20b6      	movs	r0, #182	@ 0xb6
 80066b6:	f7ff fea9 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80066ba:	200a      	movs	r0, #10
 80066bc:	f7ff fec4 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 80066c0:	20a2      	movs	r0, #162	@ 0xa2
 80066c2:	f7ff fec1 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80066c6:	20f2      	movs	r0, #242	@ 0xf2
 80066c8:	f7ff fea0 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80066cc:	2000      	movs	r0, #0
 80066ce:	f7ff febb 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 80066d2:	2026      	movs	r0, #38	@ 0x26
 80066d4:	f7ff fe9a 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 80066d8:	2001      	movs	r0, #1
 80066da:	f7ff feb5 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma 
 80066de:	20e0      	movs	r0, #224	@ 0xe0
 80066e0:	f7ff fe94 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 80066e4:	200f      	movs	r0, #15
 80066e6:	f7ff feaf 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A); 
 80066ea:	202a      	movs	r0, #42	@ 0x2a
 80066ec:	f7ff feac 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x28); 
 80066f0:	2028      	movs	r0, #40	@ 0x28
 80066f2:	f7ff fea9 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 80066f6:	2008      	movs	r0, #8
 80066f8:	f7ff fea6 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E); 
 80066fc:	200e      	movs	r0, #14
 80066fe:	f7ff fea3 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 8006702:	2008      	movs	r0, #8
 8006704:	f7ff fea0 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x54); 
 8006708:	2054      	movs	r0, #84	@ 0x54
 800670a:	f7ff fe9d 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9); 
 800670e:	20a9      	movs	r0, #169	@ 0xa9
 8006710:	f7ff fe9a 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x43); 
 8006714:	2043      	movs	r0, #67	@ 0x43
 8006716:	f7ff fe97 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A); 
 800671a:	200a      	movs	r0, #10
 800671c:	f7ff fe94 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8006720:	200f      	movs	r0, #15
 8006722:	f7ff fe91 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006726:	2000      	movs	r0, #0
 8006728:	f7ff fe8e 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800672c:	2000      	movs	r0, #0
 800672e:	f7ff fe8b 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006732:	2000      	movs	r0, #0
 8006734:	f7ff fe88 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 		 
 8006738:	2000      	movs	r0, #0
 800673a:	f7ff fe85 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma 
 800673e:	20e1      	movs	r0, #225	@ 0xe1
 8006740:	f7ff fe64 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8006744:	2000      	movs	r0, #0
 8006746:	f7ff fe7f 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x15); 
 800674a:	2015      	movs	r0, #21
 800674c:	f7ff fe7c 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x17); 
 8006750:	2017      	movs	r0, #23
 8006752:	f7ff fe79 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 8006756:	2007      	movs	r0, #7
 8006758:	f7ff fe76 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x11); 
 800675c:	2011      	movs	r0, #17
 800675e:	f7ff fe73 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x06); 
 8006762:	2006      	movs	r0, #6
 8006764:	f7ff fe70 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B); 
 8006768:	202b      	movs	r0, #43	@ 0x2b
 800676a:	f7ff fe6d 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x56); 
 800676e:	2056      	movs	r0, #86	@ 0x56
 8006770:	f7ff fe6a 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C); 
 8006774:	203c      	movs	r0, #60	@ 0x3c
 8006776:	f7ff fe67 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 800677a:	2005      	movs	r0, #5
 800677c:	f7ff fe64 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 8006780:	2010      	movs	r0, #16
 8006782:	f7ff fe61 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8006786:	200f      	movs	r0, #15
 8006788:	f7ff fe5e 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 800678c:	203f      	movs	r0, #63	@ 0x3f
 800678e:	f7ff fe5b 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 8006792:	203f      	movs	r0, #63	@ 0x3f
 8006794:	f7ff fe58 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8006798:	200f      	movs	r0, #15
 800679a:	f7ff fe55 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0x2B); 
 800679e:	202b      	movs	r0, #43	@ 0x2b
 80067a0:	f7ff fe34 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80067a4:	2000      	movs	r0, #0
 80067a6:	f7ff fe4f 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80067aa:	2000      	movs	r0, #0
 80067ac:	f7ff fe4c 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80067b0:	2001      	movs	r0, #1
 80067b2:	f7ff fe49 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80067b6:	203f      	movs	r0, #63	@ 0x3f
 80067b8:	f7ff fe46 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 80067bc:	202a      	movs	r0, #42	@ 0x2a
 80067be:	f7ff fe25 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80067c2:	2000      	movs	r0, #0
 80067c4:	f7ff fe40 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80067c8:	2000      	movs	r0, #0
 80067ca:	f7ff fe3d 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80067ce:	2000      	movs	r0, #0
 80067d0:	f7ff fe3a 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 80067d4:	20ef      	movs	r0, #239	@ 0xef
 80067d6:	f7ff fe37 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80067da:	2011      	movs	r0, #17
 80067dc:	f7ff fe16 	bl	800640c <LCD_WR_REG>
	delay_ms(120);
 80067e0:	2078      	movs	r0, #120	@ 0x78
 80067e2:	f7ff fdcb 	bl	800637c <delay_ms>
	LCD_WR_REG(0x29); //display on		
 80067e6:	2029      	movs	r0, #41	@ 0x29
 80067e8:	f7ff fe10 	bl	800640c <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 80067ec:	2000      	movs	r0, #0
 80067ee:	f000 f86d 	bl	80068cc <LCD_direction>
	//LCD_LED=1;//��������
	LCD_Clear(WHITE);//��ȫ����ɫ
 80067f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80067f6:	f7ff fe9f 	bl	8006538 <LCD_Clear>
}
 80067fa:	bf00      	nop
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8006800:	b590      	push	{r4, r7, lr}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	4611      	mov	r1, r2
 800680c:	461a      	mov	r2, r3
 800680e:	4623      	mov	r3, r4
 8006810:	80fb      	strh	r3, [r7, #6]
 8006812:	4603      	mov	r3, r0
 8006814:	80bb      	strh	r3, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	807b      	strh	r3, [r7, #2]
 800681a:	4613      	mov	r3, r2
 800681c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 800681e:	4b21      	ldr	r3, [pc, #132]	@ (80068a4 <LCD_SetWindows+0xa4>)
 8006820:	895b      	ldrh	r3, [r3, #10]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fdf1 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	b29b      	uxth	r3, r3
 8006830:	b2db      	uxtb	r3, r3
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff fe08 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fe03 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8006842:	887b      	ldrh	r3, [r7, #2]
 8006844:	0a1b      	lsrs	r3, r3, #8
 8006846:	b29b      	uxth	r3, r3
 8006848:	b2db      	uxtb	r3, r3
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fdfc 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8006850:	887b      	ldrh	r3, [r7, #2]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fdf7 	bl	8006448 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 800685a:	4b12      	ldr	r3, [pc, #72]	@ (80068a4 <LCD_SetWindows+0xa4>)
 800685c:	899b      	ldrh	r3, [r3, #12]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fdd3 	bl	800640c <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8006866:	88bb      	ldrh	r3, [r7, #4]
 8006868:	0a1b      	lsrs	r3, r3, #8
 800686a:	b29b      	uxth	r3, r3
 800686c:	b2db      	uxtb	r3, r3
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fdea 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 8006874:	88bb      	ldrh	r3, [r7, #4]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fde5 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 800687e:	883b      	ldrh	r3, [r7, #0]
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	b29b      	uxth	r3, r3
 8006884:	b2db      	uxtb	r3, r3
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fdde 	bl	8006448 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 800688c:	883b      	ldrh	r3, [r7, #0]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fdd9 	bl	8006448 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8006896:	f7ff fe0b 	bl	80064b0 <LCD_WriteRAM_Prepare>
}   
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd90      	pop	{r4, r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20025e1c 	.word	0x20025e1c

080068a8 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	460a      	mov	r2, r1
 80068b2:	80fb      	strh	r3, [r7, #6]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 80068b8:	88bb      	ldrh	r3, [r7, #4]
 80068ba:	88fa      	ldrh	r2, [r7, #6]
 80068bc:	88b9      	ldrh	r1, [r7, #4]
 80068be:	88f8      	ldrh	r0, [r7, #6]
 80068c0:	f7ff ff9e 	bl	8006800 <LCD_SetWindows>
} 
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 80068d6:	4b26      	ldr	r3, [pc, #152]	@ (8006970 <LCD_direction+0xa4>)
 80068d8:	222a      	movs	r2, #42	@ 0x2a
 80068da:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 80068dc:	4b24      	ldr	r3, [pc, #144]	@ (8006970 <LCD_direction+0xa4>)
 80068de:	222b      	movs	r2, #43	@ 0x2b
 80068e0:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 80068e2:	4b23      	ldr	r3, [pc, #140]	@ (8006970 <LCD_direction+0xa4>)
 80068e4:	222c      	movs	r2, #44	@ 0x2c
 80068e6:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d83a      	bhi.n	8006964 <LCD_direction+0x98>
 80068ee:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <LCD_direction+0x28>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006905 	.word	0x08006905
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006935 	.word	0x08006935
 8006900:	0800694d 	.word	0x0800694d
		case 0:						 	 		
			lcddev.width=LCD_W;
 8006904:	4b1a      	ldr	r3, [pc, #104]	@ (8006970 <LCD_direction+0xa4>)
 8006906:	22f0      	movs	r2, #240	@ 0xf0
 8006908:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 800690a:	4b19      	ldr	r3, [pc, #100]	@ (8006970 <LCD_direction+0xa4>)
 800690c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8006910:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8006912:	2108      	movs	r1, #8
 8006914:	2036      	movs	r0, #54	@ 0x36
 8006916:	f7ff fdb5 	bl	8006484 <LCD_WriteReg>
		break;
 800691a:	e024      	b.n	8006966 <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 800691c:	4b14      	ldr	r3, [pc, #80]	@ (8006970 <LCD_direction+0xa4>)
 800691e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8006922:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8006924:	4b12      	ldr	r3, [pc, #72]	@ (8006970 <LCD_direction+0xa4>)
 8006926:	22f0      	movs	r2, #240	@ 0xf0
 8006928:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 800692a:	2168      	movs	r1, #104	@ 0x68
 800692c:	2036      	movs	r0, #54	@ 0x36
 800692e:	f7ff fda9 	bl	8006484 <LCD_WriteReg>
		break;
 8006932:	e018      	b.n	8006966 <LCD_direction+0x9a>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8006934:	4b0e      	ldr	r3, [pc, #56]	@ (8006970 <LCD_direction+0xa4>)
 8006936:	22f0      	movs	r2, #240	@ 0xf0
 8006938:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 800693a:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <LCD_direction+0xa4>)
 800693c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8006940:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8006942:	21c8      	movs	r1, #200	@ 0xc8
 8006944:	2036      	movs	r0, #54	@ 0x36
 8006946:	f7ff fd9d 	bl	8006484 <LCD_WriteReg>
		break;
 800694a:	e00c      	b.n	8006966 <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 800694c:	4b08      	ldr	r3, [pc, #32]	@ (8006970 <LCD_direction+0xa4>)
 800694e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8006952:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8006954:	4b06      	ldr	r3, [pc, #24]	@ (8006970 <LCD_direction+0xa4>)
 8006956:	22f0      	movs	r2, #240	@ 0xf0
 8006958:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 800695a:	21a8      	movs	r1, #168	@ 0xa8
 800695c:	2036      	movs	r0, #54	@ 0x36
 800695e:	f7ff fd91 	bl	8006484 <LCD_WriteReg>
		break;	
 8006962:	e000      	b.n	8006966 <LCD_direction+0x9a>
		default:break;
 8006964:	bf00      	nop
	}		
}	 
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20025e1c 	.word	0x20025e1c

08006974 <LL_GPIO_IsInputPinSet>:
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	4013      	ands	r3, r2
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d101      	bne.n	8006990 <LL_GPIO_IsInputPinSet+0x1c>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <LL_GPIO_IsInputPinSet+0x1e>
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <LL_GPIO_SetOutputPin>:
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	619a      	str	r2, [r3, #24]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <LL_GPIO_ResetOutputPin>:
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <LL_SPI_Enable>:
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	601a      	str	r2, [r3, #0]
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <LL_SPI_Disable>:
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f023 0201 	bic.w	r2, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <LL_SPI_StartMasterTransfer>:
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <LL_SPI_SetDataWidth>:
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f023 021f 	bic.w	r2, r3, #31
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <LL_SPI_IsActiveFlag_RXP>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <LL_SPI_IsActiveFlag_RXP+0x18>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <LL_SPI_IsActiveFlag_RXP+0x1a>
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <LL_SPI_IsActiveFlag_TXP>:
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d101      	bne.n	8006a9a <LL_SPI_IsActiveFlag_TXP+0x18>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <LL_SPI_IsActiveFlag_TXP+0x1a>
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <LL_SPI_IsActiveFlag_TXC>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006abc:	d101      	bne.n	8006ac2 <LL_SPI_IsActiveFlag_TXC+0x1a>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <LL_SPI_IsActiveFlag_TXC+0x1c>
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <LL_SPI_ClearFlag_EOT>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->IFCR, SPI_IFCR_EOTC);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	f043 0208 	orr.w	r2, r3, #8
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	619a      	str	r2, [r3, #24]
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <LL_SPI_ReceiveData8>:
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3330      	adds	r3, #48	@ 0x30
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b2db      	uxtb	r3, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_SPI_TransmitData8>:
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3320      	adds	r3, #32
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	701a      	strb	r2, [r3, #0]
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <delay_nus>:
Matrix matrix ;
Coordinate display ;
Matrix Matrix_Default;
//--------------------------------------------------------------------------------delay
static void delay_nus(int cnt)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	int i,us;
	for(i = 0;i<cnt;i++)
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e00a      	b.n	8006b50 <delay_nus+0x24>
	{
		us = 40;
 8006b3a:	2328      	movs	r3, #40	@ 0x28
 8006b3c:	60bb      	str	r3, [r7, #8]
		while (us--)     /* delay	*/
 8006b3e:	bf00      	nop
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	1e5a      	subs	r2, r3, #1
 8006b44:	60ba      	str	r2, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1fa      	bne.n	8006b40 <delay_nus+0x14>
	for(i = 0;i<cnt;i++)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	dbf0      	blt.n	8006b3a <delay_nus+0xe>
		{
		}
	}
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <xpt2046_init>:
 //----------------------------------------------------------------------------XPT2046 SPI initialization
void xpt2046_init(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
//	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
//	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
//	SPI_InitStructure.SPI_CRCPolynomial = 7;
//	SPI_Init(SPI2, &SPI_InitStructure);
//	SPI_Cmd(SPI2, ENABLE);
	Matrix_Default.An = 52;
 8006b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba4 <xpt2046_init+0x3c>)
 8006b6e:	2234      	movs	r2, #52	@ 0x34
 8006b70:	601a      	str	r2, [r3, #0]
	Matrix_Default.Bn = 4360;
 8006b72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba4 <xpt2046_init+0x3c>)
 8006b74:	f241 1208 	movw	r2, #4360	@ 0x1108
 8006b78:	605a      	str	r2, [r3, #4]
	Matrix_Default.Cn = -979832;
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba4 <xpt2046_init+0x3c>)
 8006b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba8 <xpt2046_init+0x40>)
 8006b7e:	609a      	str	r2, [r3, #8]
	Matrix_Default.Dn = -5923;
 8006b80:	4b08      	ldr	r3, [pc, #32]	@ (8006ba4 <xpt2046_init+0x3c>)
 8006b82:	4a0a      	ldr	r2, [pc, #40]	@ (8006bac <xpt2046_init+0x44>)
 8006b84:	60da      	str	r2, [r3, #12]
	Matrix_Default.En = 5;
 8006b86:	4b07      	ldr	r3, [pc, #28]	@ (8006ba4 <xpt2046_init+0x3c>)
 8006b88:	2205      	movs	r2, #5
 8006b8a:	611a      	str	r2, [r3, #16]
	Matrix_Default.Fn = 23070954;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ba4 <xpt2046_init+0x3c>)
 8006b8e:	4a08      	ldr	r2, [pc, #32]	@ (8006bb0 <xpt2046_init+0x48>)
 8006b90:	615a      	str	r2, [r3, #20]
	Matrix_Default.Divider = 65536;
 8006b92:	4b04      	ldr	r3, [pc, #16]	@ (8006ba4 <xpt2046_init+0x3c>)
 8006b94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006b98:	619a      	str	r2, [r3, #24]
}
 8006b9a:	bf00      	nop
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	20025e50 	.word	0x20025e50
 8006ba8:	fff10c88 	.word	0xfff10c88
 8006bac:	ffffe8dd 	.word	0xffffe8dd
 8006bb0:	016008ea 	.word	0x016008ea

08006bb4 <getDisplayPoint>:
//------------------------------------------------------------------------------delay function
int getDisplayPoint(Coordinate * displayPtr, Coordinate * screenPtr, Matrix * matrixPtr )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
	/* Operation order is important since we are doing integer math. 
	   Make sure you add all terms together before dividing, so that 
	   the remainder is not rounded off prematurely. */
	if(screenPtr == 0) {return -1;}
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <getDisplayPoint+0x18>
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	e033      	b.n	8006c34 <getDisplayPoint+0x80>
  if( matrixPtr->Divider != 0 )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d02d      	beq.n	8006c30 <getDisplayPoint+0x7c>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	fb03 f202 	mul.w	r2, r3, r2
                      (matrixPtr->Bn * screenPtr->y) + 
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	6849      	ldr	r1, [r1, #4]
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8006bec:	441a      	add	r2, r3
                       matrixPtr->Cn 
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
                      (matrixPtr->Bn * screenPtr->y) + 
 8006bf2:	441a      	add	r2, r3
                    ) / matrixPtr->Divider ;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	fb92 f2f3 	sdiv	r2, r2, r3
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]
	/* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	fb03 f202 	mul.w	r2, r3, r2
                      (matrixPtr->En * screenPtr->y) + 
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	6849      	ldr	r1, [r1, #4]
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8006c18:	441a      	add	r2, r3
                       matrixPtr->Fn 
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
                      (matrixPtr->En * screenPtr->y) + 
 8006c1e:	441a      	add	r2, r3
                    ) / matrixPtr->Divider ;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	fb92 f2f3 	sdiv	r2, r2, r3
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    return -1;
  }
  return 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e001      	b.n	8006c34 <getDisplayPoint+0x80>
    return -1;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
} 
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <WR_CMD>:
	GUI_DrawPoint(x+1,y+1,color);
	GUI_DrawPoint(x+1,y,color);
}
//------------------------------------------------------------------------SPI bus transmit and receive data
unsigned char WR_CMD (unsigned char cmd)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	71fb      	strb	r3, [r7, #7]
	unsigned char Ret = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]
//	/* Wait for SPI data reception */
//	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
//	/* Read SPI received data */
//	return SPI_I2S_ReceiveData(SPI2);

	LL_SPI_SetDataWidth(SPI6, LL_SPI_DATAWIDTH_8BIT);
 8006c4e:	2107      	movs	r1, #7
 8006c50:	4819      	ldr	r0, [pc, #100]	@ (8006cb8 <WR_CMD+0x78>)
 8006c52:	f7ff fef0 	bl	8006a36 <LL_SPI_SetDataWidth>
	LL_SPI_Enable(SPI6);
 8006c56:	4818      	ldr	r0, [pc, #96]	@ (8006cb8 <WR_CMD+0x78>)
 8006c58:	f7ff febd 	bl	80069d6 <LL_SPI_Enable>
	if(LL_SPI_IsActiveFlag_TXP(SPI6) == 1)
 8006c5c:	4816      	ldr	r0, [pc, #88]	@ (8006cb8 <WR_CMD+0x78>)
 8006c5e:	f7ff ff10 	bl	8006a82 <LL_SPI_IsActiveFlag_TXP>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d104      	bne.n	8006c72 <WR_CMD+0x32>
	{
		LL_SPI_TransmitData8(SPI6, cmd);
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4812      	ldr	r0, [pc, #72]	@ (8006cb8 <WR_CMD+0x78>)
 8006c6e:	f7ff ff4d 	bl	8006b0c <LL_SPI_TransmitData8>
	}
	LL_SPI_StartMasterTransfer(SPI6);
 8006c72:	4811      	ldr	r0, [pc, #68]	@ (8006cb8 <WR_CMD+0x78>)
 8006c74:	f7ff fecf 	bl	8006a16 <LL_SPI_StartMasterTransfer>
	while( !( /*LL_SPI_IsActiveFlag_EOT(SPI6) &&*/ LL_SPI_IsActiveFlag_TXC(SPI6) ) )
 8006c78:	e000      	b.n	8006c7c <WR_CMD+0x3c>
	{
		__NOP();
 8006c7a:	bf00      	nop
	while( !( /*LL_SPI_IsActiveFlag_EOT(SPI6) &&*/ LL_SPI_IsActiveFlag_TXC(SPI6) ) )
 8006c7c:	480e      	ldr	r0, [pc, #56]	@ (8006cb8 <WR_CMD+0x78>)
 8006c7e:	f7ff ff13 	bl	8006aa8 <LL_SPI_IsActiveFlag_TXC>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f8      	beq.n	8006c7a <WR_CMD+0x3a>
	}
	LL_SPI_ClearFlag_EOT(SPI6);
 8006c88:	480b      	ldr	r0, [pc, #44]	@ (8006cb8 <WR_CMD+0x78>)
 8006c8a:	f7ff ff21 	bl	8006ad0 <LL_SPI_ClearFlag_EOT>
	while( !( LL_SPI_IsActiveFlag_RXP(SPI6) ) )
 8006c8e:	e000      	b.n	8006c92 <WR_CMD+0x52>
	{
		__NOP();
 8006c90:	bf00      	nop
	while( !( LL_SPI_IsActiveFlag_RXP(SPI6) ) )
 8006c92:	4809      	ldr	r0, [pc, #36]	@ (8006cb8 <WR_CMD+0x78>)
 8006c94:	f7ff fee2 	bl	8006a5c <LL_SPI_IsActiveFlag_RXP>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f8      	beq.n	8006c90 <WR_CMD+0x50>
	}
	Ret = LL_SPI_ReceiveData8(SPI6);
 8006c9e:	4806      	ldr	r0, [pc, #24]	@ (8006cb8 <WR_CMD+0x78>)
 8006ca0:	f7ff ff26 	bl	8006af0 <LL_SPI_ReceiveData8>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]
	LL_SPI_Disable(SPI6);
 8006ca8:	4803      	ldr	r0, [pc, #12]	@ (8006cb8 <WR_CMD+0x78>)
 8006caa:	f7ff fea4 	bl	80069f6 <LL_SPI_Disable>
	return Ret;
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
} 
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40015000 	.word	0x40015000

08006cbc <RD_AD>:
//-------------------------------------------------------------------------read xpt2046 adc value
unsigned short RD_AD(void)
{ 
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
	unsigned short buf,temp;
	//int buf,temp;
	buf = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	80fb      	strh	r3, [r7, #6]
	temp = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	80bb      	strh	r3, [r7, #4]

	temp = WR_CMD(0x00);
 8006cca:	2000      	movs	r0, #0
 8006ccc:	f7ff ffb8 	bl	8006c40 <WR_CMD>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	80bb      	strh	r3, [r7, #4]
	buf = temp << 8; 
 8006cd4:	88bb      	ldrh	r3, [r7, #4]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	80fb      	strh	r3, [r7, #6]
	delay_nus(1); 
 8006cda:	2001      	movs	r0, #1
 8006cdc:	f7ff ff26 	bl	8006b2c <delay_nus>
	temp = WR_CMD(0x00);
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	f7ff ffad 	bl	8006c40 <WR_CMD>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	80bb      	strh	r3, [r7, #4]
	buf |= temp; 
 8006cea:	88fa      	ldrh	r2, [r7, #6]
 8006cec:	88bb      	ldrh	r3, [r7, #4]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
	buf >>= 4;
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	091b      	lsrs	r3, r3, #4
 8006cf6:	80fb      	strh	r3, [r7, #6]
	buf &= 0xfff;
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cfe:	80fb      	strh	r3, [r7, #6]
	return buf;
 8006d00:	88fb      	ldrh	r3, [r7, #6]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <Read_X>:
//------------------------------------------------------------------------read xpt2046 channel X+ adc value
unsigned short Read_X(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
	unsigned short temp = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	80fb      	strh	r3, [r7, #6]
	//int temp = 0;
	TP_CS(0); 
 8006d16:	2102      	movs	r1, #2
 8006d18:	480c      	ldr	r0, [pc, #48]	@ (8006d4c <Read_X+0x40>)
 8006d1a:	f7ff fe4e 	bl	80069ba <LL_GPIO_ResetOutputPin>
	delay_nus(1); 
 8006d1e:	2001      	movs	r0, #1
 8006d20:	f7ff ff04 	bl	8006b2c <delay_nus>
	WR_CMD(CHX); 
 8006d24:	2090      	movs	r0, #144	@ 0x90
 8006d26:	f7ff ff8b 	bl	8006c40 <WR_CMD>
	delay_nus(1); 
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	f7ff fefe 	bl	8006b2c <delay_nus>
	temp = RD_AD(); 
 8006d30:	f7ff ffc4 	bl	8006cbc <RD_AD>
 8006d34:	4603      	mov	r3, r0
 8006d36:	80fb      	strh	r3, [r7, #6]
	TP_CS(1); 
 8006d38:	2102      	movs	r1, #2
 8006d3a:	4804      	ldr	r0, [pc, #16]	@ (8006d4c <Read_X+0x40>)
 8006d3c:	f7ff fe2f 	bl	800699e <LL_GPIO_SetOutputPin>
	return temp;    
 8006d40:	88fb      	ldrh	r3, [r7, #6]
}  
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	42020800 	.word	0x42020800

08006d50 <Read_Y>:
//-----------------------------------------------------------------------read xpt2046 channel Y+ adc value
unsigned short Read_Y(void)
{  
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
	unsigned short temp = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	80fb      	strh	r3, [r7, #6]
	//int temp = 0;
	TP_CS(0);
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	480c      	ldr	r0, [pc, #48]	@ (8006d90 <Read_Y+0x40>)
 8006d5e:	f7ff fe2c 	bl	80069ba <LL_GPIO_ResetOutputPin>
	delay_nus(1);
 8006d62:	2001      	movs	r0, #1
 8006d64:	f7ff fee2 	bl	8006b2c <delay_nus>
	WR_CMD(CHY);
 8006d68:	20d0      	movs	r0, #208	@ 0xd0
 8006d6a:	f7ff ff69 	bl	8006c40 <WR_CMD>
	delay_nus(1);
 8006d6e:	2001      	movs	r0, #1
 8006d70:	f7ff fedc 	bl	8006b2c <delay_nus>
	temp = RD_AD();
 8006d74:	f7ff ffa2 	bl	8006cbc <RD_AD>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	80fb      	strh	r3, [r7, #6]
	TP_CS(1); 
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	4804      	ldr	r0, [pc, #16]	@ (8006d90 <Read_Y+0x40>)
 8006d80:	f7ff fe0d 	bl	800699e <LL_GPIO_SetOutputPin>
	return temp;
 8006d84:	88fb      	ldrh	r3, [r7, #6]
} 
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	42020800 	.word	0x42020800

08006d94 <TP_GetAdXY>:
//----------------------------------------------------------------read xpt2046 channel X+ channel Y+ adc value
void TP_GetAdXY(int *x,int *y)  
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
	int adx,ady;
	adx = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
	ady = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60bb      	str	r3, [r7, #8]
	adx = Read_X(); 
 8006da6:	f7ff ffb1 	bl	8006d0c <Read_X>
 8006daa:	4603      	mov	r3, r0
 8006dac:	60fb      	str	r3, [r7, #12]
	delay_nus(1); 
 8006dae:	2001      	movs	r0, #1
 8006db0:	f7ff febc 	bl	8006b2c <delay_nus>
	ady = Read_Y(); 
 8006db4:	f7ff ffcc 	bl	8006d50 <Read_Y>
 8006db8:	4603      	mov	r3, r0
 8006dba:	60bb      	str	r3, [r7, #8]
	*x = adx;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]
	*y = ady;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	601a      	str	r2, [r3, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <Read_Value>:
//-------------------------------------------get xpt2046 channel X+ channel Y+ adc filtering value, some interference values can be excluded
Coordinate *Read_Value(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b09e      	sub	sp, #120	@ 0x78
 8006dd4:	af00      	add	r7, sp, #0
	static Coordinate screen;
	Coordinate screen_fail;
	int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
	unsigned char count=0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	int buffer[2][9]={{0},{0}};  /* channel X+ Y+ for sampling buffer */
 8006ddc:	1d3b      	adds	r3, r7, #4
 8006dde:	2248      	movs	r2, #72	@ 0x48
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f006 fc57 	bl	800d696 <memset>
	TP_X[0] = 0; TP_Y[0] = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dec:	2300      	movs	r3, #0
 8006dee:	65bb      	str	r3, [r7, #88]	@ 0x58
	screen.x=0; screen.y=0;
 8006df0:	4b9a      	ldr	r3, [pc, #616]	@ (800705c <Read_Value+0x28c>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	4b99      	ldr	r3, [pc, #612]	@ (800705c <Read_Value+0x28c>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	605a      	str	r2, [r3, #4]
	screen_fail.x=65535; screen_fail.y=65535;
 8006dfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e06:	667b      	str	r3, [r7, #100]	@ 0x64
	do                           /* 9 sampling times */
	{
		TP_GetAdXY(TP_X,TP_Y);
 8006e08:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006e0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff ffbe 	bl	8006d94 <TP_GetAdXY>
		buffer[0][count]=TP_X[0];
 8006e18:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006e1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	3378      	adds	r3, #120	@ 0x78
 8006e22:	443b      	add	r3, r7
 8006e24:	f843 2c74 	str.w	r2, [r3, #-116]
		buffer[1][count]=TP_Y[0];
 8006e28:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006e2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e2e:	3309      	adds	r3, #9
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	3378      	adds	r3, #120	@ 0x78
 8006e34:	443b      	add	r3, r7
 8006e36:	f843 2c74 	str.w	r2, [r3, #-116]
		count++;
 8006e3a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006e3e:	3301      	adds	r3, #1
 8006e40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}
	while(!TP_INT_IN&& count<9);  /* TP_INT_IN interrupt pin for the touch screen, when the user clicks on the touch screen��
 8006e44:	2104      	movs	r1, #4
 8006e46:	4886      	ldr	r0, [pc, #536]	@ (8007060 <Read_Value+0x290>)
 8006e48:	f7ff fd94 	bl	8006974 <LL_GPIO_IsInputPinSet>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <Read_Value+0x8a>
 8006e52:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d9d6      	bls.n	8006e08 <Read_Value+0x38>
	                                 TP_INT_IN Low level */
//TP_GetAdXY(&TP_X[0],&TP_Y[0]);
//screen.x=0; screen.y=0;
//screen.x=TP_X[0]; screen.y=TP_Y[0];
	if(count==9)   /* sampled 9 times, then filtering some interference values can be excluded*/
 8006e5a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006e5e:	2b09      	cmp	r3, #9
 8006e60:	f040 80f6 	bne.w	8007050 <Read_Value+0x280>
		{
			/* average value of the 3 groups */
			temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	441a      	add	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	4a7d      	ldr	r2, [pc, #500]	@ (8007064 <Read_Value+0x294>)
 8006e70:	fb82 1203 	smull	r1, r2, r2, r3
 8006e74:	17db      	asrs	r3, r3, #31
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
			temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	441a      	add	r2, r3
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	4413      	add	r3, r2
 8006e84:	4a77      	ldr	r2, [pc, #476]	@ (8007064 <Read_Value+0x294>)
 8006e86:	fb82 1203 	smull	r1, r2, r2, r3
 8006e8a:	17db      	asrs	r3, r3, #31
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	653b      	str	r3, [r7, #80]	@ 0x50
			temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	441a      	add	r2, r3
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	4413      	add	r3, r2
 8006e9a:	4a72      	ldr	r2, [pc, #456]	@ (8007064 <Read_Value+0x294>)
 8006e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8006ea0:	17db      	asrs	r3, r3, #31
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	657b      	str	r3, [r7, #84]	@ 0x54
			/* D-value between the 3 groups */
			m0=temp[0]-temp[1];
 8006ea6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=temp[1]-temp[2];
 8006eae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=temp[2]-temp[0];
 8006eb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
			/* absolute value of D-value */
			m0=m0>0?m0:(-m0);
 8006ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bfb8      	it	lt
 8006ec4:	425b      	neglt	r3, r3
 8006ec6:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=m1>0?m1:(-m1);
 8006ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bfb8      	it	lt
 8006ece:	425b      	neglt	r3, r3
 8006ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=m2>0?m2:(-m2);
 8006ed2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfb8      	it	lt
 8006ed8:	425b      	neglt	r3, r3
 8006eda:	66bb      	str	r3, [r7, #104]	@ 0x68

			/* judging Whether the absolute value of D-value is more than threshold, if three absolute value of D-value is
			   more than threshold value, then determine the sampling point for the interference, ignore the sampling point,
			   the threshold value is setting to 2, in this example */
			if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8006edc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	dd07      	ble.n	8006ef2 <Read_Value+0x122>
 8006ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	dd04      	ble.n	8006ef2 <Read_Value+0x122>
 8006ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	dd01      	ble.n	8006ef2 <Read_Value+0x122>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e0af      	b.n	8007052 <Read_Value+0x282>
			/* calculate channel X+ average values,then assign them to screen */
			if(m0<m1)
 8006ef2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	da17      	bge.n	8006f2a <Read_Value+0x15a>
			{
				if(m2<m0)
 8006efa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006efc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006efe:	429a      	cmp	r2, r3
 8006f00:	da09      	bge.n	8006f16 <Read_Value+0x146>
				screen.x=(temp[0]+temp[2])/2;
 8006f02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f06:	4413      	add	r3, r2
 8006f08:	0fda      	lsrs	r2, r3, #31
 8006f0a:	4413      	add	r3, r2
 8006f0c:	105b      	asrs	r3, r3, #1
 8006f0e:	461a      	mov	r2, r3
 8006f10:	4b52      	ldr	r3, [pc, #328]	@ (800705c <Read_Value+0x28c>)
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e020      	b.n	8006f58 <Read_Value+0x188>
				else
				screen.x=(temp[0]+temp[1])/2;
 8006f16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f1a:	4413      	add	r3, r2
 8006f1c:	0fda      	lsrs	r2, r3, #31
 8006f1e:	4413      	add	r3, r2
 8006f20:	105b      	asrs	r3, r3, #1
 8006f22:	461a      	mov	r2, r3
 8006f24:	4b4d      	ldr	r3, [pc, #308]	@ (800705c <Read_Value+0x28c>)
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	e016      	b.n	8006f58 <Read_Value+0x188>
			}
			else if(m2<m1)
 8006f2a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	da09      	bge.n	8006f46 <Read_Value+0x176>
				screen.x=(temp[0]+temp[2])/2;
 8006f32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f36:	4413      	add	r3, r2
 8006f38:	0fda      	lsrs	r2, r3, #31
 8006f3a:	4413      	add	r3, r2
 8006f3c:	105b      	asrs	r3, r3, #1
 8006f3e:	461a      	mov	r2, r3
 8006f40:	4b46      	ldr	r3, [pc, #280]	@ (800705c <Read_Value+0x28c>)
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e008      	b.n	8006f58 <Read_Value+0x188>
			else
				screen.x=(temp[1]+temp[2])/2;
 8006f46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f4a:	4413      	add	r3, r2
 8006f4c:	0fda      	lsrs	r2, r3, #31
 8006f4e:	4413      	add	r3, r2
 8006f50:	105b      	asrs	r3, r3, #1
 8006f52:	461a      	mov	r2, r3
 8006f54:	4b41      	ldr	r3, [pc, #260]	@ (800705c <Read_Value+0x28c>)
 8006f56:	601a      	str	r2, [r3, #0]

			/* same as above, this is channel Y+ */
			temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8006f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5c:	441a      	add	r2, r3
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	4413      	add	r3, r2
 8006f62:	4a40      	ldr	r2, [pc, #256]	@ (8007064 <Read_Value+0x294>)
 8006f64:	fb82 1203 	smull	r1, r2, r2, r3
 8006f68:	17db      	asrs	r3, r3, #31
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
			temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8006f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	441a      	add	r2, r3
 8006f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f76:	4413      	add	r3, r2
 8006f78:	4a3a      	ldr	r2, [pc, #232]	@ (8007064 <Read_Value+0x294>)
 8006f7a:	fb82 1203 	smull	r1, r2, r2, r3
 8006f7e:	17db      	asrs	r3, r3, #31
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	653b      	str	r3, [r7, #80]	@ 0x50
			temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 8006f84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f88:	441a      	add	r2, r3
 8006f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f8c:	4413      	add	r3, r2
 8006f8e:	4a35      	ldr	r2, [pc, #212]	@ (8007064 <Read_Value+0x294>)
 8006f90:	fb82 1203 	smull	r1, r2, r2, r3
 8006f94:	17db      	asrs	r3, r3, #31
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	657b      	str	r3, [r7, #84]	@ 0x54
			m0=temp[0]-temp[1];
 8006f9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=temp[1]-temp[2];
 8006fa2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=temp[2]-temp[0];
 8006faa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
			m0=m0>0?m0:(-m0);
 8006fb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfb8      	it	lt
 8006fb8:	425b      	neglt	r3, r3
 8006fba:	673b      	str	r3, [r7, #112]	@ 0x70
			m1=m1>0?m1:(-m1);
 8006fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bfb8      	it	lt
 8006fc2:	425b      	neglt	r3, r3
 8006fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			m2=m2>0?m2:(-m2);
 8006fc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bfb8      	it	lt
 8006fcc:	425b      	neglt	r3, r3
 8006fce:	66bb      	str	r3, [r7, #104]	@ 0x68
			if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 8006fd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	dd07      	ble.n	8006fe6 <Read_Value+0x216>
 8006fd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	dd04      	ble.n	8006fe6 <Read_Value+0x216>
 8006fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	dd01      	ble.n	8006fe6 <Read_Value+0x216>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e035      	b.n	8007052 <Read_Value+0x282>

			if(m0<m1)
 8006fe6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fea:	429a      	cmp	r2, r3
 8006fec:	da17      	bge.n	800701e <Read_Value+0x24e>
			{
				if(m2<m0)
 8006fee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006ff0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	da09      	bge.n	800700a <Read_Value+0x23a>
					screen.y=(temp[0]+temp[2])/2;
 8006ff6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ffa:	4413      	add	r3, r2
 8006ffc:	0fda      	lsrs	r2, r3, #31
 8006ffe:	4413      	add	r3, r2
 8007000:	105b      	asrs	r3, r3, #1
 8007002:	461a      	mov	r2, r3
 8007004:	4b15      	ldr	r3, [pc, #84]	@ (800705c <Read_Value+0x28c>)
 8007006:	605a      	str	r2, [r3, #4]
 8007008:	e020      	b.n	800704c <Read_Value+0x27c>
				else
					screen.y=(temp[0]+temp[1])/2;
 800700a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800700c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800700e:	4413      	add	r3, r2
 8007010:	0fda      	lsrs	r2, r3, #31
 8007012:	4413      	add	r3, r2
 8007014:	105b      	asrs	r3, r3, #1
 8007016:	461a      	mov	r2, r3
 8007018:	4b10      	ldr	r3, [pc, #64]	@ (800705c <Read_Value+0x28c>)
 800701a:	605a      	str	r2, [r3, #4]
 800701c:	e016      	b.n	800704c <Read_Value+0x27c>
			}
			else if(m2<m1)
 800701e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007022:	429a      	cmp	r2, r3
 8007024:	da09      	bge.n	800703a <Read_Value+0x26a>
				screen.y=(temp[0]+temp[2])/2;
 8007026:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800702a:	4413      	add	r3, r2
 800702c:	0fda      	lsrs	r2, r3, #31
 800702e:	4413      	add	r3, r2
 8007030:	105b      	asrs	r3, r3, #1
 8007032:	461a      	mov	r2, r3
 8007034:	4b09      	ldr	r3, [pc, #36]	@ (800705c <Read_Value+0x28c>)
 8007036:	605a      	str	r2, [r3, #4]
 8007038:	e008      	b.n	800704c <Read_Value+0x27c>
			else
				screen.y=(temp[1]+temp[2])/2;
 800703a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800703c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800703e:	4413      	add	r3, r2
 8007040:	0fda      	lsrs	r2, r3, #31
 8007042:	4413      	add	r3, r2
 8007044:	105b      	asrs	r3, r3, #1
 8007046:	461a      	mov	r2, r3
 8007048:	4b04      	ldr	r3, [pc, #16]	@ (800705c <Read_Value+0x28c>)
 800704a:	605a      	str	r2, [r3, #4]

			return &screen;
 800704c:	4b03      	ldr	r3, [pc, #12]	@ (800705c <Read_Value+0x28c>)
 800704e:	e000      	b.n	8007052 <Read_Value+0x282>
		}
		return 0;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3778      	adds	r7, #120	@ 0x78
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20025e6c 	.word	0x20025e6c
 8007060:	42020800 	.word	0x42020800
 8007064:	55555556 	.word	0x55555556

08007068 <TS_Touched>:
//-------------------------------------------------------------------------------------------
uint8_t TS_Touched(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
//	return 1;
	return !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2);
 800706c:	2104      	movs	r1, #4
 800706e:	4805      	ldr	r0, [pc, #20]	@ (8007084 <TS_Touched+0x1c>)
 8007070:	f7ff fc80 	bl	8006974 <LL_GPIO_IsInputPinSet>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	bf0c      	ite	eq
 800707a:	2301      	moveq	r3, #1
 800707c:	2300      	movne	r3, #0
 800707e:	b2db      	uxtb	r3, r3
}
 8007080:	4618      	mov	r0, r3
 8007082:	bd80      	pop	{r7, pc}
 8007084:	42020800 	.word	0x42020800

08007088 <LL_DMA_SetLinkedListBaseAddr>:
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CLBAR, DMA_CLBAR_LBA,
 8007098:	4a0c      	ldr	r2, [pc, #48]	@ (80070cc <LL_DMA_SetLinkedListBaseAddr+0x44>)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	4413      	add	r3, r2
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0c1b      	lsrs	r3, r3, #16
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	4807      	ldr	r0, [pc, #28]	@ (80070cc <LL_DMA_SetLinkedListBaseAddr+0x44>)
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80070b6:	6979      	ldr	r1, [r7, #20]
 80070b8:	4401      	add	r1, r0
 80070ba:	4313      	orrs	r3, r2
 80070bc:	600b      	str	r3, [r1, #0]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	080112cc 	.word	0x080112cc

080070d0 <LL_DMA_ConfigControl>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR,
 80070e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007114 <LL_DMA_ConfigControl+0x44>)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4413      	add	r3, r2
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	f423 0243 	bic.w	r2, r3, #12779520	@ 0xc30000
 80070f2:	4908      	ldr	r1, [pc, #32]	@ (8007114 <LL_DMA_ConfigControl+0x44>)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	440b      	add	r3, r1
 80070fe:	4619      	mov	r1, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4313      	orrs	r3, r2
 8007104:	614b      	str	r3, [r1, #20]
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	080112cc 	.word	0x080112cc

08007118 <LL_DMA_ConfigTransfer>:
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR1,
 8007128:	4a0c      	ldr	r2, [pc, #48]	@ (800715c <LL_DMA_ConfigTransfer+0x44>)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	4413      	add	r3, r2
 8007134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007136:	4b0a      	ldr	r3, [pc, #40]	@ (8007160 <LL_DMA_ConfigTransfer+0x48>)
 8007138:	4013      	ands	r3, r2
 800713a:	4908      	ldr	r1, [pc, #32]	@ (800715c <LL_DMA_ConfigTransfer+0x44>)
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	440a      	add	r2, r1
 8007146:	4611      	mov	r1, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4313      	orrs	r3, r2
 800714c:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	080112cc 	.word	0x080112cc
 8007160:	b3f487f4 	.word	0xb3f487f4

08007164 <LL_DMA_ConfigBurstLength>:
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR1,
 8007176:	4a12      	ldr	r2, [pc, #72]	@ (80071c0 <LL_DMA_ConfigBurstLength+0x5c>)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	4413      	add	r3, r2
 8007182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007184:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8007188:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	3a01      	subs	r2, #1
 8007190:	0112      	lsls	r2, r2, #4
 8007192:	f402 717c 	and.w	r1, r2, #1008	@ 0x3f0
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	3a01      	subs	r2, #1
 800719a:	0512      	lsls	r2, r2, #20
 800719c:	f002 727c 	and.w	r2, r2, #66060288	@ 0x3f00000
 80071a0:	430a      	orrs	r2, r1
 80071a2:	4807      	ldr	r0, [pc, #28]	@ (80071c0 <LL_DMA_ConfigBurstLength+0x5c>)
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80071aa:	6979      	ldr	r1, [r7, #20]
 80071ac:	4401      	add	r1, r0
 80071ae:	4313      	orrs	r3, r2
 80071b0:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80071b2:	bf00      	nop
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	080112cc 	.word	0x080112cc

080071c4 <LL_DMA_ConfigChannelTransfer>:
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2,
 80071d4:	4a0d      	ldr	r2, [pc, #52]	@ (800720c <LL_DMA_ConfigChannelTransfer+0x48>)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4413      	add	r3, r2
 80071e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e2:	f023 4343 	bic.w	r3, r3, #3271557120	@ 0xc3000000
 80071e6:	f423 435e 	bic.w	r3, r3, #56832	@ 0xde00
 80071ea:	4908      	ldr	r1, [pc, #32]	@ (800720c <LL_DMA_ConfigChannelTransfer+0x48>)
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	440a      	add	r2, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	644b      	str	r3, [r1, #68]	@ 0x44
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	080112cc 	.word	0x080112cc

08007210 <LL_DMA_SetTriggerMode>:
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_TRIGM,
 8007220:	4a0c      	ldr	r2, [pc, #48]	@ (8007254 <LL_DMA_SetTriggerMode+0x44>)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007232:	4908      	ldr	r1, [pc, #32]	@ (8007254 <LL_DMA_SetTriggerMode+0x44>)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	440b      	add	r3, r1
 800723e:	4619      	mov	r1, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4313      	orrs	r3, r2
 8007244:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	080112cc 	.word	0x080112cc

08007258 <LL_DMA_SetPeriphRequest>:
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_REQSEL, Request);
 8007268:	4a0c      	ldr	r2, [pc, #48]	@ (800729c <LL_DMA_SetPeriphRequest+0x44>)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007276:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800727a:	4908      	ldr	r1, [pc, #32]	@ (800729c <LL_DMA_SetPeriphRequest+0x44>)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	440b      	add	r3, r1
 8007286:	4619      	mov	r1, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4313      	orrs	r3, r2
 800728c:	644b      	str	r3, [r1, #68]	@ 0x44
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	080112cc 	.word	0x080112cc

080072a0 <LL_DMA_SetHWTrigger>:
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR2, DMA_CTR2_TRIGSEL,
 80072b0:	4a0d      	ldr	r2, [pc, #52]	@ (80072e8 <LL_DMA_SetHWTrigger+0x48>)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4413      	add	r3, r2
 80072bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80072ca:	4807      	ldr	r0, [pc, #28]	@ (80072e8 <LL_DMA_SetHWTrigger+0x48>)
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80072d2:	6979      	ldr	r1, [r7, #20]
 80072d4:	4401      	add	r1, r0
 80072d6:	4313      	orrs	r3, r2
 80072d8:	644b      	str	r3, [r1, #68]	@ 0x44
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	080112cc 	.word	0x080112cc

080072ec <LL_DMA_ConfigBlkRptAddrUpdate>:
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1,
 80072fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007330 <LL_DMA_ConfigBlkRptAddrUpdate+0x44>)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	4413      	add	r3, r2
 8007308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800730a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800730e:	4908      	ldr	r1, [pc, #32]	@ (8007330 <LL_DMA_ConfigBlkRptAddrUpdate+0x44>)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	440b      	add	r3, r1
 800731a:	4619      	mov	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4313      	orrs	r3, r2
 8007320:	648b      	str	r3, [r1, #72]	@ 0x48
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	080112cc 	.word	0x080112cc

08007334 <LL_DMA_SetBlkRptCount>:
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BRC,
 8007344:	4a0e      	ldr	r2, [pc, #56]	@ (8007380 <LL_DMA_SetBlkRptCount+0x4c>)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	4413      	add	r3, r2
 8007350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007352:	f023 63ff 	bic.w	r3, r3, #133693440	@ 0x7f80000
 8007356:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	0411      	lsls	r1, r2, #16
 800735e:	4a09      	ldr	r2, [pc, #36]	@ (8007384 <LL_DMA_SetBlkRptCount+0x50>)
 8007360:	400a      	ands	r2, r1
 8007362:	4807      	ldr	r0, [pc, #28]	@ (8007380 <LL_DMA_SetBlkRptCount+0x4c>)
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800736a:	6979      	ldr	r1, [r7, #20]
 800736c:	4401      	add	r1, r0
 800736e:	4313      	orrs	r3, r2
 8007370:	648b      	str	r3, [r1, #72]	@ 0x48
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	080112cc 	.word	0x080112cc
 8007384:	07ff0000 	.word	0x07ff0000

08007388 <LL_DMA_SetBlkDataLength>:
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR1, DMA_CBR1_BNDT,
 8007398:	4a0c      	ldr	r2, [pc, #48]	@ (80073cc <LL_DMA_SetBlkDataLength+0x44>)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	4413      	add	r3, r2
 80073a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073a6:	0c1b      	lsrs	r3, r3, #16
 80073a8:	041b      	lsls	r3, r3, #16
 80073aa:	4908      	ldr	r1, [pc, #32]	@ (80073cc <LL_DMA_SetBlkDataLength+0x44>)
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	440a      	add	r2, r1
 80073b6:	4611      	mov	r1, r2
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	648b      	str	r3, [r1, #72]	@ 0x48
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	080112cc 	.word	0x080112cc

080073d0 <LL_DMA_ConfigAddresses>:
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CSAR, SrcAddress);
 80073e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007414 <LL_DMA_ConfigAddresses+0x44>)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 80073f4:	4a07      	ldr	r2, [pc, #28]	@ (8007414 <LL_DMA_ConfigAddresses+0x44>)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	4413      	add	r3, r2
 8007400:	461a      	mov	r2, r3
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	080112cc 	.word	0x080112cc

08007418 <LL_DMA_ConfigAddrUpdateValue>:
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CTR3,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	0419      	lsls	r1, r3, #16
 8007434:	4b07      	ldr	r3, [pc, #28]	@ (8007454 <LL_DMA_ConfigAddrUpdateValue+0x3c>)
 8007436:	400b      	ands	r3, r1
 8007438:	4807      	ldr	r0, [pc, #28]	@ (8007458 <LL_DMA_ConfigAddrUpdateValue+0x40>)
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007440:	6979      	ldr	r1, [r7, #20]
 8007442:	4401      	add	r1, r0
 8007444:	4313      	orrs	r3, r2
 8007446:	654b      	str	r3, [r1, #84]	@ 0x54
}
 8007448:	bf00      	nop
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	1fff0000 	.word	0x1fff0000
 8007458:	080112cc 	.word	0x080112cc

0800745c <LL_DMA_ConfigBlkRptAddrUpdateValue>:
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CBR2,
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	041a      	lsls	r2, r3, #16
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	b29b      	uxth	r3, r3
 8007476:	4807      	ldr	r0, [pc, #28]	@ (8007494 <LL_DMA_ConfigBlkRptAddrUpdateValue+0x38>)
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	4401      	add	r1, r0
 8007482:	4313      	orrs	r3, r2
 8007484:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	080112cc 	.word	0x080112cc

08007498 <LL_DMA_SetLinkedListAddrOffset>:
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CLLR, DMA_CLLR_LA,
 80074a8:	4a0e      	ldr	r2, [pc, #56]	@ (80074e4 <LL_DMA_SetLinkedListAddrOffset+0x4c>)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	4413      	add	r3, r2
 80074b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074ba:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80074c4:	400a      	ands	r2, r1
 80074c6:	4807      	ldr	r0, [pc, #28]	@ (80074e4 <LL_DMA_SetLinkedListAddrOffset+0x4c>)
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80074ce:	6979      	ldr	r1, [r7, #20]
 80074d0:	4401      	add	r1, r0
 80074d2:	4313      	orrs	r3, r2
 80074d4:	67cb      	str	r3, [r1, #124]	@ 0x7c
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	080112cc 	.word	0x080112cc

080074e8 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS : DMA registers are initialized.
  *          - ERROR   : Not applicable.
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  {
    assert_param(IS_LL_DMA_PFREQ_INSTANCE(DMAx, Channel));
  }

  /* Check DMA instance */
  if (IS_LL_GPDMA_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4a8a      	ldr	r2, [pc, #552]	@ (8007720 <LL_DMA_Init+0x238>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d117      	bne.n	800752c <LL_DMA_Init+0x44>
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02f      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d02c      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d029      	beq.n	8007562 <LL_DMA_Init+0x7a>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b03      	cmp	r3, #3
 8007512:	d026      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b04      	cmp	r3, #4
 8007518:	d023      	beq.n	8007562 <LL_DMA_Init+0x7a>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b05      	cmp	r3, #5
 800751e:	d020      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b06      	cmp	r3, #6
 8007524:	d01d      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b07      	cmp	r3, #7
 800752a:	d01a      	beq.n	8007562 <LL_DMA_Init+0x7a>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a7d      	ldr	r2, [pc, #500]	@ (8007724 <LL_DMA_Init+0x23c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d116      	bne.n	8007562 <LL_DMA_Init+0x7a>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d013      	beq.n	8007562 <LL_DMA_Init+0x7a>
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d010      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d00d      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b03      	cmp	r3, #3
 800754a:	d00a      	beq.n	8007562 <LL_DMA_Init+0x7a>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b04      	cmp	r3, #4
 8007550:	d007      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b05      	cmp	r3, #5
 8007556:	d004      	beq.n	8007562 <LL_DMA_Init+0x7a>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b06      	cmp	r3, #6
 800755c:	d001      	beq.n	8007562 <LL_DMA_Init+0x7a>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b07      	cmp	r3, #7
    assert_param(IS_LL_DMA_TRIGGER_MODE(DMA_InitStruct->TriggerMode));
    assert_param(IS_LL_DMA_TRIGGER_SELECTION(DMA_InitStruct->TriggerSelection));
  }

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4a6e      	ldr	r2, [pc, #440]	@ (8007720 <LL_DMA_Init+0x238>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d105      	bne.n	8007576 <LL_DMA_Init+0x8e>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b06      	cmp	r3, #6
 800756e:	d00b      	beq.n	8007588 <LL_DMA_Init+0xa0>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b07      	cmp	r3, #7
 8007574:	d008      	beq.n	8007588 <LL_DMA_Init+0xa0>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4a6a      	ldr	r2, [pc, #424]	@ (8007724 <LL_DMA_Init+0x23c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d104      	bne.n	8007588 <LL_DMA_Init+0xa0>
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b06      	cmp	r3, #6
 8007582:	d001      	beq.n	8007588 <LL_DMA_Init+0xa0>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b07      	cmp	r3, #7

  /*-------------------------- DMAx CLBAR Configuration ------------------------
   * Configure the Transfer linked list address with parameter :
   * - LinkedListBaseAdd:                              DMA_CLBAR_LBA[31:16] bits
   */
  LL_DMA_SetLinkedListBaseAddr(DMAx, Channel, DMA_InitStruct->LinkedListBaseAddr);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758e:	461a      	mov	r2, r3
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7ff fd78 	bl	8007088 <LL_DMA_SetLinkedListBaseAddr>
   * Configure the control parameter :
   * - LinkAllocatedPort:                              DMA_CCR_LAP bit
   * - LinkStepMode:                                   DMA_CCR_LSM bit
   * - Priority:                                       DMA_CCR_PRIO [23:22] bits
   */
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                       DMA_InitStruct->LinkAllocatedPort       | \
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 80075a0:	431a      	orrs	r2, r3
                       DMA_InitStruct->LinkStepMode);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  LL_DMA_ConfigControl(DMAx, Channel, DMA_InitStruct->Priority | \
 80075a6:	4313      	orrs	r3, r2
 80075a8:	461a      	mov	r2, r3
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7ff fd8f 	bl	80070d0 <LL_DMA_ConfigControl>
   * - SrcIncMode:                                DMA_CTR1_SINC bit
   * - SrcDataWidth:                              DMA_CTR1_SDW_LOG2 [1:0] bits
   * - SrcBurstLength:                            DMA_CTR1_SBL_1 [9:4] bits
   * - DestBurstLength:                           DMA_CTR1_DBL_1 [25:20] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
                        DMA_InitStruct->DestHWordExchange                | \
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 80075ba:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestByteExchange                 | \
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        DMA_InitStruct->DestHWordExchange                | \
 80075c0:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestIncMode                      | \
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                        DMA_InitStruct->DestByteExchange                 | \
 80075c6:	431a      	orrs	r2, r3
                        DMA_InitStruct->DestDataWidth                    | \
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
                        DMA_InitStruct->DestIncMode                      | \
 80075cc:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcAllocatedPort                 | \
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                        DMA_InitStruct->DestDataWidth                    | \
 80075d2:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcByteExchange                  | \
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                        DMA_InitStruct->SrcAllocatedPort                 | \
 80075d8:	431a      	orrs	r2, r3
                        DMA_InitStruct->DataAlignment                    | \
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->SrcByteExchange                  | \
 80075de:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcIncMode                       | \
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        DMA_InitStruct->DataAlignment                    | \
 80075e4:	431a      	orrs	r2, r3
                        DMA_InitStruct->SrcDataWidth);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->DestAllocatedPort | \
 80075ea:	4313      	orrs	r3, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7ff fd91 	bl	8007118 <LL_DMA_ConfigTransfer>
  /* Check DMA instance */
  if (IS_LL_GPDMA_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a49      	ldr	r2, [pc, #292]	@ (8007720 <LL_DMA_Init+0x238>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d117      	bne.n	800762e <LL_DMA_Init+0x146>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d030      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d02d      	beq.n	8007666 <LL_DMA_Init+0x17e>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d02a      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d027      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b04      	cmp	r3, #4
 800761a:	d024      	beq.n	8007666 <LL_DMA_Init+0x17e>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b05      	cmp	r3, #5
 8007620:	d021      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b06      	cmp	r3, #6
 8007626:	d01e      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b07      	cmp	r3, #7
 800762c:	d01b      	beq.n	8007666 <LL_DMA_Init+0x17e>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4a3c      	ldr	r2, [pc, #240]	@ (8007724 <LL_DMA_Init+0x23c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d119      	bne.n	800766a <LL_DMA_Init+0x182>
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d014      	beq.n	8007666 <LL_DMA_Init+0x17e>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d011      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d00e      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2b03      	cmp	r3, #3
 800764c:	d00b      	beq.n	8007666 <LL_DMA_Init+0x17e>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b04      	cmp	r3, #4
 8007652:	d008      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b05      	cmp	r3, #5
 8007658:	d005      	beq.n	8007666 <LL_DMA_Init+0x17e>
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b06      	cmp	r3, #6
 800765e:	d002      	beq.n	8007666 <LL_DMA_Init+0x17e>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b07      	cmp	r3, #7
 8007664:	d101      	bne.n	800766a <LL_DMA_Init+0x182>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <LL_DMA_Init+0x184>
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <LL_DMA_Init+0x198>
  {
    LL_DMA_ConfigBurstLength(DMAx, Channel,  DMA_InitStruct->SrcBurstLength,
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff fd72 	bl	8007164 <LL_DMA_ConfigBurstLength>
   * - Direction:                                  DMA_CTR2_DREQ bit
   * - Direction:                                  DMA_CTR2_SWREQ bit
   * - TriggerSelection:                           DMA_CTR2_TRIGSEL [21:16] bits
   * - Request:                                    DMA_CTR2_REQSEL [6:0] bits
   */
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
                               DMA_InitStruct->TriggerPolarity                  | \
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 8007688:	431a      	orrs	r2, r3
                               DMA_InitStruct->BlkHWRequest                     | \
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
                               DMA_InitStruct->TriggerPolarity                  | \
 800768e:	431a      	orrs	r2, r3
                               DMA_InitStruct->Mode                             | \
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
                               DMA_InitStruct->BlkHWRequest                     | \
 8007696:	431a      	orrs	r2, r3
                               DMA_InitStruct->Direction);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
  LL_DMA_ConfigChannelTransfer(DMAx, Channel, DMA_InitStruct->TransferEventMode | \
 800769c:	4313      	orrs	r3, r2
 800769e:	461a      	mov	r2, r3
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff fd8e 	bl	80071c4 <LL_DMA_ConfigChannelTransfer>

  /* Check direction */
  if (DMA_InitStruct->Direction != LL_DMA_DIRECTION_MEMORY_TO_MEMORY)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076b0:	d006      	beq.n	80076c0 <LL_DMA_Init+0x1d8>
  {
    LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->Request);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076b6:	461a      	mov	r2, r3
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff fdcc 	bl	8007258 <LL_DMA_SetPeriphRequest>
  }

  /* Check trigger polarity */
  if (DMA_InitStruct->TriggerPolarity != LL_DMA_TRIG_POLARITY_MASKED)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00d      	beq.n	80076e4 <LL_DMA_Init+0x1fc>
  {
    LL_DMA_SetHWTrigger(DMAx, Channel, DMA_InitStruct->TriggerSelection);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076cc:	461a      	mov	r2, r3
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f7ff fde5 	bl	80072a0 <LL_DMA_SetHWTrigger>
    LL_DMA_SetTriggerMode(DMAx, Channel, DMA_InitStruct->TriggerMode);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076da:	461a      	mov	r2, r3
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff fd96 	bl	8007210 <LL_DMA_SetTriggerMode>
   * - SrcAddrUpdateMode:                                      DMA_CBR1_SDEC bit
   *   SrcAddrUpdateMode field is supported only by 2D addressing channels.
   * - DestAddrUpdateMode:                                     DMA_CBR1_DDEC bit
   *   DestAddrUpdateMode field is supported only by 2D addressing channels.
   */
  LL_DMA_SetBlkDataLength(DMAx, Channel, DMA_InitStruct->BlkDataLength);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e8:	461a      	mov	r2, r3
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fe4b 	bl	8007388 <LL_DMA_SetBlkDataLength>

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007720 <LL_DMA_Init+0x238>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d105      	bne.n	8007706 <LL_DMA_Init+0x21e>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b06      	cmp	r3, #6
 80076fe:	d00c      	beq.n	800771a <LL_DMA_Init+0x232>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b07      	cmp	r3, #7
 8007704:	d009      	beq.n	800771a <LL_DMA_Init+0x232>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a06      	ldr	r2, [pc, #24]	@ (8007724 <LL_DMA_Init+0x23c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d10c      	bne.n	8007728 <LL_DMA_Init+0x240>
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b06      	cmp	r3, #6
 8007712:	d002      	beq.n	800771a <LL_DMA_Init+0x232>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b07      	cmp	r3, #7
 8007718:	d106      	bne.n	8007728 <LL_DMA_Init+0x240>
 800771a:	2301      	movs	r3, #1
 800771c:	e005      	b.n	800772a <LL_DMA_Init+0x242>
 800771e:	bf00      	nop
 8007720:	40020000 	.word	0x40020000
 8007724:	40021000 	.word	0x40021000
 8007728:	2300      	movs	r3, #0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d016      	beq.n	800775c <LL_DMA_Init+0x274>
  {
    LL_DMA_SetBlkRptCount(DMAx, Channel, DMA_InitStruct->BlkRptCount);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007732:	461a      	mov	r2, r3
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff fdfc 	bl	8007334 <LL_DMA_SetBlkRptCount>
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                                  DMA_InitStruct->BlkRptDestAddrUpdateMode                | \
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 8007744:	431a      	orrs	r2, r3
                                  DMA_InitStruct->SrcAddrUpdateMode                       | \
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                                  DMA_InitStruct->BlkRptDestAddrUpdateMode                | \
 800774a:	431a      	orrs	r2, r3
                                  DMA_InitStruct->DestAddrUpdateMode);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    LL_DMA_ConfigBlkRptAddrUpdate(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrUpdateMode  | \
 8007750:	4313      	orrs	r3, r2
 8007752:	461a      	mov	r2, r3
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7ff fdc8 	bl	80072ec <LL_DMA_ConfigBlkRptAddrUpdate>
  /*-------------------------- DMAx CSAR and CDAR Configuration ----------------
   * Configure the Transfer source address with parameter :
   * - SrcAddress:                                        DMA_CSAR_SA[31:0] bits
   * - DestAddress:                                       DMA_CDAR_DA[31:0] bits
   */
  LL_DMA_ConfigAddresses(DMAx, Channel, DMA_InitStruct->SrcAddress, DMA_InitStruct->DestAddress);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f7ff fe32 	bl	80073d0 <LL_DMA_ConfigAddresses>

  /* Check DMA channel */
  if (IS_LL_DMA_2D_CHANNEL_INSTANCE(DMAx, Channel) != 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4a1b      	ldr	r2, [pc, #108]	@ (80077dc <LL_DMA_Init+0x2f4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d105      	bne.n	8007780 <LL_DMA_Init+0x298>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b06      	cmp	r3, #6
 8007778:	d00c      	beq.n	8007794 <LL_DMA_Init+0x2ac>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b07      	cmp	r3, #7
 800777e:	d009      	beq.n	8007794 <LL_DMA_Init+0x2ac>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a17      	ldr	r2, [pc, #92]	@ (80077e0 <LL_DMA_Init+0x2f8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d107      	bne.n	8007798 <LL_DMA_Init+0x2b0>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b06      	cmp	r3, #6
 800778c:	d002      	beq.n	8007794 <LL_DMA_Init+0x2ac>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b07      	cmp	r3, #7
 8007792:	d101      	bne.n	8007798 <LL_DMA_Init+0x2b0>
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <LL_DMA_Init+0x2b2>
 8007798:	2300      	movs	r3, #0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d011      	beq.n	80077c2 <LL_DMA_Init+0x2da>
     * - SrcAddrOffset:                                 DMA_CTR3_SAO[28:16] bits
     *   SrcAddrOffset field is supported only by 2D addressing channels.
     * - DestAddrOffset:                                DMA_CTR3_DAO[12:0] bits
     *   DestAddrOffset field is supported only by 2D addressing channels.
     */
    LL_DMA_ConfigAddrUpdateValue(DMAx, Channel, DMA_InitStruct->SrcAddrOffset, DMA_InitStruct->DestAddrOffset);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff fe35 	bl	8007418 <LL_DMA_ConfigAddrUpdateValue>
     * - BlkRptSrcAddrOffset:                         DMA_CBR2_BRSAO[15:0] bits
     *   BlkRptSrcAddrOffset field is supported only by 2D addressing channels.
     * - BlkRptDestAddrOffset:                        DMA_CBR2_BRDAO[31:16] bits
     *   BlkRptDestAddrOffset field is supported only by 2D addressing channels.
     */
    LL_DMA_ConfigBlkRptAddrUpdateValue(DMAx, Channel, DMA_InitStruct->BlkRptSrcAddrOffset,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff fe4d 	bl	800745c <LL_DMA_ConfigBlkRptAddrUpdateValue>

  /*-------------------------- DMAx CLLR Configuration -------------------------
   * Configure the Transfer linked list address with parameter :
   * - DestAddrOffset:                                    DMA_CLLR_LA[15:2] bits
   */
  LL_DMA_SetLinkedListAddrOffset(DMAx, Channel, DMA_InitStruct->LinkedListAddrOffset);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077c8:	461a      	mov	r2, r3
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff fe63 	bl	8007498 <LL_DMA_SetLinkedListAddrOffset>

  return (uint32_t)SUCCESS;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40020000 	.word	0x40020000
 80077e0:	40021000 	.word	0x40021000

080077e4 <LL_GPIO_SetPinMode>:
{
 80077e4:	b480      	push	{r7}
 80077e6:	b08b      	sub	sp, #44	@ 0x2c
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	fa93 f3a3 	rbit	r3, r3
 80077fe:	613b      	str	r3, [r7, #16]
  return result;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800780a:	2320      	movs	r3, #32
 800780c:	e003      	b.n	8007816 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	fab3 f383 	clz	r3, r3
 8007814:	b2db      	uxtb	r3, r3
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	2103      	movs	r1, #3
 800781a:	fa01 f303 	lsl.w	r3, r1, r3
 800781e:	43db      	mvns	r3, r3
 8007820:	401a      	ands	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	fa93 f3a3 	rbit	r3, r3
 800782c:	61fb      	str	r3, [r7, #28]
  return result;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007838:	2320      	movs	r3, #32
 800783a:	e003      	b.n	8007844 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	fab3 f383 	clz	r3, r3
 8007842:	b2db      	uxtb	r3, r3
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	fa01 f303 	lsl.w	r3, r1, r3
 800784c:	431a      	orrs	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]
}
 8007852:	bf00      	nop
 8007854:	372c      	adds	r7, #44	@ 0x2c
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <LL_GPIO_SetPinOutputType>:
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	43db      	mvns	r3, r3
 8007872:	401a      	ands	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	431a      	orrs	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	605a      	str	r2, [r3, #4]
}
 8007882:	bf00      	nop
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <LL_GPIO_SetPinSpeed>:
{
 800788e:	b480      	push	{r7}
 8007890:	b08b      	sub	sp, #44	@ 0x2c
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	fa93 f3a3 	rbit	r3, r3
 80078a8:	613b      	str	r3, [r7, #16]
  return result;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80078b4:	2320      	movs	r3, #32
 80078b6:	e003      	b.n	80078c0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	fab3 f383 	clz	r3, r3
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	2103      	movs	r1, #3
 80078c4:	fa01 f303 	lsl.w	r3, r1, r3
 80078c8:	43db      	mvns	r3, r3
 80078ca:	401a      	ands	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	fa93 f3a3 	rbit	r3, r3
 80078d6:	61fb      	str	r3, [r7, #28]
  return result;
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80078e2:	2320      	movs	r3, #32
 80078e4:	e003      	b.n	80078ee <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	fab3 f383 	clz	r3, r3
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	fa01 f303 	lsl.w	r3, r1, r3
 80078f6:	431a      	orrs	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	609a      	str	r2, [r3, #8]
}
 80078fc:	bf00      	nop
 80078fe:	372c      	adds	r7, #44	@ 0x2c
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <LL_GPIO_SetPinPull>:
{
 8007908:	b480      	push	{r7}
 800790a:	b08b      	sub	sp, #44	@ 0x2c
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	fa93 f3a3 	rbit	r3, r3
 8007922:	613b      	str	r3, [r7, #16]
  return result;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800792e:	2320      	movs	r3, #32
 8007930:	e003      	b.n	800793a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	fab3 f383 	clz	r3, r3
 8007938:	b2db      	uxtb	r3, r3
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	2103      	movs	r1, #3
 800793e:	fa01 f303 	lsl.w	r3, r1, r3
 8007942:	43db      	mvns	r3, r3
 8007944:	401a      	ands	r2, r3
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	fa93 f3a3 	rbit	r3, r3
 8007950:	61fb      	str	r3, [r7, #28]
  return result;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800795c:	2320      	movs	r3, #32
 800795e:	e003      	b.n	8007968 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	fab3 f383 	clz	r3, r3
 8007966:	b2db      	uxtb	r3, r3
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	fa01 f303 	lsl.w	r3, r1, r3
 8007970:	431a      	orrs	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	60da      	str	r2, [r3, #12]
}
 8007976:	bf00      	nop
 8007978:	372c      	adds	r7, #44	@ 0x2c
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <LL_GPIO_SetAFPin_0_7>:
{
 8007982:	b480      	push	{r7}
 8007984:	b08b      	sub	sp, #44	@ 0x2c
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1a      	ldr	r2, [r3, #32]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	fa93 f3a3 	rbit	r3, r3
 800799c:	613b      	str	r3, [r7, #16]
  return result;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80079a8:	2320      	movs	r3, #32
 80079aa:	e003      	b.n	80079b4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	fab3 f383 	clz	r3, r3
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	210f      	movs	r1, #15
 80079b8:	fa01 f303 	lsl.w	r3, r1, r3
 80079bc:	43db      	mvns	r3, r3
 80079be:	401a      	ands	r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	fa93 f3a3 	rbit	r3, r3
 80079ca:	61fb      	str	r3, [r7, #28]
  return result;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80079d6:	2320      	movs	r3, #32
 80079d8:	e003      	b.n	80079e2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	fab3 f383 	clz	r3, r3
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	621a      	str	r2, [r3, #32]
}
 80079f0:	bf00      	nop
 80079f2:	372c      	adds	r7, #44	@ 0x2c
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <LL_GPIO_SetAFPin_8_15>:
{
 80079fc:	b480      	push	{r7}
 80079fe:	b08b      	sub	sp, #44	@ 0x2c
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	fa93 f3a3 	rbit	r3, r3
 8007a18:	613b      	str	r3, [r7, #16]
  return result;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007a24:	2320      	movs	r3, #32
 8007a26:	e003      	b.n	8007a30 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	fab3 f383 	clz	r3, r3
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	210f      	movs	r1, #15
 8007a34:	fa01 f303 	lsl.w	r3, r1, r3
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	401a      	ands	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	fa93 f3a3 	rbit	r3, r3
 8007a48:	61fb      	str	r3, [r7, #28]
  return result;
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007a54:	2320      	movs	r3, #32
 8007a56:	e003      	b.n	8007a60 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	fab3 f383 	clz	r3, r3
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	fa01 f303 	lsl.w	r3, r1, r3
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007a6e:	bf00      	nop
 8007a70:	372c      	adds	r7, #44	@ 0x2c
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b08a      	sub	sp, #40	@ 0x28
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	fa93 f3a3 	rbit	r3, r3
 8007a90:	617b      	str	r3, [r7, #20]
  return result;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <LL_GPIO_Init+0x26>
    return 32U;
 8007a9c:	2320      	movs	r3, #32
 8007a9e:	e003      	b.n	8007aa8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	fab3 f383 	clz	r3, r3
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007aaa:	e058      	b.n	8007b5e <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab8:	4013      	ands	r3, r2
 8007aba:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d04a      	beq.n	8007b58 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d003      	beq.n	8007ad2 <LL_GPIO_Init+0x58>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d10e      	bne.n	8007af0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6a39      	ldr	r1, [r7, #32]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff fed7 	bl	800788e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff feb7 	bl	800785e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6a39      	ldr	r1, [r7, #32]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff ff05 	bl	8007908 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d121      	bne.n	8007b4a <LL_GPIO_Init+0xd0>
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	fa93 f3a3 	rbit	r3, r3
 8007b10:	60bb      	str	r3, [r7, #8]
  return result;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <LL_GPIO_Init+0xa6>
    return 32U;
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	e003      	b.n	8007b28 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	fab3 f383 	clz	r3, r3
 8007b26:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8007b28:	2b07      	cmp	r3, #7
 8007b2a:	d807      	bhi.n	8007b3c <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6a39      	ldr	r1, [r7, #32]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff ff24 	bl	8007982 <LL_GPIO_SetAFPin_0_7>
 8007b3a:	e006      	b.n	8007b4a <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6a39      	ldr	r1, [r7, #32]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff ff59 	bl	80079fc <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6a39      	ldr	r1, [r7, #32]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff fe46 	bl	80077e4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d19f      	bne.n	8007aac <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3728      	adds	r7, #40	@ 0x28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <LL_LPUART_IsEnabled>:
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <LL_LPUART_IsEnabled+0x18>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <LL_LPUART_IsEnabled+0x1a>
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <LL_LPUART_SetPrescaler>:
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007baa:	f023 030f 	bic.w	r3, r3, #15
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	b292      	uxth	r2, r2
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <LL_LPUART_SetStopBitsLength>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	605a      	str	r2, [r3, #4]
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <LL_LPUART_SetHWFlowCtrl>:
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	609a      	str	r2, [r3, #8]
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <LL_LPUART_SetBaudRate>:
{
 8007c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c14:	b088      	sub	sp, #32
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	61f8      	str	r0, [r7, #28]
 8007c1a:	61b9      	str	r1, [r7, #24]
 8007c1c:	617a      	str	r2, [r7, #20]
 8007c1e:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d039      	beq.n	8007c9a <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	60bb      	str	r3, [r7, #8]
 8007c2c:	60fa      	str	r2, [r7, #12]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	4b1b      	ldr	r3, [pc, #108]	@ (8007ca4 <LL_LPUART_SetBaudRate+0x94>)
 8007c36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c4a:	f7f8 ffbd 	bl	8000bc8 <__aeabi_uldivmod>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4610      	mov	r0, r2
 8007c54:	4619      	mov	r1, r3
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	020b      	lsls	r3, r1, #8
 8007c60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c64:	0202      	lsls	r2, r0, #8
 8007c66:	6939      	ldr	r1, [r7, #16]
 8007c68:	0849      	lsrs	r1, r1, #1
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	4605      	mov	r5, r0
 8007c70:	eb12 0804 	adds.w	r8, r2, r4
 8007c74:	eb43 0905 	adc.w	r9, r3, r5
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	469a      	mov	sl, r3
 8007c7e:	4693      	mov	fp, r2
 8007c80:	4652      	mov	r2, sl
 8007c82:	465b      	mov	r3, fp
 8007c84:	4640      	mov	r0, r8
 8007c86:	4649      	mov	r1, r9
 8007c88:	f7f8 ff9e 	bl	8000bc8 <__aeabi_uldivmod>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4613      	mov	r3, r2
 8007c92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	60da      	str	r2, [r3, #12]
}
 8007c9a:	bf00      	nop
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ca4:	080112ec 	.word	0x080112ec

08007ca8 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff ff5d 	bl	8007b76 <LL_LPUART_IsEnabled>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d136      	bne.n	8007d30 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d3c <LL_LPUART_Init+0x94>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	6891      	ldr	r1, [r2, #8]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	6912      	ldr	r2, [r2, #16]
 8007cd2:	4311      	orrs	r1, r2
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	6952      	ldr	r2, [r2, #20]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff ff6c 	bl	8007bc4 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff ff79 	bl	8007bea <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8007cf8:	f04f 60e0 	mov.w	r0, #117440512	@ 0x7000000
 8007cfc:	f001 fbb8 	bl	8009470 <LL_RCC_GetLPUARTClockFreq>
 8007d00:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00d      	beq.n	8007d24 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d009      	beq.n	8007d24 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ff76 	bl	8007c10 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff ff36 	bl	8007b9c <LL_LPUART_SetPrescaler>
  }

  return (status);
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	efffe9f3 	.word	0xefffe9f3

08007d40 <LL_RCC_HSE_IsReady>:
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8007d44:	4b07      	ldr	r3, [pc, #28]	@ (8007d64 <LL_RCC_HSE_IsReady+0x24>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d50:	d101      	bne.n	8007d56 <LL_RCC_HSE_IsReady+0x16>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <LL_RCC_HSE_IsReady+0x18>
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	44020c00 	.word	0x44020c00

08007d68 <LL_RCC_HSI_IsReady>:
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007d6c:	4b06      	ldr	r3, [pc, #24]	@ (8007d88 <LL_RCC_HSI_IsReady+0x20>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d101      	bne.n	8007d7c <LL_RCC_HSI_IsReady+0x14>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <LL_RCC_HSI_IsReady+0x16>
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	44020c00 	.word	0x44020c00

08007d8c <LL_RCC_HSI_GetDivider>:
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8007d90:	4b04      	ldr	r3, [pc, #16]	@ (8007da4 <LL_RCC_HSI_GetDivider+0x18>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0318 	and.w	r3, r3, #24
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	44020c00 	.word	0x44020c00

08007da8 <LL_RCC_CSI_IsReady>:
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <LL_RCC_CSI_IsReady+0x24>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db8:	d101      	bne.n	8007dbe <LL_RCC_CSI_IsReady+0x16>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <LL_RCC_CSI_IsReady+0x18>
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	44020c00 	.word	0x44020c00

08007dd0 <LL_RCC_LSE_IsReady>:
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8007dd4:	4b07      	ldr	r3, [pc, #28]	@ (8007df4 <LL_RCC_LSE_IsReady+0x24>)
 8007dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d101      	bne.n	8007de6 <LL_RCC_LSE_IsReady+0x16>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <LL_RCC_LSE_IsReady+0x18>
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	44020c00 	.word	0x44020c00

08007df8 <LL_RCC_GetSysClkSource>:
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8007dfc:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <LL_RCC_GetSysClkSource+0x18>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f003 0318 	and.w	r3, r3, #24
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	44020c00 	.word	0x44020c00

08007e14 <LL_RCC_GetAHBPrescaler>:
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
 8007e18:	4b04      	ldr	r3, [pc, #16]	@ (8007e2c <LL_RCC_GetAHBPrescaler+0x18>)
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	44020c00 	.word	0x44020c00

08007e30 <LL_RCC_GetAPB1Prescaler>:
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
 8007e34:	4b04      	ldr	r3, [pc, #16]	@ (8007e48 <LL_RCC_GetAPB1Prescaler+0x18>)
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	44020c00 	.word	0x44020c00

08007e4c <LL_RCC_GetAPB2Prescaler>:
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
 8007e50:	4b04      	ldr	r3, [pc, #16]	@ (8007e64 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	44020c00 	.word	0x44020c00

08007e68 <LL_RCC_GetAPB3Prescaler>:
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE3));
 8007e6c:	4b04      	ldr	r3, [pc, #16]	@ (8007e80 <LL_RCC_GetAPB3Prescaler+0x18>)
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	44020c00 	.word	0x44020c00

08007e84 <LL_RCC_GetClockSource>:
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	4b0e      	ldr	r3, [pc, #56]	@ (8007ecc <LL_RCC_GetClockSource+0x48>)
 8007e92:	4413      	add	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	0e19      	lsrs	r1, r3, #24
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eaa:	401a      	ands	r2, r3
                               LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	0a1b      	lsrs	r3, r3, #8
 8007eb0:	f003 031f 	and.w	r3, r3, #31
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 8007eb4:	fa22 f303 	lsr.w	r3, r2, r3
                               LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8007eb8:	041a      	lsls	r2, r3, #16
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> \
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4313      	orrs	r3, r2
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	44020cd8 	.word	0x44020cd8

08007ed0 <LL_RCC_GetUSARTClockSource>:
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(USARTx);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff ffd3 	bl	8007e84 <LL_RCC_GetClockSource>
 8007ede:	4603      	mov	r3, r0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <LL_RCC_GetUARTClockSource>:
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(UARTx);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff ffc7 	bl	8007e84 <LL_RCC_GetClockSource>
 8007ef6:	4603      	mov	r3, r0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <LL_RCC_GetLPUARTClockSource>:
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, LPUARTx));
 8007f08:	4b05      	ldr	r3, [pc, #20]	@ (8007f20 <LL_RCC_GetLPUARTClockSource+0x20>)
 8007f0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4013      	ands	r3, r2
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	44020c00 	.word	0x44020c00

08007f24 <LL_RCC_PLL1_GetSource>:
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC));
 8007f28:	4b04      	ldr	r3, [pc, #16]	@ (8007f3c <LL_RCC_PLL1_GetSource+0x18>)
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2c:	f003 0303 	and.w	r3, r3, #3
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	44020c00 	.word	0x44020c00

08007f40 <LL_RCC_PLL1_GetN>:
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 8007f44:	4b04      	ldr	r3, [pc, #16]	@ (8007f58 <LL_RCC_PLL1_GetN+0x18>)
 8007f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4c:	3301      	adds	r3, #1
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	44020c00 	.word	0x44020c00

08007f5c <LL_RCC_PLL1_GetP>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P) >>  RCC_PLL1DIVR_PLL1P_Pos) + 1UL);
 8007f60:	4b05      	ldr	r3, [pc, #20]	@ (8007f78 <LL_RCC_PLL1_GetP+0x1c>)
 8007f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f64:	0a5b      	lsrs	r3, r3, #9
 8007f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f6a:	3301      	adds	r3, #1
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	44020c00 	.word	0x44020c00

08007f7c <LL_RCC_PLL1_GetM>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos);
 8007f80:	4b04      	ldr	r3, [pc, #16]	@ (8007f94 <LL_RCC_PLL1_GetM+0x18>)
 8007f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f84:	0a1b      	lsrs	r3, r3, #8
 8007f86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	44020c00 	.word	0x44020c00

08007f98 <LL_RCC_PLL2_IsReady>:
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == RCC_CR_PLL2RDY) ? 1UL : 0UL);
 8007f9c:	4b07      	ldr	r3, [pc, #28]	@ (8007fbc <LL_RCC_PLL2_IsReady+0x24>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fa8:	d101      	bne.n	8007fae <LL_RCC_PLL2_IsReady+0x16>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <LL_RCC_PLL2_IsReady+0x18>
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	44020c00 	.word	0x44020c00

08007fc0 <LL_RCC_PLL2_GetSource>:
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2SRC));
 8007fc4:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <LL_RCC_PLL2_GetSource+0x18>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc8:	f003 0303 	and.w	r3, r3, #3
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	44020c00 	.word	0x44020c00

08007fdc <LL_RCC_PLL2_GetM>:
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2M) >>  RCC_PLL2CFGR_PLL2M_Pos);
 8007fe0:	4b04      	ldr	r3, [pc, #16]	@ (8007ff4 <LL_RCC_PLL2_GetM+0x18>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe4:	0a1b      	lsrs	r3, r3, #8
 8007fe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	44020c00 	.word	0x44020c00

08007ff8 <LL_RCC_PLL2_GetN>:
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2N) >>  RCC_PLL2DIVR_PLL2N_Pos) + 1UL);
 8007ffc:	4b04      	ldr	r3, [pc, #16]	@ (8008010 <LL_RCC_PLL2_GetN+0x18>)
 8007ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008004:	3301      	adds	r3, #1
}
 8008006:	4618      	mov	r0, r3
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	44020c00 	.word	0x44020c00

08008014 <LL_RCC_PLL2_GetP>:
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2P) >>  RCC_PLL2DIVR_PLL2P_Pos) + 1UL);
 8008018:	4b05      	ldr	r3, [pc, #20]	@ (8008030 <LL_RCC_PLL2_GetP+0x1c>)
 800801a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801c:	0a5b      	lsrs	r3, r3, #9
 800801e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008022:	3301      	adds	r3, #1
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	44020c00 	.word	0x44020c00

08008034 <LL_RCC_PLL2_GetQ>:
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2Q) >>  RCC_PLL2DIVR_PLL2Q_Pos) + 1UL);
 8008038:	4b05      	ldr	r3, [pc, #20]	@ (8008050 <LL_RCC_PLL2_GetQ+0x1c>)
 800803a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803c:	0c1b      	lsrs	r3, r3, #16
 800803e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008042:	3301      	adds	r3, #1
}
 8008044:	4618      	mov	r0, r3
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	44020c00 	.word	0x44020c00

08008054 <LL_RCC_PLL2_GetR>:
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_PLL2R) >>  RCC_PLL2DIVR_PLL2R_Pos) + 1UL);
 8008058:	4b05      	ldr	r3, [pc, #20]	@ (8008070 <LL_RCC_PLL2_GetR+0x1c>)
 800805a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800805c:	0e1b      	lsrs	r3, r3, #24
 800805e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008062:	3301      	adds	r3, #1
}
 8008064:	4618      	mov	r0, r3
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	44020c00 	.word	0x44020c00

08008074 <LL_RCC_PLL2P_IsEnabled>:
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2PEN) == RCC_PLL2CFGR_PLL2PEN) ? 1UL : 0UL);
 8008078:	4b07      	ldr	r3, [pc, #28]	@ (8008098 <LL_RCC_PLL2P_IsEnabled+0x24>)
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008084:	d101      	bne.n	800808a <LL_RCC_PLL2P_IsEnabled+0x16>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <LL_RCC_PLL2P_IsEnabled+0x18>
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	44020c00 	.word	0x44020c00

0800809c <LL_RCC_PLL2Q_IsEnabled>:
{
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2QEN) == RCC_PLL2CFGR_PLL2QEN) ? 1UL : 0UL);
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080ac:	d101      	bne.n	80080b2 <LL_RCC_PLL2Q_IsEnabled+0x16>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <LL_RCC_PLL2Q_IsEnabled+0x18>
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	44020c00 	.word	0x44020c00

080080c4 <LL_RCC_PLL2R_IsEnabled>:
{
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2REN) == RCC_PLL2CFGR_PLL2REN) ? 1UL : 0UL);
 80080c8:	4b07      	ldr	r3, [pc, #28]	@ (80080e8 <LL_RCC_PLL2R_IsEnabled+0x24>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080d4:	d101      	bne.n	80080da <LL_RCC_PLL2R_IsEnabled+0x16>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <LL_RCC_PLL2R_IsEnabled+0x18>
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	44020c00 	.word	0x44020c00

080080ec <LL_RCC_PLL2FRACN_IsEnabled>:
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR, RCC_PLL2CFGR_PLL2FRACEN) == RCC_PLL2CFGR_PLL2FRACEN) ? 1UL : 0UL);
 80080f0:	4b06      	ldr	r3, [pc, #24]	@ (800810c <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 80080f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b10      	cmp	r3, #16
 80080fa:	d101      	bne.n	8008100 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	44020c00 	.word	0x44020c00

08008110 <LL_RCC_PLL2_GetFRACN>:
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_PLL2FRACN) >>  RCC_PLL2FRACR_PLL2FRACN_Pos);
 8008114:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <LL_RCC_PLL2_GetFRACN+0x18>)
 8008116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008118:	08db      	lsrs	r3, r3, #3
 800811a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800811e:	4618      	mov	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	44020c00 	.word	0x44020c00

0800812c <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 is Ready
  * @rmtoll CR           PLL3RDY    LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == RCC_CR_PLL3RDY) ? 1UL : 0UL);
 8008130:	4b07      	ldr	r3, [pc, #28]	@ (8008150 <LL_RCC_PLL3_IsReady+0x24>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800813c:	d101      	bne.n	8008142 <LL_RCC_PLL3_IsReady+0x16>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <LL_RCC_PLL3_IsReady+0x18>
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	44020c00 	.word	0x44020c00

08008154 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLL3SOURCE_CSI
  *         @arg @ref LL_RCC_PLL3SOURCE_HSI
  *         @arg @ref LL_RCC_PLL3SOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3SRC));
 8008158:	4b04      	ldr	r3, [pc, #16]	@ (800816c <LL_RCC_PLL3_GetSource+0x18>)
 800815a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815c:	f003 0303 	and.w	r3, r3, #3
}
 8008160:	4618      	mov	r0, r3
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	44020c00 	.word	0x44020c00

08008170 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 multiplication factor N
  * @rmtoll PLL3CFGR      PLL3N          LL_RCC_PLL3_GetN
  * @retval Between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3N) >>  RCC_PLL3DIVR_PLL3N_Pos) + 1UL);
 8008174:	4b04      	ldr	r3, [pc, #16]	@ (8008188 <LL_RCC_PLL3_GetN+0x18>)
 8008176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817c:	3301      	adds	r3, #1
}
 800817e:	4618      	mov	r0, r3
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	44020c00 	.word	0x44020c00

0800818c <LL_RCC_PLL3_GetP>:
  * @note Used for peripherals clocks
  * @rmtoll PLL3CFGR      PLL3P      LL_RCC_PLL3_GetP
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3P) >>  RCC_PLL3DIVR_PLL3P_Pos) + 1UL);
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <LL_RCC_PLL3_GetP+0x1c>)
 8008192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008194:	0a5b      	lsrs	r3, r3, #9
 8008196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800819a:	3301      	adds	r3, #1
}
 800819c:	4618      	mov	r0, r3
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	44020c00 	.word	0x44020c00

080081ac <LL_RCC_PLL3_GetQ>:
  * @note Used for peripherals clocks
  * @rmtoll PLL3CFGR      PLL3Q          LL_RCC_PLL3_GetQ
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3Q) >>  RCC_PLL3DIVR_PLL3Q_Pos) + 1UL);
 80081b0:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <LL_RCC_PLL3_GetQ+0x1c>)
 80081b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b4:	0c1b      	lsrs	r3, r3, #16
 80081b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081ba:	3301      	adds	r3, #1
}
 80081bc:	4618      	mov	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	44020c00 	.word	0x44020c00

080081cc <LL_RCC_PLL3_GetR>:
  * @note Used for PLL3CLK (system clock)
  * @rmtoll PLL3DIVR      PLL3R          LL_RCC_PLL3_GetR
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_PLL3R) >>  RCC_PLL3DIVR_PLL3R_Pos) + 1UL);
 80081d0:	4b05      	ldr	r3, [pc, #20]	@ (80081e8 <LL_RCC_PLL3_GetR+0x1c>)
 80081d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d4:	0e1b      	lsrs	r3, r3, #24
 80081d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081da:	3301      	adds	r3, #1
}
 80081dc:	4618      	mov	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	44020c00 	.word	0x44020c00

080081ec <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 Division factor M
  * @rmtoll PLL3CFGR      PLL3M          LL_RCC_PLL3_GetM
  * @retval Between 1 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80081f0:	4b04      	ldr	r3, [pc, #16]	@ (8008204 <LL_RCC_PLL3_GetM+0x18>)
 80081f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f4:	0a1b      	lsrs	r3, r3, #8
 80081f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	44020c00 	.word	0x44020c00

08008208 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLL3CFGR           PLL3PEN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3PEN) == RCC_PLL3CFGR_PLL3PEN) ? 1UL : 0UL);
 800820c:	4b07      	ldr	r3, [pc, #28]	@ (800822c <LL_RCC_PLL3P_IsEnabled+0x24>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008218:	d101      	bne.n	800821e <LL_RCC_PLL3P_IsEnabled+0x16>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <LL_RCC_PLL3P_IsEnabled+0x18>
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	44020c00 	.word	0x44020c00

08008230 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLL3CFGR           PLL3QEN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3QEN) == RCC_PLL3CFGR_PLL3QEN) ? 1UL : 0UL);
 8008234:	4b07      	ldr	r3, [pc, #28]	@ (8008254 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8008236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800823c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008240:	d101      	bne.n	8008246 <LL_RCC_PLL3Q_IsEnabled+0x16>
 8008242:	2301      	movs	r3, #1
 8008244:	e000      	b.n	8008248 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	44020c00 	.word	0x44020c00

08008258 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLL3CFGR           PLL3REN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3REN) == RCC_PLL3CFGR_PLL3REN) ? 1UL : 0UL);
 800825c:	4b07      	ldr	r3, [pc, #28]	@ (800827c <LL_RCC_PLL3R_IsEnabled+0x24>)
 800825e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008264:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008268:	d101      	bne.n	800826e <LL_RCC_PLL3R_IsEnabled+0x16>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <LL_RCC_PLL3R_IsEnabled+0x18>
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	44020c00 	.word	0x44020c00

08008280 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLL3CFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR, RCC_PLL3CFGR_PLL3FRACEN) == RCC_PLL3CFGR_PLL3FRACEN) ? 1UL : 0UL);
 8008284:	4b06      	ldr	r3, [pc, #24]	@ (80082a0 <LL_RCC_PLL3FRACN_IsEnabled+0x20>)
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b10      	cmp	r3, #16
 800828e:	d101      	bne.n	8008294 <LL_RCC_PLL3FRACN_IsEnabled+0x14>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	44020c00 	.word	0x44020c00

080082a4 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      PLL3FRACN          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_PLL3FRACN) >>  RCC_PLL3FRACR_PLL3FRACN_Pos);
 80082a8:	4b04      	ldr	r3, [pc, #16]	@ (80082bc <LL_RCC_PLL3_GetFRACN+0x18>)
 80082aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ac:	08db      	lsrs	r3, r3, #3
 80082ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	44020c00 	.word	0x44020c00

080082c0 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *pPLL_Clocks)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08a      	sub	sp, #40	@ 0x28
 80082c4:	af02      	add	r7, sp, #8
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t plln;
  uint32_t fracn = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */

  pPLL_Clocks->PLL_P_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
  pPLL_Clocks->PLL_Q_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	605a      	str	r2, [r3, #4]
  pPLL_Clocks->PLL_R_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	609a      	str	r2, [r3, #8]

  if (LL_RCC_PLL2_IsReady() != 0U)
 80082e2:	f7ff fe59 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d07e      	beq.n	80083ea <LL_RCC_GetPLL2ClockFreq+0x12a>
  {

    pllsource = LL_RCC_PLL2_GetSource();
 80082ec:	f7ff fe68 	bl	8007fc0 <LL_RCC_PLL2_GetSource>
 80082f0:	6178      	str	r0, [r7, #20]

    switch (pllsource)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d01f      	beq.n	8008338 <LL_RCC_GetPLL2ClockFreq+0x78>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d824      	bhi.n	8008348 <LL_RCC_GetPLL2ClockFreq+0x88>
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d003      	beq.n	800830c <LL_RCC_GetPLL2ClockFreq+0x4c>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b02      	cmp	r3, #2
 8008308:	d00e      	beq.n	8008328 <LL_RCC_GetPLL2ClockFreq+0x68>
        break;

      case LL_RCC_PLL2SOURCE_NONE:
      default:
        /* PLL clock disabled */
        break;
 800830a:	e01d      	b.n	8008348 <LL_RCC_GetPLL2ClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 800830c:	f7ff fd2c 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01a      	beq.n	800834c <LL_RCC_GetPLL2ClockFreq+0x8c>
          pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8008316:	f7ff fd39 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800831a:	4603      	mov	r3, r0
 800831c:	08db      	lsrs	r3, r3, #3
 800831e:	4a35      	ldr	r2, [pc, #212]	@ (80083f4 <LL_RCC_GetPLL2ClockFreq+0x134>)
 8008320:	fa42 f303 	asr.w	r3, r2, r3
 8008324:	61fb      	str	r3, [r7, #28]
        break;
 8008326:	e011      	b.n	800834c <LL_RCC_GetPLL2ClockFreq+0x8c>
        if (LL_RCC_CSI_IsReady() != 0U)
 8008328:	f7ff fd3e 	bl	8007da8 <LL_RCC_CSI_IsReady>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00e      	beq.n	8008350 <LL_RCC_GetPLL2ClockFreq+0x90>
          pllinputfreq = CSI_VALUE;
 8008332:	4b31      	ldr	r3, [pc, #196]	@ (80083f8 <LL_RCC_GetPLL2ClockFreq+0x138>)
 8008334:	61fb      	str	r3, [r7, #28]
        break;
 8008336:	e00b      	b.n	8008350 <LL_RCC_GetPLL2ClockFreq+0x90>
        if (LL_RCC_HSE_IsReady() != 0U)
 8008338:	f7ff fd02 	bl	8007d40 <LL_RCC_HSE_IsReady>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d008      	beq.n	8008354 <LL_RCC_GetPLL2ClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8008342:	4b2e      	ldr	r3, [pc, #184]	@ (80083fc <LL_RCC_GetPLL2ClockFreq+0x13c>)
 8008344:	61fb      	str	r3, [r7, #28]
        break;
 8008346:	e005      	b.n	8008354 <LL_RCC_GetPLL2ClockFreq+0x94>
        break;
 8008348:	bf00      	nop
 800834a:	e004      	b.n	8008356 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 800834c:	bf00      	nop
 800834e:	e002      	b.n	8008356 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 8008350:	bf00      	nop
 8008352:	e000      	b.n	8008356 <LL_RCC_GetPLL2ClockFreq+0x96>
        break;
 8008354:	bf00      	nop
    }

    pllm = LL_RCC_PLL2_GetM();
 8008356:	f7ff fe41 	bl	8007fdc <LL_RCC_PLL2_GetM>
 800835a:	6138      	str	r0, [r7, #16]
    plln = LL_RCC_PLL2_GetN();
 800835c:	f7ff fe4c 	bl	8007ff8 <LL_RCC_PLL2_GetN>
 8008360:	60f8      	str	r0, [r7, #12]

    if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8008362:	f7ff fec3 	bl	80080ec <LL_RCC_PLL2FRACN_IsEnabled>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <LL_RCC_GetPLL2ClockFreq+0xb2>
    {
      fracn = LL_RCC_PLL2_GetFRACN();
 800836c:	f7ff fed0 	bl	8008110 <LL_RCC_PLL2_GetFRACN>
 8008370:	61b8      	str	r0, [r7, #24]
    }

    if ((pllinputfreq != LL_RCC_PERIPH_FREQUENCY_NO) && (pllm != 0U))
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d038      	beq.n	80083ea <LL_RCC_GetPLL2ClockFreq+0x12a>
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d035      	beq.n	80083ea <LL_RCC_GetPLL2ClockFreq+0x12a>
    {
      if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800837e:	f7ff fe79 	bl	8008074 <LL_RCC_PLL2P_IsEnabled>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00c      	beq.n	80083a2 <LL_RCC_GetPLL2ClockFreq+0xe2>
      {
        pPLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetP());
 8008388:	f7ff fe44 	bl	8008014 <LL_RCC_PLL2_GetP>
 800838c:	4603      	mov	r3, r0
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	6939      	ldr	r1, [r7, #16]
 8008396:	69f8      	ldr	r0, [r7, #28]
 8008398:	f000 f8d2 	bl	8008540 <LL_RCC_CalcPLLClockFreq>
 800839c:	4602      	mov	r2, r0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	601a      	str	r2, [r3, #0]
      }

      if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80083a2:	f7ff fe7b 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00c      	beq.n	80083c6 <LL_RCC_GetPLL2ClockFreq+0x106>
      {
        pPLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetQ());
 80083ac:	f7ff fe42 	bl	8008034 <LL_RCC_PLL2_GetQ>
 80083b0:	4603      	mov	r3, r0
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	6939      	ldr	r1, [r7, #16]
 80083ba:	69f8      	ldr	r0, [r7, #28]
 80083bc:	f000 f8c0 	bl	8008540 <LL_RCC_CalcPLLClockFreq>
 80083c0:	4602      	mov	r2, r0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	605a      	str	r2, [r3, #4]
      }

      if (LL_RCC_PLL2R_IsEnabled() != 0U)
 80083c6:	f7ff fe7d 	bl	80080c4 <LL_RCC_PLL2R_IsEnabled>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00c      	beq.n	80083ea <LL_RCC_GetPLL2ClockFreq+0x12a>
      {
        pPLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL2_GetR());
 80083d0:	f7ff fe40 	bl	8008054 <LL_RCC_PLL2_GetR>
 80083d4:	4603      	mov	r3, r0
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	6939      	ldr	r1, [r7, #16]
 80083de:	69f8      	ldr	r0, [r7, #28]
 80083e0:	f000 f8ae 	bl	8008540 <LL_RCC_CalcPLLClockFreq>
 80083e4:	4602      	mov	r2, r0
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	609a      	str	r2, [r3, #8]
      }
    }
  }
}
 80083ea:	bf00      	nop
 80083ec:	3720      	adds	r7, #32
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	03d09000 	.word	0x03d09000
 80083f8:	003d0900 	.word	0x003d0900
 80083fc:	01312d00 	.word	0x01312d00

08008400 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *pPLL_Clocks)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	@ 0x28
 8008404:	af02      	add	r7, sp, #8
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t plln;
  uint32_t fracn = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */

  pPLL_Clocks->PLL_P_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
  pPLL_Clocks->PLL_Q_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	605a      	str	r2, [r3, #4]
  pPLL_Clocks->PLL_R_Frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	609a      	str	r2, [r3, #8]

  if (LL_RCC_PLL3_IsReady() != 0U)
 8008422:	f7ff fe83 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d07e      	beq.n	800852a <LL_RCC_GetPLL3ClockFreq+0x12a>
  {

    pllsource = LL_RCC_PLL3_GetSource();
 800842c:	f7ff fe92 	bl	8008154 <LL_RCC_PLL3_GetSource>
 8008430:	6178      	str	r0, [r7, #20]

    switch (pllsource)
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b03      	cmp	r3, #3
 8008436:	d01f      	beq.n	8008478 <LL_RCC_GetPLL3ClockFreq+0x78>
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d824      	bhi.n	8008488 <LL_RCC_GetPLL3ClockFreq+0x88>
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d003      	beq.n	800844c <LL_RCC_GetPLL3ClockFreq+0x4c>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d00e      	beq.n	8008468 <LL_RCC_GetPLL3ClockFreq+0x68>
        break;

      case LL_RCC_PLL3SOURCE_NONE:
      default:
        /* PLL clock disabled */
        break;
 800844a:	e01d      	b.n	8008488 <LL_RCC_GetPLL3ClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 800844c:	f7ff fc8c 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01a      	beq.n	800848c <LL_RCC_GetPLL3ClockFreq+0x8c>
          pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8008456:	f7ff fc99 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800845a:	4603      	mov	r3, r0
 800845c:	08db      	lsrs	r3, r3, #3
 800845e:	4a35      	ldr	r2, [pc, #212]	@ (8008534 <LL_RCC_GetPLL3ClockFreq+0x134>)
 8008460:	fa42 f303 	asr.w	r3, r2, r3
 8008464:	61fb      	str	r3, [r7, #28]
        break;
 8008466:	e011      	b.n	800848c <LL_RCC_GetPLL3ClockFreq+0x8c>
        if (LL_RCC_CSI_IsReady() != 0U)
 8008468:	f7ff fc9e 	bl	8007da8 <LL_RCC_CSI_IsReady>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00e      	beq.n	8008490 <LL_RCC_GetPLL3ClockFreq+0x90>
          pllinputfreq = CSI_VALUE;
 8008472:	4b31      	ldr	r3, [pc, #196]	@ (8008538 <LL_RCC_GetPLL3ClockFreq+0x138>)
 8008474:	61fb      	str	r3, [r7, #28]
        break;
 8008476:	e00b      	b.n	8008490 <LL_RCC_GetPLL3ClockFreq+0x90>
        if (LL_RCC_HSE_IsReady() != 0U)
 8008478:	f7ff fc62 	bl	8007d40 <LL_RCC_HSE_IsReady>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <LL_RCC_GetPLL3ClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8008482:	4b2e      	ldr	r3, [pc, #184]	@ (800853c <LL_RCC_GetPLL3ClockFreq+0x13c>)
 8008484:	61fb      	str	r3, [r7, #28]
        break;
 8008486:	e005      	b.n	8008494 <LL_RCC_GetPLL3ClockFreq+0x94>
        break;
 8008488:	bf00      	nop
 800848a:	e004      	b.n	8008496 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 800848c:	bf00      	nop
 800848e:	e002      	b.n	8008496 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 8008490:	bf00      	nop
 8008492:	e000      	b.n	8008496 <LL_RCC_GetPLL3ClockFreq+0x96>
        break;
 8008494:	bf00      	nop
    }

    pllm = LL_RCC_PLL3_GetM();
 8008496:	f7ff fea9 	bl	80081ec <LL_RCC_PLL3_GetM>
 800849a:	6138      	str	r0, [r7, #16]
    plln = LL_RCC_PLL3_GetN();
 800849c:	f7ff fe68 	bl	8008170 <LL_RCC_PLL3_GetN>
 80084a0:	60f8      	str	r0, [r7, #12]
    if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 80084a2:	f7ff feed 	bl	8008280 <LL_RCC_PLL3FRACN_IsEnabled>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <LL_RCC_GetPLL3ClockFreq+0xb2>
    {
      fracn = LL_RCC_PLL3_GetFRACN();
 80084ac:	f7ff fefa 	bl	80082a4 <LL_RCC_PLL3_GetFRACN>
 80084b0:	61b8      	str	r0, [r7, #24]
    }

    if ((pllinputfreq != LL_RCC_PERIPH_FREQUENCY_NO) && (pllm != 0U))
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d038      	beq.n	800852a <LL_RCC_GetPLL3ClockFreq+0x12a>
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d035      	beq.n	800852a <LL_RCC_GetPLL3ClockFreq+0x12a>
    {
      if (LL_RCC_PLL3P_IsEnabled() != 0U)
 80084be:	f7ff fea3 	bl	8008208 <LL_RCC_PLL3P_IsEnabled>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00c      	beq.n	80084e2 <LL_RCC_GetPLL3ClockFreq+0xe2>
      {
        pPLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetP());
 80084c8:	f7ff fe60 	bl	800818c <LL_RCC_PLL3_GetP>
 80084cc:	4603      	mov	r3, r0
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	6939      	ldr	r1, [r7, #16]
 80084d6:	69f8      	ldr	r0, [r7, #28]
 80084d8:	f000 f832 	bl	8008540 <LL_RCC_CalcPLLClockFreq>
 80084dc:	4602      	mov	r2, r0
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	601a      	str	r2, [r3, #0]
      }

      if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 80084e2:	f7ff fea5 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00c      	beq.n	8008506 <LL_RCC_GetPLL3ClockFreq+0x106>
      {
        pPLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetQ());
 80084ec:	f7ff fe5e 	bl	80081ac <LL_RCC_PLL3_GetQ>
 80084f0:	4603      	mov	r3, r0
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	6939      	ldr	r1, [r7, #16]
 80084fa:	69f8      	ldr	r0, [r7, #28]
 80084fc:	f000 f820 	bl	8008540 <LL_RCC_CalcPLLClockFreq>
 8008500:	4602      	mov	r2, r0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	605a      	str	r2, [r3, #4]
      }

      if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8008506:	f7ff fea7 	bl	8008258 <LL_RCC_PLL3R_IsEnabled>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00c      	beq.n	800852a <LL_RCC_GetPLL3ClockFreq+0x12a>
      {
        pPLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, pllm, plln, fracn, LL_RCC_PLL3_GetR());
 8008510:	f7ff fe5c 	bl	80081cc <LL_RCC_PLL3_GetR>
 8008514:	4603      	mov	r3, r0
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	6939      	ldr	r1, [r7, #16]
 800851e:	69f8      	ldr	r0, [r7, #28]
 8008520:	f000 f80e 	bl	8008540 <LL_RCC_CalcPLLClockFreq>
 8008524:	4602      	mov	r2, r0
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	609a      	str	r2, [r3, #8]
      }
    }
  }
}
 800852a:	bf00      	nop
 800852c:	3720      	adds	r7, #32
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	03d09000 	.word	0x03d09000
 8008538:	003d0900 	.word	0x003d0900
 800853c:	01312d00 	.word	0x01312d00

08008540 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 output clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800857a:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80085bc <LL_RCC_CalcPLLClockFreq+0x7c>
 800857e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858a:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	ee07 3a90 	vmov	s15, r3
 8008594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008598:	edd7 6a05 	vldr	s13, [r7, #20]
 800859c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a0:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 80085a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80085a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ac:	ee17 3a90 	vmov	r3, s15
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	46000000 	.word	0x46000000

080085c0 <LL_RCC_GetUSARTClockFreq>:
  *  (*)  : For stm32h56xxx and stm32h57xxx family lines only.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 80085d2:	d17c      	bne.n	80086ce <LL_RCC_GetUSARTClockFreq+0x10e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff fc7b 	bl	8007ed0 <LL_RCC_GetUSARTClockSource>
 80085da:	4603      	mov	r3, r0
 80085dc:	4aad      	ldr	r2, [pc, #692]	@ (8008894 <LL_RCC_GetUSARTClockFreq+0x2d4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d06b      	beq.n	80086ba <LL_RCC_GetUSARTClockFreq+0xfa>
 80085e2:	4aac      	ldr	r2, [pc, #688]	@ (8008894 <LL_RCC_GetUSARTClockFreq+0x2d4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	f200 8346 	bhi.w	8008c76 <LL_RCC_GetUSARTClockFreq+0x6b6>
 80085ea:	4aab      	ldr	r2, [pc, #684]	@ (8008898 <LL_RCC_GetUSARTClockFreq+0x2d8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d05b      	beq.n	80086a8 <LL_RCC_GetUSARTClockFreq+0xe8>
 80085f0:	4aa9      	ldr	r2, [pc, #676]	@ (8008898 <LL_RCC_GetUSARTClockFreq+0x2d8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	f200 833f 	bhi.w	8008c76 <LL_RCC_GetUSARTClockFreq+0x6b6>
 80085f8:	4aa8      	ldr	r2, [pc, #672]	@ (800889c <LL_RCC_GetUSARTClockFreq+0x2dc>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d045      	beq.n	800868a <LL_RCC_GetUSARTClockFreq+0xca>
 80085fe:	4aa7      	ldr	r2, [pc, #668]	@ (800889c <LL_RCC_GetUSARTClockFreq+0x2dc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	f200 8338 	bhi.w	8008c76 <LL_RCC_GetUSARTClockFreq+0x6b6>
 8008606:	4aa6      	ldr	r2, [pc, #664]	@ (80088a0 <LL_RCC_GetUSARTClockFreq+0x2e0>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d02a      	beq.n	8008662 <LL_RCC_GetUSARTClockFreq+0xa2>
 800860c:	4aa4      	ldr	r2, [pc, #656]	@ (80088a0 <LL_RCC_GetUSARTClockFreq+0x2e0>)
 800860e:	4293      	cmp	r3, r2
 8008610:	f200 8331 	bhi.w	8008c76 <LL_RCC_GetUSARTClockFreq+0x6b6>
 8008614:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8008618:	d003      	beq.n	8008622 <LL_RCC_GetUSARTClockFreq+0x62>
 800861a:	4aa2      	ldr	r2, [pc, #648]	@ (80088a4 <LL_RCC_GetUSARTClockFreq+0x2e4>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00c      	beq.n	800863a <LL_RCC_GetUSARTClockFreq+0x7a>
        }
        break;

      default:
        /* unreachable code */
        break;
 8008620:	e329      	b.n	8008c76 <LL_RCC_GetUSARTClockFreq+0x6b6>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008622:	f000 ffb1 	bl	8009588 <RCC_GetSystemClockFreq>
 8008626:	4603      	mov	r3, r0
 8008628:	4618      	mov	r0, r3
 800862a:	f001 f813 	bl	8009654 <RCC_GetHCLKClockFreq>
 800862e:	4603      	mov	r3, r0
 8008630:	4618      	mov	r0, r3
 8008632:	f001 f839 	bl	80096a8 <RCC_GetPCLK2ClockFreq>
 8008636:	6178      	str	r0, [r7, #20]
        break;
 8008638:	e364      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800863a:	f7ff fcad 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 831a 	beq.w	8008c7a <LL_RCC_GetUSARTClockFreq+0x6ba>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8008646:	f7ff fd29 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8314 	beq.w	8008c7a <LL_RCC_GetUSARTClockFreq+0x6ba>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8008652:	f107 0308 	add.w	r3, r7, #8
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff fe32 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	617b      	str	r3, [r7, #20]
        break;
 8008660:	e30b      	b.n	8008c7a <LL_RCC_GetUSARTClockFreq+0x6ba>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8008662:	f7ff fd63 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8308 	beq.w	8008c7e <LL_RCC_GetUSARTClockFreq+0x6be>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800866e:	f7ff fddf 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8302 	beq.w	8008c7e <LL_RCC_GetUSARTClockFreq+0x6be>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800867a:	f107 0308 	add.w	r3, r7, #8
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff febe 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	617b      	str	r3, [r7, #20]
        break;
 8008688:	e2f9      	b.n	8008c7e <LL_RCC_GetUSARTClockFreq+0x6be>
        if (LL_RCC_HSI_IsReady() == 1U)
 800868a:	f7ff fb6d 	bl	8007d68 <LL_RCC_HSI_IsReady>
 800868e:	4603      	mov	r3, r0
 8008690:	2b01      	cmp	r3, #1
 8008692:	f040 82f6 	bne.w	8008c82 <LL_RCC_GetUSARTClockFreq+0x6c2>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8008696:	f7ff fb79 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800869a:	4603      	mov	r3, r0
 800869c:	08db      	lsrs	r3, r3, #3
 800869e:	4a82      	ldr	r2, [pc, #520]	@ (80088a8 <LL_RCC_GetUSARTClockFreq+0x2e8>)
 80086a0:	fa42 f303 	asr.w	r3, r2, r3
 80086a4:	617b      	str	r3, [r7, #20]
        break;
 80086a6:	e2ec      	b.n	8008c82 <LL_RCC_GetUSARTClockFreq+0x6c2>
        if (LL_RCC_CSI_IsReady() == 1U)
 80086a8:	f7ff fb7e 	bl	8007da8 <LL_RCC_CSI_IsReady>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	f040 82e9 	bne.w	8008c86 <LL_RCC_GetUSARTClockFreq+0x6c6>
          usart_frequency = CSI_VALUE;
 80086b4:	4b7d      	ldr	r3, [pc, #500]	@ (80088ac <LL_RCC_GetUSARTClockFreq+0x2ec>)
 80086b6:	617b      	str	r3, [r7, #20]
        break;
 80086b8:	e2e5      	b.n	8008c86 <LL_RCC_GetUSARTClockFreq+0x6c6>
        if (LL_RCC_LSE_IsReady() == 1U)
 80086ba:	f7ff fb89 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	f040 82e2 	bne.w	8008c8a <LL_RCC_GetUSARTClockFreq+0x6ca>
          usart_frequency = LSE_VALUE;
 80086c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086ca:	617b      	str	r3, [r7, #20]
        break;
 80086cc:	e2dd      	b.n	8008c8a <LL_RCC_GetUSARTClockFreq+0x6ca>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a77      	ldr	r2, [pc, #476]	@ (80088b0 <LL_RCC_GetUSARTClockFreq+0x2f0>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d17c      	bne.n	80087d0 <LL_RCC_GetUSARTClockFreq+0x210>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff fbfa 	bl	8007ed0 <LL_RCC_GetUSARTClockSource>
 80086dc:	4603      	mov	r3, r0
 80086de:	4a75      	ldr	r2, [pc, #468]	@ (80088b4 <LL_RCC_GetUSARTClockFreq+0x2f4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d06b      	beq.n	80087bc <LL_RCC_GetUSARTClockFreq+0x1fc>
 80086e4:	4a73      	ldr	r2, [pc, #460]	@ (80088b4 <LL_RCC_GetUSARTClockFreq+0x2f4>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	f200 82d1 	bhi.w	8008c8e <LL_RCC_GetUSARTClockFreq+0x6ce>
 80086ec:	4a72      	ldr	r2, [pc, #456]	@ (80088b8 <LL_RCC_GetUSARTClockFreq+0x2f8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d05b      	beq.n	80087aa <LL_RCC_GetUSARTClockFreq+0x1ea>
 80086f2:	4a71      	ldr	r2, [pc, #452]	@ (80088b8 <LL_RCC_GetUSARTClockFreq+0x2f8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	f200 82ca 	bhi.w	8008c8e <LL_RCC_GetUSARTClockFreq+0x6ce>
 80086fa:	4a70      	ldr	r2, [pc, #448]	@ (80088bc <LL_RCC_GetUSARTClockFreq+0x2fc>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d045      	beq.n	800878c <LL_RCC_GetUSARTClockFreq+0x1cc>
 8008700:	4a6e      	ldr	r2, [pc, #440]	@ (80088bc <LL_RCC_GetUSARTClockFreq+0x2fc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	f200 82c3 	bhi.w	8008c8e <LL_RCC_GetUSARTClockFreq+0x6ce>
 8008708:	4a6d      	ldr	r2, [pc, #436]	@ (80088c0 <LL_RCC_GetUSARTClockFreq+0x300>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d02a      	beq.n	8008764 <LL_RCC_GetUSARTClockFreq+0x1a4>
 800870e:	4a6c      	ldr	r2, [pc, #432]	@ (80088c0 <LL_RCC_GetUSARTClockFreq+0x300>)
 8008710:	4293      	cmp	r3, r2
 8008712:	f200 82bc 	bhi.w	8008c8e <LL_RCC_GetUSARTClockFreq+0x6ce>
 8008716:	4a66      	ldr	r2, [pc, #408]	@ (80088b0 <LL_RCC_GetUSARTClockFreq+0x2f0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <LL_RCC_GetUSARTClockFreq+0x164>
 800871c:	4a69      	ldr	r2, [pc, #420]	@ (80088c4 <LL_RCC_GetUSARTClockFreq+0x304>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00c      	beq.n	800873c <LL_RCC_GetUSARTClockFreq+0x17c>
        }
        break;

      default:
        /* unreachable code */
        break;
 8008722:	e2b4      	b.n	8008c8e <LL_RCC_GetUSARTClockFreq+0x6ce>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008724:	f000 ff30 	bl	8009588 <RCC_GetSystemClockFreq>
 8008728:	4603      	mov	r3, r0
 800872a:	4618      	mov	r0, r3
 800872c:	f000 ff92 	bl	8009654 <RCC_GetHCLKClockFreq>
 8008730:	4603      	mov	r3, r0
 8008732:	4618      	mov	r0, r3
 8008734:	f000 ffa2 	bl	800967c <RCC_GetPCLK1ClockFreq>
 8008738:	6178      	str	r0, [r7, #20]
        break;
 800873a:	e2e3      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 800873c:	f7ff fc2c 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 82a5 	beq.w	8008c92 <LL_RCC_GetUSARTClockFreq+0x6d2>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8008748:	f7ff fca8 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	f000 829f 	beq.w	8008c92 <LL_RCC_GetUSARTClockFreq+0x6d2>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8008754:	f107 0308 	add.w	r3, r7, #8
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff fdb1 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	617b      	str	r3, [r7, #20]
        break;
 8008762:	e296      	b.n	8008c92 <LL_RCC_GetUSARTClockFreq+0x6d2>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8008764:	f7ff fce2 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8293 	beq.w	8008c96 <LL_RCC_GetUSARTClockFreq+0x6d6>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8008770:	f7ff fd5e 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 828d 	beq.w	8008c96 <LL_RCC_GetUSARTClockFreq+0x6d6>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800877c:	f107 0308 	add.w	r3, r7, #8
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff fe3d 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	617b      	str	r3, [r7, #20]
        break;
 800878a:	e284      	b.n	8008c96 <LL_RCC_GetUSARTClockFreq+0x6d6>
        if (LL_RCC_HSI_IsReady() == 1U)
 800878c:	f7ff faec 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8008790:	4603      	mov	r3, r0
 8008792:	2b01      	cmp	r3, #1
 8008794:	f040 8281 	bne.w	8008c9a <LL_RCC_GetUSARTClockFreq+0x6da>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8008798:	f7ff faf8 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800879c:	4603      	mov	r3, r0
 800879e:	08db      	lsrs	r3, r3, #3
 80087a0:	4a41      	ldr	r2, [pc, #260]	@ (80088a8 <LL_RCC_GetUSARTClockFreq+0x2e8>)
 80087a2:	fa42 f303 	asr.w	r3, r2, r3
 80087a6:	617b      	str	r3, [r7, #20]
        break;
 80087a8:	e277      	b.n	8008c9a <LL_RCC_GetUSARTClockFreq+0x6da>
        if (LL_RCC_CSI_IsReady() == 1U)
 80087aa:	f7ff fafd 	bl	8007da8 <LL_RCC_CSI_IsReady>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	f040 8274 	bne.w	8008c9e <LL_RCC_GetUSARTClockFreq+0x6de>
          usart_frequency = CSI_VALUE;
 80087b6:	4b3d      	ldr	r3, [pc, #244]	@ (80088ac <LL_RCC_GetUSARTClockFreq+0x2ec>)
 80087b8:	617b      	str	r3, [r7, #20]
        break;
 80087ba:	e270      	b.n	8008c9e <LL_RCC_GetUSARTClockFreq+0x6de>
        if (LL_RCC_LSE_IsReady() == 1U)
 80087bc:	f7ff fb08 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	f040 826d 	bne.w	8008ca2 <LL_RCC_GetUSARTClockFreq+0x6e2>
          usart_frequency = LSE_VALUE;
 80087c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087cc:	617b      	str	r3, [r7, #20]
        break;
 80087ce:	e268      	b.n	8008ca2 <LL_RCC_GetUSARTClockFreq+0x6e2>
    }
  }
  else if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a3d      	ldr	r2, [pc, #244]	@ (80088c8 <LL_RCC_GetUSARTClockFreq+0x308>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	f040 80a5 	bne.w	8008924 <LL_RCC_GetUSARTClockFreq+0x364>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fb78 	bl	8007ed0 <LL_RCC_GetUSARTClockSource>
 80087e0:	4603      	mov	r3, r0
 80087e2:	4a3a      	ldr	r2, [pc, #232]	@ (80088cc <LL_RCC_GetUSARTClockFreq+0x30c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	f000 8093 	beq.w	8008910 <LL_RCC_GetUSARTClockFreq+0x350>
 80087ea:	4a38      	ldr	r2, [pc, #224]	@ (80088cc <LL_RCC_GetUSARTClockFreq+0x30c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	f200 825a 	bhi.w	8008ca6 <LL_RCC_GetUSARTClockFreq+0x6e6>
 80087f2:	4a37      	ldr	r2, [pc, #220]	@ (80088d0 <LL_RCC_GetUSARTClockFreq+0x310>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	f000 8082 	beq.w	80088fe <LL_RCC_GetUSARTClockFreq+0x33e>
 80087fa:	4a35      	ldr	r2, [pc, #212]	@ (80088d0 <LL_RCC_GetUSARTClockFreq+0x310>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	f200 8252 	bhi.w	8008ca6 <LL_RCC_GetUSARTClockFreq+0x6e6>
 8008802:	4a34      	ldr	r2, [pc, #208]	@ (80088d4 <LL_RCC_GetUSARTClockFreq+0x314>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d06b      	beq.n	80088e0 <LL_RCC_GetUSARTClockFreq+0x320>
 8008808:	4a32      	ldr	r2, [pc, #200]	@ (80088d4 <LL_RCC_GetUSARTClockFreq+0x314>)
 800880a:	4293      	cmp	r3, r2
 800880c:	f200 824b 	bhi.w	8008ca6 <LL_RCC_GetUSARTClockFreq+0x6e6>
 8008810:	4a31      	ldr	r2, [pc, #196]	@ (80088d8 <LL_RCC_GetUSARTClockFreq+0x318>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d02a      	beq.n	800886c <LL_RCC_GetUSARTClockFreq+0x2ac>
 8008816:	4a30      	ldr	r2, [pc, #192]	@ (80088d8 <LL_RCC_GetUSARTClockFreq+0x318>)
 8008818:	4293      	cmp	r3, r2
 800881a:	f200 8244 	bhi.w	8008ca6 <LL_RCC_GetUSARTClockFreq+0x6e6>
 800881e:	4a2a      	ldr	r2, [pc, #168]	@ (80088c8 <LL_RCC_GetUSARTClockFreq+0x308>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d003      	beq.n	800882c <LL_RCC_GetUSARTClockFreq+0x26c>
 8008824:	4a2d      	ldr	r2, [pc, #180]	@ (80088dc <LL_RCC_GetUSARTClockFreq+0x31c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00c      	beq.n	8008844 <LL_RCC_GetUSARTClockFreq+0x284>
        }
        break;

      default:
        /* unreachable code */
        break;
 800882a:	e23c      	b.n	8008ca6 <LL_RCC_GetUSARTClockFreq+0x6e6>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800882c:	f000 feac 	bl	8009588 <RCC_GetSystemClockFreq>
 8008830:	4603      	mov	r3, r0
 8008832:	4618      	mov	r0, r3
 8008834:	f000 ff0e 	bl	8009654 <RCC_GetHCLKClockFreq>
 8008838:	4603      	mov	r3, r0
 800883a:	4618      	mov	r0, r3
 800883c:	f000 ff1e 	bl	800967c <RCC_GetPCLK1ClockFreq>
 8008840:	6178      	str	r0, [r7, #20]
        break;
 8008842:	e25f      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8008844:	f7ff fba8 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 822d 	beq.w	8008caa <LL_RCC_GetUSARTClockFreq+0x6ea>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8008850:	f7ff fc24 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8227 	beq.w	8008caa <LL_RCC_GetUSARTClockFreq+0x6ea>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800885c:	f107 0308 	add.w	r3, r7, #8
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fd2d 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	617b      	str	r3, [r7, #20]
        break;
 800886a:	e21e      	b.n	8008caa <LL_RCC_GetUSARTClockFreq+0x6ea>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800886c:	f7ff fc5e 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 821b 	beq.w	8008cae <LL_RCC_GetUSARTClockFreq+0x6ee>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8008878:	f7ff fcda 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 8215 	beq.w	8008cae <LL_RCC_GetUSARTClockFreq+0x6ee>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8008884:	f107 0308 	add.w	r3, r7, #8
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff fdb9 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	617b      	str	r3, [r7, #20]
        break;
 8008892:	e20c      	b.n	8008cae <LL_RCC_GetUSARTClockFreq+0x6ee>
 8008894:	07050000 	.word	0x07050000
 8008898:	07040000 	.word	0x07040000
 800889c:	07030000 	.word	0x07030000
 80088a0:	07020000 	.word	0x07020000
 80088a4:	07010000 	.word	0x07010000
 80088a8:	03d09000 	.word	0x03d09000
 80088ac:	003d0900 	.word	0x003d0900
 80088b0:	07000300 	.word	0x07000300
 80088b4:	07050300 	.word	0x07050300
 80088b8:	07040300 	.word	0x07040300
 80088bc:	07030300 	.word	0x07030300
 80088c0:	07020300 	.word	0x07020300
 80088c4:	07010300 	.word	0x07010300
 80088c8:	07000600 	.word	0x07000600
 80088cc:	07050600 	.word	0x07050600
 80088d0:	07040600 	.word	0x07040600
 80088d4:	07030600 	.word	0x07030600
 80088d8:	07020600 	.word	0x07020600
 80088dc:	07010600 	.word	0x07010600
        if (LL_RCC_HSI_IsReady() == 1U)
 80088e0:	f7ff fa42 	bl	8007d68 <LL_RCC_HSI_IsReady>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	f040 81e3 	bne.w	8008cb2 <LL_RCC_GetUSARTClockFreq+0x6f2>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 80088ec:	f7ff fa4e 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 80088f0:	4603      	mov	r3, r0
 80088f2:	08db      	lsrs	r3, r3, #3
 80088f4:	4aa9      	ldr	r2, [pc, #676]	@ (8008b9c <LL_RCC_GetUSARTClockFreq+0x5dc>)
 80088f6:	fa42 f303 	asr.w	r3, r2, r3
 80088fa:	617b      	str	r3, [r7, #20]
        break;
 80088fc:	e1d9      	b.n	8008cb2 <LL_RCC_GetUSARTClockFreq+0x6f2>
        if (LL_RCC_CSI_IsReady() == 1U)
 80088fe:	f7ff fa53 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8008902:	4603      	mov	r3, r0
 8008904:	2b01      	cmp	r3, #1
 8008906:	f040 81d6 	bne.w	8008cb6 <LL_RCC_GetUSARTClockFreq+0x6f6>
          usart_frequency = CSI_VALUE;
 800890a:	4ba5      	ldr	r3, [pc, #660]	@ (8008ba0 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 800890c:	617b      	str	r3, [r7, #20]
        break;
 800890e:	e1d2      	b.n	8008cb6 <LL_RCC_GetUSARTClockFreq+0x6f6>
        if (LL_RCC_LSE_IsReady() == 1U)
 8008910:	f7ff fa5e 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8008914:	4603      	mov	r3, r0
 8008916:	2b01      	cmp	r3, #1
 8008918:	f040 81cf 	bne.w	8008cba <LL_RCC_GetUSARTClockFreq+0x6fa>
          usart_frequency = LSE_VALUE;
 800891c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008920:	617b      	str	r3, [r7, #20]
        break;
 8008922:	e1ca      	b.n	8008cba <LL_RCC_GetUSARTClockFreq+0x6fa>
    }
  }

#if defined(USART6)
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a9f      	ldr	r2, [pc, #636]	@ (8008ba4 <LL_RCC_GetUSARTClockFreq+0x5e4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d17c      	bne.n	8008a26 <LL_RCC_GetUSARTClockFreq+0x466>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff facf 	bl	8007ed0 <LL_RCC_GetUSARTClockSource>
 8008932:	4603      	mov	r3, r0
 8008934:	4a9c      	ldr	r2, [pc, #624]	@ (8008ba8 <LL_RCC_GetUSARTClockFreq+0x5e8>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d06b      	beq.n	8008a12 <LL_RCC_GetUSARTClockFreq+0x452>
 800893a:	4a9b      	ldr	r2, [pc, #620]	@ (8008ba8 <LL_RCC_GetUSARTClockFreq+0x5e8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	f200 81be 	bhi.w	8008cbe <LL_RCC_GetUSARTClockFreq+0x6fe>
 8008942:	4a9a      	ldr	r2, [pc, #616]	@ (8008bac <LL_RCC_GetUSARTClockFreq+0x5ec>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d05b      	beq.n	8008a00 <LL_RCC_GetUSARTClockFreq+0x440>
 8008948:	4a98      	ldr	r2, [pc, #608]	@ (8008bac <LL_RCC_GetUSARTClockFreq+0x5ec>)
 800894a:	4293      	cmp	r3, r2
 800894c:	f200 81b7 	bhi.w	8008cbe <LL_RCC_GetUSARTClockFreq+0x6fe>
 8008950:	4a97      	ldr	r2, [pc, #604]	@ (8008bb0 <LL_RCC_GetUSARTClockFreq+0x5f0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d045      	beq.n	80089e2 <LL_RCC_GetUSARTClockFreq+0x422>
 8008956:	4a96      	ldr	r2, [pc, #600]	@ (8008bb0 <LL_RCC_GetUSARTClockFreq+0x5f0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f200 81b0 	bhi.w	8008cbe <LL_RCC_GetUSARTClockFreq+0x6fe>
 800895e:	4a95      	ldr	r2, [pc, #596]	@ (8008bb4 <LL_RCC_GetUSARTClockFreq+0x5f4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d02a      	beq.n	80089ba <LL_RCC_GetUSARTClockFreq+0x3fa>
 8008964:	4a93      	ldr	r2, [pc, #588]	@ (8008bb4 <LL_RCC_GetUSARTClockFreq+0x5f4>)
 8008966:	4293      	cmp	r3, r2
 8008968:	f200 81a9 	bhi.w	8008cbe <LL_RCC_GetUSARTClockFreq+0x6fe>
 800896c:	4a8d      	ldr	r2, [pc, #564]	@ (8008ba4 <LL_RCC_GetUSARTClockFreq+0x5e4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d003      	beq.n	800897a <LL_RCC_GetUSARTClockFreq+0x3ba>
 8008972:	4a91      	ldr	r2, [pc, #580]	@ (8008bb8 <LL_RCC_GetUSARTClockFreq+0x5f8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00c      	beq.n	8008992 <LL_RCC_GetUSARTClockFreq+0x3d2>
        }
        break;

      default:
        /* unreachable code */
        break;
 8008978:	e1a1      	b.n	8008cbe <LL_RCC_GetUSARTClockFreq+0x6fe>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800897a:	f000 fe05 	bl	8009588 <RCC_GetSystemClockFreq>
 800897e:	4603      	mov	r3, r0
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fe67 	bl	8009654 <RCC_GetHCLKClockFreq>
 8008986:	4603      	mov	r3, r0
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fe77 	bl	800967c <RCC_GetPCLK1ClockFreq>
 800898e:	6178      	str	r0, [r7, #20]
        break;
 8008990:	e1b8      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8008992:	f7ff fb01 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8192 	beq.w	8008cc2 <LL_RCC_GetUSARTClockFreq+0x702>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800899e:	f7ff fb7d 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 818c 	beq.w	8008cc2 <LL_RCC_GetUSARTClockFreq+0x702>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 80089aa:	f107 0308 	add.w	r3, r7, #8
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff fc86 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	617b      	str	r3, [r7, #20]
        break;
 80089b8:	e183      	b.n	8008cc2 <LL_RCC_GetUSARTClockFreq+0x702>
        if (LL_RCC_PLL3_IsReady() != 0U)
 80089ba:	f7ff fbb7 	bl	800812c <LL_RCC_PLL3_IsReady>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8180 	beq.w	8008cc6 <LL_RCC_GetUSARTClockFreq+0x706>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 80089c6:	f7ff fc33 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 817a 	beq.w	8008cc6 <LL_RCC_GetUSARTClockFreq+0x706>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80089d2:	f107 0308 	add.w	r3, r7, #8
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fd12 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	617b      	str	r3, [r7, #20]
        break;
 80089e0:	e171      	b.n	8008cc6 <LL_RCC_GetUSARTClockFreq+0x706>
        if (LL_RCC_HSI_IsReady() == 1U)
 80089e2:	f7ff f9c1 	bl	8007d68 <LL_RCC_HSI_IsReady>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	f040 816e 	bne.w	8008cca <LL_RCC_GetUSARTClockFreq+0x70a>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 80089ee:	f7ff f9cd 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 80089f2:	4603      	mov	r3, r0
 80089f4:	08db      	lsrs	r3, r3, #3
 80089f6:	4a69      	ldr	r2, [pc, #420]	@ (8008b9c <LL_RCC_GetUSARTClockFreq+0x5dc>)
 80089f8:	fa42 f303 	asr.w	r3, r2, r3
 80089fc:	617b      	str	r3, [r7, #20]
        break;
 80089fe:	e164      	b.n	8008cca <LL_RCC_GetUSARTClockFreq+0x70a>
        if (LL_RCC_CSI_IsReady() == 1U)
 8008a00:	f7ff f9d2 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	f040 8161 	bne.w	8008cce <LL_RCC_GetUSARTClockFreq+0x70e>
          usart_frequency = CSI_VALUE;
 8008a0c:	4b64      	ldr	r3, [pc, #400]	@ (8008ba0 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 8008a0e:	617b      	str	r3, [r7, #20]
        break;
 8008a10:	e15d      	b.n	8008cce <LL_RCC_GetUSARTClockFreq+0x70e>
        if (LL_RCC_LSE_IsReady() == 1U)
 8008a12:	f7ff f9dd 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	f040 815a 	bne.w	8008cd2 <LL_RCC_GetUSARTClockFreq+0x712>
          usart_frequency = LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a22:	617b      	str	r3, [r7, #20]
        break;
 8008a24:	e155      	b.n	8008cd2 <LL_RCC_GetUSARTClockFreq+0x712>
    }
  }
#endif /* USART6 */

#if defined(USART10)
  else if (USARTxSource == LL_RCC_USART10_CLKSOURCE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a64      	ldr	r2, [pc, #400]	@ (8008bbc <LL_RCC_GetUSARTClockFreq+0x5fc>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d17c      	bne.n	8008b28 <LL_RCC_GetUSARTClockFreq+0x568>
  {
    /* USART10CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fa4e 	bl	8007ed0 <LL_RCC_GetUSARTClockSource>
 8008a34:	4603      	mov	r3, r0
 8008a36:	4a62      	ldr	r2, [pc, #392]	@ (8008bc0 <LL_RCC_GetUSARTClockFreq+0x600>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d06b      	beq.n	8008b14 <LL_RCC_GetUSARTClockFreq+0x554>
 8008a3c:	4a60      	ldr	r2, [pc, #384]	@ (8008bc0 <LL_RCC_GetUSARTClockFreq+0x600>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	f200 8149 	bhi.w	8008cd6 <LL_RCC_GetUSARTClockFreq+0x716>
 8008a44:	4a5f      	ldr	r2, [pc, #380]	@ (8008bc4 <LL_RCC_GetUSARTClockFreq+0x604>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d05b      	beq.n	8008b02 <LL_RCC_GetUSARTClockFreq+0x542>
 8008a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8008bc4 <LL_RCC_GetUSARTClockFreq+0x604>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	f200 8142 	bhi.w	8008cd6 <LL_RCC_GetUSARTClockFreq+0x716>
 8008a52:	4a5d      	ldr	r2, [pc, #372]	@ (8008bc8 <LL_RCC_GetUSARTClockFreq+0x608>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d045      	beq.n	8008ae4 <LL_RCC_GetUSARTClockFreq+0x524>
 8008a58:	4a5b      	ldr	r2, [pc, #364]	@ (8008bc8 <LL_RCC_GetUSARTClockFreq+0x608>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	f200 813b 	bhi.w	8008cd6 <LL_RCC_GetUSARTClockFreq+0x716>
 8008a60:	4a5a      	ldr	r2, [pc, #360]	@ (8008bcc <LL_RCC_GetUSARTClockFreq+0x60c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d02a      	beq.n	8008abc <LL_RCC_GetUSARTClockFreq+0x4fc>
 8008a66:	4a59      	ldr	r2, [pc, #356]	@ (8008bcc <LL_RCC_GetUSARTClockFreq+0x60c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	f200 8134 	bhi.w	8008cd6 <LL_RCC_GetUSARTClockFreq+0x716>
 8008a6e:	4a53      	ldr	r2, [pc, #332]	@ (8008bbc <LL_RCC_GetUSARTClockFreq+0x5fc>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d003      	beq.n	8008a7c <LL_RCC_GetUSARTClockFreq+0x4bc>
 8008a74:	4a56      	ldr	r2, [pc, #344]	@ (8008bd0 <LL_RCC_GetUSARTClockFreq+0x610>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d00c      	beq.n	8008a94 <LL_RCC_GetUSARTClockFreq+0x4d4>
        }
        break;

      default:
        /* unreachable code */
        break;
 8008a7a:	e12c      	b.n	8008cd6 <LL_RCC_GetUSARTClockFreq+0x716>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008a7c:	f000 fd84 	bl	8009588 <RCC_GetSystemClockFreq>
 8008a80:	4603      	mov	r3, r0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fde6 	bl	8009654 <RCC_GetHCLKClockFreq>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fdf6 	bl	800967c <RCC_GetPCLK1ClockFreq>
 8008a90:	6178      	str	r0, [r7, #20]
        break;
 8008a92:	e137      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8008a94:	f7ff fa80 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 811d 	beq.w	8008cda <LL_RCC_GetUSARTClockFreq+0x71a>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8008aa0:	f7ff fafc 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 8117 	beq.w	8008cda <LL_RCC_GetUSARTClockFreq+0x71a>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff fc05 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	617b      	str	r3, [r7, #20]
        break;
 8008aba:	e10e      	b.n	8008cda <LL_RCC_GetUSARTClockFreq+0x71a>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8008abc:	f7ff fb36 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 810b 	beq.w	8008cde <LL_RCC_GetUSARTClockFreq+0x71e>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8008ac8:	f7ff fbb2 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 8105 	beq.w	8008cde <LL_RCC_GetUSARTClockFreq+0x71e>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8008ad4:	f107 0308 	add.w	r3, r7, #8
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7ff fc91 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	617b      	str	r3, [r7, #20]
        break;
 8008ae2:	e0fc      	b.n	8008cde <LL_RCC_GetUSARTClockFreq+0x71e>
        if (LL_RCC_HSI_IsReady() == 1U)
 8008ae4:	f7ff f940 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	f040 80f9 	bne.w	8008ce2 <LL_RCC_GetUSARTClockFreq+0x722>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8008af0:	f7ff f94c 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 8008af4:	4603      	mov	r3, r0
 8008af6:	08db      	lsrs	r3, r3, #3
 8008af8:	4a28      	ldr	r2, [pc, #160]	@ (8008b9c <LL_RCC_GetUSARTClockFreq+0x5dc>)
 8008afa:	fa42 f303 	asr.w	r3, r2, r3
 8008afe:	617b      	str	r3, [r7, #20]
        break;
 8008b00:	e0ef      	b.n	8008ce2 <LL_RCC_GetUSARTClockFreq+0x722>
        if (LL_RCC_CSI_IsReady() == 1U)
 8008b02:	f7ff f951 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	f040 80ec 	bne.w	8008ce6 <LL_RCC_GetUSARTClockFreq+0x726>
          usart_frequency = CSI_VALUE;
 8008b0e:	4b24      	ldr	r3, [pc, #144]	@ (8008ba0 <LL_RCC_GetUSARTClockFreq+0x5e0>)
 8008b10:	617b      	str	r3, [r7, #20]
        break;
 8008b12:	e0e8      	b.n	8008ce6 <LL_RCC_GetUSARTClockFreq+0x726>
        if (LL_RCC_LSE_IsReady() == 1U)
 8008b14:	f7ff f95c 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	f040 80e5 	bne.w	8008cea <LL_RCC_GetUSARTClockFreq+0x72a>
          usart_frequency = LSE_VALUE;
 8008b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b24:	617b      	str	r3, [r7, #20]
        break;
 8008b26:	e0e0      	b.n	8008cea <LL_RCC_GetUSARTClockFreq+0x72a>
    }
  }
#endif /* USART10 */

#if defined(USART11)
  else if (USARTxSource == LL_RCC_USART11_CLKSOURCE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8008bd4 <LL_RCC_GetUSARTClockFreq+0x614>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	f040 80e9 	bne.w	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
  {
    /* USART11CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff f9cc 	bl	8007ed0 <LL_RCC_GetUSARTClockSource>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	4a27      	ldr	r2, [pc, #156]	@ (8008bd8 <LL_RCC_GetUSARTClockFreq+0x618>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	f000 8091 	beq.w	8008c64 <LL_RCC_GetUSARTClockFreq+0x6a4>
 8008b42:	4a26      	ldr	r2, [pc, #152]	@ (8008bdc <LL_RCC_GetUSARTClockFreq+0x61c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	f080 80d2 	bcs.w	8008cee <LL_RCC_GetUSARTClockFreq+0x72e>
 8008b4a:	4a25      	ldr	r2, [pc, #148]	@ (8008be0 <LL_RCC_GetUSARTClockFreq+0x620>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	f000 8081 	beq.w	8008c54 <LL_RCC_GetUSARTClockFreq+0x694>
 8008b52:	4a23      	ldr	r2, [pc, #140]	@ (8008be0 <LL_RCC_GetUSARTClockFreq+0x620>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	f200 80ca 	bhi.w	8008cee <LL_RCC_GetUSARTClockFreq+0x72e>
 8008b5a:	4a22      	ldr	r2, [pc, #136]	@ (8008be4 <LL_RCC_GetUSARTClockFreq+0x624>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d06b      	beq.n	8008c38 <LL_RCC_GetUSARTClockFreq+0x678>
 8008b60:	4a20      	ldr	r2, [pc, #128]	@ (8008be4 <LL_RCC_GetUSARTClockFreq+0x624>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	f200 80c3 	bhi.w	8008cee <LL_RCC_GetUSARTClockFreq+0x72e>
 8008b68:	4a1f      	ldr	r2, [pc, #124]	@ (8008be8 <LL_RCC_GetUSARTClockFreq+0x628>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d052      	beq.n	8008c14 <LL_RCC_GetUSARTClockFreq+0x654>
 8008b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008be8 <LL_RCC_GetUSARTClockFreq+0x628>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	f200 80bc 	bhi.w	8008cee <LL_RCC_GetUSARTClockFreq+0x72e>
 8008b76:	4a17      	ldr	r2, [pc, #92]	@ (8008bd4 <LL_RCC_GetUSARTClockFreq+0x614>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d003      	beq.n	8008b84 <LL_RCC_GetUSARTClockFreq+0x5c4>
 8008b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bec <LL_RCC_GetUSARTClockFreq+0x62c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d036      	beq.n	8008bf0 <LL_RCC_GetUSARTClockFreq+0x630>
        }
        break;

      default:
        /* unreachable code */
        break;
 8008b82:	e0b4      	b.n	8008cee <LL_RCC_GetUSARTClockFreq+0x72e>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008b84:	f000 fd00 	bl	8009588 <RCC_GetSystemClockFreq>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fd62 	bl	8009654 <RCC_GetHCLKClockFreq>
 8008b90:	4603      	mov	r3, r0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fd72 	bl	800967c <RCC_GetPCLK1ClockFreq>
 8008b98:	6178      	str	r0, [r7, #20]
        break;
 8008b9a:	e0b3      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
 8008b9c:	03d09000 	.word	0x03d09000
 8008ba0:	003d0900 	.word	0x003d0900
 8008ba4:	07000f00 	.word	0x07000f00
 8008ba8:	07050f00 	.word	0x07050f00
 8008bac:	07040f00 	.word	0x07040f00
 8008bb0:	07030f00 	.word	0x07030f00
 8008bb4:	07020f00 	.word	0x07020f00
 8008bb8:	07010f00 	.word	0x07010f00
 8008bbc:	07001b00 	.word	0x07001b00
 8008bc0:	07051b00 	.word	0x07051b00
 8008bc4:	07041b00 	.word	0x07041b00
 8008bc8:	07031b00 	.word	0x07031b00
 8008bcc:	07021b00 	.word	0x07021b00
 8008bd0:	07011b00 	.word	0x07011b00
 8008bd4:	07000004 	.word	0x07000004
 8008bd8:	07050004 	.word	0x07050004
 8008bdc:	07050005 	.word	0x07050005
 8008be0:	07040004 	.word	0x07040004
 8008be4:	07030004 	.word	0x07030004
 8008be8:	07020004 	.word	0x07020004
 8008bec:	07010004 	.word	0x07010004
        if (LL_RCC_PLL2_IsReady() != 0U)
 8008bf0:	f7ff f9d2 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d07b      	beq.n	8008cf2 <LL_RCC_GetUSARTClockFreq+0x732>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8008bfa:	f7ff fa4f 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d076      	beq.n	8008cf2 <LL_RCC_GetUSARTClockFreq+0x732>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8008c04:	f107 0308 	add.w	r3, r7, #8
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fb59 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	617b      	str	r3, [r7, #20]
        break;
 8008c12:	e06e      	b.n	8008cf2 <LL_RCC_GetUSARTClockFreq+0x732>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8008c14:	f7ff fa8a 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d06b      	beq.n	8008cf6 <LL_RCC_GetUSARTClockFreq+0x736>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8008c1e:	f7ff fb07 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d066      	beq.n	8008cf6 <LL_RCC_GetUSARTClockFreq+0x736>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8008c28:	f107 0308 	add.w	r3, r7, #8
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff fbe7 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	617b      	str	r3, [r7, #20]
        break;
 8008c36:	e05e      	b.n	8008cf6 <LL_RCC_GetUSARTClockFreq+0x736>
        if (LL_RCC_HSI_IsReady() == 1U)
 8008c38:	f7ff f896 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d15b      	bne.n	8008cfa <LL_RCC_GetUSARTClockFreq+0x73a>
          usart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8008c42:	f7ff f8a3 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 8008c46:	4603      	mov	r3, r0
 8008c48:	08db      	lsrs	r3, r3, #3
 8008c4a:	4a31      	ldr	r2, [pc, #196]	@ (8008d10 <LL_RCC_GetUSARTClockFreq+0x750>)
 8008c4c:	fa42 f303 	asr.w	r3, r2, r3
 8008c50:	617b      	str	r3, [r7, #20]
        break;
 8008c52:	e052      	b.n	8008cfa <LL_RCC_GetUSARTClockFreq+0x73a>
        if (LL_RCC_CSI_IsReady() == 1U)
 8008c54:	f7ff f8a8 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d14f      	bne.n	8008cfe <LL_RCC_GetUSARTClockFreq+0x73e>
          usart_frequency = CSI_VALUE;
 8008c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008d14 <LL_RCC_GetUSARTClockFreq+0x754>)
 8008c60:	617b      	str	r3, [r7, #20]
        break;
 8008c62:	e04c      	b.n	8008cfe <LL_RCC_GetUSARTClockFreq+0x73e>
        if (LL_RCC_LSE_IsReady() == 1U)
 8008c64:	f7ff f8b4 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d149      	bne.n	8008d02 <LL_RCC_GetUSARTClockFreq+0x742>
          usart_frequency = LSE_VALUE;
 8008c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c72:	617b      	str	r3, [r7, #20]
        break;
 8008c74:	e045      	b.n	8008d02 <LL_RCC_GetUSARTClockFreq+0x742>
        break;
 8008c76:	bf00      	nop
 8008c78:	e044      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c7a:	bf00      	nop
 8008c7c:	e042      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c7e:	bf00      	nop
 8008c80:	e040      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c82:	bf00      	nop
 8008c84:	e03e      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c86:	bf00      	nop
 8008c88:	e03c      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c8a:	bf00      	nop
 8008c8c:	e03a      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c8e:	bf00      	nop
 8008c90:	e038      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c92:	bf00      	nop
 8008c94:	e036      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c96:	bf00      	nop
 8008c98:	e034      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c9a:	bf00      	nop
 8008c9c:	e032      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008c9e:	bf00      	nop
 8008ca0:	e030      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008ca2:	bf00      	nop
 8008ca4:	e02e      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e02c      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008caa:	bf00      	nop
 8008cac:	e02a      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cae:	bf00      	nop
 8008cb0:	e028      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cb2:	bf00      	nop
 8008cb4:	e026      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cb6:	bf00      	nop
 8008cb8:	e024      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cba:	bf00      	nop
 8008cbc:	e022      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cbe:	bf00      	nop
 8008cc0:	e020      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cc2:	bf00      	nop
 8008cc4:	e01e      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cc6:	bf00      	nop
 8008cc8:	e01c      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cca:	bf00      	nop
 8008ccc:	e01a      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cce:	bf00      	nop
 8008cd0:	e018      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cd2:	bf00      	nop
 8008cd4:	e016      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cd6:	bf00      	nop
 8008cd8:	e014      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cda:	bf00      	nop
 8008cdc:	e012      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cde:	bf00      	nop
 8008ce0:	e010      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008ce2:	bf00      	nop
 8008ce4:	e00e      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008ce6:	bf00      	nop
 8008ce8:	e00c      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cea:	bf00      	nop
 8008cec:	e00a      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cee:	bf00      	nop
 8008cf0:	e008      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cf2:	bf00      	nop
 8008cf4:	e006      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cf6:	bf00      	nop
 8008cf8:	e004      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cfa:	bf00      	nop
 8008cfc:	e002      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008cfe:	bf00      	nop
 8008d00:	e000      	b.n	8008d04 <LL_RCC_GetUSARTClockFreq+0x744>
        break;
 8008d02:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return usart_frequency;
 8008d04:	697b      	ldr	r3, [r7, #20]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	03d09000 	.word	0x03d09000
 8008d14:	003d0900 	.word	0x003d0900

08008d18 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART12_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4ab1      	ldr	r2, [pc, #708]	@ (8008fec <LL_RCC_GetUARTClockFreq+0x2d4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d17c      	bne.n	8008e26 <LL_RCC_GetUARTClockFreq+0x10e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff f8db 	bl	8007ee8 <LL_RCC_GetUARTClockSource>
 8008d32:	4603      	mov	r3, r0
 8008d34:	4aae      	ldr	r2, [pc, #696]	@ (8008ff0 <LL_RCC_GetUARTClockFreq+0x2d8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d06b      	beq.n	8008e12 <LL_RCC_GetUARTClockFreq+0xfa>
 8008d3a:	4aad      	ldr	r2, [pc, #692]	@ (8008ff0 <LL_RCC_GetUARTClockFreq+0x2d8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	f200 8346 	bhi.w	80093ce <LL_RCC_GetUARTClockFreq+0x6b6>
 8008d42:	4aac      	ldr	r2, [pc, #688]	@ (8008ff4 <LL_RCC_GetUARTClockFreq+0x2dc>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d05b      	beq.n	8008e00 <LL_RCC_GetUARTClockFreq+0xe8>
 8008d48:	4aaa      	ldr	r2, [pc, #680]	@ (8008ff4 <LL_RCC_GetUARTClockFreq+0x2dc>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	f200 833f 	bhi.w	80093ce <LL_RCC_GetUARTClockFreq+0x6b6>
 8008d50:	4aa9      	ldr	r2, [pc, #676]	@ (8008ff8 <LL_RCC_GetUARTClockFreq+0x2e0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d045      	beq.n	8008de2 <LL_RCC_GetUARTClockFreq+0xca>
 8008d56:	4aa8      	ldr	r2, [pc, #672]	@ (8008ff8 <LL_RCC_GetUARTClockFreq+0x2e0>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	f200 8338 	bhi.w	80093ce <LL_RCC_GetUARTClockFreq+0x6b6>
 8008d5e:	4aa7      	ldr	r2, [pc, #668]	@ (8008ffc <LL_RCC_GetUARTClockFreq+0x2e4>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d02a      	beq.n	8008dba <LL_RCC_GetUARTClockFreq+0xa2>
 8008d64:	4aa5      	ldr	r2, [pc, #660]	@ (8008ffc <LL_RCC_GetUARTClockFreq+0x2e4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	f200 8331 	bhi.w	80093ce <LL_RCC_GetUARTClockFreq+0x6b6>
 8008d6c:	4a9f      	ldr	r2, [pc, #636]	@ (8008fec <LL_RCC_GetUARTClockFreq+0x2d4>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d003      	beq.n	8008d7a <LL_RCC_GetUARTClockFreq+0x62>
 8008d72:	4aa3      	ldr	r2, [pc, #652]	@ (8009000 <LL_RCC_GetUARTClockFreq+0x2e8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d00c      	beq.n	8008d92 <LL_RCC_GetUARTClockFreq+0x7a>
        }
        break;

      default:
        /* unreachable code */
        break;
 8008d78:	e329      	b.n	80093ce <LL_RCC_GetUARTClockFreq+0x6b6>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008d7a:	f000 fc05 	bl	8009588 <RCC_GetSystemClockFreq>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fc67 	bl	8009654 <RCC_GetHCLKClockFreq>
 8008d86:	4603      	mov	r3, r0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fc77 	bl	800967c <RCC_GetPCLK1ClockFreq>
 8008d8e:	6178      	str	r0, [r7, #20]
        break;
 8008d90:	e364      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8008d92:	f7ff f901 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 831a 	beq.w	80093d2 <LL_RCC_GetUARTClockFreq+0x6ba>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8008d9e:	f7ff f97d 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8314 	beq.w	80093d2 <LL_RCC_GetUARTClockFreq+0x6ba>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8008daa:	f107 0308 	add.w	r3, r7, #8
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fa86 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	617b      	str	r3, [r7, #20]
        break;
 8008db8:	e30b      	b.n	80093d2 <LL_RCC_GetUARTClockFreq+0x6ba>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8008dba:	f7ff f9b7 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 8308 	beq.w	80093d6 <LL_RCC_GetUARTClockFreq+0x6be>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8008dc6:	f7ff fa33 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 8302 	beq.w	80093d6 <LL_RCC_GetUARTClockFreq+0x6be>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8008dd2:	f107 0308 	add.w	r3, r7, #8
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff fb12 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	617b      	str	r3, [r7, #20]
        break;
 8008de0:	e2f9      	b.n	80093d6 <LL_RCC_GetUARTClockFreq+0x6be>
        if (LL_RCC_HSI_IsReady() == 1U)
 8008de2:	f7fe ffc1 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	f040 82f6 	bne.w	80093da <LL_RCC_GetUARTClockFreq+0x6c2>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8008dee:	f7fe ffcd 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 8008df2:	4603      	mov	r3, r0
 8008df4:	08db      	lsrs	r3, r3, #3
 8008df6:	4a83      	ldr	r2, [pc, #524]	@ (8009004 <LL_RCC_GetUARTClockFreq+0x2ec>)
 8008df8:	fa42 f303 	asr.w	r3, r2, r3
 8008dfc:	617b      	str	r3, [r7, #20]
        break;
 8008dfe:	e2ec      	b.n	80093da <LL_RCC_GetUARTClockFreq+0x6c2>
        if (LL_RCC_CSI_IsReady() == 1U)
 8008e00:	f7fe ffd2 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	f040 82e9 	bne.w	80093de <LL_RCC_GetUARTClockFreq+0x6c6>
          uart_frequency = CSI_VALUE;
 8008e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8009008 <LL_RCC_GetUARTClockFreq+0x2f0>)
 8008e0e:	617b      	str	r3, [r7, #20]
        break;
 8008e10:	e2e5      	b.n	80093de <LL_RCC_GetUARTClockFreq+0x6c6>
        if (LL_RCC_LSE_IsReady() == 1U)
 8008e12:	f7fe ffdd 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	f040 82e2 	bne.w	80093e2 <LL_RCC_GetUARTClockFreq+0x6ca>
          uart_frequency = LSE_VALUE;
 8008e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e22:	617b      	str	r3, [r7, #20]
        break;
 8008e24:	e2dd      	b.n	80093e2 <LL_RCC_GetUARTClockFreq+0x6ca>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a78      	ldr	r2, [pc, #480]	@ (800900c <LL_RCC_GetUARTClockFreq+0x2f4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d17c      	bne.n	8008f28 <LL_RCC_GetUARTClockFreq+0x210>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff f85a 	bl	8007ee8 <LL_RCC_GetUARTClockSource>
 8008e34:	4603      	mov	r3, r0
 8008e36:	4a76      	ldr	r2, [pc, #472]	@ (8009010 <LL_RCC_GetUARTClockFreq+0x2f8>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d06b      	beq.n	8008f14 <LL_RCC_GetUARTClockFreq+0x1fc>
 8008e3c:	4a74      	ldr	r2, [pc, #464]	@ (8009010 <LL_RCC_GetUARTClockFreq+0x2f8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	f200 82d1 	bhi.w	80093e6 <LL_RCC_GetUARTClockFreq+0x6ce>
 8008e44:	4a73      	ldr	r2, [pc, #460]	@ (8009014 <LL_RCC_GetUARTClockFreq+0x2fc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d05b      	beq.n	8008f02 <LL_RCC_GetUARTClockFreq+0x1ea>
 8008e4a:	4a72      	ldr	r2, [pc, #456]	@ (8009014 <LL_RCC_GetUARTClockFreq+0x2fc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	f200 82ca 	bhi.w	80093e6 <LL_RCC_GetUARTClockFreq+0x6ce>
 8008e52:	4a71      	ldr	r2, [pc, #452]	@ (8009018 <LL_RCC_GetUARTClockFreq+0x300>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d045      	beq.n	8008ee4 <LL_RCC_GetUARTClockFreq+0x1cc>
 8008e58:	4a6f      	ldr	r2, [pc, #444]	@ (8009018 <LL_RCC_GetUARTClockFreq+0x300>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	f200 82c3 	bhi.w	80093e6 <LL_RCC_GetUARTClockFreq+0x6ce>
 8008e60:	4a6e      	ldr	r2, [pc, #440]	@ (800901c <LL_RCC_GetUARTClockFreq+0x304>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d02a      	beq.n	8008ebc <LL_RCC_GetUARTClockFreq+0x1a4>
 8008e66:	4a6d      	ldr	r2, [pc, #436]	@ (800901c <LL_RCC_GetUARTClockFreq+0x304>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	f200 82bc 	bhi.w	80093e6 <LL_RCC_GetUARTClockFreq+0x6ce>
 8008e6e:	4a67      	ldr	r2, [pc, #412]	@ (800900c <LL_RCC_GetUARTClockFreq+0x2f4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d003      	beq.n	8008e7c <LL_RCC_GetUARTClockFreq+0x164>
 8008e74:	4a6a      	ldr	r2, [pc, #424]	@ (8009020 <LL_RCC_GetUARTClockFreq+0x308>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00c      	beq.n	8008e94 <LL_RCC_GetUARTClockFreq+0x17c>
        }
        break;

      default:
        /* unreachable code */
        break;
 8008e7a:	e2b4      	b.n	80093e6 <LL_RCC_GetUARTClockFreq+0x6ce>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008e7c:	f000 fb84 	bl	8009588 <RCC_GetSystemClockFreq>
 8008e80:	4603      	mov	r3, r0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fbe6 	bl	8009654 <RCC_GetHCLKClockFreq>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fbf6 	bl	800967c <RCC_GetPCLK1ClockFreq>
 8008e90:	6178      	str	r0, [r7, #20]
        break;
 8008e92:	e2e3      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8008e94:	f7ff f880 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 82a5 	beq.w	80093ea <LL_RCC_GetUARTClockFreq+0x6d2>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8008ea0:	f7ff f8fc 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 829f 	beq.w	80093ea <LL_RCC_GetUARTClockFreq+0x6d2>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8008eac:	f107 0308 	add.w	r3, r7, #8
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff fa05 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	617b      	str	r3, [r7, #20]
        break;
 8008eba:	e296      	b.n	80093ea <LL_RCC_GetUARTClockFreq+0x6d2>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8008ebc:	f7ff f936 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 8293 	beq.w	80093ee <LL_RCC_GetUARTClockFreq+0x6d6>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8008ec8:	f7ff f9b2 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 828d 	beq.w	80093ee <LL_RCC_GetUARTClockFreq+0x6d6>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8008ed4:	f107 0308 	add.w	r3, r7, #8
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fa91 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	617b      	str	r3, [r7, #20]
        break;
 8008ee2:	e284      	b.n	80093ee <LL_RCC_GetUARTClockFreq+0x6d6>
        if (LL_RCC_HSI_IsReady() == 1U)
 8008ee4:	f7fe ff40 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	f040 8281 	bne.w	80093f2 <LL_RCC_GetUARTClockFreq+0x6da>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8008ef0:	f7fe ff4c 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	08db      	lsrs	r3, r3, #3
 8008ef8:	4a42      	ldr	r2, [pc, #264]	@ (8009004 <LL_RCC_GetUARTClockFreq+0x2ec>)
 8008efa:	fa42 f303 	asr.w	r3, r2, r3
 8008efe:	617b      	str	r3, [r7, #20]
        break;
 8008f00:	e277      	b.n	80093f2 <LL_RCC_GetUARTClockFreq+0x6da>
        if (LL_RCC_CSI_IsReady() == 1U)
 8008f02:	f7fe ff51 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	f040 8274 	bne.w	80093f6 <LL_RCC_GetUARTClockFreq+0x6de>
          uart_frequency = CSI_VALUE;
 8008f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009008 <LL_RCC_GetUARTClockFreq+0x2f0>)
 8008f10:	617b      	str	r3, [r7, #20]
        break;
 8008f12:	e270      	b.n	80093f6 <LL_RCC_GetUARTClockFreq+0x6de>
        if (LL_RCC_LSE_IsReady() == 1U)
 8008f14:	f7fe ff5c 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	f040 826d 	bne.w	80093fa <LL_RCC_GetUARTClockFreq+0x6e2>
          uart_frequency = LSE_VALUE;
 8008f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f24:	617b      	str	r3, [r7, #20]
        break;
 8008f26:	e268      	b.n	80093fa <LL_RCC_GetUARTClockFreq+0x6e2>
    }
  }
#if defined(UART7)
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a3e      	ldr	r2, [pc, #248]	@ (8009024 <LL_RCC_GetUARTClockFreq+0x30c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	f040 80a7 	bne.w	8009080 <LL_RCC_GetUARTClockFreq+0x368>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fe ffd8 	bl	8007ee8 <LL_RCC_GetUARTClockSource>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8009028 <LL_RCC_GetUARTClockFreq+0x310>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	f000 8095 	beq.w	800906c <LL_RCC_GetUARTClockFreq+0x354>
 8008f42:	4a39      	ldr	r2, [pc, #228]	@ (8009028 <LL_RCC_GetUARTClockFreq+0x310>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	f200 825a 	bhi.w	80093fe <LL_RCC_GetUARTClockFreq+0x6e6>
 8008f4a:	4a38      	ldr	r2, [pc, #224]	@ (800902c <LL_RCC_GetUARTClockFreq+0x314>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	f000 8084 	beq.w	800905a <LL_RCC_GetUARTClockFreq+0x342>
 8008f52:	4a36      	ldr	r2, [pc, #216]	@ (800902c <LL_RCC_GetUARTClockFreq+0x314>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	f200 8252 	bhi.w	80093fe <LL_RCC_GetUARTClockFreq+0x6e6>
 8008f5a:	4a35      	ldr	r2, [pc, #212]	@ (8009030 <LL_RCC_GetUARTClockFreq+0x318>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d06d      	beq.n	800903c <LL_RCC_GetUARTClockFreq+0x324>
 8008f60:	4a33      	ldr	r2, [pc, #204]	@ (8009030 <LL_RCC_GetUARTClockFreq+0x318>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	f200 824b 	bhi.w	80093fe <LL_RCC_GetUARTClockFreq+0x6e6>
 8008f68:	4a32      	ldr	r2, [pc, #200]	@ (8009034 <LL_RCC_GetUARTClockFreq+0x31c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d02a      	beq.n	8008fc4 <LL_RCC_GetUARTClockFreq+0x2ac>
 8008f6e:	4a31      	ldr	r2, [pc, #196]	@ (8009034 <LL_RCC_GetUARTClockFreq+0x31c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	f200 8244 	bhi.w	80093fe <LL_RCC_GetUARTClockFreq+0x6e6>
 8008f76:	4a2b      	ldr	r2, [pc, #172]	@ (8009024 <LL_RCC_GetUARTClockFreq+0x30c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d003      	beq.n	8008f84 <LL_RCC_GetUARTClockFreq+0x26c>
 8008f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8009038 <LL_RCC_GetUARTClockFreq+0x320>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00c      	beq.n	8008f9c <LL_RCC_GetUARTClockFreq+0x284>
        }
        break;

      default:
        /* unreachable code */
        break;
 8008f82:	e23c      	b.n	80093fe <LL_RCC_GetUARTClockFreq+0x6e6>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008f84:	f000 fb00 	bl	8009588 <RCC_GetSystemClockFreq>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fb62 	bl	8009654 <RCC_GetHCLKClockFreq>
 8008f90:	4603      	mov	r3, r0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fb72 	bl	800967c <RCC_GetPCLK1ClockFreq>
 8008f98:	6178      	str	r0, [r7, #20]
        break;
 8008f9a:	e25f      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 8008f9c:	f7fe fffc 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 822d 	beq.w	8009402 <LL_RCC_GetUARTClockFreq+0x6ea>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8008fa8:	f7ff f878 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 8227 	beq.w	8009402 <LL_RCC_GetUARTClockFreq+0x6ea>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8008fb4:	f107 0308 	add.w	r3, r7, #8
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff f981 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	617b      	str	r3, [r7, #20]
        break;
 8008fc2:	e21e      	b.n	8009402 <LL_RCC_GetUARTClockFreq+0x6ea>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8008fc4:	f7ff f8b2 	bl	800812c <LL_RCC_PLL3_IsReady>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 821b 	beq.w	8009406 <LL_RCC_GetUARTClockFreq+0x6ee>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8008fd0:	f7ff f92e 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 8215 	beq.w	8009406 <LL_RCC_GetUARTClockFreq+0x6ee>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8008fdc:	f107 0308 	add.w	r3, r7, #8
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff fa0d 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	617b      	str	r3, [r7, #20]
        break;
 8008fea:	e20c      	b.n	8009406 <LL_RCC_GetUARTClockFreq+0x6ee>
 8008fec:	07000900 	.word	0x07000900
 8008ff0:	07050900 	.word	0x07050900
 8008ff4:	07040900 	.word	0x07040900
 8008ff8:	07030900 	.word	0x07030900
 8008ffc:	07020900 	.word	0x07020900
 8009000:	07010900 	.word	0x07010900
 8009004:	03d09000 	.word	0x03d09000
 8009008:	003d0900 	.word	0x003d0900
 800900c:	07000c00 	.word	0x07000c00
 8009010:	07050c00 	.word	0x07050c00
 8009014:	07040c00 	.word	0x07040c00
 8009018:	07030c00 	.word	0x07030c00
 800901c:	07020c00 	.word	0x07020c00
 8009020:	07010c00 	.word	0x07010c00
 8009024:	07001200 	.word	0x07001200
 8009028:	07051200 	.word	0x07051200
 800902c:	07041200 	.word	0x07041200
 8009030:	07031200 	.word	0x07031200
 8009034:	07021200 	.word	0x07021200
 8009038:	07011200 	.word	0x07011200
        if (LL_RCC_HSI_IsReady() == 1U)
 800903c:	f7fe fe94 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8009040:	4603      	mov	r3, r0
 8009042:	2b01      	cmp	r3, #1
 8009044:	f040 81e1 	bne.w	800940a <LL_RCC_GetUARTClockFreq+0x6f2>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8009048:	f7fe fea0 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800904c:	4603      	mov	r3, r0
 800904e:	08db      	lsrs	r3, r3, #3
 8009050:	4aa9      	ldr	r2, [pc, #676]	@ (80092f8 <LL_RCC_GetUARTClockFreq+0x5e0>)
 8009052:	fa42 f303 	asr.w	r3, r2, r3
 8009056:	617b      	str	r3, [r7, #20]
        break;
 8009058:	e1d7      	b.n	800940a <LL_RCC_GetUARTClockFreq+0x6f2>
        if (LL_RCC_CSI_IsReady() == 1U)
 800905a:	f7fe fea5 	bl	8007da8 <LL_RCC_CSI_IsReady>
 800905e:	4603      	mov	r3, r0
 8009060:	2b01      	cmp	r3, #1
 8009062:	f040 81d4 	bne.w	800940e <LL_RCC_GetUARTClockFreq+0x6f6>
          uart_frequency = CSI_VALUE;
 8009066:	4ba5      	ldr	r3, [pc, #660]	@ (80092fc <LL_RCC_GetUARTClockFreq+0x5e4>)
 8009068:	617b      	str	r3, [r7, #20]
        break;
 800906a:	e1d0      	b.n	800940e <LL_RCC_GetUARTClockFreq+0x6f6>
        if (LL_RCC_LSE_IsReady() == 1U)
 800906c:	f7fe feb0 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8009070:	4603      	mov	r3, r0
 8009072:	2b01      	cmp	r3, #1
 8009074:	f040 81cd 	bne.w	8009412 <LL_RCC_GetUARTClockFreq+0x6fa>
          uart_frequency = LSE_VALUE;
 8009078:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800907c:	617b      	str	r3, [r7, #20]
        break;
 800907e:	e1c8      	b.n	8009412 <LL_RCC_GetUARTClockFreq+0x6fa>
    }
  }
#endif /* UART7 */
#if defined(UART8)
  else if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a9f      	ldr	r2, [pc, #636]	@ (8009300 <LL_RCC_GetUARTClockFreq+0x5e8>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d17c      	bne.n	8009182 <LL_RCC_GetUARTClockFreq+0x46a>
  {
    /* UART8CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fe ff2d 	bl	8007ee8 <LL_RCC_GetUARTClockSource>
 800908e:	4603      	mov	r3, r0
 8009090:	4a9c      	ldr	r2, [pc, #624]	@ (8009304 <LL_RCC_GetUARTClockFreq+0x5ec>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d06b      	beq.n	800916e <LL_RCC_GetUARTClockFreq+0x456>
 8009096:	4a9b      	ldr	r2, [pc, #620]	@ (8009304 <LL_RCC_GetUARTClockFreq+0x5ec>)
 8009098:	4293      	cmp	r3, r2
 800909a:	f200 81bc 	bhi.w	8009416 <LL_RCC_GetUARTClockFreq+0x6fe>
 800909e:	4a9a      	ldr	r2, [pc, #616]	@ (8009308 <LL_RCC_GetUARTClockFreq+0x5f0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d05b      	beq.n	800915c <LL_RCC_GetUARTClockFreq+0x444>
 80090a4:	4a98      	ldr	r2, [pc, #608]	@ (8009308 <LL_RCC_GetUARTClockFreq+0x5f0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	f200 81b5 	bhi.w	8009416 <LL_RCC_GetUARTClockFreq+0x6fe>
 80090ac:	4a97      	ldr	r2, [pc, #604]	@ (800930c <LL_RCC_GetUARTClockFreq+0x5f4>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d045      	beq.n	800913e <LL_RCC_GetUARTClockFreq+0x426>
 80090b2:	4a96      	ldr	r2, [pc, #600]	@ (800930c <LL_RCC_GetUARTClockFreq+0x5f4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	f200 81ae 	bhi.w	8009416 <LL_RCC_GetUARTClockFreq+0x6fe>
 80090ba:	4a95      	ldr	r2, [pc, #596]	@ (8009310 <LL_RCC_GetUARTClockFreq+0x5f8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d02a      	beq.n	8009116 <LL_RCC_GetUARTClockFreq+0x3fe>
 80090c0:	4a93      	ldr	r2, [pc, #588]	@ (8009310 <LL_RCC_GetUARTClockFreq+0x5f8>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	f200 81a7 	bhi.w	8009416 <LL_RCC_GetUARTClockFreq+0x6fe>
 80090c8:	4a8d      	ldr	r2, [pc, #564]	@ (8009300 <LL_RCC_GetUARTClockFreq+0x5e8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d003      	beq.n	80090d6 <LL_RCC_GetUARTClockFreq+0x3be>
 80090ce:	4a91      	ldr	r2, [pc, #580]	@ (8009314 <LL_RCC_GetUARTClockFreq+0x5fc>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d00c      	beq.n	80090ee <LL_RCC_GetUARTClockFreq+0x3d6>
        }
        break;

      default:
        /* unreachable code */
        break;
 80090d4:	e19f      	b.n	8009416 <LL_RCC_GetUARTClockFreq+0x6fe>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80090d6:	f000 fa57 	bl	8009588 <RCC_GetSystemClockFreq>
 80090da:	4603      	mov	r3, r0
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fab9 	bl	8009654 <RCC_GetHCLKClockFreq>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fac9 	bl	800967c <RCC_GetPCLK1ClockFreq>
 80090ea:	6178      	str	r0, [r7, #20]
        break;
 80090ec:	e1b6      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 80090ee:	f7fe ff53 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8190 	beq.w	800941a <LL_RCC_GetUARTClockFreq+0x702>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80090fa:	f7fe ffcf 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 818a 	beq.w	800941a <LL_RCC_GetUARTClockFreq+0x702>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8009106:	f107 0308 	add.w	r3, r7, #8
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff f8d8 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	617b      	str	r3, [r7, #20]
        break;
 8009114:	e181      	b.n	800941a <LL_RCC_GetUARTClockFreq+0x702>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8009116:	f7ff f809 	bl	800812c <LL_RCC_PLL3_IsReady>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 817e 	beq.w	800941e <LL_RCC_GetUARTClockFreq+0x706>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8009122:	f7ff f885 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 8178 	beq.w	800941e <LL_RCC_GetUARTClockFreq+0x706>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800912e:	f107 0308 	add.w	r3, r7, #8
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff f964 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	617b      	str	r3, [r7, #20]
        break;
 800913c:	e16f      	b.n	800941e <LL_RCC_GetUARTClockFreq+0x706>
        if (LL_RCC_HSI_IsReady() == 1U)
 800913e:	f7fe fe13 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8009142:	4603      	mov	r3, r0
 8009144:	2b01      	cmp	r3, #1
 8009146:	f040 816c 	bne.w	8009422 <LL_RCC_GetUARTClockFreq+0x70a>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800914a:	f7fe fe1f 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800914e:	4603      	mov	r3, r0
 8009150:	08db      	lsrs	r3, r3, #3
 8009152:	4a69      	ldr	r2, [pc, #420]	@ (80092f8 <LL_RCC_GetUARTClockFreq+0x5e0>)
 8009154:	fa42 f303 	asr.w	r3, r2, r3
 8009158:	617b      	str	r3, [r7, #20]
        break;
 800915a:	e162      	b.n	8009422 <LL_RCC_GetUARTClockFreq+0x70a>
        if (LL_RCC_CSI_IsReady() == 1U)
 800915c:	f7fe fe24 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8009160:	4603      	mov	r3, r0
 8009162:	2b01      	cmp	r3, #1
 8009164:	f040 815f 	bne.w	8009426 <LL_RCC_GetUARTClockFreq+0x70e>
          uart_frequency = CSI_VALUE;
 8009168:	4b64      	ldr	r3, [pc, #400]	@ (80092fc <LL_RCC_GetUARTClockFreq+0x5e4>)
 800916a:	617b      	str	r3, [r7, #20]
        break;
 800916c:	e15b      	b.n	8009426 <LL_RCC_GetUARTClockFreq+0x70e>
        if (LL_RCC_LSE_IsReady() == 1U)
 800916e:	f7fe fe2f 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8009172:	4603      	mov	r3, r0
 8009174:	2b01      	cmp	r3, #1
 8009176:	f040 8158 	bne.w	800942a <LL_RCC_GetUARTClockFreq+0x712>
          uart_frequency = LSE_VALUE;
 800917a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800917e:	617b      	str	r3, [r7, #20]
        break;
 8009180:	e153      	b.n	800942a <LL_RCC_GetUARTClockFreq+0x712>
    }
  }
#endif /* UART8 */
#if defined(UART9)
  else if (UARTxSource == LL_RCC_UART9_CLKSOURCE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a64      	ldr	r2, [pc, #400]	@ (8009318 <LL_RCC_GetUARTClockFreq+0x600>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d17c      	bne.n	8009284 <LL_RCC_GetUARTClockFreq+0x56c>
  {
    /* UART9CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7fe feac 	bl	8007ee8 <LL_RCC_GetUARTClockSource>
 8009190:	4603      	mov	r3, r0
 8009192:	4a62      	ldr	r2, [pc, #392]	@ (800931c <LL_RCC_GetUARTClockFreq+0x604>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d06b      	beq.n	8009270 <LL_RCC_GetUARTClockFreq+0x558>
 8009198:	4a60      	ldr	r2, [pc, #384]	@ (800931c <LL_RCC_GetUARTClockFreq+0x604>)
 800919a:	4293      	cmp	r3, r2
 800919c:	f200 8147 	bhi.w	800942e <LL_RCC_GetUARTClockFreq+0x716>
 80091a0:	4a5f      	ldr	r2, [pc, #380]	@ (8009320 <LL_RCC_GetUARTClockFreq+0x608>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d05b      	beq.n	800925e <LL_RCC_GetUARTClockFreq+0x546>
 80091a6:	4a5e      	ldr	r2, [pc, #376]	@ (8009320 <LL_RCC_GetUARTClockFreq+0x608>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	f200 8140 	bhi.w	800942e <LL_RCC_GetUARTClockFreq+0x716>
 80091ae:	4a5d      	ldr	r2, [pc, #372]	@ (8009324 <LL_RCC_GetUARTClockFreq+0x60c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d045      	beq.n	8009240 <LL_RCC_GetUARTClockFreq+0x528>
 80091b4:	4a5b      	ldr	r2, [pc, #364]	@ (8009324 <LL_RCC_GetUARTClockFreq+0x60c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	f200 8139 	bhi.w	800942e <LL_RCC_GetUARTClockFreq+0x716>
 80091bc:	4a5a      	ldr	r2, [pc, #360]	@ (8009328 <LL_RCC_GetUARTClockFreq+0x610>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d02a      	beq.n	8009218 <LL_RCC_GetUARTClockFreq+0x500>
 80091c2:	4a59      	ldr	r2, [pc, #356]	@ (8009328 <LL_RCC_GetUARTClockFreq+0x610>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	f200 8132 	bhi.w	800942e <LL_RCC_GetUARTClockFreq+0x716>
 80091ca:	4a53      	ldr	r2, [pc, #332]	@ (8009318 <LL_RCC_GetUARTClockFreq+0x600>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d003      	beq.n	80091d8 <LL_RCC_GetUARTClockFreq+0x4c0>
 80091d0:	4a56      	ldr	r2, [pc, #344]	@ (800932c <LL_RCC_GetUARTClockFreq+0x614>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d00c      	beq.n	80091f0 <LL_RCC_GetUARTClockFreq+0x4d8>
        }
        break;

      default:
        /* unreachable code */
        break;
 80091d6:	e12a      	b.n	800942e <LL_RCC_GetUARTClockFreq+0x716>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80091d8:	f000 f9d6 	bl	8009588 <RCC_GetSystemClockFreq>
 80091dc:	4603      	mov	r3, r0
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fa38 	bl	8009654 <RCC_GetHCLKClockFreq>
 80091e4:	4603      	mov	r3, r0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fa48 	bl	800967c <RCC_GetPCLK1ClockFreq>
 80091ec:	6178      	str	r0, [r7, #20]
        break;
 80091ee:	e135      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        if (LL_RCC_PLL2_IsReady() != 0U)
 80091f0:	f7fe fed2 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 811b 	beq.w	8009432 <LL_RCC_GetUARTClockFreq+0x71a>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80091fc:	f7fe ff4e 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8115 	beq.w	8009432 <LL_RCC_GetUARTClockFreq+0x71a>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8009208:	f107 0308 	add.w	r3, r7, #8
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff f857 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	617b      	str	r3, [r7, #20]
        break;
 8009216:	e10c      	b.n	8009432 <LL_RCC_GetUARTClockFreq+0x71a>
        if (LL_RCC_PLL3_IsReady() != 0U)
 8009218:	f7fe ff88 	bl	800812c <LL_RCC_PLL3_IsReady>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 8109 	beq.w	8009436 <LL_RCC_GetUARTClockFreq+0x71e>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8009224:	f7ff f804 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 8103 	beq.w	8009436 <LL_RCC_GetUARTClockFreq+0x71e>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8009230:	f107 0308 	add.w	r3, r7, #8
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff f8e3 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	617b      	str	r3, [r7, #20]
        break;
 800923e:	e0fa      	b.n	8009436 <LL_RCC_GetUARTClockFreq+0x71e>
        if (LL_RCC_HSI_IsReady() == 1U)
 8009240:	f7fe fd92 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8009244:	4603      	mov	r3, r0
 8009246:	2b01      	cmp	r3, #1
 8009248:	f040 80f7 	bne.w	800943a <LL_RCC_GetUARTClockFreq+0x722>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800924c:	f7fe fd9e 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 8009250:	4603      	mov	r3, r0
 8009252:	08db      	lsrs	r3, r3, #3
 8009254:	4a28      	ldr	r2, [pc, #160]	@ (80092f8 <LL_RCC_GetUARTClockFreq+0x5e0>)
 8009256:	fa42 f303 	asr.w	r3, r2, r3
 800925a:	617b      	str	r3, [r7, #20]
        break;
 800925c:	e0ed      	b.n	800943a <LL_RCC_GetUARTClockFreq+0x722>
        if (LL_RCC_CSI_IsReady() == 1U)
 800925e:	f7fe fda3 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8009262:	4603      	mov	r3, r0
 8009264:	2b01      	cmp	r3, #1
 8009266:	f040 80ea 	bne.w	800943e <LL_RCC_GetUARTClockFreq+0x726>
          uart_frequency = CSI_VALUE;
 800926a:	4b24      	ldr	r3, [pc, #144]	@ (80092fc <LL_RCC_GetUARTClockFreq+0x5e4>)
 800926c:	617b      	str	r3, [r7, #20]
        break;
 800926e:	e0e6      	b.n	800943e <LL_RCC_GetUARTClockFreq+0x726>
        if (LL_RCC_LSE_IsReady() == 1U)
 8009270:	f7fe fdae 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8009274:	4603      	mov	r3, r0
 8009276:	2b01      	cmp	r3, #1
 8009278:	f040 80e3 	bne.w	8009442 <LL_RCC_GetUARTClockFreq+0x72a>
          uart_frequency = LSE_VALUE;
 800927c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009280:	617b      	str	r3, [r7, #20]
        break;
 8009282:	e0de      	b.n	8009442 <LL_RCC_GetUARTClockFreq+0x72a>
    }
  }
#endif /* UART9 */
#if defined(UART12)
  else if (UARTxSource == LL_RCC_UART12_CLKSOURCE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a2a      	ldr	r2, [pc, #168]	@ (8009330 <LL_RCC_GetUARTClockFreq+0x618>)
 8009288:	4293      	cmp	r3, r2
 800928a:	f040 80e7 	bne.w	800945c <LL_RCC_GetUARTClockFreq+0x744>
  {
    /* UART12CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7fe fe2a 	bl	8007ee8 <LL_RCC_GetUARTClockSource>
 8009294:	4603      	mov	r3, r0
 8009296:	4a27      	ldr	r2, [pc, #156]	@ (8009334 <LL_RCC_GetUARTClockFreq+0x61c>)
 8009298:	4293      	cmp	r3, r2
 800929a:	f000 808f 	beq.w	80093bc <LL_RCC_GetUARTClockFreq+0x6a4>
 800929e:	4a25      	ldr	r2, [pc, #148]	@ (8009334 <LL_RCC_GetUARTClockFreq+0x61c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	f200 80d0 	bhi.w	8009446 <LL_RCC_GetUARTClockFreq+0x72e>
 80092a6:	4a24      	ldr	r2, [pc, #144]	@ (8009338 <LL_RCC_GetUARTClockFreq+0x620>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d07f      	beq.n	80093ac <LL_RCC_GetUARTClockFreq+0x694>
 80092ac:	4a22      	ldr	r2, [pc, #136]	@ (8009338 <LL_RCC_GetUARTClockFreq+0x620>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	f200 80c9 	bhi.w	8009446 <LL_RCC_GetUARTClockFreq+0x72e>
 80092b4:	4a21      	ldr	r2, [pc, #132]	@ (800933c <LL_RCC_GetUARTClockFreq+0x624>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d06a      	beq.n	8009390 <LL_RCC_GetUARTClockFreq+0x678>
 80092ba:	4a20      	ldr	r2, [pc, #128]	@ (800933c <LL_RCC_GetUARTClockFreq+0x624>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	f200 80c2 	bhi.w	8009446 <LL_RCC_GetUARTClockFreq+0x72e>
 80092c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009340 <LL_RCC_GetUARTClockFreq+0x628>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d051      	beq.n	800936c <LL_RCC_GetUARTClockFreq+0x654>
 80092c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009340 <LL_RCC_GetUARTClockFreq+0x628>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	f200 80bb 	bhi.w	8009446 <LL_RCC_GetUARTClockFreq+0x72e>
 80092d0:	4a17      	ldr	r2, [pc, #92]	@ (8009330 <LL_RCC_GetUARTClockFreq+0x618>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d003      	beq.n	80092de <LL_RCC_GetUARTClockFreq+0x5c6>
 80092d6:	4a1b      	ldr	r2, [pc, #108]	@ (8009344 <LL_RCC_GetUARTClockFreq+0x62c>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d035      	beq.n	8009348 <LL_RCC_GetUARTClockFreq+0x630>
        }
        break;

      default:
        /* unreachable code */
        break;
 80092dc:	e0b3      	b.n	8009446 <LL_RCC_GetUARTClockFreq+0x72e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80092de:	f000 f953 	bl	8009588 <RCC_GetSystemClockFreq>
 80092e2:	4603      	mov	r3, r0
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f9b5 	bl	8009654 <RCC_GetHCLKClockFreq>
 80092ea:	4603      	mov	r3, r0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 f9c5 	bl	800967c <RCC_GetPCLK1ClockFreq>
 80092f2:	6178      	str	r0, [r7, #20]
        break;
 80092f4:	e0b2      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
 80092f6:	bf00      	nop
 80092f8:	03d09000 	.word	0x03d09000
 80092fc:	003d0900 	.word	0x003d0900
 8009300:	07001500 	.word	0x07001500
 8009304:	07051500 	.word	0x07051500
 8009308:	07041500 	.word	0x07041500
 800930c:	07031500 	.word	0x07031500
 8009310:	07021500 	.word	0x07021500
 8009314:	07011500 	.word	0x07011500
 8009318:	07001800 	.word	0x07001800
 800931c:	07051800 	.word	0x07051800
 8009320:	07041800 	.word	0x07041800
 8009324:	07031800 	.word	0x07031800
 8009328:	07021800 	.word	0x07021800
 800932c:	07011800 	.word	0x07011800
 8009330:	07000404 	.word	0x07000404
 8009334:	07050404 	.word	0x07050404
 8009338:	07040404 	.word	0x07040404
 800933c:	07030404 	.word	0x07030404
 8009340:	07020404 	.word	0x07020404
 8009344:	07010404 	.word	0x07010404
        if (LL_RCC_PLL2_IsReady() != 0U)
 8009348:	f7fe fe26 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d07b      	beq.n	800944a <LL_RCC_GetUARTClockFreq+0x732>
          if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8009352:	f7fe fea3 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d076      	beq.n	800944a <LL_RCC_GetUARTClockFreq+0x732>
            LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800935c:	f107 0308 	add.w	r3, r7, #8
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe ffad 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	617b      	str	r3, [r7, #20]
        break;
 800936a:	e06e      	b.n	800944a <LL_RCC_GetUARTClockFreq+0x732>
        if (LL_RCC_PLL3_IsReady() != 0U)
 800936c:	f7fe fede 	bl	800812c <LL_RCC_PLL3_IsReady>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d06b      	beq.n	800944e <LL_RCC_GetUARTClockFreq+0x736>
          if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8009376:	f7fe ff5b 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d066      	beq.n	800944e <LL_RCC_GetUARTClockFreq+0x736>
            LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8009380:	f107 0308 	add.w	r3, r7, #8
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff f83b 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
            uart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	617b      	str	r3, [r7, #20]
        break;
 800938e:	e05e      	b.n	800944e <LL_RCC_GetUARTClockFreq+0x736>
        if (LL_RCC_HSI_IsReady() == 1U)
 8009390:	f7fe fcea 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8009394:	4603      	mov	r3, r0
 8009396:	2b01      	cmp	r3, #1
 8009398:	d15b      	bne.n	8009452 <LL_RCC_GetUARTClockFreq+0x73a>
          uart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800939a:	f7fe fcf7 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800939e:	4603      	mov	r3, r0
 80093a0:	08db      	lsrs	r3, r3, #3
 80093a2:	4a31      	ldr	r2, [pc, #196]	@ (8009468 <LL_RCC_GetUARTClockFreq+0x750>)
 80093a4:	fa42 f303 	asr.w	r3, r2, r3
 80093a8:	617b      	str	r3, [r7, #20]
        break;
 80093aa:	e052      	b.n	8009452 <LL_RCC_GetUARTClockFreq+0x73a>
        if (LL_RCC_CSI_IsReady() == 1U)
 80093ac:	f7fe fcfc 	bl	8007da8 <LL_RCC_CSI_IsReady>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d14f      	bne.n	8009456 <LL_RCC_GetUARTClockFreq+0x73e>
          uart_frequency = CSI_VALUE;
 80093b6:	4b2d      	ldr	r3, [pc, #180]	@ (800946c <LL_RCC_GetUARTClockFreq+0x754>)
 80093b8:	617b      	str	r3, [r7, #20]
        break;
 80093ba:	e04c      	b.n	8009456 <LL_RCC_GetUARTClockFreq+0x73e>
        if (LL_RCC_LSE_IsReady() == 1U)
 80093bc:	f7fe fd08 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d149      	bne.n	800945a <LL_RCC_GetUARTClockFreq+0x742>
          uart_frequency = LSE_VALUE;
 80093c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093ca:	617b      	str	r3, [r7, #20]
        break;
 80093cc:	e045      	b.n	800945a <LL_RCC_GetUARTClockFreq+0x742>
        break;
 80093ce:	bf00      	nop
 80093d0:	e044      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093d2:	bf00      	nop
 80093d4:	e042      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093d6:	bf00      	nop
 80093d8:	e040      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093da:	bf00      	nop
 80093dc:	e03e      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093de:	bf00      	nop
 80093e0:	e03c      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093e2:	bf00      	nop
 80093e4:	e03a      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093e6:	bf00      	nop
 80093e8:	e038      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093ea:	bf00      	nop
 80093ec:	e036      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093ee:	bf00      	nop
 80093f0:	e034      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093f2:	bf00      	nop
 80093f4:	e032      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093f6:	bf00      	nop
 80093f8:	e030      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093fa:	bf00      	nop
 80093fc:	e02e      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 80093fe:	bf00      	nop
 8009400:	e02c      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009402:	bf00      	nop
 8009404:	e02a      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009406:	bf00      	nop
 8009408:	e028      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800940a:	bf00      	nop
 800940c:	e026      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800940e:	bf00      	nop
 8009410:	e024      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009412:	bf00      	nop
 8009414:	e022      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009416:	bf00      	nop
 8009418:	e020      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800941a:	bf00      	nop
 800941c:	e01e      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800941e:	bf00      	nop
 8009420:	e01c      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009422:	bf00      	nop
 8009424:	e01a      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009426:	bf00      	nop
 8009428:	e018      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800942a:	bf00      	nop
 800942c:	e016      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800942e:	bf00      	nop
 8009430:	e014      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009432:	bf00      	nop
 8009434:	e012      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009436:	bf00      	nop
 8009438:	e010      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800943a:	bf00      	nop
 800943c:	e00e      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800943e:	bf00      	nop
 8009440:	e00c      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009442:	bf00      	nop
 8009444:	e00a      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009446:	bf00      	nop
 8009448:	e008      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800944a:	bf00      	nop
 800944c:	e006      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800944e:	bf00      	nop
 8009450:	e004      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009452:	bf00      	nop
 8009454:	e002      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 8009456:	bf00      	nop
 8009458:	e000      	b.n	800945c <LL_RCC_GetUARTClockFreq+0x744>
        break;
 800945a:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return uart_frequency;
 800945c:	697b      	ldr	r3, [r7, #20]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	03d09000 	.word	0x03d09000
 800946c:	003d0900 	.word	0x003d0900

08009470 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator or PLL is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009478:	2300      	movs	r3, #0
 800947a:	617b      	str	r3, [r7, #20]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7fe fd3f 	bl	8007f00 <LL_RCC_GetLPUARTClockSource>
 8009482:	4603      	mov	r3, r0
 8009484:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009488:	d060      	beq.n	800954c <LL_RCC_GetLPUARTClockFreq+0xdc>
 800948a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800948e:	d866      	bhi.n	800955e <LL_RCC_GetLPUARTClockFreq+0xee>
 8009490:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009494:	d052      	beq.n	800953c <LL_RCC_GetLPUARTClockFreq+0xcc>
 8009496:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800949a:	d860      	bhi.n	800955e <LL_RCC_GetLPUARTClockFreq+0xee>
 800949c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094a0:	d03e      	beq.n	8009520 <LL_RCC_GetLPUARTClockFreq+0xb0>
 80094a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094a6:	d85a      	bhi.n	800955e <LL_RCC_GetLPUARTClockFreq+0xee>
 80094a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094ac:	d026      	beq.n	80094fc <LL_RCC_GetLPUARTClockFreq+0x8c>
 80094ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094b2:	d854      	bhi.n	800955e <LL_RCC_GetLPUARTClockFreq+0xee>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <LL_RCC_GetLPUARTClockFreq+0x50>
 80094b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094bc:	d00c      	beq.n	80094d8 <LL_RCC_GetLPUARTClockFreq+0x68>
      }
      break;

    default:
      /* unreachable code */
      break;
 80094be:	e04e      	b.n	800955e <LL_RCC_GetLPUARTClockFreq+0xee>
      lpuart_frequency = RCC_GetPCLK3ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80094c0:	f000 f862 	bl	8009588 <RCC_GetSystemClockFreq>
 80094c4:	4603      	mov	r3, r0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f8c4 	bl	8009654 <RCC_GetHCLKClockFreq>
 80094cc:	4603      	mov	r3, r0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f8fe 	bl	80096d0 <RCC_GetPCLK3ClockFreq>
 80094d4:	6178      	str	r0, [r7, #20]
      break;
 80094d6:	e04d      	b.n	8009574 <LL_RCC_GetLPUARTClockFreq+0x104>
      if (LL_RCC_PLL2_IsReady() != 0U)
 80094d8:	f7fe fd5e 	bl	8007f98 <LL_RCC_PLL2_IsReady>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d03f      	beq.n	8009562 <LL_RCC_GetLPUARTClockFreq+0xf2>
        if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80094e2:	f7fe fddb 	bl	800809c <LL_RCC_PLL2Q_IsEnabled>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d03a      	beq.n	8009562 <LL_RCC_GetLPUARTClockFreq+0xf2>
          LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 80094ec:	f107 0308 	add.w	r3, r7, #8
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe fee5 	bl	80082c0 <LL_RCC_GetPLL2ClockFreq>
          lpuart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	617b      	str	r3, [r7, #20]
      break;
 80094fa:	e032      	b.n	8009562 <LL_RCC_GetLPUARTClockFreq+0xf2>
      if (LL_RCC_PLL3_IsReady() != 0U)
 80094fc:	f7fe fe16 	bl	800812c <LL_RCC_PLL3_IsReady>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d02f      	beq.n	8009566 <LL_RCC_GetLPUARTClockFreq+0xf6>
        if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8009506:	f7fe fe93 	bl	8008230 <LL_RCC_PLL3Q_IsEnabled>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d02a      	beq.n	8009566 <LL_RCC_GetLPUARTClockFreq+0xf6>
          LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8009510:	f107 0308 	add.w	r3, r7, #8
 8009514:	4618      	mov	r0, r3
 8009516:	f7fe ff73 	bl	8008400 <LL_RCC_GetPLL3ClockFreq>
          lpuart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	617b      	str	r3, [r7, #20]
      break;
 800951e:	e022      	b.n	8009566 <LL_RCC_GetLPUARTClockFreq+0xf6>
      if (LL_RCC_HSI_IsReady() == 1U)
 8009520:	f7fe fc22 	bl	8007d68 <LL_RCC_HSI_IsReady>
 8009524:	4603      	mov	r3, r0
 8009526:	2b01      	cmp	r3, #1
 8009528:	d11f      	bne.n	800956a <LL_RCC_GetLPUARTClockFreq+0xfa>
        lpuart_frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800952a:	f7fe fc2f 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800952e:	4603      	mov	r3, r0
 8009530:	08db      	lsrs	r3, r3, #3
 8009532:	4a13      	ldr	r2, [pc, #76]	@ (8009580 <LL_RCC_GetLPUARTClockFreq+0x110>)
 8009534:	fa42 f303 	asr.w	r3, r2, r3
 8009538:	617b      	str	r3, [r7, #20]
      break;
 800953a:	e016      	b.n	800956a <LL_RCC_GetLPUARTClockFreq+0xfa>
      if (LL_RCC_CSI_IsReady() == 1U)
 800953c:	f7fe fc34 	bl	8007da8 <LL_RCC_CSI_IsReady>
 8009540:	4603      	mov	r3, r0
 8009542:	2b01      	cmp	r3, #1
 8009544:	d113      	bne.n	800956e <LL_RCC_GetLPUARTClockFreq+0xfe>
        lpuart_frequency = CSI_VALUE;
 8009546:	4b0f      	ldr	r3, [pc, #60]	@ (8009584 <LL_RCC_GetLPUARTClockFreq+0x114>)
 8009548:	617b      	str	r3, [r7, #20]
      break;
 800954a:	e010      	b.n	800956e <LL_RCC_GetLPUARTClockFreq+0xfe>
      if (LL_RCC_LSE_IsReady() == 1U)
 800954c:	f7fe fc40 	bl	8007dd0 <LL_RCC_LSE_IsReady>
 8009550:	4603      	mov	r3, r0
 8009552:	2b01      	cmp	r3, #1
 8009554:	d10d      	bne.n	8009572 <LL_RCC_GetLPUARTClockFreq+0x102>
        lpuart_frequency = LSE_VALUE;
 8009556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800955a:	617b      	str	r3, [r7, #20]
      break;
 800955c:	e009      	b.n	8009572 <LL_RCC_GetLPUARTClockFreq+0x102>
      break;
 800955e:	bf00      	nop
 8009560:	e008      	b.n	8009574 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 8009562:	bf00      	nop
 8009564:	e006      	b.n	8009574 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 8009566:	bf00      	nop
 8009568:	e004      	b.n	8009574 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 800956a:	bf00      	nop
 800956c:	e002      	b.n	8009574 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 800956e:	bf00      	nop
 8009570:	e000      	b.n	8009574 <LL_RCC_GetLPUARTClockFreq+0x104>
      break;
 8009572:	bf00      	nop
  }

  return lpuart_frequency;
 8009574:	697b      	ldr	r3, [r7, #20]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	03d09000 	.word	0x03d09000
 8009584:	003d0900 	.word	0x003d0900

08009588 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800958e:	f7fe fc33 	bl	8007df8 <LL_RCC_GetSysClkSource>
 8009592:	4603      	mov	r3, r0
 8009594:	2b18      	cmp	r3, #24
 8009596:	d848      	bhi.n	800962a <RCC_GetSystemClockFreq+0xa2>
 8009598:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <RCC_GetSystemClockFreq+0x18>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	08009605 	.word	0x08009605
 80095a4:	0800962b 	.word	0x0800962b
 80095a8:	0800962b 	.word	0x0800962b
 80095ac:	0800962b 	.word	0x0800962b
 80095b0:	0800962b 	.word	0x0800962b
 80095b4:	0800962b 	.word	0x0800962b
 80095b8:	0800962b 	.word	0x0800962b
 80095bc:	0800962b 	.word	0x0800962b
 80095c0:	08009617 	.word	0x08009617
 80095c4:	0800962b 	.word	0x0800962b
 80095c8:	0800962b 	.word	0x0800962b
 80095cc:	0800962b 	.word	0x0800962b
 80095d0:	0800962b 	.word	0x0800962b
 80095d4:	0800962b 	.word	0x0800962b
 80095d8:	0800962b 	.word	0x0800962b
 80095dc:	0800962b 	.word	0x0800962b
 80095e0:	0800961d 	.word	0x0800961d
 80095e4:	0800962b 	.word	0x0800962b
 80095e8:	0800962b 	.word	0x0800962b
 80095ec:	0800962b 	.word	0x0800962b
 80095f0:	0800962b 	.word	0x0800962b
 80095f4:	0800962b 	.word	0x0800962b
 80095f8:	0800962b 	.word	0x0800962b
 80095fc:	0800962b 	.word	0x0800962b
 8009600:	08009623 	.word	0x08009623
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:   /* HSI used as system clock  source */
      frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 8009604:	f7fe fbc2 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 8009608:	4603      	mov	r3, r0
 800960a:	08db      	lsrs	r3, r3, #3
 800960c:	4a0e      	ldr	r2, [pc, #56]	@ (8009648 <RCC_GetSystemClockFreq+0xc0>)
 800960e:	fa42 f303 	asr.w	r3, r2, r3
 8009612:	607b      	str	r3, [r7, #4]
      break;
 8009614:	e012      	b.n	800963c <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:   /* CSI used as system clock  source */
      frequency = CSI_VALUE;
 8009616:	4b0d      	ldr	r3, [pc, #52]	@ (800964c <RCC_GetSystemClockFreq+0xc4>)
 8009618:	607b      	str	r3, [r7, #4]
      break;
 800961a:	e00f      	b.n	800963c <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:   /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800961c:	4b0c      	ldr	r3, [pc, #48]	@ (8009650 <RCC_GetSystemClockFreq+0xc8>)
 800961e:	607b      	str	r3, [r7, #4]
      break;
 8009620:	e00c      	b.n	800963c <RCC_GetSystemClockFreq+0xb4>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:  /* PLL1 used as system clock  source */
      frequency = RCC_PLL1_GetFreqSystem();
 8009622:	f000 f869 	bl	80096f8 <RCC_PLL1_GetFreqSystem>
 8009626:	6078      	str	r0, [r7, #4]
      break;
 8009628:	e008      	b.n	800963c <RCC_GetSystemClockFreq+0xb4>

    default:
      frequency = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800962a:	f7fe fbaf 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 800962e:	4603      	mov	r3, r0
 8009630:	08db      	lsrs	r3, r3, #3
 8009632:	4a05      	ldr	r2, [pc, #20]	@ (8009648 <RCC_GetSystemClockFreq+0xc0>)
 8009634:	fa42 f303 	asr.w	r3, r2, r3
 8009638:	607b      	str	r3, [r7, #4]
      break;
 800963a:	bf00      	nop
  }

  return frequency;
 800963c:	687b      	ldr	r3, [r7, #4]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	03d09000 	.word	0x03d09000
 800964c:	003d0900 	.word	0x003d0900
 8009650:	01312d00 	.word	0x01312d00

08009654 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800965c:	f7fe fbda 	bl	8007e14 <LL_RCC_GetAHBPrescaler>
 8009660:	4603      	mov	r3, r0
 8009662:	f003 030f 	and.w	r3, r3, #15
 8009666:	4a04      	ldr	r2, [pc, #16]	@ (8009678 <RCC_GetHCLKClockFreq+0x24>)
 8009668:	5cd3      	ldrb	r3, [r2, r3]
 800966a:	461a      	mov	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	40d3      	lsrs	r3, r2
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	0800fc04 	.word	0x0800fc04

0800967c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009684:	f7fe fbd4 	bl	8007e30 <LL_RCC_GetAPB1Prescaler>
 8009688:	4603      	mov	r3, r0
 800968a:	091b      	lsrs	r3, r3, #4
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	4a04      	ldr	r2, [pc, #16]	@ (80096a4 <RCC_GetPCLK1ClockFreq+0x28>)
 8009692:	5cd3      	ldrb	r3, [r2, r3]
 8009694:	461a      	mov	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	40d3      	lsrs	r3, r2
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	0800fc14 	.word	0x0800fc14

080096a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80096b0:	f7fe fbcc 	bl	8007e4c <LL_RCC_GetAPB2Prescaler>
 80096b4:	4603      	mov	r3, r0
 80096b6:	0a1b      	lsrs	r3, r3, #8
 80096b8:	4a04      	ldr	r2, [pc, #16]	@ (80096cc <RCC_GetPCLK2ClockFreq+0x24>)
 80096ba:	5cd3      	ldrb	r3, [r2, r3]
 80096bc:	461a      	mov	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	40d3      	lsrs	r3, r2
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	0800fc14 	.word	0x0800fc14

080096d0 <RCC_GetPCLK3ClockFreq>:
  * @brief  Return PCLK3 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK3 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK3ClockFreq(uint32_t HCLK_Frequency)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* PCLK3 clock frequency */
  return __LL_RCC_CALC_PCLK3_FREQ(HCLK_Frequency, LL_RCC_GetAPB3Prescaler());
 80096d8:	f7fe fbc6 	bl	8007e68 <LL_RCC_GetAPB3Prescaler>
 80096dc:	4603      	mov	r3, r0
 80096de:	0b1b      	lsrs	r3, r3, #12
 80096e0:	4a04      	ldr	r2, [pc, #16]	@ (80096f4 <RCC_GetPCLK3ClockFreq+0x24>)
 80096e2:	5cd3      	ldrb	r3, [r2, r3]
 80096e4:	461a      	mov	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	40d3      	lsrs	r3, r2
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	0800fc14 	.word	0x0800fc14

080096f8 <RCC_PLL1_GetFreqSystem>:
/**
  * @brief  Return PLL1 clock frequency used for system clock
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t RCC_PLL1_GetFreqSystem(void)
{
 80096f8:	b590      	push	{r4, r7, lr}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL1_GetSource();
 80096fe:	f7fe fc11 	bl	8007f24 <LL_RCC_PLL1_GetSource>
 8009702:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b03      	cmp	r3, #3
 8009708:	d015      	beq.n	8009736 <RCC_PLL1_GetFreqSystem+0x3e>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b03      	cmp	r3, #3
 800970e:	d815      	bhi.n	800973c <RCC_PLL1_GetFreqSystem+0x44>
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d003      	beq.n	800971e <RCC_PLL1_GetFreqSystem+0x26>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d009      	beq.n	8009730 <RCC_PLL1_GetFreqSystem+0x38>
 800971c:	e00e      	b.n	800973c <RCC_PLL1_GetFreqSystem+0x44>
  {
    case LL_RCC_PLL1SOURCE_HSI:  /* HSI used as PLL1 clock source */
      pllinputfreq = __LL_RCC_CALC_HSI_FREQ(LL_RCC_HSI_GetDivider());
 800971e:	f7fe fb35 	bl	8007d8c <LL_RCC_HSI_GetDivider>
 8009722:	4603      	mov	r3, r0
 8009724:	08db      	lsrs	r3, r3, #3
 8009726:	4a11      	ldr	r2, [pc, #68]	@ (800976c <RCC_PLL1_GetFreqSystem+0x74>)
 8009728:	fa42 f303 	asr.w	r3, r2, r3
 800972c:	607b      	str	r3, [r7, #4]
      break;
 800972e:	e008      	b.n	8009742 <RCC_PLL1_GetFreqSystem+0x4a>

    case LL_RCC_PLL1SOURCE_CSI:  /* CSI used as PLL1 clock source */
      pllinputfreq = CSI_VALUE;
 8009730:	4b0f      	ldr	r3, [pc, #60]	@ (8009770 <RCC_PLL1_GetFreqSystem+0x78>)
 8009732:	607b      	str	r3, [r7, #4]
      break;
 8009734:	e005      	b.n	8009742 <RCC_PLL1_GetFreqSystem+0x4a>

    case LL_RCC_PLL1SOURCE_HSE:  /* HSE used as PLL1 clock source */
      pllinputfreq = HSE_VALUE;
 8009736:	4b0f      	ldr	r3, [pc, #60]	@ (8009774 <RCC_PLL1_GetFreqSystem+0x7c>)
 8009738:	607b      	str	r3, [r7, #4]
      break;
 800973a:	e002      	b.n	8009742 <RCC_PLL1_GetFreqSystem+0x4a>

    default:
      pllinputfreq = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	607b      	str	r3, [r7, #4]
      break;
 8009740:	bf00      	nop
  }
  return __LL_RCC_CALC_PLL1CLK_P_FREQ(pllinputfreq, LL_RCC_PLL1_GetM(),
 8009742:	f7fe fc1b 	bl	8007f7c <LL_RCC_PLL1_GetM>
 8009746:	4602      	mov	r2, r0
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	fbb3 f4f2 	udiv	r4, r3, r2
 800974e:	f7fe fbf7 	bl	8007f40 <LL_RCC_PLL1_GetN>
 8009752:	4603      	mov	r3, r0
 8009754:	fb03 f404 	mul.w	r4, r3, r4
 8009758:	f7fe fc00 	bl	8007f5c <LL_RCC_PLL1_GetP>
 800975c:	4603      	mov	r3, r0
 800975e:	fbb4 f3f3 	udiv	r3, r4, r3
                                      LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetP());
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	bd90      	pop	{r4, r7, pc}
 800976a:	bf00      	nop
 800976c:	03d09000 	.word	0x03d09000
 8009770:	003d0900 	.word	0x003d0900
 8009774:	01312d00 	.word	0x01312d00

08009778 <LL_SPI_IsEnabled>:
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b01      	cmp	r3, #1
 800978a:	d101      	bne.n	8009790 <LL_SPI_IsEnabled+0x18>
 800978c:	2301      	movs	r3, #1
 800978e:	e000      	b.n	8009792 <LL_SPI_IsEnabled+0x1a>
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <LL_SPI_SetInternalSSLevel>:
{
 800979e:	b480      	push	{r7}
 80097a0:	b083      	sub	sp, #12
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	431a      	orrs	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	601a      	str	r2, [r3, #0]
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <LL_SPI_GetNSSPolarity>:
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff ffb4 	bl	8009778 <LL_SPI_IsEnabled>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d169      	bne.n	80098ea <LL_SPI_Init+0xee>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits & SPI_CFG1_BPASS bit
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_BPASS | SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689a      	ldr	r2, [r3, #8]
 800981a:	4b36      	ldr	r3, [pc, #216]	@ (80098f4 <LL_SPI_Init+0xf8>)
 800981c:	4013      	ands	r3, r2
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	6991      	ldr	r1, [r2, #24]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	6a12      	ldr	r2, [r2, #32]
 8009826:	4311      	orrs	r1, r2
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	6892      	ldr	r2, [r2, #8]
 800982c:	430a      	orrs	r2, r1
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff ffbf 	bl	80097c4 <LL_SPI_GetNSSPolarity>
 8009846:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800984e:	d112      	bne.n	8009876 <LL_SPI_Init+0x7a>
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d103      	bne.n	800985e <LL_SPI_Init+0x62>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800985c:	d006      	beq.n	800986c <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009864:	d107      	bne.n	8009876 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d104      	bne.n	8009876 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 800986c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff ff94 	bl	800979e <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f023 531f 	bic.w	r3, r3, #666894336	@ 0x27c00000
 800987e:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	6951      	ldr	r1, [r2, #20]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	68d2      	ldr	r2, [r2, #12]
 800988a:	4311      	orrs	r1, r2
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	6912      	ldr	r2, [r2, #16]
 8009890:	4311      	orrs	r1, r2
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	69d2      	ldr	r2, [r2, #28]
 8009896:	4311      	orrs	r1, r2
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	6852      	ldr	r2, [r2, #4]
 800989c:	4311      	orrs	r1, r2
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 80098a6:	430a      	orrs	r2, r1
 80098a8:	431a      	orrs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098be:	431a      	orrs	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098cc:	d105      	bne.n	80098da <LL_SPI_Init+0xde>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff ff83 	bl	80097e0 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098de:	f023 0201 	bic.w	r2, r3, #1
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 80098e6:	2300      	movs	r3, #0
 80098e8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	0fbfffe0 	.word	0x0fbfffe0

080098f8 <LL_USART_IsEnabled>:
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b01      	cmp	r3, #1
 800990a:	d101      	bne.n	8009910 <LL_USART_IsEnabled+0x18>
 800990c:	2301      	movs	r3, #1
 800990e:	e000      	b.n	8009912 <LL_USART_IsEnabled+0x1a>
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <LL_USART_SetPrescaler>:
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992c:	f023 030f 	bic.w	r3, r3, #15
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	b292      	uxth	r2, r2
 8009934:	431a      	orrs	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <LL_USART_SetStopBitsLength>:
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	605a      	str	r2, [r3, #4]
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <LL_USART_SetHWFlowCtrl>:
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	431a      	orrs	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	609a      	str	r2, [r3, #8]
}
 8009986:	bf00      	nop
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
	...

08009994 <LL_USART_SetBaudRate>:
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b0b      	cmp	r3, #11
 80099a6:	d83c      	bhi.n	8009a22 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d039      	beq.n	8009a22 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099b4:	d122      	bne.n	80099fc <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	461a      	mov	r2, r3
 80099bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009a30 <LL_USART_SetBaudRate+0x9c>)
 80099be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c8:	005a      	lsls	r2, r3, #1
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	085b      	lsrs	r3, r3, #1
 80099ce:	441a      	add	r2, r3
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80099e0:	4013      	ands	r3, r2
 80099e2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	085b      	lsrs	r3, r3, #1
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	60da      	str	r2, [r3, #12]
}
 80099fa:	e012      	b.n	8009a22 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	461a      	mov	r2, r3
 8009a02:	4b0b      	ldr	r3, [pc, #44]	@ (8009a30 <LL_USART_SetBaudRate+0x9c>)
 8009a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	085b      	lsrs	r3, r3, #1
 8009a12:	441a      	add	r2, r3
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	60da      	str	r2, [r3, #12]
}
 8009a22:	bf00      	nop
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	08011304 	.word	0x08011304

08009a34 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7ff ff56 	bl	80098f8 <LL_USART_IsEnabled>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f040 80a5 	bne.w	8009b9e <LL_USART_Init+0x16a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	4b53      	ldr	r3, [pc, #332]	@ (8009ba8 <LL_USART_Init+0x174>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	6891      	ldr	r1, [r2, #8]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	6912      	ldr	r2, [r2, #16]
 8009a64:	4311      	orrs	r1, r2
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	6952      	ldr	r2, [r2, #20]
 8009a6a:	4311      	orrs	r1, r2
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	69d2      	ldr	r2, [r2, #28]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	431a      	orrs	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff ff61 	bl	8009946 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff ff6e 	bl	800996c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a46      	ldr	r2, [pc, #280]	@ (8009bac <LL_USART_Init+0x178>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d105      	bne.n	8009aa4 <LL_USART_Init+0x70>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8009a98:	f04f 60e0 	mov.w	r0, #117440512	@ 0x7000000
 8009a9c:	f7fe fd90 	bl	80085c0 <LL_RCC_GetUSARTClockFreq>
 8009aa0:	60b8      	str	r0, [r7, #8]
 8009aa2:	e061      	b.n	8009b68 <LL_USART_Init+0x134>
    }
    else if (USARTx == USART2)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a42      	ldr	r2, [pc, #264]	@ (8009bb0 <LL_USART_Init+0x17c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d104      	bne.n	8009ab6 <LL_USART_Init+0x82>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8009aac:	4841      	ldr	r0, [pc, #260]	@ (8009bb4 <LL_USART_Init+0x180>)
 8009aae:	f7fe fd87 	bl	80085c0 <LL_RCC_GetUSARTClockFreq>
 8009ab2:	60b8      	str	r0, [r7, #8]
 8009ab4:	e058      	b.n	8009b68 <LL_USART_Init+0x134>
    }
    else if (USARTx == USART3)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a3f      	ldr	r2, [pc, #252]	@ (8009bb8 <LL_USART_Init+0x184>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d104      	bne.n	8009ac8 <LL_USART_Init+0x94>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8009abe:	483f      	ldr	r0, [pc, #252]	@ (8009bbc <LL_USART_Init+0x188>)
 8009ac0:	f7fe fd7e 	bl	80085c0 <LL_RCC_GetUSARTClockFreq>
 8009ac4:	60b8      	str	r0, [r7, #8]
 8009ac6:	e04f      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a3d      	ldr	r2, [pc, #244]	@ (8009bc0 <LL_USART_Init+0x18c>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d104      	bne.n	8009ada <LL_USART_Init+0xa6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8009ad0:	483c      	ldr	r0, [pc, #240]	@ (8009bc4 <LL_USART_Init+0x190>)
 8009ad2:	f7ff f921 	bl	8008d18 <LL_RCC_GetUARTClockFreq>
 8009ad6:	60b8      	str	r0, [r7, #8]
 8009ad8:	e046      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a3a      	ldr	r2, [pc, #232]	@ (8009bc8 <LL_USART_Init+0x194>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d104      	bne.n	8009aec <LL_USART_Init+0xb8>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8009ae2:	483a      	ldr	r0, [pc, #232]	@ (8009bcc <LL_USART_Init+0x198>)
 8009ae4:	f7ff f918 	bl	8008d18 <LL_RCC_GetUARTClockFreq>
 8009ae8:	60b8      	str	r0, [r7, #8]
 8009aea:	e03d      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#endif /* UART5 */
#if defined(USART6)
    else if (USARTx == USART6)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a38      	ldr	r2, [pc, #224]	@ (8009bd0 <LL_USART_Init+0x19c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d104      	bne.n	8009afe <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8009af4:	4837      	ldr	r0, [pc, #220]	@ (8009bd4 <LL_USART_Init+0x1a0>)
 8009af6:	f7fe fd63 	bl	80085c0 <LL_RCC_GetUSARTClockFreq>
 8009afa:	60b8      	str	r0, [r7, #8]
 8009afc:	e034      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#endif /* USART6 */
#if defined(UART7)
    else if (USARTx == UART7)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a35      	ldr	r2, [pc, #212]	@ (8009bd8 <LL_USART_Init+0x1a4>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d104      	bne.n	8009b10 <LL_USART_Init+0xdc>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8009b06:	4835      	ldr	r0, [pc, #212]	@ (8009bdc <LL_USART_Init+0x1a8>)
 8009b08:	f7ff f906 	bl	8008d18 <LL_RCC_GetUARTClockFreq>
 8009b0c:	60b8      	str	r0, [r7, #8]
 8009b0e:	e02b      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a33      	ldr	r2, [pc, #204]	@ (8009be0 <LL_USART_Init+0x1ac>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d104      	bne.n	8009b22 <LL_USART_Init+0xee>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8009b18:	4832      	ldr	r0, [pc, #200]	@ (8009be4 <LL_USART_Init+0x1b0>)
 8009b1a:	f7ff f8fd 	bl	8008d18 <LL_RCC_GetUARTClockFreq>
 8009b1e:	60b8      	str	r0, [r7, #8]
 8009b20:	e022      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#endif /* UART8 */
#if defined(UART9)
    else if (USARTx == UART9)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a30      	ldr	r2, [pc, #192]	@ (8009be8 <LL_USART_Init+0x1b4>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d104      	bne.n	8009b34 <LL_USART_Init+0x100>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART9_CLKSOURCE);
 8009b2a:	4830      	ldr	r0, [pc, #192]	@ (8009bec <LL_USART_Init+0x1b8>)
 8009b2c:	f7ff f8f4 	bl	8008d18 <LL_RCC_GetUARTClockFreq>
 8009b30:	60b8      	str	r0, [r7, #8]
 8009b32:	e019      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a2e      	ldr	r2, [pc, #184]	@ (8009bf0 <LL_USART_Init+0x1bc>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d104      	bne.n	8009b46 <LL_USART_Init+0x112>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART10_CLKSOURCE);
 8009b3c:	482d      	ldr	r0, [pc, #180]	@ (8009bf4 <LL_USART_Init+0x1c0>)
 8009b3e:	f7fe fd3f 	bl	80085c0 <LL_RCC_GetUSARTClockFreq>
 8009b42:	60b8      	str	r0, [r7, #8]
 8009b44:	e010      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#endif /* USART10 */
#if defined(USART11)
    else if (USARTx == USART11)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a2b      	ldr	r2, [pc, #172]	@ (8009bf8 <LL_USART_Init+0x1c4>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d104      	bne.n	8009b58 <LL_USART_Init+0x124>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART11_CLKSOURCE);
 8009b4e:	482b      	ldr	r0, [pc, #172]	@ (8009bfc <LL_USART_Init+0x1c8>)
 8009b50:	f7fe fd36 	bl	80085c0 <LL_RCC_GetUSARTClockFreq>
 8009b54:	60b8      	str	r0, [r7, #8]
 8009b56:	e007      	b.n	8009b68 <LL_USART_Init+0x134>
    }
#endif /* USART11 */
#if defined(UART12)
    else if (USARTx == UART12)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a29      	ldr	r2, [pc, #164]	@ (8009c00 <LL_USART_Init+0x1cc>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d103      	bne.n	8009b68 <LL_USART_Init+0x134>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART12_CLKSOURCE);
 8009b60:	4828      	ldr	r0, [pc, #160]	@ (8009c04 <LL_USART_Init+0x1d0>)
 8009b62:	f7ff f8d9 	bl	8008d18 <LL_RCC_GetUARTClockFreq>
 8009b66:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d011      	beq.n	8009b92 <LL_USART_Init+0x15e>
        && (USART_InitStruct->BaudRate != 0U))
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00d      	beq.n	8009b92 <LL_USART_Init+0x15e>
    {
      status = SUCCESS;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff ff01 	bl	8009994 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff fec0 	bl	800991e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	efff69f3 	.word	0xefff69f3
 8009bac:	40013800 	.word	0x40013800
 8009bb0:	40004400 	.word	0x40004400
 8009bb4:	07000300 	.word	0x07000300
 8009bb8:	40004800 	.word	0x40004800
 8009bbc:	07000600 	.word	0x07000600
 8009bc0:	40004c00 	.word	0x40004c00
 8009bc4:	07000900 	.word	0x07000900
 8009bc8:	40005000 	.word	0x40005000
 8009bcc:	07000c00 	.word	0x07000c00
 8009bd0:	40006400 	.word	0x40006400
 8009bd4:	07000f00 	.word	0x07000f00
 8009bd8:	40007800 	.word	0x40007800
 8009bdc:	07001200 	.word	0x07001200
 8009be0:	40007c00 	.word	0x40007c00
 8009be4:	07001500 	.word	0x07001500
 8009be8:	40008000 	.word	0x40008000
 8009bec:	07001800 	.word	0x07001800
 8009bf0:	40006800 	.word	0x40006800
 8009bf4:	07001b00 	.word	0x07001b00
 8009bf8:	40006c00 	.word	0x40006c00
 8009bfc:	07000004 	.word	0x07000004
 8009c00:	40008400 	.word	0x40008400
 8009c04:	07000404 	.word	0x07000404

08009c08 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c1a:	4a07      	ldr	r2, [pc, #28]	@ (8009c38 <LL_InitTick+0x30>)
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8009c20:	4b05      	ldr	r3, [pc, #20]	@ (8009c38 <LL_InitTick+0x30>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c26:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <LL_InitTick+0x30>)
 8009c28:	2205      	movs	r2, #5
 8009c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	e000e010 	.word	0xe000e010

08009c3c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8009c44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff ffdd 	bl	8009c08 <LL_InitTick>
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the minimum delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8009c60:	4b10      	ldr	r3, [pc, #64]	@ (8009ca4 <LL_mDelay+0x4c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8009c6a:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if (tmpDelay < LL_MAX_DELAY)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d00c      	beq.n	8009c8e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3301      	adds	r3, #1
 8009c78:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8009c7a:	e008      	b.n	8009c8e <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8009c7c:	4b09      	ldr	r3, [pc, #36]	@ (8009ca4 <LL_mDelay+0x4c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1f3      	bne.n	8009c7c <LL_mDelay+0x24>
    }
  }
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	e000e010 	.word	0xe000e010

08009ca8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8009cb0:	4a04      	ldr	r2, [pc, #16]	@ (8009cc4 <LL_SetSystemCoreClock+0x1c>)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6013      	str	r3, [r2, #0]
}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20000020 	.word	0x20000020

08009cc8 <__NVIC_SetPriority>:
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	db0a      	blt.n	8009cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	490c      	ldr	r1, [pc, #48]	@ (8009d14 <__NVIC_SetPriority+0x4c>)
 8009ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ce6:	0112      	lsls	r2, r2, #4
 8009ce8:	b2d2      	uxtb	r2, r2
 8009cea:	440b      	add	r3, r1
 8009cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009cf0:	e00a      	b.n	8009d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	4908      	ldr	r1, [pc, #32]	@ (8009d18 <__NVIC_SetPriority+0x50>)
 8009cf8:	88fb      	ldrh	r3, [r7, #6]
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	3b04      	subs	r3, #4
 8009d00:	0112      	lsls	r2, r2, #4
 8009d02:	b2d2      	uxtb	r2, r2
 8009d04:	440b      	add	r3, r1
 8009d06:	761a      	strb	r2, [r3, #24]
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	e000e100 	.word	0xe000e100
 8009d18:	e000ed00 	.word	0xe000ed00

08009d1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d20:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <SysTick_Handler+0x1c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d24:	f002 f932 	bl	800bf8c <xTaskGetSchedulerState>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d001      	beq.n	8009d32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d2e:	f000 fc25 	bl	800a57c <xPortSysTickHandler>
  }
}
 8009d32:	bf00      	nop
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	e000e010 	.word	0xe000e010

08009d3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8009d40:	2100      	movs	r1, #0
 8009d42:	f06f 0004 	mvn.w	r0, #4
 8009d46:	f7ff ffbf 	bl	8009cc8 <__NVIC_SetPriority>
#endif
}
 8009d4a:	bf00      	nop
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b086      	sub	sp, #24
 8009d52:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d58:	f3ef 8305 	mrs	r3, IPSR
 8009d5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d5e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8009d64:	2301      	movs	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	e013      	b.n	8009d92 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8009d6a:	f002 f90f 	bl	800bf8c <xTaskGetSchedulerState>
 8009d6e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d00d      	beq.n	8009d92 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d76:	f3ef 8310 	mrs	r3, PRIMASK
 8009d7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d105      	bne.n	8009d8e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d82:	f3ef 8311 	mrs	r3, BASEPRI
 8009d86:	607b      	str	r3, [r7, #4]
  return(result);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8009d92:	697b      	ldr	r3, [r7, #20]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8009da2:	f7ff ffd4 	bl	8009d4e <IRQ_Context>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8009dac:	f06f 0305 	mvn.w	r3, #5
 8009db0:	607b      	str	r3, [r7, #4]
 8009db2:	e012      	b.n	8009dda <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8009db4:	f002 f8ea 	bl	800bf8c <xTaskGetSchedulerState>
 8009db8:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d109      	bne.n	8009dd4 <osKernelInitialize+0x38>
 8009dc0:	4b08      	ldr	r3, [pc, #32]	@ (8009de4 <osKernelInitialize+0x48>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d105      	bne.n	8009dd4 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009dc8:	4b06      	ldr	r3, [pc, #24]	@ (8009de4 <osKernelInitialize+0x48>)
 8009dca:	2201      	movs	r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	607b      	str	r3, [r7, #4]
 8009dd2:	e002      	b.n	8009dda <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8009dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8009dda:	687b      	ldr	r3, [r7, #4]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20025e74 	.word	0x20025e74

08009de8 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8009dee:	f7ff ffae 	bl	8009d4e <IRQ_Context>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <osKernelStart+0x18>
    stat = osErrorISR;
 8009df8:	f06f 0305 	mvn.w	r3, #5
 8009dfc:	607b      	str	r3, [r7, #4]
 8009dfe:	e016      	b.n	8009e2e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8009e00:	f002 f8c4 	bl	800bf8c <xTaskGetSchedulerState>
 8009e04:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d10d      	bne.n	8009e28 <osKernelStart+0x40>
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e38 <osKernelStart+0x50>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d109      	bne.n	8009e28 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e14:	f7ff ff92 	bl	8009d3c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8009e18:	4b07      	ldr	r3, [pc, #28]	@ (8009e38 <osKernelStart+0x50>)
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e1e:	f001 fb83 	bl	800b528 <vTaskStartScheduler>
      stat = osOK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]
 8009e26:	e002      	b.n	8009e2e <osKernelStart+0x46>
    } else {
      stat = osError;
 8009e28:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8009e2e:	687b      	ldr	r3, [r7, #4]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20025e74 	.word	0x20025e74

08009e3c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08e      	sub	sp, #56	@ 0x38
 8009e40:	af04      	add	r7, sp, #16
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8009e4c:	f7ff ff7f 	bl	8009d4e <IRQ_Context>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d17e      	bne.n	8009f54 <osThreadNew+0x118>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d07b      	beq.n	8009f54 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8009e5c:	2380      	movs	r3, #128	@ 0x80
 8009e5e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e60:	2318      	movs	r3, #24
 8009e62:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e64:	2300      	movs	r3, #0
 8009e66:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009e68:	f04f 33ff 	mov.w	r3, #4294967295
 8009e6c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d045      	beq.n	8009f00 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <osThreadNew+0x46>
        name = attr->name;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d008      	beq.n	8009ea8 <osThreadNew+0x6c>
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	2b38      	cmp	r3, #56	@ 0x38
 8009e9a:	d805      	bhi.n	8009ea8 <osThreadNew+0x6c>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e054      	b.n	8009f56 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d003      	beq.n	8009ebc <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	089b      	lsrs	r3, r3, #2
 8009eba:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00e      	beq.n	8009ee2 <osThreadNew+0xa6>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b5b      	cmp	r3, #91	@ 0x5b
 8009eca:	d90a      	bls.n	8009ee2 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d006      	beq.n	8009ee2 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8009edc:	2301      	movs	r3, #1
 8009ede:	61bb      	str	r3, [r7, #24]
 8009ee0:	e010      	b.n	8009f04 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10c      	bne.n	8009f04 <osThreadNew+0xc8>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d108      	bne.n	8009f04 <osThreadNew+0xc8>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d104      	bne.n	8009f04 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	61bb      	str	r3, [r7, #24]
 8009efe:	e001      	b.n	8009f04 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d110      	bne.n	8009f2c <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f12:	9202      	str	r2, [sp, #8]
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	6a3a      	ldr	r2, [r7, #32]
 8009f1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f001 f931 	bl	800b188 <xTaskCreateStatic>
 8009f26:	4603      	mov	r3, r0
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	e013      	b.n	8009f54 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d110      	bne.n	8009f54 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	f107 0314 	add.w	r3, r7, #20
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f001 f96c 	bl	800b222 <xTaskCreate>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d001      	beq.n	8009f54 <osThreadNew+0x118>
            hTask = NULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8009f54:	697b      	ldr	r3, [r7, #20]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3728      	adds	r7, #40	@ 0x28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8009f66:	f7ff fef2 	bl	8009d4e <IRQ_Context>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <osDelay+0x1a>
    stat = osErrorISR;
 8009f70:	f06f 0305 	mvn.w	r3, #5
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	e007      	b.n	8009f88 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <osDelay+0x2a>
      vTaskDelay(ticks);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 faaa 	bl	800b4dc <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8009f88:	68fb      	ldr	r3, [r7, #12]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <TimerCallback>:

/* ==== Timer Management Functions ==== */

#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  /* Retrieve pointer to callback function and argument */
  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f002 fc32 	bl	800c804 <pvTimerGetTimerID>
 8009fa0:	60f8      	str	r0, [r7, #12]

  /* Remove dynamic allocation flag */
  callb = (TimerCallback_t *)((uint32_t)callb & ~1U);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f023 0301 	bic.w	r3, r3, #1
 8009fa8:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d005      	beq.n	8009fbc <TimerCallback+0x2a>
    callb->func (callb->arg);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	6852      	ldr	r2, [r2, #4]
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <osTimerNew>:

/*
  Create and Initialize a timer.
*/
osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08c      	sub	sp, #48	@ 0x30
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	607a      	str	r2, [r7, #4]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	72fb      	strb	r3, [r7, #11]
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;
  uint32_t callb_dyn;

  hTimer = NULL;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	623b      	str	r3, [r7, #32]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8009fd8:	f7ff feb9 	bl	8009d4e <IRQ_Context>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f040 808b 	bne.w	800a0fa <osTimerNew+0x136>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 8087 	beq.w	800a0fa <osTimerNew+0x136>
    callb     = NULL;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
    callb_dyn = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	613b      	str	r3, [r7, #16]

    #if (configSUPPORT_STATIC_ALLOCATION == 1)
      /* Static memory allocation is available: check if memory for control block */
      /* is provided and if it also contains space for callback and its argument  */
      if ((attr != NULL) && (attr->cb_mem != NULL)) {
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00b      	beq.n	800a012 <osTimerNew+0x4e>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <osTimerNew+0x4e>
        if (attr->cb_size >= (sizeof(StaticTimer_t) + sizeof(TimerCallback_t))) {
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	2b33      	cmp	r3, #51	@ 0x33
 800a008:	d903      	bls.n	800a012 <osTimerNew+0x4e>
          callb = (TimerCallback_t *)((uint32_t)attr->cb_mem + sizeof(StaticTimer_t));
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	332c      	adds	r3, #44	@ 0x2c
 800a010:	61fb      	str	r3, [r7, #28]
    #endif

    #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
      /* Dynamic memory allocation is available: if memory for callback and */
      /* its argument is not provided, allocate it from dynamic memory pool */
      if (callb == NULL) {
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d108      	bne.n	800a02a <osTimerNew+0x66>
        callb = (TimerCallback_t *)pvPortMalloc (sizeof(TimerCallback_t));
 800a018:	2008      	movs	r0, #8
 800a01a:	f002 fc0d 	bl	800c838 <pvPortMalloc>
 800a01e:	61f8      	str	r0, [r7, #28]

        if (callb != NULL) {
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <osTimerNew+0x66>
          /* Callback memory was allocated from dynamic pool, set flag */
          callb_dyn = 1U;
 800a026:	2301      	movs	r3, #1
 800a028:	613b      	str	r3, [r7, #16]
        }
      }
    #endif

    if (callb != NULL) {
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d064      	beq.n	800a0fa <osTimerNew+0x136>
      callb->func = func;
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <osTimerNew+0x84>
        reload = pdFALSE;
 800a042:	2300      	movs	r3, #0
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	e001      	b.n	800a04c <osTimerNew+0x88>
      } else {
        reload = pdTRUE;
 800a048:	2301      	movs	r3, #1
 800a04a:	61bb      	str	r3, [r7, #24]
      }

      mem  = -1;
 800a04c:	f04f 33ff 	mov.w	r3, #4294967295
 800a050:	617b      	str	r3, [r7, #20]
      name = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01c      	beq.n	800a096 <osTimerNew+0xd2>
        if (attr->name != NULL) {
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <osTimerNew+0xa6>
          name = attr->name;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d006      	beq.n	800a080 <osTimerNew+0xbc>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	2b2b      	cmp	r3, #43	@ 0x2b
 800a078:	d902      	bls.n	800a080 <osTimerNew+0xbc>
          /* The memory for control block is provided, use static object */
          mem = 1;
 800a07a:	2301      	movs	r3, #1
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	e00c      	b.n	800a09a <osTimerNew+0xd6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d108      	bne.n	800a09a <osTimerNew+0xd6>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d104      	bne.n	800a09a <osTimerNew+0xd6>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	e001      	b.n	800a09a <osTimerNew+0xd6>
          }
        }
      }
      else {
        mem = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	617b      	str	r3, [r7, #20]
      }
      /* Store callback memory dynamic allocation flag */
      callb = (TimerCallback_t *)((uint32_t)callb | callb_dyn);
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	61fb      	str	r3, [r7, #28]
      /*
        TimerCallback function is always provided as a callback and is used to call application
        specified function with its argument both stored in structure callb.
      */
      if (mem == 1) {
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d10c      	bne.n	800a0c2 <osTimerNew+0xfe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	4b14      	ldr	r3, [pc, #80]	@ (800a104 <osTimerNew+0x140>)
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a0ba:	f002 f8dc 	bl	800c276 <xTimerCreateStatic>
 800a0be:	6238      	str	r0, [r7, #32]
 800a0c0:	e00b      	b.n	800a0da <osTimerNew+0x116>
        #endif
      }
      else {
        if (mem == 0) {
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d108      	bne.n	800a0da <osTimerNew+0x116>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a104 <osTimerNew+0x140>)
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a0d4:	f002 f8ae 	bl	800c234 <xTimerCreate>
 800a0d8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
      if ((hTimer == NULL) && (callb != NULL) && (callb_dyn == 1U)) {
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10c      	bne.n	800a0fa <osTimerNew+0x136>
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d009      	beq.n	800a0fa <osTimerNew+0x136>
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d106      	bne.n	800a0fa <osTimerNew+0x136>
        /* Failed to create a timer, release allocated resources */
        callb = (TimerCallback_t *)((uint32_t)callb & ~1U);
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	f023 0301 	bic.w	r3, r3, #1
 800a0f2:	61fb      	str	r3, [r7, #28]

        vPortFree (callb);
 800a0f4:	69f8      	ldr	r0, [r7, #28]
 800a0f6:	f002 fc4b 	bl	800c990 <vPortFree>
      #endif
    }
  }

  /* Return timer ID */
  return ((osTimerId_t)hTimer);
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3728      	adds	r7, #40	@ 0x28
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	08009f93 	.word	0x08009f93

0800a108 <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 800a114:	f7ff fe1b 	bl	8009d4e <IRQ_Context>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d174      	bne.n	800a208 <osMutexNew+0x100>
    if (attr != NULL) {
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <osMutexNew+0x24>
      type = attr->attr_bits;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	613b      	str	r3, [r7, #16]
 800a12a:	e001      	b.n	800a130 <osMutexNew+0x28>
    } else {
      type = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <osMutexNew+0x38>
      rmtx = 1U;
 800a13a:	2301      	movs	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e001      	b.n	800a144 <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f003 0308 	and.w	r3, r3, #8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d15c      	bne.n	800a208 <osMutexNew+0x100>
      mem = -1;
 800a14e:	f04f 33ff 	mov.w	r3, #4294967295
 800a152:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d015      	beq.n	800a186 <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d006      	beq.n	800a170 <osMutexNew+0x68>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	2b4f      	cmp	r3, #79	@ 0x4f
 800a168:	d902      	bls.n	800a170 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 800a16a:	2301      	movs	r3, #1
 800a16c:	60bb      	str	r3, [r7, #8]
 800a16e:	e00c      	b.n	800a18a <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d108      	bne.n	800a18a <osMutexNew+0x82>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d104      	bne.n	800a18a <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	60bb      	str	r3, [r7, #8]
 800a184:	e001      	b.n	800a18a <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d112      	bne.n	800a1b6 <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d007      	beq.n	800a1a6 <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	4619      	mov	r1, r3
 800a19c:	2004      	movs	r0, #4
 800a19e:	f000 fcc5 	bl	800ab2c <xQueueCreateMutexStatic>
 800a1a2:	6178      	str	r0, [r7, #20]
 800a1a4:	e016      	b.n	800a1d4 <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	f000 fcbd 	bl	800ab2c <xQueueCreateMutexStatic>
 800a1b2:	6178      	str	r0, [r7, #20]
 800a1b4:	e00e      	b.n	800a1d4 <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10b      	bne.n	800a1d4 <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a1c2:	2004      	movs	r0, #4
 800a1c4:	f000 fc9a 	bl	800aafc <xQueueCreateMutex>
 800a1c8:	6178      	str	r0, [r7, #20]
 800a1ca:	e003      	b.n	800a1d4 <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a1cc:	2001      	movs	r0, #1
 800a1ce:	f000 fc95 	bl	800aafc <xQueueCreateMutex>
 800a1d2:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00c      	beq.n	800a1f4 <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d009      	beq.n	800a1f4 <osMutexNew+0xec>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6978      	ldr	r0, [r7, #20]
 800a1f0:	f000 ff50 	bl	800b094 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d006      	beq.n	800a208 <osMutexNew+0x100>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f043 0301 	orr.w	r3, r3, #1
 800a206:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 800a208:	697b      	ldr	r3, [r7, #20]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a212:	b580      	push	{r7, lr}
 800a214:	b088      	sub	sp, #32
 800a216:	af02      	add	r7, sp, #8
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800a222:	f7ff fd94 	bl	8009d4e <IRQ_Context>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d15f      	bne.n	800a2ec <osMessageQueueNew+0xda>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d05c      	beq.n	800a2ec <osMessageQueueNew+0xda>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d059      	beq.n	800a2ec <osMessageQueueNew+0xda>
    mem = -1;
 800a238:	f04f 33ff 	mov.w	r3, #4294967295
 800a23c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d029      	beq.n	800a298 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d012      	beq.n	800a272 <osMessageQueueNew+0x60>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	2b4f      	cmp	r3, #79	@ 0x4f
 800a252:	d90e      	bls.n	800a272 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	695a      	ldr	r2, [r3, #20]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	fb01 f303 	mul.w	r3, r1, r3
 800a268:	429a      	cmp	r2, r3
 800a26a:	d302      	bcc.n	800a272 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800a26c:	2301      	movs	r3, #1
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	e014      	b.n	800a29c <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d110      	bne.n	800a29c <osMessageQueueNew+0x8a>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10c      	bne.n	800a29c <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a286:	2b00      	cmp	r3, #0
 800a288:	d108      	bne.n	800a29c <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d104      	bne.n	800a29c <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	613b      	str	r3, [r7, #16]
 800a296:	e001      	b.n	800a29c <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d10b      	bne.n	800a2ba <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691a      	ldr	r2, [r3, #16]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	9100      	str	r1, [sp, #0]
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 fb52 	bl	800a95a <xQueueGenericCreateStatic>
 800a2b6:	6178      	str	r0, [r7, #20]
 800a2b8:	e008      	b.n	800a2cc <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 fb91 	bl	800a9ec <xQueueGenericCreate>
 800a2ca:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00c      	beq.n	800a2ec <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d009      	beq.n	800a2ec <osMessageQueueNew+0xda>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d005      	beq.n	800a2ec <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6978      	ldr	r0, [r7, #20]
 800a2e8:	f000 fed4 	bl	800b094 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800a2ec:	697b      	ldr	r3, [r7, #20]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4a07      	ldr	r2, [pc, #28]	@ (800a324 <vApplicationGetIdleTaskMemory+0x2c>)
 800a308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	4a06      	ldr	r2, [pc, #24]	@ (800a328 <vApplicationGetIdleTaskMemory+0x30>)
 800a30e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2280      	movs	r2, #128	@ 0x80
 800a314:	601a      	str	r2, [r3, #0]
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	20025e78 	.word	0x20025e78
 800a328:	20025ed4 	.word	0x20025ed4

0800a32c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4a07      	ldr	r2, [pc, #28]	@ (800a358 <vApplicationGetTimerTaskMemory+0x2c>)
 800a33c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	4a06      	ldr	r2, [pc, #24]	@ (800a35c <vApplicationGetTimerTaskMemory+0x30>)
 800a342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2280      	movs	r2, #128	@ 0x80
 800a348:	601a      	str	r2, [r3, #0]
}
 800a34a:	bf00      	nop
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	200260d4 	.word	0x200260d4
 800a35c:	20026130 	.word	0x20026130

0800a360 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f103 0208 	add.w	r2, r3, #8
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f04f 32ff 	mov.w	r2, #4294967295
 800a378:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f103 0208 	add.w	r2, r3, #8
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f103 0208 	add.w	r2, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d103      	bne.n	800a3da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	e00c      	b.n	800a3f4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3308      	adds	r3, #8
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	e002      	b.n	800a3e8 <vListInsert+0x2e>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d2f6      	bcs.n	800a3e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	601a      	str	r2, [r3, #0]
}
 800a420:	bf00      	nop
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6892      	ldr	r2, [r2, #8]
 800a442:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	6852      	ldr	r2, [r2, #4]
 800a44c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d103      	bne.n	800a460 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	1e5a      	subs	r2, r3, #1
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a484:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b4 <vPortSetupTimerInterrupt+0x34>)
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a48a:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b8 <vPortSetupTimerInterrupt+0x38>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a490:	4b0a      	ldr	r3, [pc, #40]	@ (800a4bc <vPortSetupTimerInterrupt+0x3c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a0a      	ldr	r2, [pc, #40]	@ (800a4c0 <vPortSetupTimerInterrupt+0x40>)
 800a496:	fba2 2303 	umull	r2, r3, r2, r3
 800a49a:	099b      	lsrs	r3, r3, #6
 800a49c:	4a09      	ldr	r2, [pc, #36]	@ (800a4c4 <vPortSetupTimerInterrupt+0x44>)
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a4a2:	4b04      	ldr	r3, [pc, #16]	@ (800a4b4 <vPortSetupTimerInterrupt+0x34>)
 800a4a4:	2207      	movs	r2, #7
 800a4a6:	601a      	str	r2, [r3, #0]
}
 800a4a8:	bf00      	nop
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	e000e010 	.word	0xe000e010
 800a4b8:	e000e018 	.word	0xe000e018
 800a4bc:	20000020 	.word	0x20000020
 800a4c0:	10624dd3 	.word	0x10624dd3
 800a4c4:	e000e014 	.word	0xe000e014

0800a4c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4fc <prvTaskExitError+0x34>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4da:	d003      	beq.n	800a4e4 <prvTaskExitError+0x1c>
 800a4dc:	f000 f964 	bl	800a7a8 <ulSetInterruptMask>
 800a4e0:	bf00      	nop
 800a4e2:	e7fd      	b.n	800a4e0 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800a4e4:	f000 f960 	bl	800a7a8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800a4e8:	bf00      	nop
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d0fc      	beq.n	800a4ea <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800a4f0:	bf00      	nop
 800a4f2:	bf00      	nop
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20000024 	.word	0x20000024

0800a500 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a504:	4b06      	ldr	r3, [pc, #24]	@ (800a520 <vPortYield+0x20>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800a50c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800a510:	f3bf 8f6f 	isb	sy
}
 800a514:	bf00      	nop
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	e000ed04 	.word	0xe000ed04

0800a524 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800a528:	f000 f93e 	bl	800a7a8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800a52c:	4b05      	ldr	r3, [pc, #20]	@ (800a544 <vPortEnterCritical+0x20>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3301      	adds	r3, #1
 800a532:	4a04      	ldr	r2, [pc, #16]	@ (800a544 <vPortEnterCritical+0x20>)
 800a534:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800a536:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800a53a:	f3bf 8f6f 	isb	sy
}
 800a53e:	bf00      	nop
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	20000024 	.word	0x20000024

0800a548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800a54c:	4b0a      	ldr	r3, [pc, #40]	@ (800a578 <vPortExitCritical+0x30>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d103      	bne.n	800a55c <vPortExitCritical+0x14>
 800a554:	f000 f928 	bl	800a7a8 <ulSetInterruptMask>
 800a558:	bf00      	nop
 800a55a:	e7fd      	b.n	800a558 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800a55c:	4b06      	ldr	r3, [pc, #24]	@ (800a578 <vPortExitCritical+0x30>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3b01      	subs	r3, #1
 800a562:	4a05      	ldr	r2, [pc, #20]	@ (800a578 <vPortExitCritical+0x30>)
 800a564:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800a566:	4b04      	ldr	r3, [pc, #16]	@ (800a578 <vPortExitCritical+0x30>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d102      	bne.n	800a574 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800a56e:	2000      	movs	r0, #0
 800a570:	f000 f927 	bl	800a7c2 <vClearInterruptMask>
    }
}
 800a574:	bf00      	nop
 800a576:	bd80      	pop	{r7, pc}
 800a578:	20000024 	.word	0x20000024

0800a57c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a582:	f000 f911 	bl	800a7a8 <ulSetInterruptMask>
 800a586:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a588:	f001 f936 	bl	800b7f8 <xTaskIncrementTick>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a592:	4b05      	ldr	r3, [pc, #20]	@ (800a5a8 <xPortSysTickHandler+0x2c>)
 800a594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a598:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f911 	bl	800a7c2 <vClearInterruptMask>
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3b02      	subs	r3, #2
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800a5c2:	7afb      	ldrb	r3, [r7, #11]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d102      	bne.n	800a5ce <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800a5c8:	f000 f8ba 	bl	800a740 <vRestoreContextOfFirstTask>
            break;
 800a5cc:	e003      	b.n	800a5d6 <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800a5ce:	f000 f8eb 	bl	800a7a8 <ulSetInterruptMask>
 800a5d2:	bf00      	nop
 800a5d4:	e7fd      	b.n	800a5d2 <vPortSVCHandler_C+0x26>
    }
}
 800a5d6:	bf00      	nop
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a5fa:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3b04      	subs	r3, #4
 800a600:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3b04      	subs	r3, #4
 800a60c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800a60e:	4a38      	ldr	r2, [pc, #224]	@ (800a6f0 <pxPortInitialiseStack+0x110>)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3b04      	subs	r3, #4
 800a618:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800a620:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b04      	subs	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800a62e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3b04      	subs	r3, #4
 800a634:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800a63c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3b04      	subs	r3, #4
 800a642:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800a64a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3b04      	subs	r3, #4
 800a650:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3b04      	subs	r3, #4
 800a65c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800a664:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3b04      	subs	r3, #4
 800a66a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800a672:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3b04      	subs	r3, #4
 800a678:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800a680:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3b04      	subs	r3, #4
 800a686:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800a68e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3b04      	subs	r3, #4
 800a694:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800a69c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3b04      	subs	r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800a6aa:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3b04      	subs	r3, #4
 800a6b0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800a6b8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3b04      	subs	r3, #4
 800a6be:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800a6c6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3b04      	subs	r3, #4
 800a6cc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800a6d4:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	3b04      	subs	r3, #4
 800a6da:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	0800a4c9 	.word	0x0800a4c9

0800a6f4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a6f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a72c <xPortStartScheduler+0x38>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a0b      	ldr	r2, [pc, #44]	@ (800a72c <xPortStartScheduler+0x38>)
 800a6fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a702:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a704:	4b09      	ldr	r3, [pc, #36]	@ (800a72c <xPortStartScheduler+0x38>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a08      	ldr	r2, [pc, #32]	@ (800a72c <xPortStartScheduler+0x38>)
 800a70a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a70e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a710:	f7ff feb6 	bl	800a480 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800a714:	4b06      	ldr	r3, [pc, #24]	@ (800a730 <xPortStartScheduler+0x3c>)
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800a71a:	f000 f831 	bl	800a780 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a71e:	f001 f97b 	bl	800ba18 <vTaskSwitchContext>
    prvTaskExitError();
 800a722:	f7ff fed1 	bl	800a4c8 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	e000ed20 	.word	0xe000ed20
 800a730:	20000024 	.word	0x20000024
	...

0800a740 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a740:	4a0b      	ldr	r2, [pc, #44]	@ (800a770 <pxCurrentTCBConst2>)
 800a742:	6811      	ldr	r1, [r2, #0]
 800a744:	6808      	ldr	r0, [r1, #0]
 800a746:	c806      	ldmia	r0!, {r1, r2}
 800a748:	f381 880b 	msr	PSPLIM, r1
 800a74c:	2102      	movs	r1, #2
 800a74e:	f381 8814 	msr	CONTROL, r1
 800a752:	3020      	adds	r0, #32
 800a754:	f380 8809 	msr	PSP, r0
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f04f 0000 	mov.w	r0, #0
 800a760:	f380 8811 	msr	BASEPRI, r0
 800a764:	4710      	bx	r2
 800a766:	bf00      	nop
 800a768:	f3af 8000 	nop.w
 800a76c:	f3af 8000 	nop.w

0800a770 <pxCurrentTCBConst2>:
 800a770:	20026370 	.word	0x20026370
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
	...

0800a780 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a780:	4807      	ldr	r0, [pc, #28]	@ (800a7a0 <xVTORConst>)
 800a782:	6800      	ldr	r0, [r0, #0]
 800a784:	6800      	ldr	r0, [r0, #0]
 800a786:	f380 8808 	msr	MSP, r0
 800a78a:	b662      	cpsie	i
 800a78c:	b661      	cpsie	f
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	df02      	svc	2
 800a798:	bf00      	nop
 800a79a:	bf00      	nop
 800a79c:	f3af 8000 	nop.w

0800a7a0 <xVTORConst>:
 800a7a0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a7a8:	f3ef 8011 	mrs	r0, BASEPRI
 800a7ac:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800a7b0:	f381 8811 	msr	BASEPRI, r1
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800a7be:	bf00      	nop
 800a7c0:	4618      	mov	r0, r3

0800a7c2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a7c2:	f380 8811 	msr	BASEPRI, r0
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800a7d0:	bf00      	nop
	...

0800a7e0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a7e0:	f3ef 8009 	mrs	r0, PSP
 800a7e4:	f3ef 820b 	mrs	r2, PSPLIM
 800a7e8:	4673      	mov	r3, lr
 800a7ea:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a7ee:	4a10      	ldr	r2, [pc, #64]	@ (800a830 <pxCurrentTCBConst>)
 800a7f0:	6811      	ldr	r1, [r2, #0]
 800a7f2:	6008      	str	r0, [r1, #0]
 800a7f4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a7f8:	f380 8811 	msr	BASEPRI, r0
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f001 f908 	bl	800ba18 <vTaskSwitchContext>
 800a808:	f04f 0000 	mov.w	r0, #0
 800a80c:	f380 8811 	msr	BASEPRI, r0
 800a810:	4a07      	ldr	r2, [pc, #28]	@ (800a830 <pxCurrentTCBConst>)
 800a812:	6811      	ldr	r1, [r2, #0]
 800a814:	6808      	ldr	r0, [r1, #0]
 800a816:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a81a:	f382 880b 	msr	PSPLIM, r2
 800a81e:	f380 8809 	msr	PSP, r0
 800a822:	4718      	bx	r3
 800a824:	f3af 8000 	nop.w
 800a828:	f3af 8000 	nop.w
 800a82c:	f3af 8000 	nop.w

0800a830 <pxCurrentTCBConst>:
 800a830:	20026370 	.word	0x20026370
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
	...

0800a840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a840:	f01e 0f04 	tst.w	lr, #4
 800a844:	bf0c      	ite	eq
 800a846:	f3ef 8008 	mrseq	r0, MSP
 800a84a:	f3ef 8009 	mrsne	r0, PSP
 800a84e:	4904      	ldr	r1, [pc, #16]	@ (800a860 <svchandler_address_const>)
 800a850:	4708      	bx	r1
 800a852:	bf00      	nop
 800a854:	f3af 8000 	nop.w
 800a858:	f3af 8000 	nop.w
 800a85c:	f3af 8000 	nop.w

0800a860 <svchandler_address_const>:
 800a860:	0800a5ad 	.word	0x0800a5ad
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop

0800a868 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800a872:	2301      	movs	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d103      	bne.n	800a888 <xQueueGenericReset+0x20>
 800a880:	f7ff ff92 	bl	800a7a8 <ulSetInterruptMask>
 800a884:	bf00      	nop
 800a886:	e7fd      	b.n	800a884 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d057      	beq.n	800a93e <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800a892:	2b00      	cmp	r3, #0
 800a894:	d053      	beq.n	800a93e <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89e:	2100      	movs	r1, #0
 800a8a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d000      	beq.n	800a8aa <xQueueGenericReset+0x42>
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d146      	bne.n	800a93e <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800a8b0:	f7ff fe38 	bl	800a524 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8bc:	68b9      	ldr	r1, [r7, #8]
 800a8be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a8c0:	fb01 f303 	mul.w	r3, r1, r3
 800a8c4:	441a      	add	r2, r3
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	68b9      	ldr	r1, [r7, #8]
 800a8e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a8e6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ea:	441a      	add	r2, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	22ff      	movs	r2, #255	@ 0xff
 800a8f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	22ff      	movs	r2, #255	@ 0xff
 800a8fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10e      	bne.n	800a924 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d014      	beq.n	800a938 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	3310      	adds	r3, #16
 800a912:	4618      	mov	r0, r3
 800a914:	f001 f930 	bl	800bb78 <xTaskRemoveFromEventList>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00c      	beq.n	800a938 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a91e:	f7ff fdef 	bl	800a500 <vPortYield>
 800a922:	e009      	b.n	800a938 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	3310      	adds	r3, #16
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fd19 	bl	800a360 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	3324      	adds	r3, #36	@ 0x24
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff fd14 	bl	800a360 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800a938:	f7ff fe06 	bl	800a548 <vPortExitCritical>
 800a93c:	e001      	b.n	800a942 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800a93e:	2300      	movs	r3, #0
 800a940:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d103      	bne.n	800a950 <xQueueGenericReset+0xe8>
 800a948:	f7ff ff2e 	bl	800a7a8 <ulSetInterruptMask>
 800a94c:	bf00      	nop
 800a94e:	e7fd      	b.n	800a94c <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800a950:	68fb      	ldr	r3, [r7, #12]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b088      	sub	sp, #32
 800a95e:	af02      	add	r7, sp, #8
 800a960:	60f8      	str	r0, [r7, #12]
 800a962:	60b9      	str	r1, [r7, #8]
 800a964:	607a      	str	r2, [r7, #4]
 800a966:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d103      	bne.n	800a97a <xQueueGenericCreateStatic+0x20>
 800a972:	f7ff ff19 	bl	800a7a8 <ulSetInterruptMask>
 800a976:	bf00      	nop
 800a978:	e7fd      	b.n	800a976 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d029      	beq.n	800a9d4 <xQueueGenericCreateStatic+0x7a>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d026      	beq.n	800a9d4 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d020      	beq.n	800a9d4 <xQueueGenericCreateStatic+0x7a>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d102      	bne.n	800a99e <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d11a      	bne.n	800a9d4 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800a99e:	2350      	movs	r3, #80	@ 0x50
 800a9a0:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b50      	cmp	r3, #80	@ 0x50
 800a9a6:	d003      	beq.n	800a9b0 <xQueueGenericCreateStatic+0x56>
 800a9a8:	f7ff fefe 	bl	800a7a8 <ulSetInterruptMask>
 800a9ac:	bf00      	nop
 800a9ae:	e7fd      	b.n	800a9ac <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800a9b0:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9be:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 f858 	bl	800aa82 <prvInitialiseNewQueue>
 800a9d2:	e006      	b.n	800a9e2 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <xQueueGenericCreateStatic+0x88>
 800a9da:	f7ff fee5 	bl	800a7a8 <ulSetInterruptMask>
 800a9de:	bf00      	nop
 800a9e0:	e7fd      	b.n	800a9de <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800a9e2:	697b      	ldr	r3, [r7, #20]
    }
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08a      	sub	sp, #40	@ 0x28
 800a9f0:	af02      	add	r7, sp, #8
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d032      	beq.n	800aa6a <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800aa04:	2100      	movs	r1, #0
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d000      	beq.n	800aa14 <xQueueGenericCreate+0x28>
 800aa12:	2101      	movs	r1, #1
 800aa14:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d127      	bne.n	800aa6a <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800aa22:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800aa26:	d820      	bhi.n	800aa6a <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	fb02 f303 	mul.w	r3, r2, r3
 800aa30:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	3350      	adds	r3, #80	@ 0x50
 800aa36:	4618      	mov	r0, r3
 800aa38:	f001 fefe 	bl	800c838 <pvPortMalloc>
 800aa3c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d019      	beq.n	800aa78 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	3350      	adds	r3, #80	@ 0x50
 800aa4c:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa56:	79fa      	ldrb	r2, [r7, #7]
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	68b9      	ldr	r1, [r7, #8]
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f000 f80d 	bl	800aa82 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800aa68:	e006      	b.n	800aa78 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d103      	bne.n	800aa78 <xQueueGenericCreate+0x8c>
 800aa70:	f7ff fe9a 	bl	800a7a8 <ulSetInterruptMask>
 800aa74:	bf00      	nop
 800aa76:	e7fd      	b.n	800aa74 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800aa78:	69fb      	ldr	r3, [r7, #28]
    }
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3720      	adds	r7, #32
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b084      	sub	sp, #16
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	60f8      	str	r0, [r7, #12]
 800aa8a:	60b9      	str	r1, [r7, #8]
 800aa8c:	607a      	str	r2, [r7, #4]
 800aa8e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d103      	bne.n	800aa9e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	e002      	b.n	800aaa4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aab0:	2101      	movs	r1, #1
 800aab2:	69b8      	ldr	r0, [r7, #24]
 800aab4:	f7ff fed8 	bl	800a868 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800aac0:	bf00      	nop
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00e      	beq.n	800aaf4 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aae8:	2300      	movs	r3, #0
 800aaea:	2200      	movs	r2, #0
 800aaec:	2100      	movs	r1, #0
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f837 	bl	800ab62 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ab06:	2301      	movs	r3, #1
 800ab08:	617b      	str	r3, [r7, #20]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	461a      	mov	r2, r3
 800ab12:	6939      	ldr	r1, [r7, #16]
 800ab14:	6978      	ldr	r0, [r7, #20]
 800ab16:	f7ff ff69 	bl	800a9ec <xQueueGenericCreate>
 800ab1a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f7ff ffd3 	bl	800aac8 <prvInitialiseMutex>

        return xNewQueue;
 800ab22:	68fb      	ldr	r3, [r7, #12]
    }
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b088      	sub	sp, #32
 800ab30:	af02      	add	r7, sp, #8
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2200      	movs	r2, #0
 800ab48:	6939      	ldr	r1, [r7, #16]
 800ab4a:	6978      	ldr	r0, [r7, #20]
 800ab4c:	f7ff ff05 	bl	800a95a <xQueueGenericCreateStatic>
 800ab50:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff ffb8 	bl	800aac8 <prvInitialiseMutex>

        return xNewQueue;
 800ab58:	68fb      	ldr	r3, [r7, #12]
    }
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b08a      	sub	sp, #40	@ 0x28
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab70:	2300      	movs	r3, #0
 800ab72:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d103      	bne.n	800ab86 <xQueueGenericSend+0x24>
 800ab7e:	f7ff fe13 	bl	800a7a8 <ulSetInterruptMask>
 800ab82:	bf00      	nop
 800ab84:	e7fd      	b.n	800ab82 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d103      	bne.n	800ab94 <xQueueGenericSend+0x32>
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <xQueueGenericSend+0x36>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e000      	b.n	800ab9a <xQueueGenericSend+0x38>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d103      	bne.n	800aba6 <xQueueGenericSend+0x44>
 800ab9e:	f7ff fe03 	bl	800a7a8 <ulSetInterruptMask>
 800aba2:	bf00      	nop
 800aba4:	e7fd      	b.n	800aba2 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d103      	bne.n	800abb4 <xQueueGenericSend+0x52>
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d101      	bne.n	800abb8 <xQueueGenericSend+0x56>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e000      	b.n	800abba <xQueueGenericSend+0x58>
 800abb8:	2300      	movs	r3, #0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d103      	bne.n	800abc6 <xQueueGenericSend+0x64>
 800abbe:	f7ff fdf3 	bl	800a7a8 <ulSetInterruptMask>
 800abc2:	bf00      	nop
 800abc4:	e7fd      	b.n	800abc2 <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abc6:	f001 f9e1 	bl	800bf8c <xTaskGetSchedulerState>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d102      	bne.n	800abd6 <xQueueGenericSend+0x74>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <xQueueGenericSend+0x78>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e000      	b.n	800abdc <xQueueGenericSend+0x7a>
 800abda:	2300      	movs	r3, #0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d103      	bne.n	800abe8 <xQueueGenericSend+0x86>
 800abe0:	f7ff fde2 	bl	800a7a8 <ulSetInterruptMask>
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800abe8:	f7ff fc9c 	bl	800a524 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d302      	bcc.n	800abfe <xQueueGenericSend+0x9c>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d11d      	bne.n	800ac3a <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	6a38      	ldr	r0, [r7, #32]
 800ac04:	f000 f936 	bl	800ae74 <prvCopyDataToQueue>
 800ac08:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	3324      	adds	r3, #36	@ 0x24
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 ffae 	bl	800bb78 <xTaskRemoveFromEventList>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d007      	beq.n	800ac32 <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800ac22:	f7ff fc6d 	bl	800a500 <vPortYield>
 800ac26:	e004      	b.n	800ac32 <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800ac2e:	f7ff fc67 	bl	800a500 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800ac32:	f7ff fc89 	bl	800a548 <vPortExitCritical>
                return pdPASS;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e05c      	b.n	800acf4 <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d103      	bne.n	800ac48 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800ac40:	f7ff fc82 	bl	800a548 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800ac44:	2300      	movs	r3, #0
 800ac46:	e055      	b.n	800acf4 <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d106      	bne.n	800ac5c <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ac4e:	f107 0314 	add.w	r3, r7, #20
 800ac52:	4618      	mov	r0, r3
 800ac54:	f001 f85e 	bl	800bd14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ac5c:	f7ff fc74 	bl	800a548 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ac60:	f000 fcbe 	bl	800b5e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ac64:	f7ff fc5e 	bl	800a524 <vPortEnterCritical>
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac6e:	b25b      	sxtb	r3, r3
 800ac70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac74:	d103      	bne.n	800ac7e <xQueueGenericSend+0x11c>
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac84:	b25b      	sxtb	r3, r3
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	d103      	bne.n	800ac94 <xQueueGenericSend+0x132>
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac94:	f7ff fc58 	bl	800a548 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac98:	1d3a      	adds	r2, r7, #4
 800ac9a:	f107 0314 	add.w	r3, r7, #20
 800ac9e:	4611      	mov	r1, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f001 f84d 	bl	800bd40 <xTaskCheckForTimeOut>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d11d      	bne.n	800ace8 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acac:	6a38      	ldr	r0, [r7, #32]
 800acae:	f000 f9d9 	bl	800b064 <prvIsQueueFull>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d011      	beq.n	800acdc <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	3310      	adds	r3, #16
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	4611      	mov	r1, r2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 fefd 	bl	800bac0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800acc6:	6a38      	ldr	r0, [r7, #32]
 800acc8:	f000 f964 	bl	800af94 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800accc:	f000 fc96 	bl	800b5fc <xTaskResumeAll>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d188      	bne.n	800abe8 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800acd6:	f7ff fc13 	bl	800a500 <vPortYield>
 800acda:	e785      	b.n	800abe8 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800acdc:	6a38      	ldr	r0, [r7, #32]
 800acde:	f000 f959 	bl	800af94 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800ace2:	f000 fc8b 	bl	800b5fc <xTaskResumeAll>
 800ace6:	e77f      	b.n	800abe8 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800ace8:	6a38      	ldr	r0, [r7, #32]
 800acea:	f000 f953 	bl	800af94 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800acee:	f000 fc85 	bl	800b5fc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800acf2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3728      	adds	r7, #40	@ 0x28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08a      	sub	sp, #40	@ 0x28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d103      	bne.n	800ad1e <xQueueReceive+0x22>
 800ad16:	f7ff fd47 	bl	800a7a8 <ulSetInterruptMask>
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d103      	bne.n	800ad2c <xQueueReceive+0x30>
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <xQueueReceive+0x34>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e000      	b.n	800ad32 <xQueueReceive+0x36>
 800ad30:	2300      	movs	r3, #0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d103      	bne.n	800ad3e <xQueueReceive+0x42>
 800ad36:	f7ff fd37 	bl	800a7a8 <ulSetInterruptMask>
 800ad3a:	bf00      	nop
 800ad3c:	e7fd      	b.n	800ad3a <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad3e:	f001 f925 	bl	800bf8c <xTaskGetSchedulerState>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d102      	bne.n	800ad4e <xQueueReceive+0x52>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <xQueueReceive+0x56>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e000      	b.n	800ad54 <xQueueReceive+0x58>
 800ad52:	2300      	movs	r3, #0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d103      	bne.n	800ad60 <xQueueReceive+0x64>
 800ad58:	f7ff fd26 	bl	800a7a8 <ulSetInterruptMask>
 800ad5c:	bf00      	nop
 800ad5e:	e7fd      	b.n	800ad5c <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ad60:	f7ff fbe0 	bl	800a524 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad68:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d019      	beq.n	800ada4 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad70:	68b9      	ldr	r1, [r7, #8]
 800ad72:	6a38      	ldr	r0, [r7, #32]
 800ad74:	f000 f8e8 	bl	800af48 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	1e5a      	subs	r2, r3, #1
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d009      	beq.n	800ad9c <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad88:	6a3b      	ldr	r3, [r7, #32]
 800ad8a:	3310      	adds	r3, #16
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fef3 	bl	800bb78 <xTaskRemoveFromEventList>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ad98:	f7ff fbb2 	bl	800a500 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800ad9c:	f7ff fbd4 	bl	800a548 <vPortExitCritical>
                return pdPASS;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e063      	b.n	800ae6c <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800adaa:	f7ff fbcd 	bl	800a548 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800adae:	2300      	movs	r3, #0
 800adb0:	e05c      	b.n	800ae6c <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d106      	bne.n	800adc6 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800adb8:	f107 0314 	add.w	r3, r7, #20
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 ffa9 	bl	800bd14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800adc2:	2301      	movs	r3, #1
 800adc4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800adc6:	f7ff fbbf 	bl	800a548 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800adca:	f000 fc09 	bl	800b5e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800adce:	f7ff fba9 	bl	800a524 <vPortEnterCritical>
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800add8:	b25b      	sxtb	r3, r3
 800adda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adde:	d103      	bne.n	800ade8 <xQueueReceive+0xec>
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adee:	b25b      	sxtb	r3, r3
 800adf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf4:	d103      	bne.n	800adfe <xQueueReceive+0x102>
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adfe:	f7ff fba3 	bl	800a548 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae02:	1d3a      	adds	r2, r7, #4
 800ae04:	f107 0314 	add.w	r3, r7, #20
 800ae08:	4611      	mov	r1, r2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 ff98 	bl	800bd40 <xTaskCheckForTimeOut>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d11d      	bne.n	800ae52 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae16:	6a38      	ldr	r0, [r7, #32]
 800ae18:	f000 f90e 	bl	800b038 <prvIsQueueEmpty>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d011      	beq.n	800ae46 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	3324      	adds	r3, #36	@ 0x24
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	4611      	mov	r1, r2
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 fe48 	bl	800bac0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800ae30:	6a38      	ldr	r0, [r7, #32]
 800ae32:	f000 f8af 	bl	800af94 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800ae36:	f000 fbe1 	bl	800b5fc <xTaskResumeAll>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d18f      	bne.n	800ad60 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800ae40:	f7ff fb5e 	bl	800a500 <vPortYield>
 800ae44:	e78c      	b.n	800ad60 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800ae46:	6a38      	ldr	r0, [r7, #32]
 800ae48:	f000 f8a4 	bl	800af94 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800ae4c:	f000 fbd6 	bl	800b5fc <xTaskResumeAll>
 800ae50:	e786      	b.n	800ad60 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800ae52:	6a38      	ldr	r0, [r7, #32]
 800ae54:	f000 f89e 	bl	800af94 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800ae58:	f000 fbd0 	bl	800b5fc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae5c:	6a38      	ldr	r0, [r7, #32]
 800ae5e:	f000 f8eb 	bl	800b038 <prvIsQueueEmpty>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f43f af7b 	beq.w	800ad60 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800ae6a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3728      	adds	r7, #40	@ 0x28
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae88:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10d      	bne.n	800aeae <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d14d      	bne.n	800af36 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f001 f892 	bl	800bfc8 <xTaskPriorityDisinherit>
 800aea4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	609a      	str	r2, [r3, #8]
 800aeac:	e043      	b.n	800af36 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d119      	bne.n	800aee8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6858      	ldr	r0, [r3, #4]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aebc:	461a      	mov	r2, r3
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	f002 fc77 	bl	800d7b2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aecc:	441a      	add	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d32b      	bcc.n	800af36 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	605a      	str	r2, [r3, #4]
 800aee6:	e026      	b.n	800af36 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68d8      	ldr	r0, [r3, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef0:	461a      	mov	r2, r3
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	f002 fc5d 	bl	800d7b2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af00:	425b      	negs	r3, r3
 800af02:	441a      	add	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d207      	bcs.n	800af24 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1c:	425b      	negs	r3, r3
 800af1e:	441a      	add	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d105      	bne.n	800af36 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	3b01      	subs	r3, #1
 800af34:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800af3e:	697b      	ldr	r3, [r7, #20]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d018      	beq.n	800af8c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af62:	441a      	add	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	429a      	cmp	r2, r3
 800af72:	d303      	bcc.n	800af7c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68d9      	ldr	r1, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af84:	461a      	mov	r2, r3
 800af86:	6838      	ldr	r0, [r7, #0]
 800af88:	f002 fc13 	bl	800d7b2 <memcpy>
    }
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800af9c:	f7ff fac2 	bl	800a524 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afa6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800afa8:	e011      	b.n	800afce <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d012      	beq.n	800afd8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3324      	adds	r3, #36	@ 0x24
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fdde 	bl	800bb78 <xTaskRemoveFromEventList>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800afc2:	f000 ff15 	bl	800bdf0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	3b01      	subs	r3, #1
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800afce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dce9      	bgt.n	800afaa <prvUnlockQueue+0x16>
 800afd6:	e000      	b.n	800afda <prvUnlockQueue+0x46>
                    break;
 800afd8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	22ff      	movs	r2, #255	@ 0xff
 800afde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800afe2:	f7ff fab1 	bl	800a548 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800afe6:	f7ff fa9d 	bl	800a524 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aff0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800aff2:	e011      	b.n	800b018 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d012      	beq.n	800b022 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3310      	adds	r3, #16
 800b000:	4618      	mov	r0, r3
 800b002:	f000 fdb9 	bl	800bb78 <xTaskRemoveFromEventList>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800b00c:	f000 fef0 	bl	800bdf0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	3b01      	subs	r3, #1
 800b014:	b2db      	uxtb	r3, r3
 800b016:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dce9      	bgt.n	800aff4 <prvUnlockQueue+0x60>
 800b020:	e000      	b.n	800b024 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800b022:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	22ff      	movs	r2, #255	@ 0xff
 800b028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800b02c:	f7ff fa8c 	bl	800a548 <vPortExitCritical>
}
 800b030:	bf00      	nop
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b040:	f7ff fa70 	bl	800a524 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	e001      	b.n	800b056 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b056:	f7ff fa77 	bl	800a548 <vPortExitCritical>

    return xReturn;
 800b05a:	68fb      	ldr	r3, [r7, #12]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b06c:	f7ff fa5a 	bl	800a524 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b078:	429a      	cmp	r2, r3
 800b07a:	d102      	bne.n	800b082 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800b07c:	2301      	movs	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e001      	b.n	800b086 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b086:	f7ff fa5f 	bl	800a548 <vPortExitCritical>

    return xReturn;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d103      	bne.n	800b0b0 <vQueueAddToRegistry+0x1c>
 800b0a8:	f7ff fb7e 	bl	800a7a8 <ulSetInterruptMask>
 800b0ac:	bf00      	nop
 800b0ae:	e7fd      	b.n	800b0ac <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d024      	beq.n	800b100 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	e01e      	b.n	800b0fa <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800b0bc:	4a17      	ldr	r2, [pc, #92]	@ (800b11c <vQueueAddToRegistry+0x88>)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	4413      	add	r3, r2
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d105      	bne.n	800b0d8 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	4a12      	ldr	r2, [pc, #72]	@ (800b11c <vQueueAddToRegistry+0x88>)
 800b0d2:	4413      	add	r3, r2
 800b0d4:	60bb      	str	r3, [r7, #8]
                    break;
 800b0d6:	e013      	b.n	800b100 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10a      	bne.n	800b0f4 <vQueueAddToRegistry+0x60>
 800b0de:	4a0f      	ldr	r2, [pc, #60]	@ (800b11c <vQueueAddToRegistry+0x88>)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d104      	bne.n	800b0f4 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	4a0b      	ldr	r2, [pc, #44]	@ (800b11c <vQueueAddToRegistry+0x88>)
 800b0f0:	4413      	add	r3, r2
 800b0f2:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b07      	cmp	r3, #7
 800b0fe:	d9dd      	bls.n	800b0bc <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d005      	beq.n	800b112 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800b112:	bf00      	nop
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20026330 	.word	0x20026330

0800b120 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800b130:	f7ff f9f8 	bl	800a524 <vPortEnterCritical>
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b13a:	b25b      	sxtb	r3, r3
 800b13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b140:	d103      	bne.n	800b14a <vQueueWaitForMessageRestricted+0x2a>
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b150:	b25b      	sxtb	r3, r3
 800b152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b156:	d103      	bne.n	800b160 <vQueueWaitForMessageRestricted+0x40>
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b160:	f7ff f9f2 	bl	800a548 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d106      	bne.n	800b17a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	3324      	adds	r3, #36	@ 0x24
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	68b9      	ldr	r1, [r7, #8]
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fcc1 	bl	800bafc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800b17a:	6978      	ldr	r0, [r7, #20]
 800b17c:	f7ff ff0a 	bl	800af94 <prvUnlockQueue>
    }
 800b180:	bf00      	nop
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08c      	sub	sp, #48	@ 0x30
 800b18c:	af04      	add	r7, sp, #16
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800b196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d103      	bne.n	800b1a4 <xTaskCreateStatic+0x1c>
 800b19c:	f7ff fb04 	bl	800a7a8 <ulSetInterruptMask>
 800b1a0:	bf00      	nop
 800b1a2:	e7fd      	b.n	800b1a0 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d103      	bne.n	800b1b2 <xTaskCreateStatic+0x2a>
 800b1aa:	f7ff fafd 	bl	800a7a8 <ulSetInterruptMask>
 800b1ae:	bf00      	nop
 800b1b0:	e7fd      	b.n	800b1ae <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800b1b2:	235c      	movs	r3, #92	@ 0x5c
 800b1b4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b1ba:	d003      	beq.n	800b1c4 <xTaskCreateStatic+0x3c>
 800b1bc:	f7ff faf4 	bl	800a7a8 <ulSetInterruptMask>
 800b1c0:	bf00      	nop
 800b1c2:	e7fd      	b.n	800b1c0 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1c4:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d023      	beq.n	800b214 <xTaskCreateStatic+0x8c>
 800b1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d020      	beq.n	800b214 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b1d6:	225c      	movs	r2, #92	@ 0x5c
 800b1d8:	2100      	movs	r1, #0
 800b1da:	69f8      	ldr	r0, [r7, #28]
 800b1dc:	f002 fa5b 	bl	800d696 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1e4:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9303      	str	r3, [sp, #12]
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	9302      	str	r3, [sp, #8]
 800b1f6:	f107 0318 	add.w	r3, r7, #24
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	68b9      	ldr	r1, [r7, #8]
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f000 f855 	bl	800b2b6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b20c:	69f8      	ldr	r0, [r7, #28]
 800b20e:	f000 f8d5 	bl	800b3bc <prvAddNewTaskToReadyList>
 800b212:	e001      	b.n	800b218 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800b214:	2300      	movs	r3, #0
 800b216:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b218:	69bb      	ldr	r3, [r7, #24]
    }
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800b222:	b580      	push	{r7, lr}
 800b224:	b08c      	sub	sp, #48	@ 0x30
 800b226:	af04      	add	r7, sp, #16
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	603b      	str	r3, [r7, #0]
 800b22e:	4613      	mov	r3, r2
 800b230:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b232:	88fb      	ldrh	r3, [r7, #6]
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4618      	mov	r0, r3
 800b238:	f001 fafe 	bl	800c838 <pvPortMalloc>
 800b23c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d013      	beq.n	800b26c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b244:	205c      	movs	r0, #92	@ 0x5c
 800b246:	f001 faf7 	bl	800c838 <pvPortMalloc>
 800b24a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d008      	beq.n	800b264 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b252:	225c      	movs	r2, #92	@ 0x5c
 800b254:	2100      	movs	r1, #0
 800b256:	69f8      	ldr	r0, [r7, #28]
 800b258:	f002 fa1d 	bl	800d696 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	631a      	str	r2, [r3, #48]	@ 0x30
 800b262:	e005      	b.n	800b270 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800b264:	6978      	ldr	r0, [r7, #20]
 800b266:	f001 fb93 	bl	800c990 <vPortFree>
 800b26a:	e001      	b.n	800b270 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d017      	beq.n	800b2a6 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b27e:	88fa      	ldrh	r2, [r7, #6]
 800b280:	2300      	movs	r3, #0
 800b282:	9303      	str	r3, [sp, #12]
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	9302      	str	r3, [sp, #8]
 800b288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	68b9      	ldr	r1, [r7, #8]
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 f80e 	bl	800b2b6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b29a:	69f8      	ldr	r0, [r7, #28]
 800b29c:	f000 f88e 	bl	800b3bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	61bb      	str	r3, [r7, #24]
 800b2a4:	e002      	b.n	800b2ac <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2aa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b2ac:	69bb      	ldr	r3, [r7, #24]
    }
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b086      	sub	sp, #24
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	60b9      	str	r1, [r7, #8]
 800b2c0:	607a      	str	r2, [r7, #4]
 800b2c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	21a5      	movs	r1, #165	@ 0xa5
 800b2d0:	f002 f9e1 	bl	800d696 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f023 0307 	bic.w	r3, r3, #7
 800b2ec:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f003 0307 	and.w	r3, r3, #7
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d003      	beq.n	800b300 <prvInitialiseNewTask+0x4a>
 800b2f8:	f7ff fa56 	bl	800a7a8 <ulSetInterruptMask>
 800b2fc:	bf00      	nop
 800b2fe:	e7fd      	b.n	800b2fc <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01e      	beq.n	800b344 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	e012      	b.n	800b332 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	4413      	add	r3, r2
 800b312:	7819      	ldrb	r1, [r3, #0]
 800b314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	4413      	add	r3, r2
 800b31a:	3334      	adds	r3, #52	@ 0x34
 800b31c:	460a      	mov	r2, r1
 800b31e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	4413      	add	r3, r2
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d006      	beq.n	800b33a <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	3301      	adds	r3, #1
 800b330:	617b      	str	r3, [r7, #20]
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b0f      	cmp	r3, #15
 800b336:	d9e9      	bls.n	800b30c <prvInitialiseNewTask+0x56>
 800b338:	e000      	b.n	800b33c <prvInitialiseNewTask+0x86>
            {
                break;
 800b33a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	2b37      	cmp	r3, #55	@ 0x37
 800b348:	d903      	bls.n	800b352 <prvInitialiseNewTask+0x9c>
 800b34a:	f7ff fa2d 	bl	800a7a8 <ulSetInterruptMask>
 800b34e:	bf00      	nop
 800b350:	e7fd      	b.n	800b34e <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	2b37      	cmp	r3, #55	@ 0x37
 800b356:	d901      	bls.n	800b35c <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b358:	2337      	movs	r3, #55	@ 0x37
 800b35a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800b35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35e:	6a3a      	ldr	r2, [r7, #32]
 800b360:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800b362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b364:	6a3a      	ldr	r2, [r7, #32]
 800b366:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36a:	3304      	adds	r3, #4
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff f817 	bl	800a3a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b374:	3318      	adds	r3, #24
 800b376:	4618      	mov	r0, r3
 800b378:	f7ff f812 	bl	800a3a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b380:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b382:	6a3b      	ldr	r3, [r7, #32]
 800b384:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b390:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800b392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b394:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	6938      	ldr	r0, [r7, #16]
 800b39c:	f7ff f920 	bl	800a5e0 <pxPortInitialiseStack>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b3b2:	bf00      	nop
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800b3c4:	f7ff f8ae 	bl	800a524 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800b3c8:	4b3e      	ldr	r3, [pc, #248]	@ (800b4c4 <prvAddNewTaskToReadyList+0x108>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	4a3d      	ldr	r2, [pc, #244]	@ (800b4c4 <prvAddNewTaskToReadyList+0x108>)
 800b3d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800b3d2:	4b3d      	ldr	r3, [pc, #244]	@ (800b4c8 <prvAddNewTaskToReadyList+0x10c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d109      	bne.n	800b3ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800b3da:	4a3b      	ldr	r2, [pc, #236]	@ (800b4c8 <prvAddNewTaskToReadyList+0x10c>)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3e0:	4b38      	ldr	r3, [pc, #224]	@ (800b4c4 <prvAddNewTaskToReadyList+0x108>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d110      	bne.n	800b40a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800b3e8:	f000 fd1e 	bl	800be28 <prvInitialiseTaskLists>
 800b3ec:	e00d      	b.n	800b40a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800b3ee:	4b37      	ldr	r3, [pc, #220]	@ (800b4cc <prvAddNewTaskToReadyList+0x110>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d109      	bne.n	800b40a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3f6:	4b34      	ldr	r3, [pc, #208]	@ (800b4c8 <prvAddNewTaskToReadyList+0x10c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b400:	429a      	cmp	r2, r3
 800b402:	d802      	bhi.n	800b40a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800b404:	4a30      	ldr	r2, [pc, #192]	@ (800b4c8 <prvAddNewTaskToReadyList+0x10c>)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800b40a:	4b31      	ldr	r3, [pc, #196]	@ (800b4d0 <prvAddNewTaskToReadyList+0x114>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3301      	adds	r3, #1
 800b410:	4a2f      	ldr	r2, [pc, #188]	@ (800b4d0 <prvAddNewTaskToReadyList+0x114>)
 800b412:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b414:	4b2e      	ldr	r3, [pc, #184]	@ (800b4d0 <prvAddNewTaskToReadyList+0x114>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b420:	4b2c      	ldr	r3, [pc, #176]	@ (800b4d4 <prvAddNewTaskToReadyList+0x118>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d903      	bls.n	800b430 <prvAddNewTaskToReadyList+0x74>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42c:	4a29      	ldr	r2, [pc, #164]	@ (800b4d4 <prvAddNewTaskToReadyList+0x118>)
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b434:	4928      	ldr	r1, [pc, #160]	@ (800b4d8 <prvAddNewTaskToReadyList+0x11c>)
 800b436:	4613      	mov	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4413      	add	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	440b      	add	r3, r1
 800b440:	3304      	adds	r3, #4
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60fb      	str	r3, [r7, #12]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	609a      	str	r2, [r3, #8]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	689a      	ldr	r2, [r3, #8]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	60da      	str	r2, [r3, #12]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	3204      	adds	r2, #4
 800b45c:	605a      	str	r2, [r3, #4]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	1d1a      	adds	r2, r3, #4
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	609a      	str	r2, [r3, #8]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46a:	4613      	mov	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4a19      	ldr	r2, [pc, #100]	@ (800b4d8 <prvAddNewTaskToReadyList+0x11c>)
 800b474:	441a      	add	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	615a      	str	r2, [r3, #20]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b47e:	4916      	ldr	r1, [pc, #88]	@ (800b4d8 <prvAddNewTaskToReadyList+0x11c>)
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	440b      	add	r3, r1
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	1c59      	adds	r1, r3, #1
 800b48e:	4812      	ldr	r0, [pc, #72]	@ (800b4d8 <prvAddNewTaskToReadyList+0x11c>)
 800b490:	4613      	mov	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	4403      	add	r3, r0
 800b49a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800b49c:	f7ff f854 	bl	800a548 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b4cc <prvAddNewTaskToReadyList+0x110>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d008      	beq.n	800b4ba <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4a8:	4b07      	ldr	r3, [pc, #28]	@ (800b4c8 <prvAddNewTaskToReadyList+0x10c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d201      	bcs.n	800b4ba <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800b4b6:	f7ff f823 	bl	800a500 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20026844 	.word	0x20026844
 800b4c8:	20026370 	.word	0x20026370
 800b4cc:	20026850 	.word	0x20026850
 800b4d0:	20026860 	.word	0x20026860
 800b4d4:	2002684c 	.word	0x2002684c
 800b4d8:	20026374 	.word	0x20026374

0800b4dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d010      	beq.n	800b510 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800b4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b524 <vTaskDelay+0x48>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <vTaskDelay+0x22>
 800b4f6:	f7ff f957 	bl	800a7a8 <ulSetInterruptMask>
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800b4fe:	f000 f86f 	bl	800b5e0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b502:	2100      	movs	r1, #0
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fde7 	bl	800c0d8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800b50a:	f000 f877 	bl	800b5fc <xTaskResumeAll>
 800b50e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800b516:	f7fe fff3 	bl	800a500 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	2002686c 	.word	0x2002686c

0800b528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b536:	463a      	mov	r2, r7
 800b538:	1d39      	adds	r1, r7, #4
 800b53a:	f107 0308 	add.w	r3, r7, #8
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe feda 	bl	800a2f8 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	9202      	str	r2, [sp, #8]
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	2300      	movs	r3, #0
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	2300      	movs	r3, #0
 800b554:	460a      	mov	r2, r1
 800b556:	491b      	ldr	r1, [pc, #108]	@ (800b5c4 <vTaskStartScheduler+0x9c>)
 800b558:	481b      	ldr	r0, [pc, #108]	@ (800b5c8 <vTaskStartScheduler+0xa0>)
 800b55a:	f7ff fe15 	bl	800b188 <xTaskCreateStatic>
 800b55e:	4603      	mov	r3, r0
 800b560:	4a1a      	ldr	r2, [pc, #104]	@ (800b5cc <vTaskStartScheduler+0xa4>)
 800b562:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800b564:	4b19      	ldr	r3, [pc, #100]	@ (800b5cc <vTaskStartScheduler+0xa4>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800b56c:	2301      	movs	r3, #1
 800b56e:	60fb      	str	r3, [r7, #12]
 800b570:	e001      	b.n	800b576 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800b572:	2300      	movs	r3, #0
 800b574:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d102      	bne.n	800b582 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800b57c:	f000 fe1a 	bl	800c1b4 <xTimerCreateTimerTask>
 800b580:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d10e      	bne.n	800b5a6 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800b588:	f7ff f90e 	bl	800a7a8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800b58c:	4b10      	ldr	r3, [pc, #64]	@ (800b5d0 <vTaskStartScheduler+0xa8>)
 800b58e:	f04f 32ff 	mov.w	r2, #4294967295
 800b592:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800b594:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d4 <vTaskStartScheduler+0xac>)
 800b596:	2201      	movs	r2, #1
 800b598:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b59a:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d8 <vTaskStartScheduler+0xb0>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800b5a0:	f7ff f8a8 	bl	800a6f4 <xPortStartScheduler>
 800b5a4:	e007      	b.n	800b5b6 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ac:	d103      	bne.n	800b5b6 <vTaskStartScheduler+0x8e>
 800b5ae:	f7ff f8fb 	bl	800a7a8 <ulSetInterruptMask>
 800b5b2:	bf00      	nop
 800b5b4:	e7fd      	b.n	800b5b2 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800b5b6:	4b09      	ldr	r3, [pc, #36]	@ (800b5dc <vTaskStartScheduler+0xb4>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
}
 800b5ba:	bf00      	nop
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	0800fa7c 	.word	0x0800fa7c
 800b5c8:	0800be09 	.word	0x0800be09
 800b5cc:	20026868 	.word	0x20026868
 800b5d0:	20026864 	.word	0x20026864
 800b5d4:	20026850 	.word	0x20026850
 800b5d8:	20026848 	.word	0x20026848
 800b5dc:	20000028 	.word	0x20000028

0800b5e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800b5e4:	4b04      	ldr	r3, [pc, #16]	@ (800b5f8 <vTaskSuspendAll+0x18>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	4a03      	ldr	r2, [pc, #12]	@ (800b5f8 <vTaskSuspendAll+0x18>)
 800b5ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800b5ee:	bf00      	nop
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	2002686c 	.word	0x2002686c

0800b5fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800b606:	2300      	movs	r3, #0
 800b608:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800b60a:	4b6b      	ldr	r3, [pc, #428]	@ (800b7b8 <xTaskResumeAll+0x1bc>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d103      	bne.n	800b61a <xTaskResumeAll+0x1e>
 800b612:	f7ff f8c9 	bl	800a7a8 <ulSetInterruptMask>
 800b616:	bf00      	nop
 800b618:	e7fd      	b.n	800b616 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800b61a:	f7fe ff83 	bl	800a524 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800b61e:	4b66      	ldr	r3, [pc, #408]	@ (800b7b8 <xTaskResumeAll+0x1bc>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3b01      	subs	r3, #1
 800b624:	4a64      	ldr	r2, [pc, #400]	@ (800b7b8 <xTaskResumeAll+0x1bc>)
 800b626:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b628:	4b63      	ldr	r3, [pc, #396]	@ (800b7b8 <xTaskResumeAll+0x1bc>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f040 80bb 	bne.w	800b7a8 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b632:	4b62      	ldr	r3, [pc, #392]	@ (800b7bc <xTaskResumeAll+0x1c0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 80b6 	beq.w	800b7a8 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b63c:	e08b      	b.n	800b756 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63e:	4b60      	ldr	r3, [pc, #384]	@ (800b7c0 <xTaskResumeAll+0x1c4>)
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64a:	60bb      	str	r3, [r7, #8]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	69db      	ldr	r3, [r3, #28]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	6a12      	ldr	r2, [r2, #32]
 800b654:	609a      	str	r2, [r3, #8]
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	69d2      	ldr	r2, [r2, #28]
 800b65e:	605a      	str	r2, [r3, #4]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	3318      	adds	r3, #24
 800b668:	429a      	cmp	r2, r3
 800b66a:	d103      	bne.n	800b674 <xTaskResumeAll+0x78>
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	6a1a      	ldr	r2, [r3, #32]
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	605a      	str	r2, [r3, #4]
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2200      	movs	r2, #0
 800b678:	629a      	str	r2, [r3, #40]	@ 0x28
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	1e5a      	subs	r2, r3, #1
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	695b      	ldr	r3, [r3, #20]
 800b688:	607b      	str	r3, [r7, #4]
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	68d2      	ldr	r2, [r2, #12]
 800b692:	609a      	str	r2, [r3, #8]
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	6892      	ldr	r2, [r2, #8]
 800b69c:	605a      	str	r2, [r3, #4]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d103      	bne.n	800b6b2 <xTaskResumeAll+0xb6>
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	68da      	ldr	r2, [r3, #12]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	605a      	str	r2, [r3, #4]
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	615a      	str	r2, [r3, #20]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	1e5a      	subs	r2, r3, #1
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6c6:	4b3f      	ldr	r3, [pc, #252]	@ (800b7c4 <xTaskResumeAll+0x1c8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d903      	bls.n	800b6d6 <xTaskResumeAll+0xda>
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d2:	4a3c      	ldr	r2, [pc, #240]	@ (800b7c4 <xTaskResumeAll+0x1c8>)
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6da:	493b      	ldr	r1, [pc, #236]	@ (800b7c8 <xTaskResumeAll+0x1cc>)
 800b6dc:	4613      	mov	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	440b      	add	r3, r1
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	603b      	str	r3, [r7, #0]
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	609a      	str	r2, [r3, #8]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	689a      	ldr	r2, [r3, #8]
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	60da      	str	r2, [r3, #12]
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	3204      	adds	r2, #4
 800b702:	605a      	str	r2, [r3, #4]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	1d1a      	adds	r2, r3, #4
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	609a      	str	r2, [r3, #8]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b710:	4613      	mov	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4413      	add	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4a2b      	ldr	r2, [pc, #172]	@ (800b7c8 <xTaskResumeAll+0x1cc>)
 800b71a:	441a      	add	r2, r3
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	615a      	str	r2, [r3, #20]
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b724:	4928      	ldr	r1, [pc, #160]	@ (800b7c8 <xTaskResumeAll+0x1cc>)
 800b726:	4613      	mov	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4413      	add	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	440b      	add	r3, r1
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	1c59      	adds	r1, r3, #1
 800b734:	4824      	ldr	r0, [pc, #144]	@ (800b7c8 <xTaskResumeAll+0x1cc>)
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4403      	add	r3, r0
 800b740:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b746:	4b21      	ldr	r3, [pc, #132]	@ (800b7cc <xTaskResumeAll+0x1d0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d302      	bcc.n	800b756 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800b750:	4b1f      	ldr	r3, [pc, #124]	@ (800b7d0 <xTaskResumeAll+0x1d4>)
 800b752:	2201      	movs	r2, #1
 800b754:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b756:	4b1a      	ldr	r3, [pc, #104]	@ (800b7c0 <xTaskResumeAll+0x1c4>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f47f af6f 	bne.w	800b63e <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800b766:	f000 fbf5 	bl	800bf54 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b76a:	4b1a      	ldr	r3, [pc, #104]	@ (800b7d4 <xTaskResumeAll+0x1d8>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d010      	beq.n	800b798 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800b776:	f000 f83f 	bl	800b7f8 <xTaskIncrementTick>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800b780:	4b13      	ldr	r3, [pc, #76]	@ (800b7d0 <xTaskResumeAll+0x1d4>)
 800b782:	2201      	movs	r2, #1
 800b784:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3b01      	subs	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1f1      	bne.n	800b776 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800b792:	4b10      	ldr	r3, [pc, #64]	@ (800b7d4 <xTaskResumeAll+0x1d8>)
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800b798:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d0 <xTaskResumeAll+0x1d4>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800b7a4:	f7fe feac 	bl	800a500 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800b7a8:	f7fe fece 	bl	800a548 <vPortExitCritical>

    return xAlreadyYielded;
 800b7ac:	693b      	ldr	r3, [r7, #16]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	2002686c 	.word	0x2002686c
 800b7bc:	20026844 	.word	0x20026844
 800b7c0:	20026804 	.word	0x20026804
 800b7c4:	2002684c 	.word	0x2002684c
 800b7c8:	20026374 	.word	0x20026374
 800b7cc:	20026370 	.word	0x20026370
 800b7d0:	20026858 	.word	0x20026858
 800b7d4:	20026854 	.word	0x20026854

0800b7d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800b7de:	4b05      	ldr	r3, [pc, #20]	@ (800b7f4 <xTaskGetTickCount+0x1c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800b7e4:	687b      	ldr	r3, [r7, #4]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20026848 	.word	0x20026848

0800b7f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800b7fe:	2300      	movs	r3, #0
 800b800:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b802:	4b7a      	ldr	r3, [pc, #488]	@ (800b9ec <xTaskIncrementTick+0x1f4>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	f040 80e6 	bne.w	800b9d8 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b80c:	4b78      	ldr	r3, [pc, #480]	@ (800b9f0 <xTaskIncrementTick+0x1f8>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3301      	adds	r3, #1
 800b812:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800b814:	4a76      	ldr	r2, [pc, #472]	@ (800b9f0 <xTaskIncrementTick+0x1f8>)
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d119      	bne.n	800b854 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800b820:	4b74      	ldr	r3, [pc, #464]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <xTaskIncrementTick+0x3a>
 800b82a:	f7fe ffbd 	bl	800a7a8 <ulSetInterruptMask>
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <xTaskIncrementTick+0x36>
 800b832:	4b70      	ldr	r3, [pc, #448]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	4b6f      	ldr	r3, [pc, #444]	@ (800b9f8 <xTaskIncrementTick+0x200>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a6d      	ldr	r2, [pc, #436]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	4a6d      	ldr	r2, [pc, #436]	@ (800b9f8 <xTaskIncrementTick+0x200>)
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	6013      	str	r3, [r2, #0]
 800b846:	4b6d      	ldr	r3, [pc, #436]	@ (800b9fc <xTaskIncrementTick+0x204>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3301      	adds	r3, #1
 800b84c:	4a6b      	ldr	r2, [pc, #428]	@ (800b9fc <xTaskIncrementTick+0x204>)
 800b84e:	6013      	str	r3, [r2, #0]
 800b850:	f000 fb80 	bl	800bf54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800b854:	4b6a      	ldr	r3, [pc, #424]	@ (800ba00 <xTaskIncrementTick+0x208>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	f0c0 80a7 	bcc.w	800b9ae <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b860:	4b64      	ldr	r3, [pc, #400]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d104      	bne.n	800b874 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b86a:	4b65      	ldr	r3, [pc, #404]	@ (800ba00 <xTaskIncrementTick+0x208>)
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	601a      	str	r2, [r3, #0]
                    break;
 800b872:	e09c      	b.n	800b9ae <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b874:	4b5f      	ldr	r3, [pc, #380]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800b884:	69ba      	ldr	r2, [r7, #24]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d203      	bcs.n	800b894 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800b88c:	4a5c      	ldr	r2, [pc, #368]	@ (800ba00 <xTaskIncrementTick+0x208>)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800b892:	e08c      	b.n	800b9ae <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	695b      	ldr	r3, [r3, #20]
 800b898:	60bb      	str	r3, [r7, #8]
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	68d2      	ldr	r2, [r2, #12]
 800b8a2:	609a      	str	r2, [r3, #8]
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	6892      	ldr	r2, [r2, #8]
 800b8ac:	605a      	str	r2, [r3, #4]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d103      	bne.n	800b8c2 <xTaskIncrementTick+0xca>
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	605a      	str	r2, [r3, #4]
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	615a      	str	r2, [r3, #20]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	1e5a      	subs	r2, r3, #1
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d01e      	beq.n	800b918 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8de:	607b      	str	r3, [r7, #4]
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	69db      	ldr	r3, [r3, #28]
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	6a12      	ldr	r2, [r2, #32]
 800b8e8:	609a      	str	r2, [r3, #8]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6a1b      	ldr	r3, [r3, #32]
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	69d2      	ldr	r2, [r2, #28]
 800b8f2:	605a      	str	r2, [r3, #4]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	3318      	adds	r3, #24
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d103      	bne.n	800b908 <xTaskIncrementTick+0x110>
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	6a1a      	ldr	r2, [r3, #32]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	605a      	str	r2, [r3, #4]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2200      	movs	r2, #0
 800b90c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	1e5a      	subs	r2, r3, #1
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b91c:	4b39      	ldr	r3, [pc, #228]	@ (800ba04 <xTaskIncrementTick+0x20c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	429a      	cmp	r2, r3
 800b922:	d903      	bls.n	800b92c <xTaskIncrementTick+0x134>
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b928:	4a36      	ldr	r2, [pc, #216]	@ (800ba04 <xTaskIncrementTick+0x20c>)
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b930:	4935      	ldr	r1, [pc, #212]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	3304      	adds	r3, #4
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	603b      	str	r3, [r7, #0]
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	609a      	str	r2, [r3, #8]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	689a      	ldr	r2, [r3, #8]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	60da      	str	r2, [r3, #12]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	693a      	ldr	r2, [r7, #16]
 800b956:	3204      	adds	r2, #4
 800b958:	605a      	str	r2, [r3, #4]
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	1d1a      	adds	r2, r3, #4
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	609a      	str	r2, [r3, #8]
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b966:	4613      	mov	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4a26      	ldr	r2, [pc, #152]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b970:	441a      	add	r2, r3
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	615a      	str	r2, [r3, #20]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97a:	4923      	ldr	r1, [pc, #140]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b97c:	4613      	mov	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	440b      	add	r3, r1
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	1c59      	adds	r1, r3, #1
 800b98a:	481f      	ldr	r0, [pc, #124]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b98c:	4613      	mov	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4403      	add	r3, r0
 800b996:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b99c:	4b1b      	ldr	r3, [pc, #108]	@ (800ba0c <xTaskIncrementTick+0x214>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	f67f af5c 	bls.w	800b860 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ac:	e758      	b.n	800b860 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9ae:	4b17      	ldr	r3, [pc, #92]	@ (800ba0c <xTaskIncrementTick+0x214>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b4:	4914      	ldr	r1, [pc, #80]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4413      	add	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	440b      	add	r3, r1
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d901      	bls.n	800b9ca <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800b9ca:	4b11      	ldr	r3, [pc, #68]	@ (800ba10 <xTaskIncrementTick+0x218>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d007      	beq.n	800b9e2 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	61fb      	str	r3, [r7, #28]
 800b9d6:	e004      	b.n	800b9e2 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800b9d8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba14 <xTaskIncrementTick+0x21c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	4a0d      	ldr	r2, [pc, #52]	@ (800ba14 <xTaskIncrementTick+0x21c>)
 800b9e0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3720      	adds	r7, #32
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2002686c 	.word	0x2002686c
 800b9f0:	20026848 	.word	0x20026848
 800b9f4:	200267fc 	.word	0x200267fc
 800b9f8:	20026800 	.word	0x20026800
 800b9fc:	2002685c 	.word	0x2002685c
 800ba00:	20026864 	.word	0x20026864
 800ba04:	2002684c 	.word	0x2002684c
 800ba08:	20026374 	.word	0x20026374
 800ba0c:	20026370 	.word	0x20026370
 800ba10:	20026858 	.word	0x20026858
 800ba14:	20026854 	.word	0x20026854

0800ba18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba1e:	4b23      	ldr	r3, [pc, #140]	@ (800baac <vTaskSwitchContext+0x94>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d003      	beq.n	800ba2e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800ba26:	4b22      	ldr	r3, [pc, #136]	@ (800bab0 <vTaskSwitchContext+0x98>)
 800ba28:	2201      	movs	r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800ba2c:	e03a      	b.n	800baa4 <vTaskSwitchContext+0x8c>
        xYieldPending = pdFALSE;
 800ba2e:	4b20      	ldr	r3, [pc, #128]	@ (800bab0 <vTaskSwitchContext+0x98>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba34:	4b1f      	ldr	r3, [pc, #124]	@ (800bab4 <vTaskSwitchContext+0x9c>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	607b      	str	r3, [r7, #4]
 800ba3a:	e009      	b.n	800ba50 <vTaskSwitchContext+0x38>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d103      	bne.n	800ba4a <vTaskSwitchContext+0x32>
 800ba42:	f7fe feb1 	bl	800a7a8 <ulSetInterruptMask>
 800ba46:	bf00      	nop
 800ba48:	e7fd      	b.n	800ba46 <vTaskSwitchContext+0x2e>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	607b      	str	r3, [r7, #4]
 800ba50:	4919      	ldr	r1, [pc, #100]	@ (800bab8 <vTaskSwitchContext+0xa0>)
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	4613      	mov	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	440b      	add	r3, r1
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d0eb      	beq.n	800ba3c <vTaskSwitchContext+0x24>
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	4613      	mov	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4a12      	ldr	r2, [pc, #72]	@ (800bab8 <vTaskSwitchContext+0xa0>)
 800ba70:	4413      	add	r3, r2
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	605a      	str	r2, [r3, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	3308      	adds	r3, #8
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d104      	bne.n	800ba94 <vTaskSwitchContext+0x7c>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	605a      	str	r2, [r3, #4]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	4a08      	ldr	r2, [pc, #32]	@ (800babc <vTaskSwitchContext+0xa4>)
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	4a05      	ldr	r2, [pc, #20]	@ (800bab4 <vTaskSwitchContext+0x9c>)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6013      	str	r3, [r2, #0]
}
 800baa4:	bf00      	nop
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	2002686c 	.word	0x2002686c
 800bab0:	20026858 	.word	0x20026858
 800bab4:	2002684c 	.word	0x2002684c
 800bab8:	20026374 	.word	0x20026374
 800babc:	20026370 	.word	0x20026370

0800bac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d103      	bne.n	800bad8 <vTaskPlaceOnEventList+0x18>
 800bad0:	f7fe fe6a 	bl	800a7a8 <ulSetInterruptMask>
 800bad4:	bf00      	nop
 800bad6:	e7fd      	b.n	800bad4 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bad8:	4b07      	ldr	r3, [pc, #28]	@ (800baf8 <vTaskPlaceOnEventList+0x38>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3318      	adds	r3, #24
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7fe fc6a 	bl	800a3ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bae6:	2101      	movs	r1, #1
 800bae8:	6838      	ldr	r0, [r7, #0]
 800baea:	f000 faf5 	bl	800c0d8 <prvAddCurrentTaskToDelayedList>
}
 800baee:	bf00      	nop
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20026370 	.word	0x20026370

0800bafc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d103      	bne.n	800bb16 <vTaskPlaceOnEventListRestricted+0x1a>
 800bb0e:	f7fe fe4b 	bl	800a7a8 <ulSetInterruptMask>
 800bb12:	bf00      	nop
 800bb14:	e7fd      	b.n	800bb12 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	617b      	str	r3, [r7, #20]
 800bb1c:	4b15      	ldr	r3, [pc, #84]	@ (800bb74 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	61da      	str	r2, [r3, #28]
 800bb24:	4b13      	ldr	r3, [pc, #76]	@ (800bb74 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	697a      	ldr	r2, [r7, #20]
 800bb2a:	6892      	ldr	r2, [r2, #8]
 800bb2c:	621a      	str	r2, [r3, #32]
 800bb2e:	4b11      	ldr	r3, [pc, #68]	@ (800bb74 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	3218      	adds	r2, #24
 800bb38:	605a      	str	r2, [r3, #4]
 800bb3a:	4b0e      	ldr	r3, [pc, #56]	@ (800bb74 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f103 0218 	add.w	r2, r3, #24
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	609a      	str	r2, [r3, #8]
 800bb46:	4b0b      	ldr	r3, [pc, #44]	@ (800bb74 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	1c5a      	adds	r2, r3, #1
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800bb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb62:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb64:	6879      	ldr	r1, [r7, #4]
 800bb66:	68b8      	ldr	r0, [r7, #8]
 800bb68:	f000 fab6 	bl	800c0d8 <prvAddCurrentTaskToDelayedList>
    }
 800bb6c:	bf00      	nop
 800bb6e:	3718      	adds	r7, #24
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	20026370 	.word	0x20026370

0800bb78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b088      	sub	sp, #32
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d103      	bne.n	800bb96 <xTaskRemoveFromEventList+0x1e>
 800bb8e:	f7fe fe0b 	bl	800a7a8 <ulSetInterruptMask>
 800bb92:	bf00      	nop
 800bb94:	e7fd      	b.n	800bb92 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	69db      	ldr	r3, [r3, #28]
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	6a12      	ldr	r2, [r2, #32]
 800bba4:	609a      	str	r2, [r3, #8]
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	69ba      	ldr	r2, [r7, #24]
 800bbac:	69d2      	ldr	r2, [r2, #28]
 800bbae:	605a      	str	r2, [r3, #4]
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	3318      	adds	r3, #24
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d103      	bne.n	800bbc4 <xTaskRemoveFromEventList+0x4c>
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	6a1a      	ldr	r2, [r3, #32]
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	605a      	str	r2, [r3, #4]
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	1e5a      	subs	r2, r3, #1
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbd4:	4b49      	ldr	r3, [pc, #292]	@ (800bcfc <xTaskRemoveFromEventList+0x184>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d15f      	bne.n	800bc9c <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	69ba      	ldr	r2, [r7, #24]
 800bbe8:	68d2      	ldr	r2, [r2, #12]
 800bbea:	609a      	str	r2, [r3, #8]
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	69ba      	ldr	r2, [r7, #24]
 800bbf2:	6892      	ldr	r2, [r2, #8]
 800bbf4:	605a      	str	r2, [r3, #4]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d103      	bne.n	800bc0a <xTaskRemoveFromEventList+0x92>
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	68da      	ldr	r2, [r3, #12]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	615a      	str	r2, [r3, #20]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	1e5a      	subs	r2, r3, #1
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1e:	4b38      	ldr	r3, [pc, #224]	@ (800bd00 <xTaskRemoveFromEventList+0x188>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d903      	bls.n	800bc2e <xTaskRemoveFromEventList+0xb6>
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2a:	4a35      	ldr	r2, [pc, #212]	@ (800bd00 <xTaskRemoveFromEventList+0x188>)
 800bc2c:	6013      	str	r3, [r2, #0]
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc32:	4934      	ldr	r1, [pc, #208]	@ (800bd04 <xTaskRemoveFromEventList+0x18c>)
 800bc34:	4613      	mov	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	440b      	add	r3, r1
 800bc3e:	3304      	adds	r3, #4
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	60bb      	str	r3, [r7, #8]
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	609a      	str	r2, [r3, #8]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	60da      	str	r2, [r3, #12]
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	3204      	adds	r2, #4
 800bc5a:	605a      	str	r2, [r3, #4]
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	1d1a      	adds	r2, r3, #4
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	609a      	str	r2, [r3, #8]
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4a24      	ldr	r2, [pc, #144]	@ (800bd04 <xTaskRemoveFromEventList+0x18c>)
 800bc72:	441a      	add	r2, r3
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	615a      	str	r2, [r3, #20]
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc7c:	4921      	ldr	r1, [pc, #132]	@ (800bd04 <xTaskRemoveFromEventList+0x18c>)
 800bc7e:	4613      	mov	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	440b      	add	r3, r1
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	1c59      	adds	r1, r3, #1
 800bc8c:	481d      	ldr	r0, [pc, #116]	@ (800bd04 <xTaskRemoveFromEventList+0x18c>)
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4403      	add	r3, r0
 800bc98:	6019      	str	r1, [r3, #0]
 800bc9a:	e01b      	b.n	800bcd4 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc9c:	4b1a      	ldr	r3, [pc, #104]	@ (800bd08 <xTaskRemoveFromEventList+0x190>)
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	613b      	str	r3, [r7, #16]
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	61da      	str	r2, [r3, #28]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	621a      	str	r2, [r3, #32]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	3218      	adds	r2, #24
 800bcb8:	605a      	str	r2, [r3, #4]
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	f103 0218 	add.w	r2, r3, #24
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	609a      	str	r2, [r3, #8]
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	4a10      	ldr	r2, [pc, #64]	@ (800bd08 <xTaskRemoveFromEventList+0x190>)
 800bcc8:	629a      	str	r2, [r3, #40]	@ 0x28
 800bcca:	4b0f      	ldr	r3, [pc, #60]	@ (800bd08 <xTaskRemoveFromEventList+0x190>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	4a0d      	ldr	r2, [pc, #52]	@ (800bd08 <xTaskRemoveFromEventList+0x190>)
 800bcd2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd8:	4b0c      	ldr	r3, [pc, #48]	@ (800bd0c <xTaskRemoveFromEventList+0x194>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d905      	bls.n	800bcee <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800bce6:	4b0a      	ldr	r3, [pc, #40]	@ (800bd10 <xTaskRemoveFromEventList+0x198>)
 800bce8:	2201      	movs	r2, #1
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	e001      	b.n	800bcf2 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800bcf2:	69fb      	ldr	r3, [r7, #28]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3720      	adds	r7, #32
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	2002686c 	.word	0x2002686c
 800bd00:	2002684c 	.word	0x2002684c
 800bd04:	20026374 	.word	0x20026374
 800bd08:	20026804 	.word	0x20026804
 800bd0c:	20026370 	.word	0x20026370
 800bd10:	20026858 	.word	0x20026858

0800bd14 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd1c:	4b06      	ldr	r3, [pc, #24]	@ (800bd38 <vTaskInternalSetTimeOutState+0x24>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800bd24:	4b05      	ldr	r3, [pc, #20]	@ (800bd3c <vTaskInternalSetTimeOutState+0x28>)
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	605a      	str	r2, [r3, #4]
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	2002685c 	.word	0x2002685c
 800bd3c:	20026848 	.word	0x20026848

0800bd40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d103      	bne.n	800bd58 <xTaskCheckForTimeOut+0x18>
 800bd50:	f7fe fd2a 	bl	800a7a8 <ulSetInterruptMask>
 800bd54:	bf00      	nop
 800bd56:	e7fd      	b.n	800bd54 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d103      	bne.n	800bd66 <xTaskCheckForTimeOut+0x26>
 800bd5e:	f7fe fd23 	bl	800a7a8 <ulSetInterruptMask>
 800bd62:	bf00      	nop
 800bd64:	e7fd      	b.n	800bd62 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800bd66:	f7fe fbdd 	bl	800a524 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800bd6a:	4b1f      	ldr	r3, [pc, #124]	@ (800bde8 <xTaskCheckForTimeOut+0xa8>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	693a      	ldr	r2, [r7, #16]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd82:	d102      	bne.n	800bd8a <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800bd84:	2300      	movs	r3, #0
 800bd86:	617b      	str	r3, [r7, #20]
 800bd88:	e026      	b.n	800bdd8 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	4b17      	ldr	r3, [pc, #92]	@ (800bdec <xTaskCheckForTimeOut+0xac>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d00a      	beq.n	800bdac <xTaskCheckForTimeOut+0x6c>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d305      	bcc.n	800bdac <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	e015      	b.n	800bdd8 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d20b      	bcs.n	800bdce <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	1ad2      	subs	r2, r2, r3
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff ffa6 	bl	800bd14 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	617b      	str	r3, [r7, #20]
 800bdcc:	e004      	b.n	800bdd8 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800bdd8:	f7fe fbb6 	bl	800a548 <vPortExitCritical>

    return xReturn;
 800bddc:	697b      	ldr	r3, [r7, #20]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	20026848 	.word	0x20026848
 800bdec:	2002685c 	.word	0x2002685c

0800bdf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800bdf4:	4b03      	ldr	r3, [pc, #12]	@ (800be04 <vTaskMissedYield+0x14>)
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	601a      	str	r2, [r3, #0]
}
 800bdfa:	bf00      	nop
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	20026858 	.word	0x20026858

0800be08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800be10:	f000 f84a 	bl	800bea8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be14:	4b03      	ldr	r3, [pc, #12]	@ (800be24 <prvIdleTask+0x1c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d9f9      	bls.n	800be10 <prvIdleTask+0x8>
            {
                taskYIELD();
 800be1c:	f7fe fb70 	bl	800a500 <vPortYield>
        prvCheckTasksWaitingTermination();
 800be20:	e7f6      	b.n	800be10 <prvIdleTask+0x8>
 800be22:	bf00      	nop
 800be24:	20026374 	.word	0x20026374

0800be28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be2e:	2300      	movs	r3, #0
 800be30:	607b      	str	r3, [r7, #4]
 800be32:	e00c      	b.n	800be4e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	4613      	mov	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4a12      	ldr	r2, [pc, #72]	@ (800be88 <prvInitialiseTaskLists+0x60>)
 800be40:	4413      	add	r3, r2
 800be42:	4618      	mov	r0, r3
 800be44:	f7fe fa8c 	bl	800a360 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3301      	adds	r3, #1
 800be4c:	607b      	str	r3, [r7, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b37      	cmp	r3, #55	@ 0x37
 800be52:	d9ef      	bls.n	800be34 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800be54:	480d      	ldr	r0, [pc, #52]	@ (800be8c <prvInitialiseTaskLists+0x64>)
 800be56:	f7fe fa83 	bl	800a360 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800be5a:	480d      	ldr	r0, [pc, #52]	@ (800be90 <prvInitialiseTaskLists+0x68>)
 800be5c:	f7fe fa80 	bl	800a360 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800be60:	480c      	ldr	r0, [pc, #48]	@ (800be94 <prvInitialiseTaskLists+0x6c>)
 800be62:	f7fe fa7d 	bl	800a360 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800be66:	480c      	ldr	r0, [pc, #48]	@ (800be98 <prvInitialiseTaskLists+0x70>)
 800be68:	f7fe fa7a 	bl	800a360 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800be6c:	480b      	ldr	r0, [pc, #44]	@ (800be9c <prvInitialiseTaskLists+0x74>)
 800be6e:	f7fe fa77 	bl	800a360 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800be72:	4b0b      	ldr	r3, [pc, #44]	@ (800bea0 <prvInitialiseTaskLists+0x78>)
 800be74:	4a05      	ldr	r2, [pc, #20]	@ (800be8c <prvInitialiseTaskLists+0x64>)
 800be76:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be78:	4b0a      	ldr	r3, [pc, #40]	@ (800bea4 <prvInitialiseTaskLists+0x7c>)
 800be7a:	4a05      	ldr	r2, [pc, #20]	@ (800be90 <prvInitialiseTaskLists+0x68>)
 800be7c:	601a      	str	r2, [r3, #0]
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20026374 	.word	0x20026374
 800be8c:	200267d4 	.word	0x200267d4
 800be90:	200267e8 	.word	0x200267e8
 800be94:	20026804 	.word	0x20026804
 800be98:	20026818 	.word	0x20026818
 800be9c:	20026830 	.word	0x20026830
 800bea0:	200267fc 	.word	0x200267fc
 800bea4:	20026800 	.word	0x20026800

0800bea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800beae:	e019      	b.n	800bee4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800beb0:	f7fe fb38 	bl	800a524 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beb4:	4b10      	ldr	r3, [pc, #64]	@ (800bef8 <prvCheckTasksWaitingTermination+0x50>)
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3304      	adds	r3, #4
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fe fab3 	bl	800a42c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800bec6:	4b0d      	ldr	r3, [pc, #52]	@ (800befc <prvCheckTasksWaitingTermination+0x54>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3b01      	subs	r3, #1
 800becc:	4a0b      	ldr	r2, [pc, #44]	@ (800befc <prvCheckTasksWaitingTermination+0x54>)
 800bece:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800bed0:	4b0b      	ldr	r3, [pc, #44]	@ (800bf00 <prvCheckTasksWaitingTermination+0x58>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	4a0a      	ldr	r2, [pc, #40]	@ (800bf00 <prvCheckTasksWaitingTermination+0x58>)
 800bed8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800beda:	f7fe fb35 	bl	800a548 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f810 	bl	800bf04 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bee4:	4b06      	ldr	r3, [pc, #24]	@ (800bf00 <prvCheckTasksWaitingTermination+0x58>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1e1      	bne.n	800beb0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20026818 	.word	0x20026818
 800befc:	20026844 	.word	0x20026844
 800bf00:	2002682c 	.word	0x2002682c

0800bf04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d108      	bne.n	800bf28 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 fd38 	bl	800c990 <vPortFree>
                vPortFree( pxTCB );
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fd35 	bl	800c990 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800bf26:	e011      	b.n	800bf4c <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d103      	bne.n	800bf3a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fd2c 	bl	800c990 <vPortFree>
    }
 800bf38:	e008      	b.n	800bf4c <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d003      	beq.n	800bf4c <prvDeleteTCB+0x48>
 800bf44:	f7fe fc30 	bl	800a7a8 <ulSetInterruptMask>
 800bf48:	bf00      	nop
 800bf4a:	e7fd      	b.n	800bf48 <prvDeleteTCB+0x44>
    }
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf54:	b480      	push	{r7}
 800bf56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf58:	4b0a      	ldr	r3, [pc, #40]	@ (800bf84 <prvResetNextTaskUnblockTime+0x30>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d104      	bne.n	800bf6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800bf62:	4b09      	ldr	r3, [pc, #36]	@ (800bf88 <prvResetNextTaskUnblockTime+0x34>)
 800bf64:	f04f 32ff 	mov.w	r2, #4294967295
 800bf68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800bf6a:	e005      	b.n	800bf78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bf6c:	4b05      	ldr	r3, [pc, #20]	@ (800bf84 <prvResetNextTaskUnblockTime+0x30>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a04      	ldr	r2, [pc, #16]	@ (800bf88 <prvResetNextTaskUnblockTime+0x34>)
 800bf76:	6013      	str	r3, [r2, #0]
}
 800bf78:	bf00      	nop
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	200267fc 	.word	0x200267fc
 800bf88:	20026864 	.word	0x20026864

0800bf8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800bf92:	4b0b      	ldr	r3, [pc, #44]	@ (800bfc0 <xTaskGetSchedulerState+0x34>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d102      	bne.n	800bfa0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	607b      	str	r3, [r7, #4]
 800bf9e:	e008      	b.n	800bfb2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfa0:	4b08      	ldr	r3, [pc, #32]	@ (800bfc4 <xTaskGetSchedulerState+0x38>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	607b      	str	r3, [r7, #4]
 800bfac:	e001      	b.n	800bfb2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800bfb2:	687b      	ldr	r3, [r7, #4]
    }
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	20026850 	.word	0x20026850
 800bfc4:	2002686c 	.word	0x2002686c

0800bfc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d070      	beq.n	800c0c0 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800bfde:	4b3b      	ldr	r3, [pc, #236]	@ (800c0cc <xTaskPriorityDisinherit+0x104>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d003      	beq.n	800bff0 <xTaskPriorityDisinherit+0x28>
 800bfe8:	f7fe fbde 	bl	800a7a8 <ulSetInterruptMask>
 800bfec:	bf00      	nop
 800bfee:	e7fd      	b.n	800bfec <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d103      	bne.n	800c000 <xTaskPriorityDisinherit+0x38>
 800bff8:	f7fe fbd6 	bl	800a7a8 <ulSetInterruptMask>
 800bffc:	bf00      	nop
 800bffe:	e7fd      	b.n	800bffc <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c004:	1e5a      	subs	r2, r3, #1
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c012:	429a      	cmp	r2, r3
 800c014:	d054      	beq.n	800c0c0 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d150      	bne.n	800c0c0 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	3304      	adds	r3, #4
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fa02 	bl	800a42c <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c034:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c040:	4b23      	ldr	r3, [pc, #140]	@ (800c0d0 <xTaskPriorityDisinherit+0x108>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d903      	bls.n	800c050 <xTaskPriorityDisinherit+0x88>
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c04c:	4a20      	ldr	r2, [pc, #128]	@ (800c0d0 <xTaskPriorityDisinherit+0x108>)
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c054:	491f      	ldr	r1, [pc, #124]	@ (800c0d4 <xTaskPriorityDisinherit+0x10c>)
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	440b      	add	r3, r1
 800c060:	3304      	adds	r3, #4
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	609a      	str	r2, [r3, #8]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689a      	ldr	r2, [r3, #8]
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	60da      	str	r2, [r3, #12]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	3204      	adds	r2, #4
 800c07c:	605a      	str	r2, [r3, #4]
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	1d1a      	adds	r2, r3, #4
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	609a      	str	r2, [r3, #8]
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c08a:	4613      	mov	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4413      	add	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4a10      	ldr	r2, [pc, #64]	@ (800c0d4 <xTaskPriorityDisinherit+0x10c>)
 800c094:	441a      	add	r2, r3
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	615a      	str	r2, [r3, #20]
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09e:	490d      	ldr	r1, [pc, #52]	@ (800c0d4 <xTaskPriorityDisinherit+0x10c>)
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	440b      	add	r3, r1
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	1c59      	adds	r1, r3, #1
 800c0ae:	4809      	ldr	r0, [pc, #36]	@ (800c0d4 <xTaskPriorityDisinherit+0x10c>)
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4403      	add	r3, r0
 800c0ba:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800c0c0:	697b      	ldr	r3, [r7, #20]
    }
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3718      	adds	r7, #24
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20026370 	.word	0x20026370
 800c0d0:	2002684c 	.word	0x2002684c
 800c0d4:	20026374 	.word	0x20026374

0800c0d8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800c0e2:	4b2e      	ldr	r3, [pc, #184]	@ (800c19c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0e8:	4b2d      	ldr	r3, [pc, #180]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe f99c 	bl	800a42c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fa:	d124      	bne.n	800c146 <prvAddCurrentTaskToDelayedList+0x6e>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d021      	beq.n	800c146 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c102:	4b28      	ldr	r3, [pc, #160]	@ (800c1a4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	613b      	str	r3, [r7, #16]
 800c108:	4b25      	ldr	r3, [pc, #148]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	693a      	ldr	r2, [r7, #16]
 800c10e:	609a      	str	r2, [r3, #8]
 800c110:	4b23      	ldr	r3, [pc, #140]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	6892      	ldr	r2, [r2, #8]
 800c118:	60da      	str	r2, [r3, #12]
 800c11a:	4b21      	ldr	r3, [pc, #132]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	3204      	adds	r2, #4
 800c124:	605a      	str	r2, [r3, #4]
 800c126:	4b1e      	ldr	r3, [pc, #120]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	1d1a      	adds	r2, r3, #4
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	609a      	str	r2, [r3, #8]
 800c130:	4b1b      	ldr	r3, [pc, #108]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a1b      	ldr	r2, [pc, #108]	@ (800c1a4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c136:	615a      	str	r2, [r3, #20]
 800c138:	4b1a      	ldr	r3, [pc, #104]	@ (800c1a4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3301      	adds	r3, #1
 800c13e:	4a19      	ldr	r2, [pc, #100]	@ (800c1a4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800c144:	e026      	b.n	800c194 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4413      	add	r3, r2
 800c14c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c14e:	4b14      	ldr	r3, [pc, #80]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d209      	bcs.n	800c172 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c15e:	4b12      	ldr	r3, [pc, #72]	@ (800c1a8 <prvAddCurrentTaskToDelayedList+0xd0>)
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3304      	adds	r3, #4
 800c168:	4619      	mov	r1, r3
 800c16a:	4610      	mov	r0, r2
 800c16c:	f7fe f925 	bl	800a3ba <vListInsert>
}
 800c170:	e010      	b.n	800c194 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c172:	4b0e      	ldr	r3, [pc, #56]	@ (800c1ac <prvAddCurrentTaskToDelayedList+0xd4>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3304      	adds	r3, #4
 800c17c:	4619      	mov	r1, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	f7fe f91b 	bl	800a3ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800c184:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d202      	bcs.n	800c194 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800c18e:	4a08      	ldr	r2, [pc, #32]	@ (800c1b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6013      	str	r3, [r2, #0]
}
 800c194:	bf00      	nop
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20026848 	.word	0x20026848
 800c1a0:	20026370 	.word	0x20026370
 800c1a4:	20026830 	.word	0x20026830
 800c1a8:	20026800 	.word	0x20026800
 800c1ac:	200267fc 	.word	0x200267fc
 800c1b0:	20026864 	.word	0x20026864

0800c1b4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800c1be:	f000 fae1 	bl	800c784 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800c1c2:	4b18      	ldr	r3, [pc, #96]	@ (800c224 <xTimerCreateTimerTask+0x70>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d020      	beq.n	800c20c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c1d2:	463a      	mov	r2, r7
 800c1d4:	1d39      	adds	r1, r7, #4
 800c1d6:	f107 0308 	add.w	r3, r7, #8
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe f8a6 	bl	800a32c <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	9202      	str	r2, [sp, #8]
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	2337      	movs	r3, #55	@ 0x37
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	460a      	mov	r2, r1
 800c1f2:	490d      	ldr	r1, [pc, #52]	@ (800c228 <xTimerCreateTimerTask+0x74>)
 800c1f4:	480d      	ldr	r0, [pc, #52]	@ (800c22c <xTimerCreateTimerTask+0x78>)
 800c1f6:	f7fe ffc7 	bl	800b188 <xTaskCreateStatic>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c230 <xTimerCreateTimerTask+0x7c>)
 800c1fe:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800c200:	4b0b      	ldr	r3, [pc, #44]	@ (800c230 <xTimerCreateTimerTask+0x7c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d001      	beq.n	800c20c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800c208:	2301      	movs	r3, #1
 800c20a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d103      	bne.n	800c21a <xTimerCreateTimerTask+0x66>
 800c212:	f7fe fac9 	bl	800a7a8 <ulSetInterruptMask>
 800c216:	bf00      	nop
 800c218:	e7fd      	b.n	800c216 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800c21a:	68fb      	ldr	r3, [r7, #12]
    }
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	200268a0 	.word	0x200268a0
 800c228:	0800fa84 	.word	0x0800fa84
 800c22c:	0800c3dd 	.word	0x0800c3dd
 800c230:	200268a4 	.word	0x200268a4

0800c234 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800c234:	b580      	push	{r7, lr}
 800c236:	b088      	sub	sp, #32
 800c238:	af02      	add	r7, sp, #8
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c242:	202c      	movs	r0, #44	@ 0x2c
 800c244:	f000 faf8 	bl	800c838 <pvPortMalloc>
 800c248:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00d      	beq.n	800c26c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	68b9      	ldr	r1, [r7, #8]
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 f835 	bl	800c2d6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800c26c:	697b      	ldr	r3, [r7, #20]
        }
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 800c276:	b580      	push	{r7, lr}
 800c278:	b088      	sub	sp, #32
 800c27a:	af02      	add	r7, sp, #8
 800c27c:	60f8      	str	r0, [r7, #12]
 800c27e:	60b9      	str	r1, [r7, #8]
 800c280:	607a      	str	r2, [r7, #4]
 800c282:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTimer_t equals the size of the real timer
                 * structure. */
                volatile size_t xSize = sizeof( StaticTimer_t );
 800c284:	232c      	movs	r3, #44	@ 0x2c
 800c286:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Timer_t ) );
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	2b2c      	cmp	r3, #44	@ 0x2c
 800c28c:	d003      	beq.n	800c296 <xTimerCreateStatic+0x20>
 800c28e:	f7fe fa8b 	bl	800a7a8 <ulSetInterruptMask>
 800c292:	bf00      	nop
 800c294:	e7fd      	b.n	800c292 <xTimerCreateStatic+0x1c>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c296:	693b      	ldr	r3, [r7, #16]
            }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 800c298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d103      	bne.n	800c2a6 <xTimerCreateStatic+0x30>
 800c29e:	f7fe fa83 	bl	800a7a8 <ulSetInterruptMask>
 800c2a2:	bf00      	nop
 800c2a4:	e7fd      	b.n	800c2a2 <xTimerCreateStatic+0x2c>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a8:	617b      	str	r3, [r7, #20]

            if( pxNewTimer != NULL )
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00d      	beq.n	800c2cc <xTimerCreateStatic+0x56>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 f805 	bl	800c2d6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800c2cc:	697b      	ldr	r3, [r7, #20]
        }
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	60f8      	str	r0, [r7, #12]
 800c2de:	60b9      	str	r1, [r7, #8]
 800c2e0:	607a      	str	r2, [r7, #4]
 800c2e2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d103      	bne.n	800c2f2 <prvInitialiseNewTimer+0x1c>
 800c2ea:	f7fe fa5d 	bl	800a7a8 <ulSetInterruptMask>
 800c2ee:	bf00      	nop
 800c2f0:	e7fd      	b.n	800c2ee <prvInitialiseNewTimer+0x18>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800c2f2:	f000 fa47 	bl	800c784 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	69ba      	ldr	r2, [r7, #24]
 800c30c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	3304      	adds	r3, #4
 800c312:	4618      	mov	r0, r3
 800c314:	f7fe f844 	bl	800a3a0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d008      	beq.n	800c330 <prvInitialiseNewTimer+0x5a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c324:	f043 0304 	orr.w	r3, r3, #4
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800c330:	bf00      	nop
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c344:	e008      	b.n	800c358 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	4413      	add	r3, r2
 800c34e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6a1b      	ldr	r3, [r3, #32]
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	699a      	ldr	r2, [r3, #24]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	18d1      	adds	r1, r2, r3
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f000 f8d7 	bl	800c518 <prvInsertTimerInActiveList>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1ea      	bne.n	800c346 <prvReloadTimer+0xe>
        }
    }
 800c370:	bf00      	nop
 800c372:	bf00      	nop
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
	...

0800c37c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c386:	4b14      	ldr	r3, [pc, #80]	@ (800c3d8 <prvProcessExpiredTimer+0x5c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	3304      	adds	r3, #4
 800c394:	4618      	mov	r0, r3
 800c396:	f7fe f849 	bl	800a42c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3a0:	f003 0304 	and.w	r3, r3, #4
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d005      	beq.n	800c3b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	6879      	ldr	r1, [r7, #4]
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7ff ffc3 	bl	800c338 <prvReloadTimer>
 800c3b2:	e008      	b.n	800c3c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3ba:	f023 0301 	bic.w	r3, r3, #1
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	4798      	blx	r3
    }
 800c3ce:	bf00      	nop
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20026898 	.word	0x20026898

0800c3dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3e4:	f107 0308 	add.w	r3, r7, #8
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 f851 	bl	800c490 <prvGetNextExpireTime>
 800c3ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 f805 	bl	800c404 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c3fa:	f000 f8cf 	bl	800c59c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3fe:	bf00      	nop
 800c400:	e7f0      	b.n	800c3e4 <prvTimerTask+0x8>
	...

0800c404 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c40e:	f7ff f8e7 	bl	800b5e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c412:	f107 0308 	add.w	r3, r7, #8
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f85e 	bl	800c4d8 <prvSampleTimeNow>
 800c41c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d12a      	bne.n	800c47a <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10a      	bne.n	800c440 <prvProcessTimerOrBlockTask+0x3c>
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d806      	bhi.n	800c440 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c432:	f7ff f8e3 	bl	800b5fc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c436:	68f9      	ldr	r1, [r7, #12]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f7ff ff9f 	bl	800c37c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c43e:	e01e      	b.n	800c47e <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d008      	beq.n	800c458 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c446:	4b10      	ldr	r3, [pc, #64]	@ (800c488 <prvProcessTimerOrBlockTask+0x84>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <prvProcessTimerOrBlockTask+0x50>
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <prvProcessTimerOrBlockTask+0x52>
 800c454:	2300      	movs	r3, #0
 800c456:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c458:	4b0c      	ldr	r3, [pc, #48]	@ (800c48c <prvProcessTimerOrBlockTask+0x88>)
 800c45a:	6818      	ldr	r0, [r3, #0]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	4619      	mov	r1, r3
 800c466:	f7fe fe5b 	bl	800b120 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c46a:	f7ff f8c7 	bl	800b5fc <xTaskResumeAll>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d104      	bne.n	800c47e <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800c474:	f7fe f844 	bl	800a500 <vPortYield>
    }
 800c478:	e001      	b.n	800c47e <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800c47a:	f7ff f8bf 	bl	800b5fc <xTaskResumeAll>
    }
 800c47e:	bf00      	nop
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	2002689c 	.word	0x2002689c
 800c48c:	200268a0 	.word	0x200268a0

0800c490 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c498:	4b0e      	ldr	r3, [pc, #56]	@ (800c4d4 <prvGetNextExpireTime+0x44>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <prvGetNextExpireTime+0x16>
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	e000      	b.n	800c4a8 <prvGetNextExpireTime+0x18>
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4b4:	4b07      	ldr	r3, [pc, #28]	@ (800c4d4 <prvGetNextExpireTime+0x44>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	60fb      	str	r3, [r7, #12]
 800c4be:	e001      	b.n	800c4c4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
    }
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20026898 	.word	0x20026898

0800c4d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800c4e0:	f7ff f97a 	bl	800b7d8 <xTaskGetTickCount>
 800c4e4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c514 <prvSampleTimeNow+0x3c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d205      	bcs.n	800c4fc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c4f0:	f000 f922 	bl	800c738 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	601a      	str	r2, [r3, #0]
 800c4fa:	e002      	b.n	800c502 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c502:	4a04      	ldr	r2, [pc, #16]	@ (800c514 <prvSampleTimeNow+0x3c>)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c508:	68fb      	ldr	r3, [r7, #12]
    }
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	200268a8 	.word	0x200268a8

0800c518 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c526:	2300      	movs	r3, #0
 800c528:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d812      	bhi.n	800c564 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	1ad2      	subs	r2, r2, r3
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d302      	bcc.n	800c552 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c54c:	2301      	movs	r3, #1
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	e01b      	b.n	800c58a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c552:	4b10      	ldr	r3, [pc, #64]	@ (800c594 <prvInsertTimerInActiveList+0x7c>)
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3304      	adds	r3, #4
 800c55a:	4619      	mov	r1, r3
 800c55c:	4610      	mov	r0, r2
 800c55e:	f7fd ff2c 	bl	800a3ba <vListInsert>
 800c562:	e012      	b.n	800c58a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d206      	bcs.n	800c57a <prvInsertTimerInActiveList+0x62>
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	429a      	cmp	r2, r3
 800c572:	d302      	bcc.n	800c57a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c574:	2301      	movs	r3, #1
 800c576:	617b      	str	r3, [r7, #20]
 800c578:	e007      	b.n	800c58a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c57a:	4b07      	ldr	r3, [pc, #28]	@ (800c598 <prvInsertTimerInActiveList+0x80>)
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3304      	adds	r3, #4
 800c582:	4619      	mov	r1, r3
 800c584:	4610      	mov	r0, r2
 800c586:	f7fd ff18 	bl	800a3ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c58a:	697b      	ldr	r3, [r7, #20]
    }
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	2002689c 	.word	0x2002689c
 800c598:	20026898 	.word	0x20026898

0800c59c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b088      	sub	sp, #32
 800c5a0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5a2:	e0b7      	b.n	800c714 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	da11      	bge.n	800c5ce <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c5aa:	1d3b      	adds	r3, r7, #4
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d103      	bne.n	800c5be <prvProcessReceivedCommands+0x22>
 800c5b6:	f7fe f8f7 	bl	800a7a8 <ulSetInterruptMask>
 800c5ba:	bf00      	nop
 800c5bc:	e7fd      	b.n	800c5ba <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	69fa      	ldr	r2, [r7, #28]
 800c5c4:	6850      	ldr	r0, [r2, #4]
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	6892      	ldr	r2, [r2, #8]
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f2c0 809f 	blt.w	800c714 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d004      	beq.n	800c5ec <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fd ff20 	bl	800a42c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5ec:	463b      	mov	r3, r7
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7ff ff72 	bl	800c4d8 <prvSampleTimeNow>
 800c5f4:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	2b08      	cmp	r3, #8
 800c5fc:	f200 8087 	bhi.w	800c70e <prvProcessReceivedCommands+0x172>
 800c600:	a201      	add	r2, pc, #4	@ (adr r2, 800c608 <prvProcessReceivedCommands+0x6c>)
 800c602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c606:	bf00      	nop
 800c608:	0800c62d 	.word	0x0800c62d
 800c60c:	0800c62d 	.word	0x0800c62d
 800c610:	0800c695 	.word	0x0800c695
 800c614:	0800c6a9 	.word	0x0800c6a9
 800c618:	0800c6e5 	.word	0x0800c6e5
 800c61c:	0800c62d 	.word	0x0800c62d
 800c620:	0800c62d 	.word	0x0800c62d
 800c624:	0800c695 	.word	0x0800c695
 800c628:	0800c6a9 	.word	0x0800c6a9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	b2da      	uxtb	r2, r3
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	18d1      	adds	r1, r2, r3
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	69b8      	ldr	r0, [r7, #24]
 800c64c:	f7ff ff64 	bl	800c518 <prvInsertTimerInActiveList>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d05d      	beq.n	800c712 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c65c:	f003 0304 	and.w	r3, r3, #4
 800c660:	2b00      	cmp	r3, #0
 800c662:	d009      	beq.n	800c678 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	4413      	add	r3, r2
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	4619      	mov	r1, r3
 800c670:	69b8      	ldr	r0, [r7, #24]
 800c672:	f7ff fe61 	bl	800c338 <prvReloadTimer>
 800c676:	e008      	b.n	800c68a <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c67e:	f023 0301 	bic.w	r3, r3, #1
 800c682:	b2da      	uxtb	r2, r3
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	6a1b      	ldr	r3, [r3, #32]
 800c68e:	69b8      	ldr	r0, [r7, #24]
 800c690:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800c692:	e03e      	b.n	800c712 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c69a:	f023 0301 	bic.w	r3, r3, #1
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800c6a6:	e035      	b.n	800c714 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d103      	bne.n	800c6d0 <prvProcessReceivedCommands+0x134>
 800c6c8:	f7fe f86e 	bl	800a7a8 <ulSetInterruptMask>
 800c6cc:	bf00      	nop
 800c6ce:	e7fd      	b.n	800c6cc <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	699a      	ldr	r2, [r3, #24]
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	18d1      	adds	r1, r2, r3
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	697a      	ldr	r2, [r7, #20]
 800c6dc:	69b8      	ldr	r0, [r7, #24]
 800c6de:	f7ff ff1b 	bl	800c518 <prvInsertTimerInActiveList>
                        break;
 800c6e2:	e017      	b.n	800c714 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6ea:	f003 0302 	and.w	r3, r3, #2
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d103      	bne.n	800c6fa <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800c6f2:	69b8      	ldr	r0, [r7, #24]
 800c6f4:	f000 f94c 	bl	800c990 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c6f8:	e00c      	b.n	800c714 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c700:	f023 0301 	bic.w	r3, r3, #1
 800c704:	b2da      	uxtb	r2, r3
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800c70c:	e002      	b.n	800c714 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800c70e:	bf00      	nop
 800c710:	e000      	b.n	800c714 <prvProcessReceivedCommands+0x178>
                        break;
 800c712:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c714:	4b07      	ldr	r3, [pc, #28]	@ (800c734 <prvProcessReceivedCommands+0x198>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	1d39      	adds	r1, r7, #4
 800c71a:	2200      	movs	r2, #0
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fe faed 	bl	800acfc <xQueueReceive>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	f47f af3d 	bne.w	800c5a4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800c72a:	bf00      	nop
 800c72c:	bf00      	nop
 800c72e:	3720      	adds	r7, #32
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	200268a0 	.word	0x200268a0

0800c738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c73e:	e009      	b.n	800c754 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c740:	4b0e      	ldr	r3, [pc, #56]	@ (800c77c <prvSwitchTimerLists+0x44>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800c74a:	f04f 31ff 	mov.w	r1, #4294967295
 800c74e:	6838      	ldr	r0, [r7, #0]
 800c750:	f7ff fe14 	bl	800c37c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c754:	4b09      	ldr	r3, [pc, #36]	@ (800c77c <prvSwitchTimerLists+0x44>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1f0      	bne.n	800c740 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800c75e:	4b07      	ldr	r3, [pc, #28]	@ (800c77c <prvSwitchTimerLists+0x44>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800c764:	4b06      	ldr	r3, [pc, #24]	@ (800c780 <prvSwitchTimerLists+0x48>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a04      	ldr	r2, [pc, #16]	@ (800c77c <prvSwitchTimerLists+0x44>)
 800c76a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c76c:	4a04      	ldr	r2, [pc, #16]	@ (800c780 <prvSwitchTimerLists+0x48>)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6013      	str	r3, [r2, #0]
    }
 800c772:	bf00      	nop
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	20026898 	.word	0x20026898
 800c780:	2002689c 	.word	0x2002689c

0800c784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c78a:	f7fd fecb 	bl	800a524 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c78e:	4b15      	ldr	r3, [pc, #84]	@ (800c7e4 <prvCheckForValidListAndQueue+0x60>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d120      	bne.n	800c7d8 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800c796:	4814      	ldr	r0, [pc, #80]	@ (800c7e8 <prvCheckForValidListAndQueue+0x64>)
 800c798:	f7fd fde2 	bl	800a360 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c79c:	4813      	ldr	r0, [pc, #76]	@ (800c7ec <prvCheckForValidListAndQueue+0x68>)
 800c79e:	f7fd fddf 	bl	800a360 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c7a2:	4b13      	ldr	r3, [pc, #76]	@ (800c7f0 <prvCheckForValidListAndQueue+0x6c>)
 800c7a4:	4a10      	ldr	r2, [pc, #64]	@ (800c7e8 <prvCheckForValidListAndQueue+0x64>)
 800c7a6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c7a8:	4b12      	ldr	r3, [pc, #72]	@ (800c7f4 <prvCheckForValidListAndQueue+0x70>)
 800c7aa:	4a10      	ldr	r2, [pc, #64]	@ (800c7ec <prvCheckForValidListAndQueue+0x68>)
 800c7ac:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	4b11      	ldr	r3, [pc, #68]	@ (800c7f8 <prvCheckForValidListAndQueue+0x74>)
 800c7b4:	4a11      	ldr	r2, [pc, #68]	@ (800c7fc <prvCheckForValidListAndQueue+0x78>)
 800c7b6:	2110      	movs	r1, #16
 800c7b8:	200a      	movs	r0, #10
 800c7ba:	f7fe f8ce 	bl	800a95a <xQueueGenericCreateStatic>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	4a08      	ldr	r2, [pc, #32]	@ (800c7e4 <prvCheckForValidListAndQueue+0x60>)
 800c7c2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800c7c4:	4b07      	ldr	r3, [pc, #28]	@ (800c7e4 <prvCheckForValidListAndQueue+0x60>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d005      	beq.n	800c7d8 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c7cc:	4b05      	ldr	r3, [pc, #20]	@ (800c7e4 <prvCheckForValidListAndQueue+0x60>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	490b      	ldr	r1, [pc, #44]	@ (800c800 <prvCheckForValidListAndQueue+0x7c>)
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fc5e 	bl	800b094 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c7d8:	f7fd feb6 	bl	800a548 <vPortExitCritical>
    }
 800c7dc:	bf00      	nop
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	200268a0 	.word	0x200268a0
 800c7e8:	20026870 	.word	0x20026870
 800c7ec:	20026884 	.word	0x20026884
 800c7f0:	20026898 	.word	0x20026898
 800c7f4:	2002689c 	.word	0x2002689c
 800c7f8:	2002694c 	.word	0x2002694c
 800c7fc:	200268ac 	.word	0x200268ac
 800c800:	0800fa8c 	.word	0x0800fa8c

0800c804 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	60fb      	str	r3, [r7, #12]
        void * pvReturn;

        configASSERT( xTimer );
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d103      	bne.n	800c81e <pvTimerGetTimerID+0x1a>
 800c816:	f7fd ffc7 	bl	800a7a8 <ulSetInterruptMask>
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <pvTimerGetTimerID+0x16>

        taskENTER_CRITICAL();
 800c81e:	f7fd fe81 	bl	800a524 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800c828:	f7fd fe8e 	bl	800a548 <vPortExitCritical>

        return pvReturn;
 800c82c:	68bb      	ldr	r3, [r7, #8]
    }
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
	...

0800c838 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b088      	sub	sp, #32
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800c844:	f7fe fecc 	bl	800b5e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800c848:	4b4c      	ldr	r3, [pc, #304]	@ (800c97c <pvPortMalloc+0x144>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800c850:	f000 f8ec 	bl	800ca2c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d012      	beq.n	800c880 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800c85a:	2208      	movs	r2, #8
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f003 0307 	and.w	r3, r3, #7
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	3308      	adds	r3, #8
 800c866:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	43db      	mvns	r3, r3
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d804      	bhi.n	800c87c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	4413      	add	r3, r2
 800c878:	607b      	str	r3, [r7, #4]
 800c87a:	e001      	b.n	800c880 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	db69      	blt.n	800c95a <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d066      	beq.n	800c95a <pvPortMalloc+0x122>
 800c88c:	4b3c      	ldr	r3, [pc, #240]	@ (800c980 <pvPortMalloc+0x148>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	429a      	cmp	r2, r3
 800c894:	d861      	bhi.n	800c95a <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800c896:	4b3b      	ldr	r3, [pc, #236]	@ (800c984 <pvPortMalloc+0x14c>)
 800c898:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800c89a:	4b3a      	ldr	r3, [pc, #232]	@ (800c984 <pvPortMalloc+0x14c>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8a0:	e004      	b.n	800c8ac <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d903      	bls.n	800c8be <pvPortMalloc+0x86>
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1f1      	bne.n	800c8a2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800c8be:	4b2f      	ldr	r3, [pc, #188]	@ (800c97c <pvPortMalloc+0x144>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	69fa      	ldr	r2, [r7, #28]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d048      	beq.n	800c95a <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2208      	movs	r2, #8
 800c8ce:	4413      	add	r3, r2
 800c8d0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	1ad2      	subs	r2, r2, r3
 800c8e2:	2308      	movs	r3, #8
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d918      	bls.n	800c91c <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8ea:	69fa      	ldr	r2, [r7, #28]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f003 0307 	and.w	r3, r3, #7
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d003      	beq.n	800c904 <pvPortMalloc+0xcc>
 800c8fc:	f7fd ff54 	bl	800a7a8 <ulSetInterruptMask>
 800c900:	bf00      	nop
 800c902:	e7fd      	b.n	800c900 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	685a      	ldr	r2, [r3, #4]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	1ad2      	subs	r2, r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f000 f8e4 	bl	800cae4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c91c:	4b18      	ldr	r3, [pc, #96]	@ (800c980 <pvPortMalloc+0x148>)
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	4a16      	ldr	r2, [pc, #88]	@ (800c980 <pvPortMalloc+0x148>)
 800c928:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c92a:	4b15      	ldr	r3, [pc, #84]	@ (800c980 <pvPortMalloc+0x148>)
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	4b16      	ldr	r3, [pc, #88]	@ (800c988 <pvPortMalloc+0x150>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	d203      	bcs.n	800c93e <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c936:	4b12      	ldr	r3, [pc, #72]	@ (800c980 <pvPortMalloc+0x148>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a13      	ldr	r2, [pc, #76]	@ (800c988 <pvPortMalloc+0x150>)
 800c93c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	2200      	movs	r2, #0
 800c94e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800c950:	4b0e      	ldr	r3, [pc, #56]	@ (800c98c <pvPortMalloc+0x154>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3301      	adds	r3, #1
 800c956:	4a0d      	ldr	r2, [pc, #52]	@ (800c98c <pvPortMalloc+0x154>)
 800c958:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800c95a:	f7fe fe4f 	bl	800b5fc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f003 0307 	and.w	r3, r3, #7
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <pvPortMalloc+0x138>
 800c968:	f7fd ff1e 	bl	800a7a8 <ulSetInterruptMask>
 800c96c:	bf00      	nop
 800c96e:	e7fd      	b.n	800c96c <pvPortMalloc+0x134>
    return pvReturn;
 800c970:	697b      	ldr	r3, [r7, #20]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3720      	adds	r7, #32
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	200289a4 	.word	0x200289a4
 800c980:	200289a8 	.word	0x200289a8
 800c984:	2002899c 	.word	0x2002899c
 800c988:	200289ac 	.word	0x200289ac
 800c98c:	200289b0 	.word	0x200289b0

0800c990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d03b      	beq.n	800ca1a <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800c9a2:	2308      	movs	r3, #8
 800c9a4:	425b      	negs	r3, r3
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	db03      	blt.n	800c9c0 <vPortFree+0x30>
 800c9b8:	f7fd fef6 	bl	800a7a8 <ulSetInterruptMask>
 800c9bc:	bf00      	nop
 800c9be:	e7fd      	b.n	800c9bc <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d003      	beq.n	800c9d0 <vPortFree+0x40>
 800c9c8:	f7fd feee 	bl	800a7a8 <ulSetInterruptMask>
 800c9cc:	bf00      	nop
 800c9ce:	e7fd      	b.n	800c9cc <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	0fdb      	lsrs	r3, r3, #31
 800c9d6:	f003 0301 	and.w	r3, r3, #1
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d01c      	beq.n	800ca1a <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d118      	bne.n	800ca1a <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800c9f4:	f7fe fdf4 	bl	800b5e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	4b09      	ldr	r3, [pc, #36]	@ (800ca24 <vPortFree+0x94>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4413      	add	r3, r2
 800ca02:	4a08      	ldr	r2, [pc, #32]	@ (800ca24 <vPortFree+0x94>)
 800ca04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca06:	68b8      	ldr	r0, [r7, #8]
 800ca08:	f000 f86c 	bl	800cae4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ca0c:	4b06      	ldr	r3, [pc, #24]	@ (800ca28 <vPortFree+0x98>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3301      	adds	r3, #1
 800ca12:	4a05      	ldr	r2, [pc, #20]	@ (800ca28 <vPortFree+0x98>)
 800ca14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ca16:	f7fe fdf1 	bl	800b5fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ca1a:	bf00      	nop
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	200289a8 	.word	0x200289a8
 800ca28:	200289b4 	.word	0x200289b4

0800ca2c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ca36:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800ca38:	4b25      	ldr	r3, [pc, #148]	@ (800cad0 <prvHeapInit+0xa4>)
 800ca3a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f003 0307 	and.w	r3, r3, #7
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00c      	beq.n	800ca60 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	3307      	adds	r3, #7
 800ca4a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f023 0307 	bic.w	r3, r3, #7
 800ca52:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	4a1d      	ldr	r2, [pc, #116]	@ (800cad0 <prvHeapInit+0xa4>)
 800ca5c:	4413      	add	r3, r2
 800ca5e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca64:	4a1b      	ldr	r2, [pc, #108]	@ (800cad4 <prvHeapInit+0xa8>)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ca6a:	4b1a      	ldr	r3, [pc, #104]	@ (800cad4 <prvHeapInit+0xa8>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	4413      	add	r3, r2
 800ca76:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ca78:	2208      	movs	r2, #8
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	1a9b      	subs	r3, r3, r2
 800ca7e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f023 0307 	bic.w	r3, r3, #7
 800ca86:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4a13      	ldr	r2, [pc, #76]	@ (800cad8 <prvHeapInit+0xac>)
 800ca8c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ca8e:	4b12      	ldr	r3, [pc, #72]	@ (800cad8 <prvHeapInit+0xac>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2200      	movs	r2, #0
 800ca94:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800ca96:	4b10      	ldr	r3, [pc, #64]	@ (800cad8 <prvHeapInit+0xac>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	1ad2      	subs	r2, r2, r3
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800caac:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <prvHeapInit+0xac>)
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	4a08      	ldr	r2, [pc, #32]	@ (800cadc <prvHeapInit+0xb0>)
 800caba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	4a07      	ldr	r2, [pc, #28]	@ (800cae0 <prvHeapInit+0xb4>)
 800cac2:	6013      	str	r3, [r2, #0]
}
 800cac4:	bf00      	nop
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	2002699c 	.word	0x2002699c
 800cad4:	2002899c 	.word	0x2002899c
 800cad8:	200289a4 	.word	0x200289a4
 800cadc:	200289ac 	.word	0x200289ac
 800cae0:	200289a8 	.word	0x200289a8

0800cae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800caec:	4b28      	ldr	r3, [pc, #160]	@ (800cb90 <prvInsertBlockIntoFreeList+0xac>)
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	e002      	b.n	800caf8 <prvInsertBlockIntoFreeList+0x14>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d8f7      	bhi.n	800caf2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d108      	bne.n	800cb26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	441a      	add	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	441a      	add	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d118      	bne.n	800cb6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	4b15      	ldr	r3, [pc, #84]	@ (800cb94 <prvInsertBlockIntoFreeList+0xb0>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d00d      	beq.n	800cb62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	441a      	add	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	601a      	str	r2, [r3, #0]
 800cb60:	e008      	b.n	800cb74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb62:	4b0c      	ldr	r3, [pc, #48]	@ (800cb94 <prvInsertBlockIntoFreeList+0xb0>)
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	601a      	str	r2, [r3, #0]
 800cb6a:	e003      	b.n	800cb74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d002      	beq.n	800cb82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cb82:	bf00      	nop
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	2002899c 	.word	0x2002899c
 800cb94:	200289a4 	.word	0x200289a4

0800cb98 <__cvt>:
 800cb98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb9c:	ec57 6b10 	vmov	r6, r7, d0
 800cba0:	2f00      	cmp	r7, #0
 800cba2:	460c      	mov	r4, r1
 800cba4:	4619      	mov	r1, r3
 800cba6:	463b      	mov	r3, r7
 800cba8:	bfb4      	ite	lt
 800cbaa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cbae:	2300      	movge	r3, #0
 800cbb0:	4691      	mov	r9, r2
 800cbb2:	bfbf      	itttt	lt
 800cbb4:	4632      	movlt	r2, r6
 800cbb6:	461f      	movlt	r7, r3
 800cbb8:	232d      	movlt	r3, #45	@ 0x2d
 800cbba:	4616      	movlt	r6, r2
 800cbbc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cbc0:	700b      	strb	r3, [r1, #0]
 800cbc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cbc4:	f023 0820 	bic.w	r8, r3, #32
 800cbc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cbcc:	d005      	beq.n	800cbda <__cvt+0x42>
 800cbce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cbd2:	d100      	bne.n	800cbd6 <__cvt+0x3e>
 800cbd4:	3401      	adds	r4, #1
 800cbd6:	2102      	movs	r1, #2
 800cbd8:	e000      	b.n	800cbdc <__cvt+0x44>
 800cbda:	2103      	movs	r1, #3
 800cbdc:	ab03      	add	r3, sp, #12
 800cbde:	4622      	mov	r2, r4
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	ab02      	add	r3, sp, #8
 800cbe4:	ec47 6b10 	vmov	d0, r6, r7
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	4653      	mov	r3, sl
 800cbec:	f000 fe7c 	bl	800d8e8 <_dtoa_r>
 800cbf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	d119      	bne.n	800cc2c <__cvt+0x94>
 800cbf8:	f019 0f01 	tst.w	r9, #1
 800cbfc:	d00e      	beq.n	800cc1c <__cvt+0x84>
 800cbfe:	eb00 0904 	add.w	r9, r0, r4
 800cc02:	2200      	movs	r2, #0
 800cc04:	2300      	movs	r3, #0
 800cc06:	4630      	mov	r0, r6
 800cc08:	4639      	mov	r1, r7
 800cc0a:	f7f3 ff6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc0e:	b108      	cbz	r0, 800cc14 <__cvt+0x7c>
 800cc10:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc14:	2230      	movs	r2, #48	@ 0x30
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	454b      	cmp	r3, r9
 800cc1a:	d31e      	bcc.n	800cc5a <__cvt+0xc2>
 800cc1c:	9b03      	ldr	r3, [sp, #12]
 800cc1e:	4628      	mov	r0, r5
 800cc20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc22:	1b5b      	subs	r3, r3, r5
 800cc24:	6013      	str	r3, [r2, #0]
 800cc26:	b004      	add	sp, #16
 800cc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc30:	eb00 0904 	add.w	r9, r0, r4
 800cc34:	d1e5      	bne.n	800cc02 <__cvt+0x6a>
 800cc36:	7803      	ldrb	r3, [r0, #0]
 800cc38:	2b30      	cmp	r3, #48	@ 0x30
 800cc3a:	d10a      	bne.n	800cc52 <__cvt+0xba>
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2300      	movs	r3, #0
 800cc40:	4630      	mov	r0, r6
 800cc42:	4639      	mov	r1, r7
 800cc44:	f7f3 ff50 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc48:	b918      	cbnz	r0, 800cc52 <__cvt+0xba>
 800cc4a:	f1c4 0401 	rsb	r4, r4, #1
 800cc4e:	f8ca 4000 	str.w	r4, [sl]
 800cc52:	f8da 3000 	ldr.w	r3, [sl]
 800cc56:	4499      	add	r9, r3
 800cc58:	e7d3      	b.n	800cc02 <__cvt+0x6a>
 800cc5a:	1c59      	adds	r1, r3, #1
 800cc5c:	9103      	str	r1, [sp, #12]
 800cc5e:	701a      	strb	r2, [r3, #0]
 800cc60:	e7d9      	b.n	800cc16 <__cvt+0x7e>

0800cc62 <__exponent>:
 800cc62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc64:	2900      	cmp	r1, #0
 800cc66:	7002      	strb	r2, [r0, #0]
 800cc68:	bfba      	itte	lt
 800cc6a:	4249      	neglt	r1, r1
 800cc6c:	232d      	movlt	r3, #45	@ 0x2d
 800cc6e:	232b      	movge	r3, #43	@ 0x2b
 800cc70:	2909      	cmp	r1, #9
 800cc72:	7043      	strb	r3, [r0, #1]
 800cc74:	dd28      	ble.n	800ccc8 <__exponent+0x66>
 800cc76:	f10d 0307 	add.w	r3, sp, #7
 800cc7a:	270a      	movs	r7, #10
 800cc7c:	461d      	mov	r5, r3
 800cc7e:	461a      	mov	r2, r3
 800cc80:	3b01      	subs	r3, #1
 800cc82:	fbb1 f6f7 	udiv	r6, r1, r7
 800cc86:	fb07 1416 	mls	r4, r7, r6, r1
 800cc8a:	3430      	adds	r4, #48	@ 0x30
 800cc8c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cc90:	460c      	mov	r4, r1
 800cc92:	4631      	mov	r1, r6
 800cc94:	2c63      	cmp	r4, #99	@ 0x63
 800cc96:	dcf2      	bgt.n	800cc7e <__exponent+0x1c>
 800cc98:	3130      	adds	r1, #48	@ 0x30
 800cc9a:	1e94      	subs	r4, r2, #2
 800cc9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cca0:	1c41      	adds	r1, r0, #1
 800cca2:	4623      	mov	r3, r4
 800cca4:	42ab      	cmp	r3, r5
 800cca6:	d30a      	bcc.n	800ccbe <__exponent+0x5c>
 800cca8:	f10d 0309 	add.w	r3, sp, #9
 800ccac:	1a9b      	subs	r3, r3, r2
 800ccae:	42ac      	cmp	r4, r5
 800ccb0:	bf88      	it	hi
 800ccb2:	2300      	movhi	r3, #0
 800ccb4:	3302      	adds	r3, #2
 800ccb6:	4403      	add	r3, r0
 800ccb8:	1a18      	subs	r0, r3, r0
 800ccba:	b003      	add	sp, #12
 800ccbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccbe:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ccc2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ccc6:	e7ed      	b.n	800cca4 <__exponent+0x42>
 800ccc8:	2330      	movs	r3, #48	@ 0x30
 800ccca:	3130      	adds	r1, #48	@ 0x30
 800cccc:	7083      	strb	r3, [r0, #2]
 800ccce:	1d03      	adds	r3, r0, #4
 800ccd0:	70c1      	strb	r1, [r0, #3]
 800ccd2:	e7f1      	b.n	800ccb8 <__exponent+0x56>

0800ccd4 <_printf_float>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	b08d      	sub	sp, #52	@ 0x34
 800ccda:	460c      	mov	r4, r1
 800ccdc:	4616      	mov	r6, r2
 800ccde:	461f      	mov	r7, r3
 800cce0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cce4:	4605      	mov	r5, r0
 800cce6:	f000 fcdf 	bl	800d6a8 <_localeconv_r>
 800ccea:	6803      	ldr	r3, [r0, #0]
 800ccec:	4618      	mov	r0, r3
 800ccee:	9304      	str	r3, [sp, #16]
 800ccf0:	f7f3 face 	bl	8000290 <strlen>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	9005      	str	r0, [sp, #20]
 800ccf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccfa:	f8d8 3000 	ldr.w	r3, [r8]
 800ccfe:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd02:	3307      	adds	r3, #7
 800cd04:	f8d4 b000 	ldr.w	fp, [r4]
 800cd08:	f023 0307 	bic.w	r3, r3, #7
 800cd0c:	f103 0208 	add.w	r2, r3, #8
 800cd10:	f8c8 2000 	str.w	r2, [r8]
 800cd14:	f04f 32ff 	mov.w	r2, #4294967295
 800cd18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cd20:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd24:	9307      	str	r3, [sp, #28]
 800cd26:	4b9d      	ldr	r3, [pc, #628]	@ (800cf9c <_printf_float+0x2c8>)
 800cd28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cd30:	f7f3 ff0c 	bl	8000b4c <__aeabi_dcmpun>
 800cd34:	bb70      	cbnz	r0, 800cd94 <_printf_float+0xc0>
 800cd36:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3a:	4b98      	ldr	r3, [pc, #608]	@ (800cf9c <_printf_float+0x2c8>)
 800cd3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd40:	f7f3 fee6 	bl	8000b10 <__aeabi_dcmple>
 800cd44:	bb30      	cbnz	r0, 800cd94 <_printf_float+0xc0>
 800cd46:	2200      	movs	r2, #0
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	4649      	mov	r1, r9
 800cd4e:	f7f3 fed5 	bl	8000afc <__aeabi_dcmplt>
 800cd52:	b110      	cbz	r0, 800cd5a <_printf_float+0x86>
 800cd54:	232d      	movs	r3, #45	@ 0x2d
 800cd56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd5a:	4a91      	ldr	r2, [pc, #580]	@ (800cfa0 <_printf_float+0x2cc>)
 800cd5c:	4b91      	ldr	r3, [pc, #580]	@ (800cfa4 <_printf_float+0x2d0>)
 800cd5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cd62:	bf94      	ite	ls
 800cd64:	4690      	movls	r8, r2
 800cd66:	4698      	movhi	r8, r3
 800cd68:	2303      	movs	r3, #3
 800cd6a:	f04f 0900 	mov.w	r9, #0
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	f02b 0304 	bic.w	r3, fp, #4
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	4633      	mov	r3, r6
 800cd78:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	9700      	str	r7, [sp, #0]
 800cd80:	f000 f9d2 	bl	800d128 <_printf_common>
 800cd84:	3001      	adds	r0, #1
 800cd86:	f040 808d 	bne.w	800cea4 <_printf_float+0x1d0>
 800cd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8e:	b00d      	add	sp, #52	@ 0x34
 800cd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd94:	4642      	mov	r2, r8
 800cd96:	464b      	mov	r3, r9
 800cd98:	4640      	mov	r0, r8
 800cd9a:	4649      	mov	r1, r9
 800cd9c:	f7f3 fed6 	bl	8000b4c <__aeabi_dcmpun>
 800cda0:	b140      	cbz	r0, 800cdb4 <_printf_float+0xe0>
 800cda2:	464b      	mov	r3, r9
 800cda4:	4a80      	ldr	r2, [pc, #512]	@ (800cfa8 <_printf_float+0x2d4>)
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bfbc      	itt	lt
 800cdaa:	232d      	movlt	r3, #45	@ 0x2d
 800cdac:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cdb0:	4b7e      	ldr	r3, [pc, #504]	@ (800cfac <_printf_float+0x2d8>)
 800cdb2:	e7d4      	b.n	800cd5e <_printf_float+0x8a>
 800cdb4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cdb8:	6863      	ldr	r3, [r4, #4]
 800cdba:	9206      	str	r2, [sp, #24]
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	d13b      	bne.n	800ce38 <_printf_float+0x164>
 800cdc0:	2306      	movs	r3, #6
 800cdc2:	6063      	str	r3, [r4, #4]
 800cdc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cdc8:	2300      	movs	r3, #0
 800cdca:	4628      	mov	r0, r5
 800cdcc:	6022      	str	r2, [r4, #0]
 800cdce:	9303      	str	r3, [sp, #12]
 800cdd0:	ab0a      	add	r3, sp, #40	@ 0x28
 800cdd2:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cdd6:	ab09      	add	r3, sp, #36	@ 0x24
 800cdd8:	ec49 8b10 	vmov	d0, r8, r9
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cde2:	6861      	ldr	r1, [r4, #4]
 800cde4:	f7ff fed8 	bl	800cb98 <__cvt>
 800cde8:	9b06      	ldr	r3, [sp, #24]
 800cdea:	4680      	mov	r8, r0
 800cdec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cdee:	2b47      	cmp	r3, #71	@ 0x47
 800cdf0:	d129      	bne.n	800ce46 <_printf_float+0x172>
 800cdf2:	1cc8      	adds	r0, r1, #3
 800cdf4:	db02      	blt.n	800cdfc <_printf_float+0x128>
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	4299      	cmp	r1, r3
 800cdfa:	dd41      	ble.n	800ce80 <_printf_float+0x1ac>
 800cdfc:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce00:	fa5f fa8a 	uxtb.w	sl, sl
 800ce04:	3901      	subs	r1, #1
 800ce06:	4652      	mov	r2, sl
 800ce08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce0e:	f7ff ff28 	bl	800cc62 <__exponent>
 800ce12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce14:	4681      	mov	r9, r0
 800ce16:	1813      	adds	r3, r2, r0
 800ce18:	2a01      	cmp	r2, #1
 800ce1a:	6123      	str	r3, [r4, #16]
 800ce1c:	dc02      	bgt.n	800ce24 <_printf_float+0x150>
 800ce1e:	6822      	ldr	r2, [r4, #0]
 800ce20:	07d2      	lsls	r2, r2, #31
 800ce22:	d501      	bpl.n	800ce28 <_printf_float+0x154>
 800ce24:	3301      	adds	r3, #1
 800ce26:	6123      	str	r3, [r4, #16]
 800ce28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d0a2      	beq.n	800cd76 <_printf_float+0xa2>
 800ce30:	232d      	movs	r3, #45	@ 0x2d
 800ce32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce36:	e79e      	b.n	800cd76 <_printf_float+0xa2>
 800ce38:	9a06      	ldr	r2, [sp, #24]
 800ce3a:	2a47      	cmp	r2, #71	@ 0x47
 800ce3c:	d1c2      	bne.n	800cdc4 <_printf_float+0xf0>
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1c0      	bne.n	800cdc4 <_printf_float+0xf0>
 800ce42:	2301      	movs	r3, #1
 800ce44:	e7bd      	b.n	800cdc2 <_printf_float+0xee>
 800ce46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce4a:	d9db      	bls.n	800ce04 <_printf_float+0x130>
 800ce4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ce50:	d118      	bne.n	800ce84 <_printf_float+0x1b0>
 800ce52:	2900      	cmp	r1, #0
 800ce54:	6863      	ldr	r3, [r4, #4]
 800ce56:	dd0b      	ble.n	800ce70 <_printf_float+0x19c>
 800ce58:	6121      	str	r1, [r4, #16]
 800ce5a:	b913      	cbnz	r3, 800ce62 <_printf_float+0x18e>
 800ce5c:	6822      	ldr	r2, [r4, #0]
 800ce5e:	07d0      	lsls	r0, r2, #31
 800ce60:	d502      	bpl.n	800ce68 <_printf_float+0x194>
 800ce62:	3301      	adds	r3, #1
 800ce64:	440b      	add	r3, r1
 800ce66:	6123      	str	r3, [r4, #16]
 800ce68:	f04f 0900 	mov.w	r9, #0
 800ce6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ce6e:	e7db      	b.n	800ce28 <_printf_float+0x154>
 800ce70:	b913      	cbnz	r3, 800ce78 <_printf_float+0x1a4>
 800ce72:	6822      	ldr	r2, [r4, #0]
 800ce74:	07d2      	lsls	r2, r2, #31
 800ce76:	d501      	bpl.n	800ce7c <_printf_float+0x1a8>
 800ce78:	3302      	adds	r3, #2
 800ce7a:	e7f4      	b.n	800ce66 <_printf_float+0x192>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e7f2      	b.n	800ce66 <_printf_float+0x192>
 800ce80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ce84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce86:	4299      	cmp	r1, r3
 800ce88:	db05      	blt.n	800ce96 <_printf_float+0x1c2>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	6121      	str	r1, [r4, #16]
 800ce8e:	07d8      	lsls	r0, r3, #31
 800ce90:	d5ea      	bpl.n	800ce68 <_printf_float+0x194>
 800ce92:	1c4b      	adds	r3, r1, #1
 800ce94:	e7e7      	b.n	800ce66 <_printf_float+0x192>
 800ce96:	2900      	cmp	r1, #0
 800ce98:	bfd4      	ite	le
 800ce9a:	f1c1 0202 	rsble	r2, r1, #2
 800ce9e:	2201      	movgt	r2, #1
 800cea0:	4413      	add	r3, r2
 800cea2:	e7e0      	b.n	800ce66 <_printf_float+0x192>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	055a      	lsls	r2, r3, #21
 800cea8:	d407      	bmi.n	800ceba <_printf_float+0x1e6>
 800ceaa:	6923      	ldr	r3, [r4, #16]
 800ceac:	4642      	mov	r2, r8
 800ceae:	4631      	mov	r1, r6
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	47b8      	blx	r7
 800ceb4:	3001      	adds	r0, #1
 800ceb6:	d12b      	bne.n	800cf10 <_printf_float+0x23c>
 800ceb8:	e767      	b.n	800cd8a <_printf_float+0xb6>
 800ceba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cebe:	f240 80dd 	bls.w	800d07c <_printf_float+0x3a8>
 800cec2:	2200      	movs	r2, #0
 800cec4:	2300      	movs	r3, #0
 800cec6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ceca:	f7f3 fe0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800cece:	2800      	cmp	r0, #0
 800ced0:	d033      	beq.n	800cf3a <_printf_float+0x266>
 800ced2:	2301      	movs	r3, #1
 800ced4:	4a36      	ldr	r2, [pc, #216]	@ (800cfb0 <_printf_float+0x2dc>)
 800ced6:	4631      	mov	r1, r6
 800ced8:	4628      	mov	r0, r5
 800ceda:	47b8      	blx	r7
 800cedc:	3001      	adds	r0, #1
 800cede:	f43f af54 	beq.w	800cd8a <_printf_float+0xb6>
 800cee2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cee6:	4543      	cmp	r3, r8
 800cee8:	db02      	blt.n	800cef0 <_printf_float+0x21c>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	07d8      	lsls	r0, r3, #31
 800ceee:	d50f      	bpl.n	800cf10 <_printf_float+0x23c>
 800cef0:	4631      	mov	r1, r6
 800cef2:	4628      	mov	r0, r5
 800cef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cef8:	47b8      	blx	r7
 800cefa:	3001      	adds	r0, #1
 800cefc:	f43f af45 	beq.w	800cd8a <_printf_float+0xb6>
 800cf00:	f04f 0900 	mov.w	r9, #0
 800cf04:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf08:	f104 0a1a 	add.w	sl, r4, #26
 800cf0c:	45c8      	cmp	r8, r9
 800cf0e:	dc09      	bgt.n	800cf24 <_printf_float+0x250>
 800cf10:	6823      	ldr	r3, [r4, #0]
 800cf12:	079b      	lsls	r3, r3, #30
 800cf14:	f100 8103 	bmi.w	800d11e <_printf_float+0x44a>
 800cf18:	68e0      	ldr	r0, [r4, #12]
 800cf1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf1c:	4298      	cmp	r0, r3
 800cf1e:	bfb8      	it	lt
 800cf20:	4618      	movlt	r0, r3
 800cf22:	e734      	b.n	800cd8e <_printf_float+0xba>
 800cf24:	2301      	movs	r3, #1
 800cf26:	4652      	mov	r2, sl
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b8      	blx	r7
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f43f af2b 	beq.w	800cd8a <_printf_float+0xb6>
 800cf34:	f109 0901 	add.w	r9, r9, #1
 800cf38:	e7e8      	b.n	800cf0c <_printf_float+0x238>
 800cf3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	dc39      	bgt.n	800cfb4 <_printf_float+0x2e0>
 800cf40:	2301      	movs	r3, #1
 800cf42:	4a1b      	ldr	r2, [pc, #108]	@ (800cfb0 <_printf_float+0x2dc>)
 800cf44:	4631      	mov	r1, r6
 800cf46:	4628      	mov	r0, r5
 800cf48:	47b8      	blx	r7
 800cf4a:	3001      	adds	r0, #1
 800cf4c:	f43f af1d 	beq.w	800cd8a <_printf_float+0xb6>
 800cf50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cf54:	ea59 0303 	orrs.w	r3, r9, r3
 800cf58:	d102      	bne.n	800cf60 <_printf_float+0x28c>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	07d9      	lsls	r1, r3, #31
 800cf5e:	d5d7      	bpl.n	800cf10 <_printf_float+0x23c>
 800cf60:	4631      	mov	r1, r6
 800cf62:	4628      	mov	r0, r5
 800cf64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf68:	47b8      	blx	r7
 800cf6a:	3001      	adds	r0, #1
 800cf6c:	f43f af0d 	beq.w	800cd8a <_printf_float+0xb6>
 800cf70:	f04f 0a00 	mov.w	sl, #0
 800cf74:	f104 0b1a 	add.w	fp, r4, #26
 800cf78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf7a:	425b      	negs	r3, r3
 800cf7c:	4553      	cmp	r3, sl
 800cf7e:	dc01      	bgt.n	800cf84 <_printf_float+0x2b0>
 800cf80:	464b      	mov	r3, r9
 800cf82:	e793      	b.n	800ceac <_printf_float+0x1d8>
 800cf84:	2301      	movs	r3, #1
 800cf86:	465a      	mov	r2, fp
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b8      	blx	r7
 800cf8e:	3001      	adds	r0, #1
 800cf90:	f43f aefb 	beq.w	800cd8a <_printf_float+0xb6>
 800cf94:	f10a 0a01 	add.w	sl, sl, #1
 800cf98:	e7ee      	b.n	800cf78 <_printf_float+0x2a4>
 800cf9a:	bf00      	nop
 800cf9c:	7fefffff 	.word	0x7fefffff
 800cfa0:	08011334 	.word	0x08011334
 800cfa4:	08011338 	.word	0x08011338
 800cfa8:	0801133c 	.word	0x0801133c
 800cfac:	08011340 	.word	0x08011340
 800cfb0:	08011344 	.word	0x08011344
 800cfb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfba:	4553      	cmp	r3, sl
 800cfbc:	bfa8      	it	ge
 800cfbe:	4653      	movge	r3, sl
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	4699      	mov	r9, r3
 800cfc4:	dc36      	bgt.n	800d034 <_printf_float+0x360>
 800cfc6:	f04f 0b00 	mov.w	fp, #0
 800cfca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfce:	f104 021a 	add.w	r2, r4, #26
 800cfd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfd4:	9306      	str	r3, [sp, #24]
 800cfd6:	eba3 0309 	sub.w	r3, r3, r9
 800cfda:	455b      	cmp	r3, fp
 800cfdc:	dc31      	bgt.n	800d042 <_printf_float+0x36e>
 800cfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe0:	459a      	cmp	sl, r3
 800cfe2:	dc3a      	bgt.n	800d05a <_printf_float+0x386>
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	07da      	lsls	r2, r3, #31
 800cfe8:	d437      	bmi.n	800d05a <_printf_float+0x386>
 800cfea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfec:	ebaa 0903 	sub.w	r9, sl, r3
 800cff0:	9b06      	ldr	r3, [sp, #24]
 800cff2:	ebaa 0303 	sub.w	r3, sl, r3
 800cff6:	4599      	cmp	r9, r3
 800cff8:	bfa8      	it	ge
 800cffa:	4699      	movge	r9, r3
 800cffc:	f1b9 0f00 	cmp.w	r9, #0
 800d000:	dc33      	bgt.n	800d06a <_printf_float+0x396>
 800d002:	f04f 0800 	mov.w	r8, #0
 800d006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d00a:	f104 0b1a 	add.w	fp, r4, #26
 800d00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d010:	ebaa 0303 	sub.w	r3, sl, r3
 800d014:	eba3 0309 	sub.w	r3, r3, r9
 800d018:	4543      	cmp	r3, r8
 800d01a:	f77f af79 	ble.w	800cf10 <_printf_float+0x23c>
 800d01e:	2301      	movs	r3, #1
 800d020:	465a      	mov	r2, fp
 800d022:	4631      	mov	r1, r6
 800d024:	4628      	mov	r0, r5
 800d026:	47b8      	blx	r7
 800d028:	3001      	adds	r0, #1
 800d02a:	f43f aeae 	beq.w	800cd8a <_printf_float+0xb6>
 800d02e:	f108 0801 	add.w	r8, r8, #1
 800d032:	e7ec      	b.n	800d00e <_printf_float+0x33a>
 800d034:	4642      	mov	r2, r8
 800d036:	4631      	mov	r1, r6
 800d038:	4628      	mov	r0, r5
 800d03a:	47b8      	blx	r7
 800d03c:	3001      	adds	r0, #1
 800d03e:	d1c2      	bne.n	800cfc6 <_printf_float+0x2f2>
 800d040:	e6a3      	b.n	800cd8a <_printf_float+0xb6>
 800d042:	2301      	movs	r3, #1
 800d044:	4631      	mov	r1, r6
 800d046:	4628      	mov	r0, r5
 800d048:	9206      	str	r2, [sp, #24]
 800d04a:	47b8      	blx	r7
 800d04c:	3001      	adds	r0, #1
 800d04e:	f43f ae9c 	beq.w	800cd8a <_printf_float+0xb6>
 800d052:	f10b 0b01 	add.w	fp, fp, #1
 800d056:	9a06      	ldr	r2, [sp, #24]
 800d058:	e7bb      	b.n	800cfd2 <_printf_float+0x2fe>
 800d05a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d05e:	4631      	mov	r1, r6
 800d060:	4628      	mov	r0, r5
 800d062:	47b8      	blx	r7
 800d064:	3001      	adds	r0, #1
 800d066:	d1c0      	bne.n	800cfea <_printf_float+0x316>
 800d068:	e68f      	b.n	800cd8a <_printf_float+0xb6>
 800d06a:	9a06      	ldr	r2, [sp, #24]
 800d06c:	464b      	mov	r3, r9
 800d06e:	4631      	mov	r1, r6
 800d070:	4628      	mov	r0, r5
 800d072:	4442      	add	r2, r8
 800d074:	47b8      	blx	r7
 800d076:	3001      	adds	r0, #1
 800d078:	d1c3      	bne.n	800d002 <_printf_float+0x32e>
 800d07a:	e686      	b.n	800cd8a <_printf_float+0xb6>
 800d07c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d080:	f1ba 0f01 	cmp.w	sl, #1
 800d084:	dc01      	bgt.n	800d08a <_printf_float+0x3b6>
 800d086:	07db      	lsls	r3, r3, #31
 800d088:	d536      	bpl.n	800d0f8 <_printf_float+0x424>
 800d08a:	2301      	movs	r3, #1
 800d08c:	4642      	mov	r2, r8
 800d08e:	4631      	mov	r1, r6
 800d090:	4628      	mov	r0, r5
 800d092:	47b8      	blx	r7
 800d094:	3001      	adds	r0, #1
 800d096:	f43f ae78 	beq.w	800cd8a <_printf_float+0xb6>
 800d09a:	4631      	mov	r1, r6
 800d09c:	4628      	mov	r0, r5
 800d09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0a2:	47b8      	blx	r7
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	f43f ae70 	beq.w	800cd8a <_printf_float+0xb6>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d0b6:	f7f3 fd17 	bl	8000ae8 <__aeabi_dcmpeq>
 800d0ba:	b9c0      	cbnz	r0, 800d0ee <_printf_float+0x41a>
 800d0bc:	4653      	mov	r3, sl
 800d0be:	f108 0201 	add.w	r2, r8, #1
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	47b8      	blx	r7
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	d10c      	bne.n	800d0e6 <_printf_float+0x412>
 800d0cc:	e65d      	b.n	800cd8a <_printf_float+0xb6>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	465a      	mov	r2, fp
 800d0d2:	4631      	mov	r1, r6
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	47b8      	blx	r7
 800d0d8:	3001      	adds	r0, #1
 800d0da:	f43f ae56 	beq.w	800cd8a <_printf_float+0xb6>
 800d0de:	f108 0801 	add.w	r8, r8, #1
 800d0e2:	45d0      	cmp	r8, sl
 800d0e4:	dbf3      	blt.n	800d0ce <_printf_float+0x3fa>
 800d0e6:	464b      	mov	r3, r9
 800d0e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d0ec:	e6df      	b.n	800ceae <_printf_float+0x1da>
 800d0ee:	f04f 0800 	mov.w	r8, #0
 800d0f2:	f104 0b1a 	add.w	fp, r4, #26
 800d0f6:	e7f4      	b.n	800d0e2 <_printf_float+0x40e>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	4642      	mov	r2, r8
 800d0fc:	e7e1      	b.n	800d0c2 <_printf_float+0x3ee>
 800d0fe:	2301      	movs	r3, #1
 800d100:	464a      	mov	r2, r9
 800d102:	4631      	mov	r1, r6
 800d104:	4628      	mov	r0, r5
 800d106:	47b8      	blx	r7
 800d108:	3001      	adds	r0, #1
 800d10a:	f43f ae3e 	beq.w	800cd8a <_printf_float+0xb6>
 800d10e:	f108 0801 	add.w	r8, r8, #1
 800d112:	68e3      	ldr	r3, [r4, #12]
 800d114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d116:	1a5b      	subs	r3, r3, r1
 800d118:	4543      	cmp	r3, r8
 800d11a:	dcf0      	bgt.n	800d0fe <_printf_float+0x42a>
 800d11c:	e6fc      	b.n	800cf18 <_printf_float+0x244>
 800d11e:	f04f 0800 	mov.w	r8, #0
 800d122:	f104 0919 	add.w	r9, r4, #25
 800d126:	e7f4      	b.n	800d112 <_printf_float+0x43e>

0800d128 <_printf_common>:
 800d128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d12c:	4616      	mov	r6, r2
 800d12e:	4698      	mov	r8, r3
 800d130:	688a      	ldr	r2, [r1, #8]
 800d132:	4607      	mov	r7, r0
 800d134:	690b      	ldr	r3, [r1, #16]
 800d136:	460c      	mov	r4, r1
 800d138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d13c:	4293      	cmp	r3, r2
 800d13e:	bfb8      	it	lt
 800d140:	4613      	movlt	r3, r2
 800d142:	6033      	str	r3, [r6, #0]
 800d144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d148:	b10a      	cbz	r2, 800d14e <_printf_common+0x26>
 800d14a:	3301      	adds	r3, #1
 800d14c:	6033      	str	r3, [r6, #0]
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	0699      	lsls	r1, r3, #26
 800d152:	bf42      	ittt	mi
 800d154:	6833      	ldrmi	r3, [r6, #0]
 800d156:	3302      	addmi	r3, #2
 800d158:	6033      	strmi	r3, [r6, #0]
 800d15a:	6825      	ldr	r5, [r4, #0]
 800d15c:	f015 0506 	ands.w	r5, r5, #6
 800d160:	d106      	bne.n	800d170 <_printf_common+0x48>
 800d162:	f104 0a19 	add.w	sl, r4, #25
 800d166:	68e3      	ldr	r3, [r4, #12]
 800d168:	6832      	ldr	r2, [r6, #0]
 800d16a:	1a9b      	subs	r3, r3, r2
 800d16c:	42ab      	cmp	r3, r5
 800d16e:	dc2b      	bgt.n	800d1c8 <_printf_common+0xa0>
 800d170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d174:	6822      	ldr	r2, [r4, #0]
 800d176:	3b00      	subs	r3, #0
 800d178:	bf18      	it	ne
 800d17a:	2301      	movne	r3, #1
 800d17c:	0692      	lsls	r2, r2, #26
 800d17e:	d430      	bmi.n	800d1e2 <_printf_common+0xba>
 800d180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d184:	4641      	mov	r1, r8
 800d186:	4638      	mov	r0, r7
 800d188:	47c8      	blx	r9
 800d18a:	3001      	adds	r0, #1
 800d18c:	d023      	beq.n	800d1d6 <_printf_common+0xae>
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	341a      	adds	r4, #26
 800d192:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d196:	f003 0306 	and.w	r3, r3, #6
 800d19a:	2b04      	cmp	r3, #4
 800d19c:	bf0a      	itet	eq
 800d19e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d1a2:	2500      	movne	r5, #0
 800d1a4:	6833      	ldreq	r3, [r6, #0]
 800d1a6:	f04f 0600 	mov.w	r6, #0
 800d1aa:	bf08      	it	eq
 800d1ac:	1aed      	subeq	r5, r5, r3
 800d1ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d1b2:	bf08      	it	eq
 800d1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	bfc4      	itt	gt
 800d1bc:	1a9b      	subgt	r3, r3, r2
 800d1be:	18ed      	addgt	r5, r5, r3
 800d1c0:	42b5      	cmp	r5, r6
 800d1c2:	d11a      	bne.n	800d1fa <_printf_common+0xd2>
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	e008      	b.n	800d1da <_printf_common+0xb2>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	4652      	mov	r2, sl
 800d1cc:	4641      	mov	r1, r8
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	47c8      	blx	r9
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	d103      	bne.n	800d1de <_printf_common+0xb6>
 800d1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1de:	3501      	adds	r5, #1
 800d1e0:	e7c1      	b.n	800d166 <_printf_common+0x3e>
 800d1e2:	18e1      	adds	r1, r4, r3
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	2030      	movs	r0, #48	@ 0x30
 800d1e8:	3302      	adds	r3, #2
 800d1ea:	4422      	add	r2, r4
 800d1ec:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1f8:	e7c2      	b.n	800d180 <_printf_common+0x58>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4641      	mov	r1, r8
 800d200:	4638      	mov	r0, r7
 800d202:	47c8      	blx	r9
 800d204:	3001      	adds	r0, #1
 800d206:	d0e6      	beq.n	800d1d6 <_printf_common+0xae>
 800d208:	3601      	adds	r6, #1
 800d20a:	e7d9      	b.n	800d1c0 <_printf_common+0x98>

0800d20c <_printf_i>:
 800d20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d210:	7e0f      	ldrb	r7, [r1, #24]
 800d212:	4691      	mov	r9, r2
 800d214:	4680      	mov	r8, r0
 800d216:	460c      	mov	r4, r1
 800d218:	2f78      	cmp	r7, #120	@ 0x78
 800d21a:	469a      	mov	sl, r3
 800d21c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d21e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d222:	d807      	bhi.n	800d234 <_printf_i+0x28>
 800d224:	2f62      	cmp	r7, #98	@ 0x62
 800d226:	d80a      	bhi.n	800d23e <_printf_i+0x32>
 800d228:	2f00      	cmp	r7, #0
 800d22a:	f000 80d2 	beq.w	800d3d2 <_printf_i+0x1c6>
 800d22e:	2f58      	cmp	r7, #88	@ 0x58
 800d230:	f000 80b9 	beq.w	800d3a6 <_printf_i+0x19a>
 800d234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d238:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d23c:	e03a      	b.n	800d2b4 <_printf_i+0xa8>
 800d23e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d242:	2b15      	cmp	r3, #21
 800d244:	d8f6      	bhi.n	800d234 <_printf_i+0x28>
 800d246:	a101      	add	r1, pc, #4	@ (adr r1, 800d24c <_printf_i+0x40>)
 800d248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d24c:	0800d2a5 	.word	0x0800d2a5
 800d250:	0800d2b9 	.word	0x0800d2b9
 800d254:	0800d235 	.word	0x0800d235
 800d258:	0800d235 	.word	0x0800d235
 800d25c:	0800d235 	.word	0x0800d235
 800d260:	0800d235 	.word	0x0800d235
 800d264:	0800d2b9 	.word	0x0800d2b9
 800d268:	0800d235 	.word	0x0800d235
 800d26c:	0800d235 	.word	0x0800d235
 800d270:	0800d235 	.word	0x0800d235
 800d274:	0800d235 	.word	0x0800d235
 800d278:	0800d3b9 	.word	0x0800d3b9
 800d27c:	0800d2e3 	.word	0x0800d2e3
 800d280:	0800d373 	.word	0x0800d373
 800d284:	0800d235 	.word	0x0800d235
 800d288:	0800d235 	.word	0x0800d235
 800d28c:	0800d3db 	.word	0x0800d3db
 800d290:	0800d235 	.word	0x0800d235
 800d294:	0800d2e3 	.word	0x0800d2e3
 800d298:	0800d235 	.word	0x0800d235
 800d29c:	0800d235 	.word	0x0800d235
 800d2a0:	0800d37b 	.word	0x0800d37b
 800d2a4:	6833      	ldr	r3, [r6, #0]
 800d2a6:	1d1a      	adds	r2, r3, #4
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6032      	str	r2, [r6, #0]
 800d2ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e09d      	b.n	800d3f4 <_printf_i+0x1e8>
 800d2b8:	6833      	ldr	r3, [r6, #0]
 800d2ba:	6820      	ldr	r0, [r4, #0]
 800d2bc:	1d19      	adds	r1, r3, #4
 800d2be:	6031      	str	r1, [r6, #0]
 800d2c0:	0606      	lsls	r6, r0, #24
 800d2c2:	d501      	bpl.n	800d2c8 <_printf_i+0xbc>
 800d2c4:	681d      	ldr	r5, [r3, #0]
 800d2c6:	e003      	b.n	800d2d0 <_printf_i+0xc4>
 800d2c8:	0645      	lsls	r5, r0, #25
 800d2ca:	d5fb      	bpl.n	800d2c4 <_printf_i+0xb8>
 800d2cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2d0:	2d00      	cmp	r5, #0
 800d2d2:	da03      	bge.n	800d2dc <_printf_i+0xd0>
 800d2d4:	232d      	movs	r3, #45	@ 0x2d
 800d2d6:	426d      	negs	r5, r5
 800d2d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2dc:	4859      	ldr	r0, [pc, #356]	@ (800d444 <_printf_i+0x238>)
 800d2de:	230a      	movs	r3, #10
 800d2e0:	e011      	b.n	800d306 <_printf_i+0xfa>
 800d2e2:	6821      	ldr	r1, [r4, #0]
 800d2e4:	6833      	ldr	r3, [r6, #0]
 800d2e6:	0608      	lsls	r0, r1, #24
 800d2e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d2ec:	d402      	bmi.n	800d2f4 <_printf_i+0xe8>
 800d2ee:	0649      	lsls	r1, r1, #25
 800d2f0:	bf48      	it	mi
 800d2f2:	b2ad      	uxthmi	r5, r5
 800d2f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2f6:	6033      	str	r3, [r6, #0]
 800d2f8:	4852      	ldr	r0, [pc, #328]	@ (800d444 <_printf_i+0x238>)
 800d2fa:	bf14      	ite	ne
 800d2fc:	230a      	movne	r3, #10
 800d2fe:	2308      	moveq	r3, #8
 800d300:	2100      	movs	r1, #0
 800d302:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d306:	6866      	ldr	r6, [r4, #4]
 800d308:	2e00      	cmp	r6, #0
 800d30a:	60a6      	str	r6, [r4, #8]
 800d30c:	bfa2      	ittt	ge
 800d30e:	6821      	ldrge	r1, [r4, #0]
 800d310:	f021 0104 	bicge.w	r1, r1, #4
 800d314:	6021      	strge	r1, [r4, #0]
 800d316:	b90d      	cbnz	r5, 800d31c <_printf_i+0x110>
 800d318:	2e00      	cmp	r6, #0
 800d31a:	d04b      	beq.n	800d3b4 <_printf_i+0x1a8>
 800d31c:	4616      	mov	r6, r2
 800d31e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d322:	fb03 5711 	mls	r7, r3, r1, r5
 800d326:	5dc7      	ldrb	r7, [r0, r7]
 800d328:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d32c:	462f      	mov	r7, r5
 800d32e:	460d      	mov	r5, r1
 800d330:	42bb      	cmp	r3, r7
 800d332:	d9f4      	bls.n	800d31e <_printf_i+0x112>
 800d334:	2b08      	cmp	r3, #8
 800d336:	d10b      	bne.n	800d350 <_printf_i+0x144>
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	07df      	lsls	r7, r3, #31
 800d33c:	d508      	bpl.n	800d350 <_printf_i+0x144>
 800d33e:	6923      	ldr	r3, [r4, #16]
 800d340:	6861      	ldr	r1, [r4, #4]
 800d342:	4299      	cmp	r1, r3
 800d344:	bfde      	ittt	le
 800d346:	2330      	movle	r3, #48	@ 0x30
 800d348:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d34c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d350:	1b92      	subs	r2, r2, r6
 800d352:	6122      	str	r2, [r4, #16]
 800d354:	464b      	mov	r3, r9
 800d356:	aa03      	add	r2, sp, #12
 800d358:	4621      	mov	r1, r4
 800d35a:	4640      	mov	r0, r8
 800d35c:	f8cd a000 	str.w	sl, [sp]
 800d360:	f7ff fee2 	bl	800d128 <_printf_common>
 800d364:	3001      	adds	r0, #1
 800d366:	d14a      	bne.n	800d3fe <_printf_i+0x1f2>
 800d368:	f04f 30ff 	mov.w	r0, #4294967295
 800d36c:	b004      	add	sp, #16
 800d36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	f043 0320 	orr.w	r3, r3, #32
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	2778      	movs	r7, #120	@ 0x78
 800d37c:	4832      	ldr	r0, [pc, #200]	@ (800d448 <_printf_i+0x23c>)
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d384:	061f      	lsls	r7, r3, #24
 800d386:	6831      	ldr	r1, [r6, #0]
 800d388:	f851 5b04 	ldr.w	r5, [r1], #4
 800d38c:	d402      	bmi.n	800d394 <_printf_i+0x188>
 800d38e:	065f      	lsls	r7, r3, #25
 800d390:	bf48      	it	mi
 800d392:	b2ad      	uxthmi	r5, r5
 800d394:	6031      	str	r1, [r6, #0]
 800d396:	07d9      	lsls	r1, r3, #31
 800d398:	bf44      	itt	mi
 800d39a:	f043 0320 	orrmi.w	r3, r3, #32
 800d39e:	6023      	strmi	r3, [r4, #0]
 800d3a0:	b11d      	cbz	r5, 800d3aa <_printf_i+0x19e>
 800d3a2:	2310      	movs	r3, #16
 800d3a4:	e7ac      	b.n	800d300 <_printf_i+0xf4>
 800d3a6:	4827      	ldr	r0, [pc, #156]	@ (800d444 <_printf_i+0x238>)
 800d3a8:	e7e9      	b.n	800d37e <_printf_i+0x172>
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	f023 0320 	bic.w	r3, r3, #32
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	e7f6      	b.n	800d3a2 <_printf_i+0x196>
 800d3b4:	4616      	mov	r6, r2
 800d3b6:	e7bd      	b.n	800d334 <_printf_i+0x128>
 800d3b8:	6833      	ldr	r3, [r6, #0]
 800d3ba:	6825      	ldr	r5, [r4, #0]
 800d3bc:	1d18      	adds	r0, r3, #4
 800d3be:	6961      	ldr	r1, [r4, #20]
 800d3c0:	6030      	str	r0, [r6, #0]
 800d3c2:	062e      	lsls	r6, r5, #24
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	d501      	bpl.n	800d3cc <_printf_i+0x1c0>
 800d3c8:	6019      	str	r1, [r3, #0]
 800d3ca:	e002      	b.n	800d3d2 <_printf_i+0x1c6>
 800d3cc:	0668      	lsls	r0, r5, #25
 800d3ce:	d5fb      	bpl.n	800d3c8 <_printf_i+0x1bc>
 800d3d0:	8019      	strh	r1, [r3, #0]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4616      	mov	r6, r2
 800d3d6:	6123      	str	r3, [r4, #16]
 800d3d8:	e7bc      	b.n	800d354 <_printf_i+0x148>
 800d3da:	6833      	ldr	r3, [r6, #0]
 800d3dc:	2100      	movs	r1, #0
 800d3de:	1d1a      	adds	r2, r3, #4
 800d3e0:	6032      	str	r2, [r6, #0]
 800d3e2:	681e      	ldr	r6, [r3, #0]
 800d3e4:	6862      	ldr	r2, [r4, #4]
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f000 f9d5 	bl	800d796 <memchr>
 800d3ec:	b108      	cbz	r0, 800d3f2 <_printf_i+0x1e6>
 800d3ee:	1b80      	subs	r0, r0, r6
 800d3f0:	6060      	str	r0, [r4, #4]
 800d3f2:	6863      	ldr	r3, [r4, #4]
 800d3f4:	6123      	str	r3, [r4, #16]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3fc:	e7aa      	b.n	800d354 <_printf_i+0x148>
 800d3fe:	6923      	ldr	r3, [r4, #16]
 800d400:	4632      	mov	r2, r6
 800d402:	4649      	mov	r1, r9
 800d404:	4640      	mov	r0, r8
 800d406:	47d0      	blx	sl
 800d408:	3001      	adds	r0, #1
 800d40a:	d0ad      	beq.n	800d368 <_printf_i+0x15c>
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	079b      	lsls	r3, r3, #30
 800d410:	d413      	bmi.n	800d43a <_printf_i+0x22e>
 800d412:	68e0      	ldr	r0, [r4, #12]
 800d414:	9b03      	ldr	r3, [sp, #12]
 800d416:	4298      	cmp	r0, r3
 800d418:	bfb8      	it	lt
 800d41a:	4618      	movlt	r0, r3
 800d41c:	e7a6      	b.n	800d36c <_printf_i+0x160>
 800d41e:	2301      	movs	r3, #1
 800d420:	4632      	mov	r2, r6
 800d422:	4649      	mov	r1, r9
 800d424:	4640      	mov	r0, r8
 800d426:	47d0      	blx	sl
 800d428:	3001      	adds	r0, #1
 800d42a:	d09d      	beq.n	800d368 <_printf_i+0x15c>
 800d42c:	3501      	adds	r5, #1
 800d42e:	68e3      	ldr	r3, [r4, #12]
 800d430:	9903      	ldr	r1, [sp, #12]
 800d432:	1a5b      	subs	r3, r3, r1
 800d434:	42ab      	cmp	r3, r5
 800d436:	dcf2      	bgt.n	800d41e <_printf_i+0x212>
 800d438:	e7eb      	b.n	800d412 <_printf_i+0x206>
 800d43a:	2500      	movs	r5, #0
 800d43c:	f104 0619 	add.w	r6, r4, #25
 800d440:	e7f5      	b.n	800d42e <_printf_i+0x222>
 800d442:	bf00      	nop
 800d444:	08011346 	.word	0x08011346
 800d448:	08011357 	.word	0x08011357

0800d44c <std>:
 800d44c:	2300      	movs	r3, #0
 800d44e:	b510      	push	{r4, lr}
 800d450:	4604      	mov	r4, r0
 800d452:	6083      	str	r3, [r0, #8]
 800d454:	8181      	strh	r1, [r0, #12]
 800d456:	4619      	mov	r1, r3
 800d458:	6643      	str	r3, [r0, #100]	@ 0x64
 800d45a:	81c2      	strh	r2, [r0, #14]
 800d45c:	2208      	movs	r2, #8
 800d45e:	6183      	str	r3, [r0, #24]
 800d460:	e9c0 3300 	strd	r3, r3, [r0]
 800d464:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d468:	305c      	adds	r0, #92	@ 0x5c
 800d46a:	f000 f914 	bl	800d696 <memset>
 800d46e:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a4 <std+0x58>)
 800d470:	6224      	str	r4, [r4, #32]
 800d472:	6263      	str	r3, [r4, #36]	@ 0x24
 800d474:	4b0c      	ldr	r3, [pc, #48]	@ (800d4a8 <std+0x5c>)
 800d476:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d478:	4b0c      	ldr	r3, [pc, #48]	@ (800d4ac <std+0x60>)
 800d47a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d47c:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b0 <std+0x64>)
 800d47e:	6323      	str	r3, [r4, #48]	@ 0x30
 800d480:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b4 <std+0x68>)
 800d482:	429c      	cmp	r4, r3
 800d484:	d006      	beq.n	800d494 <std+0x48>
 800d486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d48a:	4294      	cmp	r4, r2
 800d48c:	d002      	beq.n	800d494 <std+0x48>
 800d48e:	33d0      	adds	r3, #208	@ 0xd0
 800d490:	429c      	cmp	r4, r3
 800d492:	d105      	bne.n	800d4a0 <std+0x54>
 800d494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d49c:	f000 b978 	b.w	800d790 <__retarget_lock_init_recursive>
 800d4a0:	bd10      	pop	{r4, pc}
 800d4a2:	bf00      	nop
 800d4a4:	0800d611 	.word	0x0800d611
 800d4a8:	0800d633 	.word	0x0800d633
 800d4ac:	0800d66b 	.word	0x0800d66b
 800d4b0:	0800d68f 	.word	0x0800d68f
 800d4b4:	200289b8 	.word	0x200289b8

0800d4b8 <stdio_exit_handler>:
 800d4b8:	4a02      	ldr	r2, [pc, #8]	@ (800d4c4 <stdio_exit_handler+0xc>)
 800d4ba:	4903      	ldr	r1, [pc, #12]	@ (800d4c8 <stdio_exit_handler+0x10>)
 800d4bc:	4803      	ldr	r0, [pc, #12]	@ (800d4cc <stdio_exit_handler+0x14>)
 800d4be:	f000 b869 	b.w	800d594 <_fwalk_sglue>
 800d4c2:	bf00      	nop
 800d4c4:	2000002c 	.word	0x2000002c
 800d4c8:	0800f139 	.word	0x0800f139
 800d4cc:	2000003c 	.word	0x2000003c

0800d4d0 <cleanup_stdio>:
 800d4d0:	6841      	ldr	r1, [r0, #4]
 800d4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d504 <cleanup_stdio+0x34>)
 800d4d4:	4299      	cmp	r1, r3
 800d4d6:	b510      	push	{r4, lr}
 800d4d8:	4604      	mov	r4, r0
 800d4da:	d001      	beq.n	800d4e0 <cleanup_stdio+0x10>
 800d4dc:	f001 fe2c 	bl	800f138 <_fflush_r>
 800d4e0:	68a1      	ldr	r1, [r4, #8]
 800d4e2:	4b09      	ldr	r3, [pc, #36]	@ (800d508 <cleanup_stdio+0x38>)
 800d4e4:	4299      	cmp	r1, r3
 800d4e6:	d002      	beq.n	800d4ee <cleanup_stdio+0x1e>
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f001 fe25 	bl	800f138 <_fflush_r>
 800d4ee:	68e1      	ldr	r1, [r4, #12]
 800d4f0:	4b06      	ldr	r3, [pc, #24]	@ (800d50c <cleanup_stdio+0x3c>)
 800d4f2:	4299      	cmp	r1, r3
 800d4f4:	d004      	beq.n	800d500 <cleanup_stdio+0x30>
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4fc:	f001 be1c 	b.w	800f138 <_fflush_r>
 800d500:	bd10      	pop	{r4, pc}
 800d502:	bf00      	nop
 800d504:	200289b8 	.word	0x200289b8
 800d508:	20028a20 	.word	0x20028a20
 800d50c:	20028a88 	.word	0x20028a88

0800d510 <global_stdio_init.part.0>:
 800d510:	b510      	push	{r4, lr}
 800d512:	4b0b      	ldr	r3, [pc, #44]	@ (800d540 <global_stdio_init.part.0+0x30>)
 800d514:	2104      	movs	r1, #4
 800d516:	4c0b      	ldr	r4, [pc, #44]	@ (800d544 <global_stdio_init.part.0+0x34>)
 800d518:	4a0b      	ldr	r2, [pc, #44]	@ (800d548 <global_stdio_init.part.0+0x38>)
 800d51a:	4620      	mov	r0, r4
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	2200      	movs	r2, #0
 800d520:	f7ff ff94 	bl	800d44c <std>
 800d524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d528:	2201      	movs	r2, #1
 800d52a:	2109      	movs	r1, #9
 800d52c:	f7ff ff8e 	bl	800d44c <std>
 800d530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d534:	2202      	movs	r2, #2
 800d536:	2112      	movs	r1, #18
 800d538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d53c:	f7ff bf86 	b.w	800d44c <std>
 800d540:	20028af0 	.word	0x20028af0
 800d544:	200289b8 	.word	0x200289b8
 800d548:	0800d4b9 	.word	0x0800d4b9

0800d54c <__sfp_lock_acquire>:
 800d54c:	4801      	ldr	r0, [pc, #4]	@ (800d554 <__sfp_lock_acquire+0x8>)
 800d54e:	f000 b920 	b.w	800d792 <__retarget_lock_acquire_recursive>
 800d552:	bf00      	nop
 800d554:	20028af9 	.word	0x20028af9

0800d558 <__sfp_lock_release>:
 800d558:	4801      	ldr	r0, [pc, #4]	@ (800d560 <__sfp_lock_release+0x8>)
 800d55a:	f000 b91b 	b.w	800d794 <__retarget_lock_release_recursive>
 800d55e:	bf00      	nop
 800d560:	20028af9 	.word	0x20028af9

0800d564 <__sinit>:
 800d564:	b510      	push	{r4, lr}
 800d566:	4604      	mov	r4, r0
 800d568:	f7ff fff0 	bl	800d54c <__sfp_lock_acquire>
 800d56c:	6a23      	ldr	r3, [r4, #32]
 800d56e:	b11b      	cbz	r3, 800d578 <__sinit+0x14>
 800d570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d574:	f7ff bff0 	b.w	800d558 <__sfp_lock_release>
 800d578:	4b04      	ldr	r3, [pc, #16]	@ (800d58c <__sinit+0x28>)
 800d57a:	6223      	str	r3, [r4, #32]
 800d57c:	4b04      	ldr	r3, [pc, #16]	@ (800d590 <__sinit+0x2c>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1f5      	bne.n	800d570 <__sinit+0xc>
 800d584:	f7ff ffc4 	bl	800d510 <global_stdio_init.part.0>
 800d588:	e7f2      	b.n	800d570 <__sinit+0xc>
 800d58a:	bf00      	nop
 800d58c:	0800d4d1 	.word	0x0800d4d1
 800d590:	20028af0 	.word	0x20028af0

0800d594 <_fwalk_sglue>:
 800d594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d598:	4607      	mov	r7, r0
 800d59a:	4688      	mov	r8, r1
 800d59c:	4614      	mov	r4, r2
 800d59e:	2600      	movs	r6, #0
 800d5a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5a4:	f1b9 0901 	subs.w	r9, r9, #1
 800d5a8:	d505      	bpl.n	800d5b6 <_fwalk_sglue+0x22>
 800d5aa:	6824      	ldr	r4, [r4, #0]
 800d5ac:	2c00      	cmp	r4, #0
 800d5ae:	d1f7      	bne.n	800d5a0 <_fwalk_sglue+0xc>
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5b6:	89ab      	ldrh	r3, [r5, #12]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d907      	bls.n	800d5cc <_fwalk_sglue+0x38>
 800d5bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	d003      	beq.n	800d5cc <_fwalk_sglue+0x38>
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	47c0      	blx	r8
 800d5ca:	4306      	orrs	r6, r0
 800d5cc:	3568      	adds	r5, #104	@ 0x68
 800d5ce:	e7e9      	b.n	800d5a4 <_fwalk_sglue+0x10>

0800d5d0 <siprintf>:
 800d5d0:	b40e      	push	{r1, r2, r3}
 800d5d2:	b500      	push	{lr}
 800d5d4:	b09c      	sub	sp, #112	@ 0x70
 800d5d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d5da:	ab1d      	add	r3, sp, #116	@ 0x74
 800d5dc:	9002      	str	r0, [sp, #8]
 800d5de:	9006      	str	r0, [sp, #24]
 800d5e0:	9107      	str	r1, [sp, #28]
 800d5e2:	9104      	str	r1, [sp, #16]
 800d5e4:	4808      	ldr	r0, [pc, #32]	@ (800d608 <siprintf+0x38>)
 800d5e6:	4909      	ldr	r1, [pc, #36]	@ (800d60c <siprintf+0x3c>)
 800d5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ec:	9105      	str	r1, [sp, #20]
 800d5ee:	a902      	add	r1, sp, #8
 800d5f0:	6800      	ldr	r0, [r0, #0]
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	f001 fc20 	bl	800ee38 <_svfiprintf_r>
 800d5f8:	9b02      	ldr	r3, [sp, #8]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	b01c      	add	sp, #112	@ 0x70
 800d600:	f85d eb04 	ldr.w	lr, [sp], #4
 800d604:	b003      	add	sp, #12
 800d606:	4770      	bx	lr
 800d608:	20000038 	.word	0x20000038
 800d60c:	ffff0208 	.word	0xffff0208

0800d610 <__sread>:
 800d610:	b510      	push	{r4, lr}
 800d612:	460c      	mov	r4, r1
 800d614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d618:	f000 f86c 	bl	800d6f4 <_read_r>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	bfab      	itete	ge
 800d620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d622:	89a3      	ldrhlt	r3, [r4, #12]
 800d624:	181b      	addge	r3, r3, r0
 800d626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d62a:	bfac      	ite	ge
 800d62c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d62e:	81a3      	strhlt	r3, [r4, #12]
 800d630:	bd10      	pop	{r4, pc}

0800d632 <__swrite>:
 800d632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d636:	461f      	mov	r7, r3
 800d638:	898b      	ldrh	r3, [r1, #12]
 800d63a:	4605      	mov	r5, r0
 800d63c:	460c      	mov	r4, r1
 800d63e:	05db      	lsls	r3, r3, #23
 800d640:	4616      	mov	r6, r2
 800d642:	d505      	bpl.n	800d650 <__swrite+0x1e>
 800d644:	2302      	movs	r3, #2
 800d646:	2200      	movs	r2, #0
 800d648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d64c:	f000 f840 	bl	800d6d0 <_lseek_r>
 800d650:	89a3      	ldrh	r3, [r4, #12]
 800d652:	4632      	mov	r2, r6
 800d654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d658:	4628      	mov	r0, r5
 800d65a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d65e:	81a3      	strh	r3, [r4, #12]
 800d660:	463b      	mov	r3, r7
 800d662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d666:	f000 b857 	b.w	800d718 <_write_r>

0800d66a <__sseek>:
 800d66a:	b510      	push	{r4, lr}
 800d66c:	460c      	mov	r4, r1
 800d66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d672:	f000 f82d 	bl	800d6d0 <_lseek_r>
 800d676:	1c43      	adds	r3, r0, #1
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	bf15      	itete	ne
 800d67c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d67e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d686:	81a3      	strheq	r3, [r4, #12]
 800d688:	bf18      	it	ne
 800d68a:	81a3      	strhne	r3, [r4, #12]
 800d68c:	bd10      	pop	{r4, pc}

0800d68e <__sclose>:
 800d68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d692:	f000 b80d 	b.w	800d6b0 <_close_r>

0800d696 <memset>:
 800d696:	4402      	add	r2, r0
 800d698:	4603      	mov	r3, r0
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d100      	bne.n	800d6a0 <memset+0xa>
 800d69e:	4770      	bx	lr
 800d6a0:	f803 1b01 	strb.w	r1, [r3], #1
 800d6a4:	e7f9      	b.n	800d69a <memset+0x4>
	...

0800d6a8 <_localeconv_r>:
 800d6a8:	4800      	ldr	r0, [pc, #0]	@ (800d6ac <_localeconv_r+0x4>)
 800d6aa:	4770      	bx	lr
 800d6ac:	20000178 	.word	0x20000178

0800d6b0 <_close_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	4d05      	ldr	r5, [pc, #20]	@ (800d6cc <_close_r+0x1c>)
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	4608      	mov	r0, r1
 800d6ba:	602b      	str	r3, [r5, #0]
 800d6bc:	f7f7 f984 	bl	80049c8 <_close>
 800d6c0:	1c43      	adds	r3, r0, #1
 800d6c2:	d102      	bne.n	800d6ca <_close_r+0x1a>
 800d6c4:	682b      	ldr	r3, [r5, #0]
 800d6c6:	b103      	cbz	r3, 800d6ca <_close_r+0x1a>
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	20028af4 	.word	0x20028af4

0800d6d0 <_lseek_r>:
 800d6d0:	b538      	push	{r3, r4, r5, lr}
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	4d06      	ldr	r5, [pc, #24]	@ (800d6f0 <_lseek_r+0x20>)
 800d6d6:	4608      	mov	r0, r1
 800d6d8:	4611      	mov	r1, r2
 800d6da:	2200      	movs	r2, #0
 800d6dc:	602a      	str	r2, [r5, #0]
 800d6de:	461a      	mov	r2, r3
 800d6e0:	f7f7 f999 	bl	8004a16 <_lseek>
 800d6e4:	1c43      	adds	r3, r0, #1
 800d6e6:	d102      	bne.n	800d6ee <_lseek_r+0x1e>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	b103      	cbz	r3, 800d6ee <_lseek_r+0x1e>
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}
 800d6f0:	20028af4 	.word	0x20028af4

0800d6f4 <_read_r>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	4d06      	ldr	r5, [pc, #24]	@ (800d714 <_read_r+0x20>)
 800d6fa:	4608      	mov	r0, r1
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	2200      	movs	r2, #0
 800d700:	602a      	str	r2, [r5, #0]
 800d702:	461a      	mov	r2, r3
 800d704:	f7f7 f927 	bl	8004956 <_read>
 800d708:	1c43      	adds	r3, r0, #1
 800d70a:	d102      	bne.n	800d712 <_read_r+0x1e>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	b103      	cbz	r3, 800d712 <_read_r+0x1e>
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	bd38      	pop	{r3, r4, r5, pc}
 800d714:	20028af4 	.word	0x20028af4

0800d718 <_write_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4604      	mov	r4, r0
 800d71c:	4d06      	ldr	r5, [pc, #24]	@ (800d738 <_write_r+0x20>)
 800d71e:	4608      	mov	r0, r1
 800d720:	4611      	mov	r1, r2
 800d722:	2200      	movs	r2, #0
 800d724:	602a      	str	r2, [r5, #0]
 800d726:	461a      	mov	r2, r3
 800d728:	f7f7 f932 	bl	8004990 <_write>
 800d72c:	1c43      	adds	r3, r0, #1
 800d72e:	d102      	bne.n	800d736 <_write_r+0x1e>
 800d730:	682b      	ldr	r3, [r5, #0]
 800d732:	b103      	cbz	r3, 800d736 <_write_r+0x1e>
 800d734:	6023      	str	r3, [r4, #0]
 800d736:	bd38      	pop	{r3, r4, r5, pc}
 800d738:	20028af4 	.word	0x20028af4

0800d73c <__errno>:
 800d73c:	4b01      	ldr	r3, [pc, #4]	@ (800d744 <__errno+0x8>)
 800d73e:	6818      	ldr	r0, [r3, #0]
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	20000038 	.word	0x20000038

0800d748 <__libc_init_array>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	4d0d      	ldr	r5, [pc, #52]	@ (800d780 <__libc_init_array+0x38>)
 800d74c:	2600      	movs	r6, #0
 800d74e:	4c0d      	ldr	r4, [pc, #52]	@ (800d784 <__libc_init_array+0x3c>)
 800d750:	1b64      	subs	r4, r4, r5
 800d752:	10a4      	asrs	r4, r4, #2
 800d754:	42a6      	cmp	r6, r4
 800d756:	d109      	bne.n	800d76c <__libc_init_array+0x24>
 800d758:	4d0b      	ldr	r5, [pc, #44]	@ (800d788 <__libc_init_array+0x40>)
 800d75a:	2600      	movs	r6, #0
 800d75c:	4c0b      	ldr	r4, [pc, #44]	@ (800d78c <__libc_init_array+0x44>)
 800d75e:	f002 f87b 	bl	800f858 <_init>
 800d762:	1b64      	subs	r4, r4, r5
 800d764:	10a4      	asrs	r4, r4, #2
 800d766:	42a6      	cmp	r6, r4
 800d768:	d105      	bne.n	800d776 <__libc_init_array+0x2e>
 800d76a:	bd70      	pop	{r4, r5, r6, pc}
 800d76c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d770:	3601      	adds	r6, #1
 800d772:	4798      	blx	r3
 800d774:	e7ee      	b.n	800d754 <__libc_init_array+0xc>
 800d776:	f855 3b04 	ldr.w	r3, [r5], #4
 800d77a:	3601      	adds	r6, #1
 800d77c:	4798      	blx	r3
 800d77e:	e7f2      	b.n	800d766 <__libc_init_array+0x1e>
 800d780:	080116b0 	.word	0x080116b0
 800d784:	080116b0 	.word	0x080116b0
 800d788:	080116b0 	.word	0x080116b0
 800d78c:	080116b4 	.word	0x080116b4

0800d790 <__retarget_lock_init_recursive>:
 800d790:	4770      	bx	lr

0800d792 <__retarget_lock_acquire_recursive>:
 800d792:	4770      	bx	lr

0800d794 <__retarget_lock_release_recursive>:
 800d794:	4770      	bx	lr

0800d796 <memchr>:
 800d796:	b2c9      	uxtb	r1, r1
 800d798:	4603      	mov	r3, r0
 800d79a:	4402      	add	r2, r0
 800d79c:	b510      	push	{r4, lr}
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	d101      	bne.n	800d7a8 <memchr+0x12>
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e003      	b.n	800d7b0 <memchr+0x1a>
 800d7a8:	7804      	ldrb	r4, [r0, #0]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	428c      	cmp	r4, r1
 800d7ae:	d1f6      	bne.n	800d79e <memchr+0x8>
 800d7b0:	bd10      	pop	{r4, pc}

0800d7b2 <memcpy>:
 800d7b2:	440a      	add	r2, r1
 800d7b4:	1e43      	subs	r3, r0, #1
 800d7b6:	4291      	cmp	r1, r2
 800d7b8:	d100      	bne.n	800d7bc <memcpy+0xa>
 800d7ba:	4770      	bx	lr
 800d7bc:	b510      	push	{r4, lr}
 800d7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7c2:	4291      	cmp	r1, r2
 800d7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7c8:	d1f9      	bne.n	800d7be <memcpy+0xc>
 800d7ca:	bd10      	pop	{r4, pc}

0800d7cc <quorem>:
 800d7cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	6903      	ldr	r3, [r0, #16]
 800d7d2:	4607      	mov	r7, r0
 800d7d4:	690c      	ldr	r4, [r1, #16]
 800d7d6:	42a3      	cmp	r3, r4
 800d7d8:	f2c0 8083 	blt.w	800d8e2 <quorem+0x116>
 800d7dc:	3c01      	subs	r4, #1
 800d7de:	f100 0514 	add.w	r5, r0, #20
 800d7e2:	f101 0814 	add.w	r8, r1, #20
 800d7e6:	00a3      	lsls	r3, r4, #2
 800d7e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7f6:	9301      	str	r3, [sp, #4]
 800d7f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	429a      	cmp	r2, r3
 800d800:	fbb2 f6f3 	udiv	r6, r2, r3
 800d804:	d331      	bcc.n	800d86a <quorem+0x9e>
 800d806:	f04f 0a00 	mov.w	sl, #0
 800d80a:	46c4      	mov	ip, r8
 800d80c:	46ae      	mov	lr, r5
 800d80e:	46d3      	mov	fp, sl
 800d810:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d814:	b298      	uxth	r0, r3
 800d816:	45e1      	cmp	r9, ip
 800d818:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d81c:	fb06 a000 	mla	r0, r6, r0, sl
 800d820:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d824:	b280      	uxth	r0, r0
 800d826:	fb06 2303 	mla	r3, r6, r3, r2
 800d82a:	f8de 2000 	ldr.w	r2, [lr]
 800d82e:	b292      	uxth	r2, r2
 800d830:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d834:	eba2 0200 	sub.w	r2, r2, r0
 800d838:	b29b      	uxth	r3, r3
 800d83a:	f8de 0000 	ldr.w	r0, [lr]
 800d83e:	445a      	add	r2, fp
 800d840:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d844:	b292      	uxth	r2, r2
 800d846:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d84a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d84e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d852:	f84e 2b04 	str.w	r2, [lr], #4
 800d856:	d2db      	bcs.n	800d810 <quorem+0x44>
 800d858:	9b00      	ldr	r3, [sp, #0]
 800d85a:	58eb      	ldr	r3, [r5, r3]
 800d85c:	b92b      	cbnz	r3, 800d86a <quorem+0x9e>
 800d85e:	9b01      	ldr	r3, [sp, #4]
 800d860:	3b04      	subs	r3, #4
 800d862:	429d      	cmp	r5, r3
 800d864:	461a      	mov	r2, r3
 800d866:	d330      	bcc.n	800d8ca <quorem+0xfe>
 800d868:	613c      	str	r4, [r7, #16]
 800d86a:	4638      	mov	r0, r7
 800d86c:	f001 f97c 	bl	800eb68 <__mcmp>
 800d870:	2800      	cmp	r0, #0
 800d872:	db26      	blt.n	800d8c2 <quorem+0xf6>
 800d874:	4629      	mov	r1, r5
 800d876:	2000      	movs	r0, #0
 800d878:	f858 2b04 	ldr.w	r2, [r8], #4
 800d87c:	f8d1 c000 	ldr.w	ip, [r1]
 800d880:	fa1f fe82 	uxth.w	lr, r2
 800d884:	45c1      	cmp	r9, r8
 800d886:	fa1f f38c 	uxth.w	r3, ip
 800d88a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d88e:	eba3 030e 	sub.w	r3, r3, lr
 800d892:	4403      	add	r3, r0
 800d894:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d898:	b29b      	uxth	r3, r3
 800d89a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d89e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d8a6:	f841 3b04 	str.w	r3, [r1], #4
 800d8aa:	d2e5      	bcs.n	800d878 <quorem+0xac>
 800d8ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8b4:	b922      	cbnz	r2, 800d8c0 <quorem+0xf4>
 800d8b6:	3b04      	subs	r3, #4
 800d8b8:	429d      	cmp	r5, r3
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	d30b      	bcc.n	800d8d6 <quorem+0x10a>
 800d8be:	613c      	str	r4, [r7, #16]
 800d8c0:	3601      	adds	r6, #1
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	b003      	add	sp, #12
 800d8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ca:	6812      	ldr	r2, [r2, #0]
 800d8cc:	3b04      	subs	r3, #4
 800d8ce:	2a00      	cmp	r2, #0
 800d8d0:	d1ca      	bne.n	800d868 <quorem+0x9c>
 800d8d2:	3c01      	subs	r4, #1
 800d8d4:	e7c5      	b.n	800d862 <quorem+0x96>
 800d8d6:	6812      	ldr	r2, [r2, #0]
 800d8d8:	3b04      	subs	r3, #4
 800d8da:	2a00      	cmp	r2, #0
 800d8dc:	d1ef      	bne.n	800d8be <quorem+0xf2>
 800d8de:	3c01      	subs	r4, #1
 800d8e0:	e7ea      	b.n	800d8b8 <quorem+0xec>
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	e7ee      	b.n	800d8c4 <quorem+0xf8>
	...

0800d8e8 <_dtoa_r>:
 800d8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ec:	69c7      	ldr	r7, [r0, #28]
 800d8ee:	b099      	sub	sp, #100	@ 0x64
 800d8f0:	4683      	mov	fp, r0
 800d8f2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d8f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d8f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800d8f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d8fa:	ec55 4b10 	vmov	r4, r5, d0
 800d8fe:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d902:	b97f      	cbnz	r7, 800d924 <_dtoa_r+0x3c>
 800d904:	2010      	movs	r0, #16
 800d906:	f000 fdfd 	bl	800e504 <malloc>
 800d90a:	4602      	mov	r2, r0
 800d90c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d910:	b920      	cbnz	r0, 800d91c <_dtoa_r+0x34>
 800d912:	4ba7      	ldr	r3, [pc, #668]	@ (800dbb0 <_dtoa_r+0x2c8>)
 800d914:	21ef      	movs	r1, #239	@ 0xef
 800d916:	48a7      	ldr	r0, [pc, #668]	@ (800dbb4 <_dtoa_r+0x2cc>)
 800d918:	f001 fc60 	bl	800f1dc <__assert_func>
 800d91c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d920:	6007      	str	r7, [r0, #0]
 800d922:	60c7      	str	r7, [r0, #12]
 800d924:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d928:	6819      	ldr	r1, [r3, #0]
 800d92a:	b159      	cbz	r1, 800d944 <_dtoa_r+0x5c>
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	2301      	movs	r3, #1
 800d930:	4658      	mov	r0, fp
 800d932:	4093      	lsls	r3, r2
 800d934:	604a      	str	r2, [r1, #4]
 800d936:	608b      	str	r3, [r1, #8]
 800d938:	f000 feda 	bl	800e6f0 <_Bfree>
 800d93c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d940:	2200      	movs	r2, #0
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	1e2b      	subs	r3, r5, #0
 800d946:	bfb7      	itett	lt
 800d948:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d94c:	2300      	movge	r3, #0
 800d94e:	2201      	movlt	r2, #1
 800d950:	9303      	strlt	r3, [sp, #12]
 800d952:	bfa8      	it	ge
 800d954:	6033      	strge	r3, [r6, #0]
 800d956:	9f03      	ldr	r7, [sp, #12]
 800d958:	4b97      	ldr	r3, [pc, #604]	@ (800dbb8 <_dtoa_r+0x2d0>)
 800d95a:	bfb8      	it	lt
 800d95c:	6032      	strlt	r2, [r6, #0]
 800d95e:	43bb      	bics	r3, r7
 800d960:	d112      	bne.n	800d988 <_dtoa_r+0xa0>
 800d962:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d966:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d968:	6013      	str	r3, [r2, #0]
 800d96a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d96e:	4323      	orrs	r3, r4
 800d970:	f000 854c 	beq.w	800e40c <_dtoa_r+0xb24>
 800d974:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d976:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dbcc <_dtoa_r+0x2e4>
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f000 854e 	beq.w	800e41c <_dtoa_r+0xb34>
 800d980:	f10a 0303 	add.w	r3, sl, #3
 800d984:	f000 bd48 	b.w	800e418 <_dtoa_r+0xb30>
 800d988:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d98c:	2200      	movs	r2, #0
 800d98e:	2300      	movs	r3, #0
 800d990:	ec51 0b17 	vmov	r0, r1, d7
 800d994:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d998:	f7f3 f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d99c:	4680      	mov	r8, r0
 800d99e:	b158      	cbz	r0, 800d9b8 <_dtoa_r+0xd0>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d9a8:	b113      	cbz	r3, 800d9b0 <_dtoa_r+0xc8>
 800d9aa:	4b84      	ldr	r3, [pc, #528]	@ (800dbbc <_dtoa_r+0x2d4>)
 800d9ac:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d9ae:	6013      	str	r3, [r2, #0]
 800d9b0:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800dbd0 <_dtoa_r+0x2e8>
 800d9b4:	f000 bd32 	b.w	800e41c <_dtoa_r+0xb34>
 800d9b8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d9bc:	aa16      	add	r2, sp, #88	@ 0x58
 800d9be:	a917      	add	r1, sp, #92	@ 0x5c
 800d9c0:	4658      	mov	r0, fp
 800d9c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d9c6:	f001 f983 	bl	800ecd0 <__d2b>
 800d9ca:	4681      	mov	r9, r0
 800d9cc:	2e00      	cmp	r6, #0
 800d9ce:	d075      	beq.n	800dabc <_dtoa_r+0x1d4>
 800d9d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9d2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d9d6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d9da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9de:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d9e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9e6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	4b74      	ldr	r3, [pc, #464]	@ (800dbc0 <_dtoa_r+0x2d8>)
 800d9f0:	f7f2 fc5a 	bl	80002a8 <__aeabi_dsub>
 800d9f4:	a368      	add	r3, pc, #416	@ (adr r3, 800db98 <_dtoa_r+0x2b0>)
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	f7f2 fe0d 	bl	8000618 <__aeabi_dmul>
 800d9fe:	a368      	add	r3, pc, #416	@ (adr r3, 800dba0 <_dtoa_r+0x2b8>)
 800da00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da04:	f7f2 fc52 	bl	80002ac <__adddf3>
 800da08:	4604      	mov	r4, r0
 800da0a:	460d      	mov	r5, r1
 800da0c:	4630      	mov	r0, r6
 800da0e:	f7f2 fd99 	bl	8000544 <__aeabi_i2d>
 800da12:	a365      	add	r3, pc, #404	@ (adr r3, 800dba8 <_dtoa_r+0x2c0>)
 800da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da18:	f7f2 fdfe 	bl	8000618 <__aeabi_dmul>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4620      	mov	r0, r4
 800da22:	4629      	mov	r1, r5
 800da24:	f7f2 fc42 	bl	80002ac <__adddf3>
 800da28:	4604      	mov	r4, r0
 800da2a:	460d      	mov	r5, r1
 800da2c:	f7f3 f8a4 	bl	8000b78 <__aeabi_d2iz>
 800da30:	2200      	movs	r2, #0
 800da32:	4607      	mov	r7, r0
 800da34:	2300      	movs	r3, #0
 800da36:	4620      	mov	r0, r4
 800da38:	4629      	mov	r1, r5
 800da3a:	f7f3 f85f 	bl	8000afc <__aeabi_dcmplt>
 800da3e:	b140      	cbz	r0, 800da52 <_dtoa_r+0x16a>
 800da40:	4638      	mov	r0, r7
 800da42:	f7f2 fd7f 	bl	8000544 <__aeabi_i2d>
 800da46:	4622      	mov	r2, r4
 800da48:	462b      	mov	r3, r5
 800da4a:	f7f3 f84d 	bl	8000ae8 <__aeabi_dcmpeq>
 800da4e:	b900      	cbnz	r0, 800da52 <_dtoa_r+0x16a>
 800da50:	3f01      	subs	r7, #1
 800da52:	2f16      	cmp	r7, #22
 800da54:	d851      	bhi.n	800dafa <_dtoa_r+0x212>
 800da56:	4b5b      	ldr	r3, [pc, #364]	@ (800dbc4 <_dtoa_r+0x2dc>)
 800da58:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	f7f3 f84a 	bl	8000afc <__aeabi_dcmplt>
 800da68:	2800      	cmp	r0, #0
 800da6a:	d048      	beq.n	800dafe <_dtoa_r+0x216>
 800da6c:	3f01      	subs	r7, #1
 800da6e:	2300      	movs	r3, #0
 800da70:	9312      	str	r3, [sp, #72]	@ 0x48
 800da72:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da74:	1b9b      	subs	r3, r3, r6
 800da76:	1e5a      	subs	r2, r3, #1
 800da78:	bf46      	itte	mi
 800da7a:	f1c3 0801 	rsbmi	r8, r3, #1
 800da7e:	2300      	movmi	r3, #0
 800da80:	f04f 0800 	movpl.w	r8, #0
 800da84:	9208      	str	r2, [sp, #32]
 800da86:	bf48      	it	mi
 800da88:	9308      	strmi	r3, [sp, #32]
 800da8a:	2f00      	cmp	r7, #0
 800da8c:	db39      	blt.n	800db02 <_dtoa_r+0x21a>
 800da8e:	9b08      	ldr	r3, [sp, #32]
 800da90:	970f      	str	r7, [sp, #60]	@ 0x3c
 800da92:	443b      	add	r3, r7
 800da94:	9308      	str	r3, [sp, #32]
 800da96:	2300      	movs	r3, #0
 800da98:	930a      	str	r3, [sp, #40]	@ 0x28
 800da9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da9c:	2b09      	cmp	r3, #9
 800da9e:	d864      	bhi.n	800db6a <_dtoa_r+0x282>
 800daa0:	2b05      	cmp	r3, #5
 800daa2:	bfc5      	ittet	gt
 800daa4:	3b04      	subgt	r3, #4
 800daa6:	2400      	movgt	r4, #0
 800daa8:	2401      	movle	r4, #1
 800daaa:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800daac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daae:	3b02      	subs	r3, #2
 800dab0:	2b03      	cmp	r3, #3
 800dab2:	d865      	bhi.n	800db80 <_dtoa_r+0x298>
 800dab4:	e8df f003 	tbb	[pc, r3]
 800dab8:	5737392c 	.word	0x5737392c
 800dabc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dac0:	441e      	add	r6, r3
 800dac2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dac6:	2b20      	cmp	r3, #32
 800dac8:	bfc9      	itett	gt
 800daca:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dace:	f1c3 0320 	rsble	r3, r3, #32
 800dad2:	409f      	lslgt	r7, r3
 800dad4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dad8:	bfd8      	it	le
 800dada:	fa04 f003 	lslle.w	r0, r4, r3
 800dade:	f106 36ff 	add.w	r6, r6, #4294967295
 800dae2:	bfc4      	itt	gt
 800dae4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dae8:	ea47 0003 	orrgt.w	r0, r7, r3
 800daec:	f7f2 fd1a 	bl	8000524 <__aeabi_ui2d>
 800daf0:	2201      	movs	r2, #1
 800daf2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800daf6:	9214      	str	r2, [sp, #80]	@ 0x50
 800daf8:	e777      	b.n	800d9ea <_dtoa_r+0x102>
 800dafa:	2301      	movs	r3, #1
 800dafc:	e7b8      	b.n	800da70 <_dtoa_r+0x188>
 800dafe:	9012      	str	r0, [sp, #72]	@ 0x48
 800db00:	e7b7      	b.n	800da72 <_dtoa_r+0x18a>
 800db02:	427b      	negs	r3, r7
 800db04:	eba8 0807 	sub.w	r8, r8, r7
 800db08:	930a      	str	r3, [sp, #40]	@ 0x28
 800db0a:	2300      	movs	r3, #0
 800db0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db0e:	e7c4      	b.n	800da9a <_dtoa_r+0x1b2>
 800db10:	2300      	movs	r3, #0
 800db12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db16:	2b00      	cmp	r3, #0
 800db18:	dc35      	bgt.n	800db86 <_dtoa_r+0x29e>
 800db1a:	2301      	movs	r3, #1
 800db1c:	461a      	mov	r2, r3
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	9307      	str	r3, [sp, #28]
 800db22:	920e      	str	r2, [sp, #56]	@ 0x38
 800db24:	e00b      	b.n	800db3e <_dtoa_r+0x256>
 800db26:	2301      	movs	r3, #1
 800db28:	e7f3      	b.n	800db12 <_dtoa_r+0x22a>
 800db2a:	2300      	movs	r3, #0
 800db2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db30:	18fb      	adds	r3, r7, r3
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	3301      	adds	r3, #1
 800db36:	2b01      	cmp	r3, #1
 800db38:	9307      	str	r3, [sp, #28]
 800db3a:	bfb8      	it	lt
 800db3c:	2301      	movlt	r3, #1
 800db3e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800db42:	2100      	movs	r1, #0
 800db44:	2204      	movs	r2, #4
 800db46:	f102 0514 	add.w	r5, r2, #20
 800db4a:	429d      	cmp	r5, r3
 800db4c:	d91f      	bls.n	800db8e <_dtoa_r+0x2a6>
 800db4e:	6041      	str	r1, [r0, #4]
 800db50:	4658      	mov	r0, fp
 800db52:	f000 fd8d 	bl	800e670 <_Balloc>
 800db56:	4682      	mov	sl, r0
 800db58:	2800      	cmp	r0, #0
 800db5a:	d13b      	bne.n	800dbd4 <_dtoa_r+0x2ec>
 800db5c:	4b1a      	ldr	r3, [pc, #104]	@ (800dbc8 <_dtoa_r+0x2e0>)
 800db5e:	4602      	mov	r2, r0
 800db60:	f240 11af 	movw	r1, #431	@ 0x1af
 800db64:	e6d7      	b.n	800d916 <_dtoa_r+0x2e>
 800db66:	2301      	movs	r3, #1
 800db68:	e7e0      	b.n	800db2c <_dtoa_r+0x244>
 800db6a:	2401      	movs	r4, #1
 800db6c:	2300      	movs	r3, #0
 800db6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800db70:	9309      	str	r3, [sp, #36]	@ 0x24
 800db72:	f04f 33ff 	mov.w	r3, #4294967295
 800db76:	2200      	movs	r2, #0
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	9307      	str	r3, [sp, #28]
 800db7c:	2312      	movs	r3, #18
 800db7e:	e7d0      	b.n	800db22 <_dtoa_r+0x23a>
 800db80:	2301      	movs	r3, #1
 800db82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db84:	e7f5      	b.n	800db72 <_dtoa_r+0x28a>
 800db86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	9307      	str	r3, [sp, #28]
 800db8c:	e7d7      	b.n	800db3e <_dtoa_r+0x256>
 800db8e:	3101      	adds	r1, #1
 800db90:	0052      	lsls	r2, r2, #1
 800db92:	e7d8      	b.n	800db46 <_dtoa_r+0x25e>
 800db94:	f3af 8000 	nop.w
 800db98:	636f4361 	.word	0x636f4361
 800db9c:	3fd287a7 	.word	0x3fd287a7
 800dba0:	8b60c8b3 	.word	0x8b60c8b3
 800dba4:	3fc68a28 	.word	0x3fc68a28
 800dba8:	509f79fb 	.word	0x509f79fb
 800dbac:	3fd34413 	.word	0x3fd34413
 800dbb0:	08011375 	.word	0x08011375
 800dbb4:	0801138c 	.word	0x0801138c
 800dbb8:	7ff00000 	.word	0x7ff00000
 800dbbc:	08011345 	.word	0x08011345
 800dbc0:	3ff80000 	.word	0x3ff80000
 800dbc4:	08011488 	.word	0x08011488
 800dbc8:	080113e4 	.word	0x080113e4
 800dbcc:	08011371 	.word	0x08011371
 800dbd0:	08011344 	.word	0x08011344
 800dbd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dbd8:	6018      	str	r0, [r3, #0]
 800dbda:	9b07      	ldr	r3, [sp, #28]
 800dbdc:	2b0e      	cmp	r3, #14
 800dbde:	f200 80a4 	bhi.w	800dd2a <_dtoa_r+0x442>
 800dbe2:	2c00      	cmp	r4, #0
 800dbe4:	f000 80a1 	beq.w	800dd2a <_dtoa_r+0x442>
 800dbe8:	2f00      	cmp	r7, #0
 800dbea:	dd33      	ble.n	800dc54 <_dtoa_r+0x36c>
 800dbec:	f007 020f 	and.w	r2, r7, #15
 800dbf0:	4bac      	ldr	r3, [pc, #688]	@ (800dea4 <_dtoa_r+0x5bc>)
 800dbf2:	05f8      	lsls	r0, r7, #23
 800dbf4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dbf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbfc:	ed93 7b00 	vldr	d7, [r3]
 800dc00:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dc04:	d516      	bpl.n	800dc34 <_dtoa_r+0x34c>
 800dc06:	4ba8      	ldr	r3, [pc, #672]	@ (800dea8 <_dtoa_r+0x5c0>)
 800dc08:	f004 040f 	and.w	r4, r4, #15
 800dc0c:	2603      	movs	r6, #3
 800dc0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc16:	f7f2 fe29 	bl	800086c <__aeabi_ddiv>
 800dc1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc1e:	4da2      	ldr	r5, [pc, #648]	@ (800dea8 <_dtoa_r+0x5c0>)
 800dc20:	b954      	cbnz	r4, 800dc38 <_dtoa_r+0x350>
 800dc22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc2a:	f7f2 fe1f 	bl	800086c <__aeabi_ddiv>
 800dc2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc32:	e028      	b.n	800dc86 <_dtoa_r+0x39e>
 800dc34:	2602      	movs	r6, #2
 800dc36:	e7f2      	b.n	800dc1e <_dtoa_r+0x336>
 800dc38:	07e1      	lsls	r1, r4, #31
 800dc3a:	d508      	bpl.n	800dc4e <_dtoa_r+0x366>
 800dc3c:	3601      	adds	r6, #1
 800dc3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc46:	f7f2 fce7 	bl	8000618 <__aeabi_dmul>
 800dc4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc4e:	1064      	asrs	r4, r4, #1
 800dc50:	3508      	adds	r5, #8
 800dc52:	e7e5      	b.n	800dc20 <_dtoa_r+0x338>
 800dc54:	f000 80d2 	beq.w	800ddfc <_dtoa_r+0x514>
 800dc58:	427c      	negs	r4, r7
 800dc5a:	4b92      	ldr	r3, [pc, #584]	@ (800dea4 <_dtoa_r+0x5bc>)
 800dc5c:	4d92      	ldr	r5, [pc, #584]	@ (800dea8 <_dtoa_r+0x5c0>)
 800dc5e:	2602      	movs	r6, #2
 800dc60:	f004 020f 	and.w	r2, r4, #15
 800dc64:	1124      	asrs	r4, r4, #4
 800dc66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc72:	f7f2 fcd1 	bl	8000618 <__aeabi_dmul>
 800dc76:	2300      	movs	r3, #0
 800dc78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc7c:	2c00      	cmp	r4, #0
 800dc7e:	f040 80b2 	bne.w	800dde6 <_dtoa_r+0x4fe>
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1d3      	bne.n	800dc2e <_dtoa_r+0x346>
 800dc86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f000 80b7 	beq.w	800de00 <_dtoa_r+0x518>
 800dc92:	2200      	movs	r2, #0
 800dc94:	4b85      	ldr	r3, [pc, #532]	@ (800deac <_dtoa_r+0x5c4>)
 800dc96:	4620      	mov	r0, r4
 800dc98:	4629      	mov	r1, r5
 800dc9a:	f7f2 ff2f 	bl	8000afc <__aeabi_dcmplt>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f000 80ae 	beq.w	800de00 <_dtoa_r+0x518>
 800dca4:	9b07      	ldr	r3, [sp, #28]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f000 80aa 	beq.w	800de00 <_dtoa_r+0x518>
 800dcac:	9b00      	ldr	r3, [sp, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	dd37      	ble.n	800dd22 <_dtoa_r+0x43a>
 800dcb2:	1e7b      	subs	r3, r7, #1
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	4629      	mov	r1, r5
 800dcba:	9304      	str	r3, [sp, #16]
 800dcbc:	3601      	adds	r6, #1
 800dcbe:	4b7c      	ldr	r3, [pc, #496]	@ (800deb0 <_dtoa_r+0x5c8>)
 800dcc0:	f7f2 fcaa 	bl	8000618 <__aeabi_dmul>
 800dcc4:	9c00      	ldr	r4, [sp, #0]
 800dcc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcca:	4630      	mov	r0, r6
 800dccc:	f7f2 fc3a 	bl	8000544 <__aeabi_i2d>
 800dcd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcd4:	f7f2 fca0 	bl	8000618 <__aeabi_dmul>
 800dcd8:	2200      	movs	r2, #0
 800dcda:	4b76      	ldr	r3, [pc, #472]	@ (800deb4 <_dtoa_r+0x5cc>)
 800dcdc:	f7f2 fae6 	bl	80002ac <__adddf3>
 800dce0:	4605      	mov	r5, r0
 800dce2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dce6:	2c00      	cmp	r4, #0
 800dce8:	f040 808d 	bne.w	800de06 <_dtoa_r+0x51e>
 800dcec:	2200      	movs	r2, #0
 800dcee:	4b72      	ldr	r3, [pc, #456]	@ (800deb8 <_dtoa_r+0x5d0>)
 800dcf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcf4:	f7f2 fad8 	bl	80002a8 <__aeabi_dsub>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd00:	462a      	mov	r2, r5
 800dd02:	4633      	mov	r3, r6
 800dd04:	f7f2 ff18 	bl	8000b38 <__aeabi_dcmpgt>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	f040 828b 	bne.w	800e224 <_dtoa_r+0x93c>
 800dd0e:	462a      	mov	r2, r5
 800dd10:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dd14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd18:	f7f2 fef0 	bl	8000afc <__aeabi_dcmplt>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	f040 8128 	bne.w	800df72 <_dtoa_r+0x68a>
 800dd22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800dd26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800dd2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f2c0 815a 	blt.w	800dfe6 <_dtoa_r+0x6fe>
 800dd32:	2f0e      	cmp	r7, #14
 800dd34:	f300 8157 	bgt.w	800dfe6 <_dtoa_r+0x6fe>
 800dd38:	4b5a      	ldr	r3, [pc, #360]	@ (800dea4 <_dtoa_r+0x5bc>)
 800dd3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd3e:	ed93 7b00 	vldr	d7, [r3]
 800dd42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	ed8d 7b00 	vstr	d7, [sp]
 800dd4a:	da03      	bge.n	800dd54 <_dtoa_r+0x46c>
 800dd4c:	9b07      	ldr	r3, [sp, #28]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f340 8101 	ble.w	800df56 <_dtoa_r+0x66e>
 800dd54:	4656      	mov	r6, sl
 800dd56:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dd5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd5e:	4620      	mov	r0, r4
 800dd60:	4629      	mov	r1, r5
 800dd62:	f7f2 fd83 	bl	800086c <__aeabi_ddiv>
 800dd66:	f7f2 ff07 	bl	8000b78 <__aeabi_d2iz>
 800dd6a:	4680      	mov	r8, r0
 800dd6c:	f7f2 fbea 	bl	8000544 <__aeabi_i2d>
 800dd70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd74:	f7f2 fc50 	bl	8000618 <__aeabi_dmul>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dd80:	460b      	mov	r3, r1
 800dd82:	4629      	mov	r1, r5
 800dd84:	f7f2 fa90 	bl	80002a8 <__aeabi_dsub>
 800dd88:	9d07      	ldr	r5, [sp, #28]
 800dd8a:	f806 4b01 	strb.w	r4, [r6], #1
 800dd8e:	eba6 040a 	sub.w	r4, r6, sl
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	42a5      	cmp	r5, r4
 800dd98:	f040 8117 	bne.w	800dfca <_dtoa_r+0x6e2>
 800dd9c:	f7f2 fa86 	bl	80002ac <__adddf3>
 800dda0:	4604      	mov	r4, r0
 800dda2:	460d      	mov	r5, r1
 800dda4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dda8:	f7f2 fec6 	bl	8000b38 <__aeabi_dcmpgt>
 800ddac:	2800      	cmp	r0, #0
 800ddae:	f040 80f9 	bne.w	800dfa4 <_dtoa_r+0x6bc>
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddba:	f7f2 fe95 	bl	8000ae8 <__aeabi_dcmpeq>
 800ddbe:	b118      	cbz	r0, 800ddc8 <_dtoa_r+0x4e0>
 800ddc0:	f018 0f01 	tst.w	r8, #1
 800ddc4:	f040 80ee 	bne.w	800dfa4 <_dtoa_r+0x6bc>
 800ddc8:	4649      	mov	r1, r9
 800ddca:	4658      	mov	r0, fp
 800ddcc:	f000 fc90 	bl	800e6f0 <_Bfree>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	3701      	adds	r7, #1
 800ddd4:	7033      	strb	r3, [r6, #0]
 800ddd6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ddd8:	601f      	str	r7, [r3, #0]
 800ddda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 831d 	beq.w	800e41c <_dtoa_r+0xb34>
 800dde2:	601e      	str	r6, [r3, #0]
 800dde4:	e31a      	b.n	800e41c <_dtoa_r+0xb34>
 800dde6:	07e2      	lsls	r2, r4, #31
 800dde8:	d505      	bpl.n	800ddf6 <_dtoa_r+0x50e>
 800ddea:	3601      	adds	r6, #1
 800ddec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ddf0:	f7f2 fc12 	bl	8000618 <__aeabi_dmul>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	1064      	asrs	r4, r4, #1
 800ddf8:	3508      	adds	r5, #8
 800ddfa:	e73f      	b.n	800dc7c <_dtoa_r+0x394>
 800ddfc:	2602      	movs	r6, #2
 800ddfe:	e742      	b.n	800dc86 <_dtoa_r+0x39e>
 800de00:	9c07      	ldr	r4, [sp, #28]
 800de02:	9704      	str	r7, [sp, #16]
 800de04:	e761      	b.n	800dcca <_dtoa_r+0x3e2>
 800de06:	4b27      	ldr	r3, [pc, #156]	@ (800dea4 <_dtoa_r+0x5bc>)
 800de08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de0e:	4454      	add	r4, sl
 800de10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de14:	2900      	cmp	r1, #0
 800de16:	d053      	beq.n	800dec0 <_dtoa_r+0x5d8>
 800de18:	2000      	movs	r0, #0
 800de1a:	4928      	ldr	r1, [pc, #160]	@ (800debc <_dtoa_r+0x5d4>)
 800de1c:	f7f2 fd26 	bl	800086c <__aeabi_ddiv>
 800de20:	4633      	mov	r3, r6
 800de22:	4656      	mov	r6, sl
 800de24:	462a      	mov	r2, r5
 800de26:	f7f2 fa3f 	bl	80002a8 <__aeabi_dsub>
 800de2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800de2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de32:	f7f2 fea1 	bl	8000b78 <__aeabi_d2iz>
 800de36:	4605      	mov	r5, r0
 800de38:	f7f2 fb84 	bl	8000544 <__aeabi_i2d>
 800de3c:	4602      	mov	r2, r0
 800de3e:	460b      	mov	r3, r1
 800de40:	3530      	adds	r5, #48	@ 0x30
 800de42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de46:	f7f2 fa2f 	bl	80002a8 <__aeabi_dsub>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	f806 5b01 	strb.w	r5, [r6], #1
 800de52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800de5a:	f7f2 fe4f 	bl	8000afc <__aeabi_dcmplt>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d171      	bne.n	800df46 <_dtoa_r+0x65e>
 800de62:	2000      	movs	r0, #0
 800de64:	4911      	ldr	r1, [pc, #68]	@ (800deac <_dtoa_r+0x5c4>)
 800de66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de6a:	f7f2 fa1d 	bl	80002a8 <__aeabi_dsub>
 800de6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800de72:	f7f2 fe43 	bl	8000afc <__aeabi_dcmplt>
 800de76:	2800      	cmp	r0, #0
 800de78:	f040 8095 	bne.w	800dfa6 <_dtoa_r+0x6be>
 800de7c:	42a6      	cmp	r6, r4
 800de7e:	f43f af50 	beq.w	800dd22 <_dtoa_r+0x43a>
 800de82:	2200      	movs	r2, #0
 800de84:	4b0a      	ldr	r3, [pc, #40]	@ (800deb0 <_dtoa_r+0x5c8>)
 800de86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800de8a:	f7f2 fbc5 	bl	8000618 <__aeabi_dmul>
 800de8e:	2200      	movs	r2, #0
 800de90:	4b07      	ldr	r3, [pc, #28]	@ (800deb0 <_dtoa_r+0x5c8>)
 800de92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800de96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de9a:	f7f2 fbbd 	bl	8000618 <__aeabi_dmul>
 800de9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dea2:	e7c4      	b.n	800de2e <_dtoa_r+0x546>
 800dea4:	08011488 	.word	0x08011488
 800dea8:	08011460 	.word	0x08011460
 800deac:	3ff00000 	.word	0x3ff00000
 800deb0:	40240000 	.word	0x40240000
 800deb4:	401c0000 	.word	0x401c0000
 800deb8:	40140000 	.word	0x40140000
 800debc:	3fe00000 	.word	0x3fe00000
 800dec0:	4631      	mov	r1, r6
 800dec2:	4656      	mov	r6, sl
 800dec4:	4628      	mov	r0, r5
 800dec6:	f7f2 fba7 	bl	8000618 <__aeabi_dmul>
 800deca:	9415      	str	r4, [sp, #84]	@ 0x54
 800decc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ded0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ded4:	f7f2 fe50 	bl	8000b78 <__aeabi_d2iz>
 800ded8:	4605      	mov	r5, r0
 800deda:	f7f2 fb33 	bl	8000544 <__aeabi_i2d>
 800dede:	4602      	mov	r2, r0
 800dee0:	3530      	adds	r5, #48	@ 0x30
 800dee2:	460b      	mov	r3, r1
 800dee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dee8:	f7f2 f9de 	bl	80002a8 <__aeabi_dsub>
 800deec:	f806 5b01 	strb.w	r5, [r6], #1
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	42a6      	cmp	r6, r4
 800def6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800defa:	f04f 0200 	mov.w	r2, #0
 800defe:	d124      	bne.n	800df4a <_dtoa_r+0x662>
 800df00:	4bac      	ldr	r3, [pc, #688]	@ (800e1b4 <_dtoa_r+0x8cc>)
 800df02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800df06:	f7f2 f9d1 	bl	80002ac <__adddf3>
 800df0a:	4602      	mov	r2, r0
 800df0c:	460b      	mov	r3, r1
 800df0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df12:	f7f2 fe11 	bl	8000b38 <__aeabi_dcmpgt>
 800df16:	2800      	cmp	r0, #0
 800df18:	d145      	bne.n	800dfa6 <_dtoa_r+0x6be>
 800df1a:	2000      	movs	r0, #0
 800df1c:	49a5      	ldr	r1, [pc, #660]	@ (800e1b4 <_dtoa_r+0x8cc>)
 800df1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800df22:	f7f2 f9c1 	bl	80002a8 <__aeabi_dsub>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df2e:	f7f2 fde5 	bl	8000afc <__aeabi_dcmplt>
 800df32:	2800      	cmp	r0, #0
 800df34:	f43f aef5 	beq.w	800dd22 <_dtoa_r+0x43a>
 800df38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800df3a:	1e73      	subs	r3, r6, #1
 800df3c:	9315      	str	r3, [sp, #84]	@ 0x54
 800df3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df42:	2b30      	cmp	r3, #48	@ 0x30
 800df44:	d0f8      	beq.n	800df38 <_dtoa_r+0x650>
 800df46:	9f04      	ldr	r7, [sp, #16]
 800df48:	e73e      	b.n	800ddc8 <_dtoa_r+0x4e0>
 800df4a:	4b9b      	ldr	r3, [pc, #620]	@ (800e1b8 <_dtoa_r+0x8d0>)
 800df4c:	f7f2 fb64 	bl	8000618 <__aeabi_dmul>
 800df50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df54:	e7bc      	b.n	800ded0 <_dtoa_r+0x5e8>
 800df56:	d10c      	bne.n	800df72 <_dtoa_r+0x68a>
 800df58:	2200      	movs	r2, #0
 800df5a:	4b98      	ldr	r3, [pc, #608]	@ (800e1bc <_dtoa_r+0x8d4>)
 800df5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df60:	f7f2 fb5a 	bl	8000618 <__aeabi_dmul>
 800df64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df68:	f7f2 fddc 	bl	8000b24 <__aeabi_dcmpge>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	f000 8157 	beq.w	800e220 <_dtoa_r+0x938>
 800df72:	2400      	movs	r4, #0
 800df74:	4625      	mov	r5, r4
 800df76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df78:	4656      	mov	r6, sl
 800df7a:	43db      	mvns	r3, r3
 800df7c:	9304      	str	r3, [sp, #16]
 800df7e:	2700      	movs	r7, #0
 800df80:	4621      	mov	r1, r4
 800df82:	4658      	mov	r0, fp
 800df84:	f000 fbb4 	bl	800e6f0 <_Bfree>
 800df88:	2d00      	cmp	r5, #0
 800df8a:	d0dc      	beq.n	800df46 <_dtoa_r+0x65e>
 800df8c:	b12f      	cbz	r7, 800df9a <_dtoa_r+0x6b2>
 800df8e:	42af      	cmp	r7, r5
 800df90:	d003      	beq.n	800df9a <_dtoa_r+0x6b2>
 800df92:	4639      	mov	r1, r7
 800df94:	4658      	mov	r0, fp
 800df96:	f000 fbab 	bl	800e6f0 <_Bfree>
 800df9a:	4629      	mov	r1, r5
 800df9c:	4658      	mov	r0, fp
 800df9e:	f000 fba7 	bl	800e6f0 <_Bfree>
 800dfa2:	e7d0      	b.n	800df46 <_dtoa_r+0x65e>
 800dfa4:	9704      	str	r7, [sp, #16]
 800dfa6:	4633      	mov	r3, r6
 800dfa8:	461e      	mov	r6, r3
 800dfaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfae:	2a39      	cmp	r2, #57	@ 0x39
 800dfb0:	d107      	bne.n	800dfc2 <_dtoa_r+0x6da>
 800dfb2:	459a      	cmp	sl, r3
 800dfb4:	d1f8      	bne.n	800dfa8 <_dtoa_r+0x6c0>
 800dfb6:	9a04      	ldr	r2, [sp, #16]
 800dfb8:	3201      	adds	r2, #1
 800dfba:	9204      	str	r2, [sp, #16]
 800dfbc:	2230      	movs	r2, #48	@ 0x30
 800dfbe:	f88a 2000 	strb.w	r2, [sl]
 800dfc2:	781a      	ldrb	r2, [r3, #0]
 800dfc4:	3201      	adds	r2, #1
 800dfc6:	701a      	strb	r2, [r3, #0]
 800dfc8:	e7bd      	b.n	800df46 <_dtoa_r+0x65e>
 800dfca:	2200      	movs	r2, #0
 800dfcc:	4b7a      	ldr	r3, [pc, #488]	@ (800e1b8 <_dtoa_r+0x8d0>)
 800dfce:	f7f2 fb23 	bl	8000618 <__aeabi_dmul>
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	460d      	mov	r5, r1
 800dfda:	f7f2 fd85 	bl	8000ae8 <__aeabi_dcmpeq>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	f43f aebb 	beq.w	800dd5a <_dtoa_r+0x472>
 800dfe4:	e6f0      	b.n	800ddc8 <_dtoa_r+0x4e0>
 800dfe6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dfe8:	2a00      	cmp	r2, #0
 800dfea:	f000 80db 	beq.w	800e1a4 <_dtoa_r+0x8bc>
 800dfee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dff0:	2a01      	cmp	r2, #1
 800dff2:	f300 80bf 	bgt.w	800e174 <_dtoa_r+0x88c>
 800dff6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dff8:	2a00      	cmp	r2, #0
 800dffa:	f000 80b7 	beq.w	800e16c <_dtoa_r+0x884>
 800dffe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e002:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e004:	4646      	mov	r6, r8
 800e006:	9a08      	ldr	r2, [sp, #32]
 800e008:	2101      	movs	r1, #1
 800e00a:	4658      	mov	r0, fp
 800e00c:	4498      	add	r8, r3
 800e00e:	441a      	add	r2, r3
 800e010:	9208      	str	r2, [sp, #32]
 800e012:	f000 fc23 	bl	800e85c <__i2b>
 800e016:	4605      	mov	r5, r0
 800e018:	b15e      	cbz	r6, 800e032 <_dtoa_r+0x74a>
 800e01a:	9b08      	ldr	r3, [sp, #32]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	dd08      	ble.n	800e032 <_dtoa_r+0x74a>
 800e020:	42b3      	cmp	r3, r6
 800e022:	9a08      	ldr	r2, [sp, #32]
 800e024:	bfa8      	it	ge
 800e026:	4633      	movge	r3, r6
 800e028:	eba8 0803 	sub.w	r8, r8, r3
 800e02c:	1af6      	subs	r6, r6, r3
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	9308      	str	r3, [sp, #32]
 800e032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e034:	b1f3      	cbz	r3, 800e074 <_dtoa_r+0x78c>
 800e036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f000 80b7 	beq.w	800e1ac <_dtoa_r+0x8c4>
 800e03e:	b18c      	cbz	r4, 800e064 <_dtoa_r+0x77c>
 800e040:	4629      	mov	r1, r5
 800e042:	4622      	mov	r2, r4
 800e044:	4658      	mov	r0, fp
 800e046:	f000 fcc9 	bl	800e9dc <__pow5mult>
 800e04a:	464a      	mov	r2, r9
 800e04c:	4601      	mov	r1, r0
 800e04e:	4605      	mov	r5, r0
 800e050:	4658      	mov	r0, fp
 800e052:	f000 fc19 	bl	800e888 <__multiply>
 800e056:	4649      	mov	r1, r9
 800e058:	9004      	str	r0, [sp, #16]
 800e05a:	4658      	mov	r0, fp
 800e05c:	f000 fb48 	bl	800e6f0 <_Bfree>
 800e060:	9b04      	ldr	r3, [sp, #16]
 800e062:	4699      	mov	r9, r3
 800e064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e066:	1b1a      	subs	r2, r3, r4
 800e068:	d004      	beq.n	800e074 <_dtoa_r+0x78c>
 800e06a:	4649      	mov	r1, r9
 800e06c:	4658      	mov	r0, fp
 800e06e:	f000 fcb5 	bl	800e9dc <__pow5mult>
 800e072:	4681      	mov	r9, r0
 800e074:	2101      	movs	r1, #1
 800e076:	4658      	mov	r0, fp
 800e078:	f000 fbf0 	bl	800e85c <__i2b>
 800e07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e07e:	4604      	mov	r4, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	f000 81cf 	beq.w	800e424 <_dtoa_r+0xb3c>
 800e086:	461a      	mov	r2, r3
 800e088:	4601      	mov	r1, r0
 800e08a:	4658      	mov	r0, fp
 800e08c:	f000 fca6 	bl	800e9dc <__pow5mult>
 800e090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e092:	4604      	mov	r4, r0
 800e094:	2b01      	cmp	r3, #1
 800e096:	f300 8095 	bgt.w	800e1c4 <_dtoa_r+0x8dc>
 800e09a:	9b02      	ldr	r3, [sp, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 8087 	bne.w	800e1b0 <_dtoa_r+0x8c8>
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f040 8089 	bne.w	800e1c0 <_dtoa_r+0x8d8>
 800e0ae:	9b03      	ldr	r3, [sp, #12]
 800e0b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e0b4:	0d1b      	lsrs	r3, r3, #20
 800e0b6:	051b      	lsls	r3, r3, #20
 800e0b8:	b12b      	cbz	r3, 800e0c6 <_dtoa_r+0x7de>
 800e0ba:	9b08      	ldr	r3, [sp, #32]
 800e0bc:	f108 0801 	add.w	r8, r8, #1
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	9308      	str	r3, [sp, #32]
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f000 81b0 	beq.w	800e430 <_dtoa_r+0xb48>
 800e0d0:	6923      	ldr	r3, [r4, #16]
 800e0d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0d6:	6918      	ldr	r0, [r3, #16]
 800e0d8:	f000 fb74 	bl	800e7c4 <__hi0bits>
 800e0dc:	f1c0 0020 	rsb	r0, r0, #32
 800e0e0:	9b08      	ldr	r3, [sp, #32]
 800e0e2:	4418      	add	r0, r3
 800e0e4:	f010 001f 	ands.w	r0, r0, #31
 800e0e8:	d077      	beq.n	800e1da <_dtoa_r+0x8f2>
 800e0ea:	f1c0 0320 	rsb	r3, r0, #32
 800e0ee:	2b04      	cmp	r3, #4
 800e0f0:	dd6b      	ble.n	800e1ca <_dtoa_r+0x8e2>
 800e0f2:	f1c0 001c 	rsb	r0, r0, #28
 800e0f6:	9b08      	ldr	r3, [sp, #32]
 800e0f8:	4480      	add	r8, r0
 800e0fa:	4403      	add	r3, r0
 800e0fc:	4406      	add	r6, r0
 800e0fe:	9308      	str	r3, [sp, #32]
 800e100:	f1b8 0f00 	cmp.w	r8, #0
 800e104:	dd05      	ble.n	800e112 <_dtoa_r+0x82a>
 800e106:	4649      	mov	r1, r9
 800e108:	4642      	mov	r2, r8
 800e10a:	4658      	mov	r0, fp
 800e10c:	f000 fcc0 	bl	800ea90 <__lshift>
 800e110:	4681      	mov	r9, r0
 800e112:	9b08      	ldr	r3, [sp, #32]
 800e114:	2b00      	cmp	r3, #0
 800e116:	dd05      	ble.n	800e124 <_dtoa_r+0x83c>
 800e118:	4621      	mov	r1, r4
 800e11a:	461a      	mov	r2, r3
 800e11c:	4658      	mov	r0, fp
 800e11e:	f000 fcb7 	bl	800ea90 <__lshift>
 800e122:	4604      	mov	r4, r0
 800e124:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e126:	2b00      	cmp	r3, #0
 800e128:	d059      	beq.n	800e1de <_dtoa_r+0x8f6>
 800e12a:	4621      	mov	r1, r4
 800e12c:	4648      	mov	r0, r9
 800e12e:	f000 fd1b 	bl	800eb68 <__mcmp>
 800e132:	2800      	cmp	r0, #0
 800e134:	da53      	bge.n	800e1de <_dtoa_r+0x8f6>
 800e136:	1e7b      	subs	r3, r7, #1
 800e138:	4649      	mov	r1, r9
 800e13a:	220a      	movs	r2, #10
 800e13c:	4658      	mov	r0, fp
 800e13e:	9304      	str	r3, [sp, #16]
 800e140:	2300      	movs	r3, #0
 800e142:	f000 faf7 	bl	800e734 <__multadd>
 800e146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e148:	4681      	mov	r9, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f000 8172 	beq.w	800e434 <_dtoa_r+0xb4c>
 800e150:	2300      	movs	r3, #0
 800e152:	4629      	mov	r1, r5
 800e154:	220a      	movs	r2, #10
 800e156:	4658      	mov	r0, fp
 800e158:	f000 faec 	bl	800e734 <__multadd>
 800e15c:	9b00      	ldr	r3, [sp, #0]
 800e15e:	4605      	mov	r5, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	dc67      	bgt.n	800e234 <_dtoa_r+0x94c>
 800e164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e166:	2b02      	cmp	r3, #2
 800e168:	dc41      	bgt.n	800e1ee <_dtoa_r+0x906>
 800e16a:	e063      	b.n	800e234 <_dtoa_r+0x94c>
 800e16c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e16e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e172:	e746      	b.n	800e002 <_dtoa_r+0x71a>
 800e174:	9b07      	ldr	r3, [sp, #28]
 800e176:	1e5c      	subs	r4, r3, #1
 800e178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e17a:	42a3      	cmp	r3, r4
 800e17c:	bfb7      	itett	lt
 800e17e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e180:	1b1c      	subge	r4, r3, r4
 800e182:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e184:	1ae3      	sublt	r3, r4, r3
 800e186:	bfbe      	ittt	lt
 800e188:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e18a:	2400      	movlt	r4, #0
 800e18c:	18d2      	addlt	r2, r2, r3
 800e18e:	9b07      	ldr	r3, [sp, #28]
 800e190:	bfb8      	it	lt
 800e192:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e194:	2b00      	cmp	r3, #0
 800e196:	bfb5      	itete	lt
 800e198:	eba8 0603 	sublt.w	r6, r8, r3
 800e19c:	4646      	movge	r6, r8
 800e19e:	2300      	movlt	r3, #0
 800e1a0:	9b07      	ldrge	r3, [sp, #28]
 800e1a2:	e730      	b.n	800e006 <_dtoa_r+0x71e>
 800e1a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e1a6:	4646      	mov	r6, r8
 800e1a8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e1aa:	e735      	b.n	800e018 <_dtoa_r+0x730>
 800e1ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1ae:	e75c      	b.n	800e06a <_dtoa_r+0x782>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	e788      	b.n	800e0c6 <_dtoa_r+0x7de>
 800e1b4:	3fe00000 	.word	0x3fe00000
 800e1b8:	40240000 	.word	0x40240000
 800e1bc:	40140000 	.word	0x40140000
 800e1c0:	9b02      	ldr	r3, [sp, #8]
 800e1c2:	e780      	b.n	800e0c6 <_dtoa_r+0x7de>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1c8:	e782      	b.n	800e0d0 <_dtoa_r+0x7e8>
 800e1ca:	d099      	beq.n	800e100 <_dtoa_r+0x818>
 800e1cc:	331c      	adds	r3, #28
 800e1ce:	9a08      	ldr	r2, [sp, #32]
 800e1d0:	441a      	add	r2, r3
 800e1d2:	4498      	add	r8, r3
 800e1d4:	441e      	add	r6, r3
 800e1d6:	9208      	str	r2, [sp, #32]
 800e1d8:	e792      	b.n	800e100 <_dtoa_r+0x818>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	e7f6      	b.n	800e1cc <_dtoa_r+0x8e4>
 800e1de:	9b07      	ldr	r3, [sp, #28]
 800e1e0:	9704      	str	r7, [sp, #16]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dc20      	bgt.n	800e228 <_dtoa_r+0x940>
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	dd1e      	ble.n	800e22c <_dtoa_r+0x944>
 800e1ee:	9b00      	ldr	r3, [sp, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f47f aec0 	bne.w	800df76 <_dtoa_r+0x68e>
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	2205      	movs	r2, #5
 800e1fa:	4658      	mov	r0, fp
 800e1fc:	f000 fa9a 	bl	800e734 <__multadd>
 800e200:	4601      	mov	r1, r0
 800e202:	4604      	mov	r4, r0
 800e204:	4648      	mov	r0, r9
 800e206:	f000 fcaf 	bl	800eb68 <__mcmp>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	f77f aeb3 	ble.w	800df76 <_dtoa_r+0x68e>
 800e210:	2331      	movs	r3, #49	@ 0x31
 800e212:	4656      	mov	r6, sl
 800e214:	f806 3b01 	strb.w	r3, [r6], #1
 800e218:	9b04      	ldr	r3, [sp, #16]
 800e21a:	3301      	adds	r3, #1
 800e21c:	9304      	str	r3, [sp, #16]
 800e21e:	e6ae      	b.n	800df7e <_dtoa_r+0x696>
 800e220:	9c07      	ldr	r4, [sp, #28]
 800e222:	9704      	str	r7, [sp, #16]
 800e224:	4625      	mov	r5, r4
 800e226:	e7f3      	b.n	800e210 <_dtoa_r+0x928>
 800e228:	9b07      	ldr	r3, [sp, #28]
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f000 8104 	beq.w	800e43c <_dtoa_r+0xb54>
 800e234:	2e00      	cmp	r6, #0
 800e236:	dd05      	ble.n	800e244 <_dtoa_r+0x95c>
 800e238:	4629      	mov	r1, r5
 800e23a:	4632      	mov	r2, r6
 800e23c:	4658      	mov	r0, fp
 800e23e:	f000 fc27 	bl	800ea90 <__lshift>
 800e242:	4605      	mov	r5, r0
 800e244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e246:	2b00      	cmp	r3, #0
 800e248:	d05a      	beq.n	800e300 <_dtoa_r+0xa18>
 800e24a:	6869      	ldr	r1, [r5, #4]
 800e24c:	4658      	mov	r0, fp
 800e24e:	f000 fa0f 	bl	800e670 <_Balloc>
 800e252:	4606      	mov	r6, r0
 800e254:	b928      	cbnz	r0, 800e262 <_dtoa_r+0x97a>
 800e256:	4b84      	ldr	r3, [pc, #528]	@ (800e468 <_dtoa_r+0xb80>)
 800e258:	4602      	mov	r2, r0
 800e25a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e25e:	f7ff bb5a 	b.w	800d916 <_dtoa_r+0x2e>
 800e262:	692a      	ldr	r2, [r5, #16]
 800e264:	f105 010c 	add.w	r1, r5, #12
 800e268:	300c      	adds	r0, #12
 800e26a:	3202      	adds	r2, #2
 800e26c:	0092      	lsls	r2, r2, #2
 800e26e:	f7ff faa0 	bl	800d7b2 <memcpy>
 800e272:	2201      	movs	r2, #1
 800e274:	4631      	mov	r1, r6
 800e276:	4658      	mov	r0, fp
 800e278:	f000 fc0a 	bl	800ea90 <__lshift>
 800e27c:	f10a 0301 	add.w	r3, sl, #1
 800e280:	462f      	mov	r7, r5
 800e282:	4605      	mov	r5, r0
 800e284:	9307      	str	r3, [sp, #28]
 800e286:	9b00      	ldr	r3, [sp, #0]
 800e288:	4453      	add	r3, sl
 800e28a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e28c:	9b02      	ldr	r3, [sp, #8]
 800e28e:	f003 0301 	and.w	r3, r3, #1
 800e292:	930a      	str	r3, [sp, #40]	@ 0x28
 800e294:	9b07      	ldr	r3, [sp, #28]
 800e296:	4621      	mov	r1, r4
 800e298:	4648      	mov	r0, r9
 800e29a:	3b01      	subs	r3, #1
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	f7ff fa95 	bl	800d7cc <quorem>
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	9002      	str	r0, [sp, #8]
 800e2a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e2aa:	4648      	mov	r0, r9
 800e2ac:	f000 fc5c 	bl	800eb68 <__mcmp>
 800e2b0:	462a      	mov	r2, r5
 800e2b2:	9008      	str	r0, [sp, #32]
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	4658      	mov	r0, fp
 800e2b8:	f000 fc72 	bl	800eba0 <__mdiff>
 800e2bc:	68c2      	ldr	r2, [r0, #12]
 800e2be:	4606      	mov	r6, r0
 800e2c0:	bb02      	cbnz	r2, 800e304 <_dtoa_r+0xa1c>
 800e2c2:	4601      	mov	r1, r0
 800e2c4:	4648      	mov	r0, r9
 800e2c6:	f000 fc4f 	bl	800eb68 <__mcmp>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	4631      	mov	r1, r6
 800e2ce:	4658      	mov	r0, fp
 800e2d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2d2:	f000 fa0d 	bl	800e6f0 <_Bfree>
 800e2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2da:	9e07      	ldr	r6, [sp, #28]
 800e2dc:	ea43 0102 	orr.w	r1, r3, r2
 800e2e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2e2:	4319      	orrs	r1, r3
 800e2e4:	d110      	bne.n	800e308 <_dtoa_r+0xa20>
 800e2e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e2ea:	d029      	beq.n	800e340 <_dtoa_r+0xa58>
 800e2ec:	9b08      	ldr	r3, [sp, #32]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	dd02      	ble.n	800e2f8 <_dtoa_r+0xa10>
 800e2f2:	9b02      	ldr	r3, [sp, #8]
 800e2f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e2f8:	9b00      	ldr	r3, [sp, #0]
 800e2fa:	f883 8000 	strb.w	r8, [r3]
 800e2fe:	e63f      	b.n	800df80 <_dtoa_r+0x698>
 800e300:	4628      	mov	r0, r5
 800e302:	e7bb      	b.n	800e27c <_dtoa_r+0x994>
 800e304:	2201      	movs	r2, #1
 800e306:	e7e1      	b.n	800e2cc <_dtoa_r+0x9e4>
 800e308:	9b08      	ldr	r3, [sp, #32]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	db04      	blt.n	800e318 <_dtoa_r+0xa30>
 800e30e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e310:	430b      	orrs	r3, r1
 800e312:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e314:	430b      	orrs	r3, r1
 800e316:	d120      	bne.n	800e35a <_dtoa_r+0xa72>
 800e318:	2a00      	cmp	r2, #0
 800e31a:	dded      	ble.n	800e2f8 <_dtoa_r+0xa10>
 800e31c:	4649      	mov	r1, r9
 800e31e:	2201      	movs	r2, #1
 800e320:	4658      	mov	r0, fp
 800e322:	f000 fbb5 	bl	800ea90 <__lshift>
 800e326:	4621      	mov	r1, r4
 800e328:	4681      	mov	r9, r0
 800e32a:	f000 fc1d 	bl	800eb68 <__mcmp>
 800e32e:	2800      	cmp	r0, #0
 800e330:	dc03      	bgt.n	800e33a <_dtoa_r+0xa52>
 800e332:	d1e1      	bne.n	800e2f8 <_dtoa_r+0xa10>
 800e334:	f018 0f01 	tst.w	r8, #1
 800e338:	d0de      	beq.n	800e2f8 <_dtoa_r+0xa10>
 800e33a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e33e:	d1d8      	bne.n	800e2f2 <_dtoa_r+0xa0a>
 800e340:	2339      	movs	r3, #57	@ 0x39
 800e342:	9a00      	ldr	r2, [sp, #0]
 800e344:	7013      	strb	r3, [r2, #0]
 800e346:	4633      	mov	r3, r6
 800e348:	461e      	mov	r6, r3
 800e34a:	3b01      	subs	r3, #1
 800e34c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e350:	2a39      	cmp	r2, #57	@ 0x39
 800e352:	d052      	beq.n	800e3fa <_dtoa_r+0xb12>
 800e354:	3201      	adds	r2, #1
 800e356:	701a      	strb	r2, [r3, #0]
 800e358:	e612      	b.n	800df80 <_dtoa_r+0x698>
 800e35a:	2a00      	cmp	r2, #0
 800e35c:	dd07      	ble.n	800e36e <_dtoa_r+0xa86>
 800e35e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e362:	d0ed      	beq.n	800e340 <_dtoa_r+0xa58>
 800e364:	f108 0301 	add.w	r3, r8, #1
 800e368:	9a00      	ldr	r2, [sp, #0]
 800e36a:	7013      	strb	r3, [r2, #0]
 800e36c:	e608      	b.n	800df80 <_dtoa_r+0x698>
 800e36e:	9b07      	ldr	r3, [sp, #28]
 800e370:	9a07      	ldr	r2, [sp, #28]
 800e372:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e378:	4293      	cmp	r3, r2
 800e37a:	d028      	beq.n	800e3ce <_dtoa_r+0xae6>
 800e37c:	4649      	mov	r1, r9
 800e37e:	2300      	movs	r3, #0
 800e380:	220a      	movs	r2, #10
 800e382:	4658      	mov	r0, fp
 800e384:	f000 f9d6 	bl	800e734 <__multadd>
 800e388:	42af      	cmp	r7, r5
 800e38a:	4681      	mov	r9, r0
 800e38c:	f04f 0300 	mov.w	r3, #0
 800e390:	f04f 020a 	mov.w	r2, #10
 800e394:	4639      	mov	r1, r7
 800e396:	4658      	mov	r0, fp
 800e398:	d107      	bne.n	800e3aa <_dtoa_r+0xac2>
 800e39a:	f000 f9cb 	bl	800e734 <__multadd>
 800e39e:	4607      	mov	r7, r0
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	9b07      	ldr	r3, [sp, #28]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	9307      	str	r3, [sp, #28]
 800e3a8:	e774      	b.n	800e294 <_dtoa_r+0x9ac>
 800e3aa:	f000 f9c3 	bl	800e734 <__multadd>
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	220a      	movs	r2, #10
 800e3b6:	4658      	mov	r0, fp
 800e3b8:	f000 f9bc 	bl	800e734 <__multadd>
 800e3bc:	4605      	mov	r5, r0
 800e3be:	e7f0      	b.n	800e3a2 <_dtoa_r+0xaba>
 800e3c0:	9b00      	ldr	r3, [sp, #0]
 800e3c2:	2700      	movs	r7, #0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	bfcc      	ite	gt
 800e3c8:	461e      	movgt	r6, r3
 800e3ca:	2601      	movle	r6, #1
 800e3cc:	4456      	add	r6, sl
 800e3ce:	4649      	mov	r1, r9
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	4658      	mov	r0, fp
 800e3d4:	f000 fb5c 	bl	800ea90 <__lshift>
 800e3d8:	4621      	mov	r1, r4
 800e3da:	4681      	mov	r9, r0
 800e3dc:	f000 fbc4 	bl	800eb68 <__mcmp>
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	dcb0      	bgt.n	800e346 <_dtoa_r+0xa5e>
 800e3e4:	d102      	bne.n	800e3ec <_dtoa_r+0xb04>
 800e3e6:	f018 0f01 	tst.w	r8, #1
 800e3ea:	d1ac      	bne.n	800e346 <_dtoa_r+0xa5e>
 800e3ec:	4633      	mov	r3, r6
 800e3ee:	461e      	mov	r6, r3
 800e3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3f4:	2a30      	cmp	r2, #48	@ 0x30
 800e3f6:	d0fa      	beq.n	800e3ee <_dtoa_r+0xb06>
 800e3f8:	e5c2      	b.n	800df80 <_dtoa_r+0x698>
 800e3fa:	459a      	cmp	sl, r3
 800e3fc:	d1a4      	bne.n	800e348 <_dtoa_r+0xa60>
 800e3fe:	9b04      	ldr	r3, [sp, #16]
 800e400:	3301      	adds	r3, #1
 800e402:	9304      	str	r3, [sp, #16]
 800e404:	2331      	movs	r3, #49	@ 0x31
 800e406:	f88a 3000 	strb.w	r3, [sl]
 800e40a:	e5b9      	b.n	800df80 <_dtoa_r+0x698>
 800e40c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e40e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e46c <_dtoa_r+0xb84>
 800e412:	b11b      	cbz	r3, 800e41c <_dtoa_r+0xb34>
 800e414:	f10a 0308 	add.w	r3, sl, #8
 800e418:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e41a:	6013      	str	r3, [r2, #0]
 800e41c:	4650      	mov	r0, sl
 800e41e:	b019      	add	sp, #100	@ 0x64
 800e420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e426:	2b01      	cmp	r3, #1
 800e428:	f77f ae37 	ble.w	800e09a <_dtoa_r+0x7b2>
 800e42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e42e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e430:	2001      	movs	r0, #1
 800e432:	e655      	b.n	800e0e0 <_dtoa_r+0x7f8>
 800e434:	9b00      	ldr	r3, [sp, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	f77f aed6 	ble.w	800e1e8 <_dtoa_r+0x900>
 800e43c:	4656      	mov	r6, sl
 800e43e:	4621      	mov	r1, r4
 800e440:	4648      	mov	r0, r9
 800e442:	f7ff f9c3 	bl	800d7cc <quorem>
 800e446:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e44a:	9b00      	ldr	r3, [sp, #0]
 800e44c:	f806 8b01 	strb.w	r8, [r6], #1
 800e450:	eba6 020a 	sub.w	r2, r6, sl
 800e454:	4293      	cmp	r3, r2
 800e456:	ddb3      	ble.n	800e3c0 <_dtoa_r+0xad8>
 800e458:	4649      	mov	r1, r9
 800e45a:	2300      	movs	r3, #0
 800e45c:	220a      	movs	r2, #10
 800e45e:	4658      	mov	r0, fp
 800e460:	f000 f968 	bl	800e734 <__multadd>
 800e464:	4681      	mov	r9, r0
 800e466:	e7ea      	b.n	800e43e <_dtoa_r+0xb56>
 800e468:	080113e4 	.word	0x080113e4
 800e46c:	08011368 	.word	0x08011368

0800e470 <_free_r>:
 800e470:	b538      	push	{r3, r4, r5, lr}
 800e472:	4605      	mov	r5, r0
 800e474:	2900      	cmp	r1, #0
 800e476:	d041      	beq.n	800e4fc <_free_r+0x8c>
 800e478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e47c:	1f0c      	subs	r4, r1, #4
 800e47e:	2b00      	cmp	r3, #0
 800e480:	bfb8      	it	lt
 800e482:	18e4      	addlt	r4, r4, r3
 800e484:	f000 f8e8 	bl	800e658 <__malloc_lock>
 800e488:	4a1d      	ldr	r2, [pc, #116]	@ (800e500 <_free_r+0x90>)
 800e48a:	6813      	ldr	r3, [r2, #0]
 800e48c:	b933      	cbnz	r3, 800e49c <_free_r+0x2c>
 800e48e:	6063      	str	r3, [r4, #4]
 800e490:	6014      	str	r4, [r2, #0]
 800e492:	4628      	mov	r0, r5
 800e494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e498:	f000 b8e4 	b.w	800e664 <__malloc_unlock>
 800e49c:	42a3      	cmp	r3, r4
 800e49e:	d908      	bls.n	800e4b2 <_free_r+0x42>
 800e4a0:	6820      	ldr	r0, [r4, #0]
 800e4a2:	1821      	adds	r1, r4, r0
 800e4a4:	428b      	cmp	r3, r1
 800e4a6:	bf01      	itttt	eq
 800e4a8:	6819      	ldreq	r1, [r3, #0]
 800e4aa:	685b      	ldreq	r3, [r3, #4]
 800e4ac:	1809      	addeq	r1, r1, r0
 800e4ae:	6021      	streq	r1, [r4, #0]
 800e4b0:	e7ed      	b.n	800e48e <_free_r+0x1e>
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	b10b      	cbz	r3, 800e4bc <_free_r+0x4c>
 800e4b8:	42a3      	cmp	r3, r4
 800e4ba:	d9fa      	bls.n	800e4b2 <_free_r+0x42>
 800e4bc:	6811      	ldr	r1, [r2, #0]
 800e4be:	1850      	adds	r0, r2, r1
 800e4c0:	42a0      	cmp	r0, r4
 800e4c2:	d10b      	bne.n	800e4dc <_free_r+0x6c>
 800e4c4:	6820      	ldr	r0, [r4, #0]
 800e4c6:	4401      	add	r1, r0
 800e4c8:	1850      	adds	r0, r2, r1
 800e4ca:	6011      	str	r1, [r2, #0]
 800e4cc:	4283      	cmp	r3, r0
 800e4ce:	d1e0      	bne.n	800e492 <_free_r+0x22>
 800e4d0:	6818      	ldr	r0, [r3, #0]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	4408      	add	r0, r1
 800e4d6:	6053      	str	r3, [r2, #4]
 800e4d8:	6010      	str	r0, [r2, #0]
 800e4da:	e7da      	b.n	800e492 <_free_r+0x22>
 800e4dc:	d902      	bls.n	800e4e4 <_free_r+0x74>
 800e4de:	230c      	movs	r3, #12
 800e4e0:	602b      	str	r3, [r5, #0]
 800e4e2:	e7d6      	b.n	800e492 <_free_r+0x22>
 800e4e4:	6820      	ldr	r0, [r4, #0]
 800e4e6:	1821      	adds	r1, r4, r0
 800e4e8:	428b      	cmp	r3, r1
 800e4ea:	bf02      	ittt	eq
 800e4ec:	6819      	ldreq	r1, [r3, #0]
 800e4ee:	685b      	ldreq	r3, [r3, #4]
 800e4f0:	1809      	addeq	r1, r1, r0
 800e4f2:	6063      	str	r3, [r4, #4]
 800e4f4:	bf08      	it	eq
 800e4f6:	6021      	streq	r1, [r4, #0]
 800e4f8:	6054      	str	r4, [r2, #4]
 800e4fa:	e7ca      	b.n	800e492 <_free_r+0x22>
 800e4fc:	bd38      	pop	{r3, r4, r5, pc}
 800e4fe:	bf00      	nop
 800e500:	20028b00 	.word	0x20028b00

0800e504 <malloc>:
 800e504:	4b02      	ldr	r3, [pc, #8]	@ (800e510 <malloc+0xc>)
 800e506:	4601      	mov	r1, r0
 800e508:	6818      	ldr	r0, [r3, #0]
 800e50a:	f000 b825 	b.w	800e558 <_malloc_r>
 800e50e:	bf00      	nop
 800e510:	20000038 	.word	0x20000038

0800e514 <sbrk_aligned>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	4e0f      	ldr	r6, [pc, #60]	@ (800e554 <sbrk_aligned+0x40>)
 800e518:	460c      	mov	r4, r1
 800e51a:	4605      	mov	r5, r0
 800e51c:	6831      	ldr	r1, [r6, #0]
 800e51e:	b911      	cbnz	r1, 800e526 <sbrk_aligned+0x12>
 800e520:	f000 fe4c 	bl	800f1bc <_sbrk_r>
 800e524:	6030      	str	r0, [r6, #0]
 800e526:	4621      	mov	r1, r4
 800e528:	4628      	mov	r0, r5
 800e52a:	f000 fe47 	bl	800f1bc <_sbrk_r>
 800e52e:	1c43      	adds	r3, r0, #1
 800e530:	d103      	bne.n	800e53a <sbrk_aligned+0x26>
 800e532:	f04f 34ff 	mov.w	r4, #4294967295
 800e536:	4620      	mov	r0, r4
 800e538:	bd70      	pop	{r4, r5, r6, pc}
 800e53a:	1cc4      	adds	r4, r0, #3
 800e53c:	f024 0403 	bic.w	r4, r4, #3
 800e540:	42a0      	cmp	r0, r4
 800e542:	d0f8      	beq.n	800e536 <sbrk_aligned+0x22>
 800e544:	1a21      	subs	r1, r4, r0
 800e546:	4628      	mov	r0, r5
 800e548:	f000 fe38 	bl	800f1bc <_sbrk_r>
 800e54c:	3001      	adds	r0, #1
 800e54e:	d1f2      	bne.n	800e536 <sbrk_aligned+0x22>
 800e550:	e7ef      	b.n	800e532 <sbrk_aligned+0x1e>
 800e552:	bf00      	nop
 800e554:	20028afc 	.word	0x20028afc

0800e558 <_malloc_r>:
 800e558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e55c:	1ccd      	adds	r5, r1, #3
 800e55e:	4606      	mov	r6, r0
 800e560:	f025 0503 	bic.w	r5, r5, #3
 800e564:	3508      	adds	r5, #8
 800e566:	2d0c      	cmp	r5, #12
 800e568:	bf38      	it	cc
 800e56a:	250c      	movcc	r5, #12
 800e56c:	2d00      	cmp	r5, #0
 800e56e:	db01      	blt.n	800e574 <_malloc_r+0x1c>
 800e570:	42a9      	cmp	r1, r5
 800e572:	d904      	bls.n	800e57e <_malloc_r+0x26>
 800e574:	230c      	movs	r3, #12
 800e576:	6033      	str	r3, [r6, #0]
 800e578:	2000      	movs	r0, #0
 800e57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e57e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e654 <_malloc_r+0xfc>
 800e582:	f000 f869 	bl	800e658 <__malloc_lock>
 800e586:	f8d8 3000 	ldr.w	r3, [r8]
 800e58a:	461c      	mov	r4, r3
 800e58c:	bb44      	cbnz	r4, 800e5e0 <_malloc_r+0x88>
 800e58e:	4629      	mov	r1, r5
 800e590:	4630      	mov	r0, r6
 800e592:	f7ff ffbf 	bl	800e514 <sbrk_aligned>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	4604      	mov	r4, r0
 800e59a:	d158      	bne.n	800e64e <_malloc_r+0xf6>
 800e59c:	f8d8 4000 	ldr.w	r4, [r8]
 800e5a0:	4627      	mov	r7, r4
 800e5a2:	2f00      	cmp	r7, #0
 800e5a4:	d143      	bne.n	800e62e <_malloc_r+0xd6>
 800e5a6:	2c00      	cmp	r4, #0
 800e5a8:	d04b      	beq.n	800e642 <_malloc_r+0xea>
 800e5aa:	6823      	ldr	r3, [r4, #0]
 800e5ac:	4639      	mov	r1, r7
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	eb04 0903 	add.w	r9, r4, r3
 800e5b4:	f000 fe02 	bl	800f1bc <_sbrk_r>
 800e5b8:	4581      	cmp	r9, r0
 800e5ba:	d142      	bne.n	800e642 <_malloc_r+0xea>
 800e5bc:	6821      	ldr	r1, [r4, #0]
 800e5be:	4630      	mov	r0, r6
 800e5c0:	1a6d      	subs	r5, r5, r1
 800e5c2:	4629      	mov	r1, r5
 800e5c4:	f7ff ffa6 	bl	800e514 <sbrk_aligned>
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	d03a      	beq.n	800e642 <_malloc_r+0xea>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	442b      	add	r3, r5
 800e5d0:	6023      	str	r3, [r4, #0]
 800e5d2:	f8d8 3000 	ldr.w	r3, [r8]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	bb62      	cbnz	r2, 800e634 <_malloc_r+0xdc>
 800e5da:	f8c8 7000 	str.w	r7, [r8]
 800e5de:	e00f      	b.n	800e600 <_malloc_r+0xa8>
 800e5e0:	6822      	ldr	r2, [r4, #0]
 800e5e2:	1b52      	subs	r2, r2, r5
 800e5e4:	d420      	bmi.n	800e628 <_malloc_r+0xd0>
 800e5e6:	2a0b      	cmp	r2, #11
 800e5e8:	d917      	bls.n	800e61a <_malloc_r+0xc2>
 800e5ea:	1961      	adds	r1, r4, r5
 800e5ec:	42a3      	cmp	r3, r4
 800e5ee:	6025      	str	r5, [r4, #0]
 800e5f0:	bf18      	it	ne
 800e5f2:	6059      	strne	r1, [r3, #4]
 800e5f4:	6863      	ldr	r3, [r4, #4]
 800e5f6:	bf08      	it	eq
 800e5f8:	f8c8 1000 	streq.w	r1, [r8]
 800e5fc:	5162      	str	r2, [r4, r5]
 800e5fe:	604b      	str	r3, [r1, #4]
 800e600:	4630      	mov	r0, r6
 800e602:	f000 f82f 	bl	800e664 <__malloc_unlock>
 800e606:	f104 000b 	add.w	r0, r4, #11
 800e60a:	1d23      	adds	r3, r4, #4
 800e60c:	f020 0007 	bic.w	r0, r0, #7
 800e610:	1ac2      	subs	r2, r0, r3
 800e612:	bf1c      	itt	ne
 800e614:	1a1b      	subne	r3, r3, r0
 800e616:	50a3      	strne	r3, [r4, r2]
 800e618:	e7af      	b.n	800e57a <_malloc_r+0x22>
 800e61a:	6862      	ldr	r2, [r4, #4]
 800e61c:	42a3      	cmp	r3, r4
 800e61e:	bf0c      	ite	eq
 800e620:	f8c8 2000 	streq.w	r2, [r8]
 800e624:	605a      	strne	r2, [r3, #4]
 800e626:	e7eb      	b.n	800e600 <_malloc_r+0xa8>
 800e628:	4623      	mov	r3, r4
 800e62a:	6864      	ldr	r4, [r4, #4]
 800e62c:	e7ae      	b.n	800e58c <_malloc_r+0x34>
 800e62e:	463c      	mov	r4, r7
 800e630:	687f      	ldr	r7, [r7, #4]
 800e632:	e7b6      	b.n	800e5a2 <_malloc_r+0x4a>
 800e634:	461a      	mov	r2, r3
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	42a3      	cmp	r3, r4
 800e63a:	d1fb      	bne.n	800e634 <_malloc_r+0xdc>
 800e63c:	2300      	movs	r3, #0
 800e63e:	6053      	str	r3, [r2, #4]
 800e640:	e7de      	b.n	800e600 <_malloc_r+0xa8>
 800e642:	230c      	movs	r3, #12
 800e644:	4630      	mov	r0, r6
 800e646:	6033      	str	r3, [r6, #0]
 800e648:	f000 f80c 	bl	800e664 <__malloc_unlock>
 800e64c:	e794      	b.n	800e578 <_malloc_r+0x20>
 800e64e:	6005      	str	r5, [r0, #0]
 800e650:	e7d6      	b.n	800e600 <_malloc_r+0xa8>
 800e652:	bf00      	nop
 800e654:	20028b00 	.word	0x20028b00

0800e658 <__malloc_lock>:
 800e658:	4801      	ldr	r0, [pc, #4]	@ (800e660 <__malloc_lock+0x8>)
 800e65a:	f7ff b89a 	b.w	800d792 <__retarget_lock_acquire_recursive>
 800e65e:	bf00      	nop
 800e660:	20028af8 	.word	0x20028af8

0800e664 <__malloc_unlock>:
 800e664:	4801      	ldr	r0, [pc, #4]	@ (800e66c <__malloc_unlock+0x8>)
 800e666:	f7ff b895 	b.w	800d794 <__retarget_lock_release_recursive>
 800e66a:	bf00      	nop
 800e66c:	20028af8 	.word	0x20028af8

0800e670 <_Balloc>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	69c6      	ldr	r6, [r0, #28]
 800e674:	4604      	mov	r4, r0
 800e676:	460d      	mov	r5, r1
 800e678:	b976      	cbnz	r6, 800e698 <_Balloc+0x28>
 800e67a:	2010      	movs	r0, #16
 800e67c:	f7ff ff42 	bl	800e504 <malloc>
 800e680:	4602      	mov	r2, r0
 800e682:	61e0      	str	r0, [r4, #28]
 800e684:	b920      	cbnz	r0, 800e690 <_Balloc+0x20>
 800e686:	4b18      	ldr	r3, [pc, #96]	@ (800e6e8 <_Balloc+0x78>)
 800e688:	216b      	movs	r1, #107	@ 0x6b
 800e68a:	4818      	ldr	r0, [pc, #96]	@ (800e6ec <_Balloc+0x7c>)
 800e68c:	f000 fda6 	bl	800f1dc <__assert_func>
 800e690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e694:	6006      	str	r6, [r0, #0]
 800e696:	60c6      	str	r6, [r0, #12]
 800e698:	69e6      	ldr	r6, [r4, #28]
 800e69a:	68f3      	ldr	r3, [r6, #12]
 800e69c:	b183      	cbz	r3, 800e6c0 <_Balloc+0x50>
 800e69e:	69e3      	ldr	r3, [r4, #28]
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6a6:	b9b8      	cbnz	r0, 800e6d8 <_Balloc+0x68>
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	fa01 f605 	lsl.w	r6, r1, r5
 800e6b0:	1d72      	adds	r2, r6, #5
 800e6b2:	0092      	lsls	r2, r2, #2
 800e6b4:	f000 fdb0 	bl	800f218 <_calloc_r>
 800e6b8:	b160      	cbz	r0, 800e6d4 <_Balloc+0x64>
 800e6ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e6be:	e00e      	b.n	800e6de <_Balloc+0x6e>
 800e6c0:	2221      	movs	r2, #33	@ 0x21
 800e6c2:	2104      	movs	r1, #4
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f000 fda7 	bl	800f218 <_calloc_r>
 800e6ca:	69e3      	ldr	r3, [r4, #28]
 800e6cc:	60f0      	str	r0, [r6, #12]
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1e4      	bne.n	800e69e <_Balloc+0x2e>
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	6802      	ldr	r2, [r0, #0]
 800e6da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6de:	2300      	movs	r3, #0
 800e6e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6e4:	e7f7      	b.n	800e6d6 <_Balloc+0x66>
 800e6e6:	bf00      	nop
 800e6e8:	08011375 	.word	0x08011375
 800e6ec:	080113f5 	.word	0x080113f5

0800e6f0 <_Bfree>:
 800e6f0:	b570      	push	{r4, r5, r6, lr}
 800e6f2:	69c6      	ldr	r6, [r0, #28]
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	b976      	cbnz	r6, 800e718 <_Bfree+0x28>
 800e6fa:	2010      	movs	r0, #16
 800e6fc:	f7ff ff02 	bl	800e504 <malloc>
 800e700:	4602      	mov	r2, r0
 800e702:	61e8      	str	r0, [r5, #28]
 800e704:	b920      	cbnz	r0, 800e710 <_Bfree+0x20>
 800e706:	4b09      	ldr	r3, [pc, #36]	@ (800e72c <_Bfree+0x3c>)
 800e708:	218f      	movs	r1, #143	@ 0x8f
 800e70a:	4809      	ldr	r0, [pc, #36]	@ (800e730 <_Bfree+0x40>)
 800e70c:	f000 fd66 	bl	800f1dc <__assert_func>
 800e710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e714:	6006      	str	r6, [r0, #0]
 800e716:	60c6      	str	r6, [r0, #12]
 800e718:	b13c      	cbz	r4, 800e72a <_Bfree+0x3a>
 800e71a:	69eb      	ldr	r3, [r5, #28]
 800e71c:	6862      	ldr	r2, [r4, #4]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e724:	6021      	str	r1, [r4, #0]
 800e726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e72a:	bd70      	pop	{r4, r5, r6, pc}
 800e72c:	08011375 	.word	0x08011375
 800e730:	080113f5 	.word	0x080113f5

0800e734 <__multadd>:
 800e734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e738:	f101 0c14 	add.w	ip, r1, #20
 800e73c:	4607      	mov	r7, r0
 800e73e:	460c      	mov	r4, r1
 800e740:	461e      	mov	r6, r3
 800e742:	690d      	ldr	r5, [r1, #16]
 800e744:	2000      	movs	r0, #0
 800e746:	f8dc 3000 	ldr.w	r3, [ip]
 800e74a:	3001      	adds	r0, #1
 800e74c:	b299      	uxth	r1, r3
 800e74e:	4285      	cmp	r5, r0
 800e750:	fb02 6101 	mla	r1, r2, r1, r6
 800e754:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e758:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e75c:	b289      	uxth	r1, r1
 800e75e:	fb02 3306 	mla	r3, r2, r6, r3
 800e762:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e766:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e76a:	f84c 1b04 	str.w	r1, [ip], #4
 800e76e:	dcea      	bgt.n	800e746 <__multadd+0x12>
 800e770:	b30e      	cbz	r6, 800e7b6 <__multadd+0x82>
 800e772:	68a3      	ldr	r3, [r4, #8]
 800e774:	42ab      	cmp	r3, r5
 800e776:	dc19      	bgt.n	800e7ac <__multadd+0x78>
 800e778:	6861      	ldr	r1, [r4, #4]
 800e77a:	4638      	mov	r0, r7
 800e77c:	3101      	adds	r1, #1
 800e77e:	f7ff ff77 	bl	800e670 <_Balloc>
 800e782:	4680      	mov	r8, r0
 800e784:	b928      	cbnz	r0, 800e792 <__multadd+0x5e>
 800e786:	4602      	mov	r2, r0
 800e788:	4b0c      	ldr	r3, [pc, #48]	@ (800e7bc <__multadd+0x88>)
 800e78a:	21ba      	movs	r1, #186	@ 0xba
 800e78c:	480c      	ldr	r0, [pc, #48]	@ (800e7c0 <__multadd+0x8c>)
 800e78e:	f000 fd25 	bl	800f1dc <__assert_func>
 800e792:	6922      	ldr	r2, [r4, #16]
 800e794:	f104 010c 	add.w	r1, r4, #12
 800e798:	300c      	adds	r0, #12
 800e79a:	3202      	adds	r2, #2
 800e79c:	0092      	lsls	r2, r2, #2
 800e79e:	f7ff f808 	bl	800d7b2 <memcpy>
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	4644      	mov	r4, r8
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	f7ff ffa2 	bl	800e6f0 <_Bfree>
 800e7ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e7b0:	3501      	adds	r5, #1
 800e7b2:	615e      	str	r6, [r3, #20]
 800e7b4:	6125      	str	r5, [r4, #16]
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7bc:	080113e4 	.word	0x080113e4
 800e7c0:	080113f5 	.word	0x080113f5

0800e7c4 <__hi0bits>:
 800e7c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	bf36      	itet	cc
 800e7cc:	0403      	lslcc	r3, r0, #16
 800e7ce:	2000      	movcs	r0, #0
 800e7d0:	2010      	movcc	r0, #16
 800e7d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e7d6:	bf3c      	itt	cc
 800e7d8:	021b      	lslcc	r3, r3, #8
 800e7da:	3008      	addcc	r0, #8
 800e7dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7e0:	bf3c      	itt	cc
 800e7e2:	011b      	lslcc	r3, r3, #4
 800e7e4:	3004      	addcc	r0, #4
 800e7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7ea:	bf3c      	itt	cc
 800e7ec:	009b      	lslcc	r3, r3, #2
 800e7ee:	3002      	addcc	r0, #2
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	db05      	blt.n	800e800 <__hi0bits+0x3c>
 800e7f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e7f8:	f100 0001 	add.w	r0, r0, #1
 800e7fc:	bf08      	it	eq
 800e7fe:	2020      	moveq	r0, #32
 800e800:	4770      	bx	lr

0800e802 <__lo0bits>:
 800e802:	6803      	ldr	r3, [r0, #0]
 800e804:	4602      	mov	r2, r0
 800e806:	f013 0007 	ands.w	r0, r3, #7
 800e80a:	d00b      	beq.n	800e824 <__lo0bits+0x22>
 800e80c:	07d9      	lsls	r1, r3, #31
 800e80e:	d421      	bmi.n	800e854 <__lo0bits+0x52>
 800e810:	0798      	lsls	r0, r3, #30
 800e812:	bf47      	ittee	mi
 800e814:	085b      	lsrmi	r3, r3, #1
 800e816:	2001      	movmi	r0, #1
 800e818:	089b      	lsrpl	r3, r3, #2
 800e81a:	2002      	movpl	r0, #2
 800e81c:	bf4c      	ite	mi
 800e81e:	6013      	strmi	r3, [r2, #0]
 800e820:	6013      	strpl	r3, [r2, #0]
 800e822:	4770      	bx	lr
 800e824:	b299      	uxth	r1, r3
 800e826:	b909      	cbnz	r1, 800e82c <__lo0bits+0x2a>
 800e828:	0c1b      	lsrs	r3, r3, #16
 800e82a:	2010      	movs	r0, #16
 800e82c:	b2d9      	uxtb	r1, r3
 800e82e:	b909      	cbnz	r1, 800e834 <__lo0bits+0x32>
 800e830:	3008      	adds	r0, #8
 800e832:	0a1b      	lsrs	r3, r3, #8
 800e834:	0719      	lsls	r1, r3, #28
 800e836:	bf04      	itt	eq
 800e838:	091b      	lsreq	r3, r3, #4
 800e83a:	3004      	addeq	r0, #4
 800e83c:	0799      	lsls	r1, r3, #30
 800e83e:	bf04      	itt	eq
 800e840:	089b      	lsreq	r3, r3, #2
 800e842:	3002      	addeq	r0, #2
 800e844:	07d9      	lsls	r1, r3, #31
 800e846:	d403      	bmi.n	800e850 <__lo0bits+0x4e>
 800e848:	085b      	lsrs	r3, r3, #1
 800e84a:	f100 0001 	add.w	r0, r0, #1
 800e84e:	d003      	beq.n	800e858 <__lo0bits+0x56>
 800e850:	6013      	str	r3, [r2, #0]
 800e852:	4770      	bx	lr
 800e854:	2000      	movs	r0, #0
 800e856:	4770      	bx	lr
 800e858:	2020      	movs	r0, #32
 800e85a:	4770      	bx	lr

0800e85c <__i2b>:
 800e85c:	b510      	push	{r4, lr}
 800e85e:	460c      	mov	r4, r1
 800e860:	2101      	movs	r1, #1
 800e862:	f7ff ff05 	bl	800e670 <_Balloc>
 800e866:	4602      	mov	r2, r0
 800e868:	b928      	cbnz	r0, 800e876 <__i2b+0x1a>
 800e86a:	4b05      	ldr	r3, [pc, #20]	@ (800e880 <__i2b+0x24>)
 800e86c:	f240 1145 	movw	r1, #325	@ 0x145
 800e870:	4804      	ldr	r0, [pc, #16]	@ (800e884 <__i2b+0x28>)
 800e872:	f000 fcb3 	bl	800f1dc <__assert_func>
 800e876:	2301      	movs	r3, #1
 800e878:	6144      	str	r4, [r0, #20]
 800e87a:	6103      	str	r3, [r0, #16]
 800e87c:	bd10      	pop	{r4, pc}
 800e87e:	bf00      	nop
 800e880:	080113e4 	.word	0x080113e4
 800e884:	080113f5 	.word	0x080113f5

0800e888 <__multiply>:
 800e888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88c:	4614      	mov	r4, r2
 800e88e:	690a      	ldr	r2, [r1, #16]
 800e890:	460f      	mov	r7, r1
 800e892:	b085      	sub	sp, #20
 800e894:	6923      	ldr	r3, [r4, #16]
 800e896:	429a      	cmp	r2, r3
 800e898:	bfa2      	ittt	ge
 800e89a:	4623      	movge	r3, r4
 800e89c:	460c      	movge	r4, r1
 800e89e:	461f      	movge	r7, r3
 800e8a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e8a4:	68a3      	ldr	r3, [r4, #8]
 800e8a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e8aa:	6861      	ldr	r1, [r4, #4]
 800e8ac:	eb0a 0609 	add.w	r6, sl, r9
 800e8b0:	42b3      	cmp	r3, r6
 800e8b2:	bfb8      	it	lt
 800e8b4:	3101      	addlt	r1, #1
 800e8b6:	f7ff fedb 	bl	800e670 <_Balloc>
 800e8ba:	b930      	cbnz	r0, 800e8ca <__multiply+0x42>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	4b45      	ldr	r3, [pc, #276]	@ (800e9d4 <__multiply+0x14c>)
 800e8c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e8c4:	4844      	ldr	r0, [pc, #272]	@ (800e9d8 <__multiply+0x150>)
 800e8c6:	f000 fc89 	bl	800f1dc <__assert_func>
 800e8ca:	f100 0514 	add.w	r5, r0, #20
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e8d4:	462b      	mov	r3, r5
 800e8d6:	4543      	cmp	r3, r8
 800e8d8:	d321      	bcc.n	800e91e <__multiply+0x96>
 800e8da:	f107 0114 	add.w	r1, r7, #20
 800e8de:	f104 0214 	add.w	r2, r4, #20
 800e8e2:	f104 0715 	add.w	r7, r4, #21
 800e8e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e8ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e8ee:	9302      	str	r3, [sp, #8]
 800e8f0:	1b13      	subs	r3, r2, r4
 800e8f2:	3b15      	subs	r3, #21
 800e8f4:	f023 0303 	bic.w	r3, r3, #3
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	42ba      	cmp	r2, r7
 800e8fc:	bf38      	it	cc
 800e8fe:	2304      	movcc	r3, #4
 800e900:	9301      	str	r3, [sp, #4]
 800e902:	9b02      	ldr	r3, [sp, #8]
 800e904:	9103      	str	r1, [sp, #12]
 800e906:	428b      	cmp	r3, r1
 800e908:	d80c      	bhi.n	800e924 <__multiply+0x9c>
 800e90a:	2e00      	cmp	r6, #0
 800e90c:	dd03      	ble.n	800e916 <__multiply+0x8e>
 800e90e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e912:	2b00      	cmp	r3, #0
 800e914:	d05b      	beq.n	800e9ce <__multiply+0x146>
 800e916:	6106      	str	r6, [r0, #16]
 800e918:	b005      	add	sp, #20
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	f843 2b04 	str.w	r2, [r3], #4
 800e922:	e7d8      	b.n	800e8d6 <__multiply+0x4e>
 800e924:	f8b1 a000 	ldrh.w	sl, [r1]
 800e928:	f1ba 0f00 	cmp.w	sl, #0
 800e92c:	d024      	beq.n	800e978 <__multiply+0xf0>
 800e92e:	f104 0e14 	add.w	lr, r4, #20
 800e932:	46a9      	mov	r9, r5
 800e934:	f04f 0c00 	mov.w	ip, #0
 800e938:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e93c:	f8d9 3000 	ldr.w	r3, [r9]
 800e940:	fa1f fb87 	uxth.w	fp, r7
 800e944:	4572      	cmp	r2, lr
 800e946:	b29b      	uxth	r3, r3
 800e948:	fb0a 330b 	mla	r3, sl, fp, r3
 800e94c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e950:	f8d9 7000 	ldr.w	r7, [r9]
 800e954:	4463      	add	r3, ip
 800e956:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e95a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e95e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e962:	b29b      	uxth	r3, r3
 800e964:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e968:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e96c:	f849 3b04 	str.w	r3, [r9], #4
 800e970:	d8e2      	bhi.n	800e938 <__multiply+0xb0>
 800e972:	9b01      	ldr	r3, [sp, #4]
 800e974:	f845 c003 	str.w	ip, [r5, r3]
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	3104      	adds	r1, #4
 800e97c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e980:	f1b9 0f00 	cmp.w	r9, #0
 800e984:	d021      	beq.n	800e9ca <__multiply+0x142>
 800e986:	682b      	ldr	r3, [r5, #0]
 800e988:	f104 0c14 	add.w	ip, r4, #20
 800e98c:	46ae      	mov	lr, r5
 800e98e:	f04f 0a00 	mov.w	sl, #0
 800e992:	f8bc b000 	ldrh.w	fp, [ip]
 800e996:	b29b      	uxth	r3, r3
 800e998:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e99c:	fb09 770b 	mla	r7, r9, fp, r7
 800e9a0:	4457      	add	r7, sl
 800e9a2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e9a6:	f84e 3b04 	str.w	r3, [lr], #4
 800e9aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e9ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9b2:	f8be 3000 	ldrh.w	r3, [lr]
 800e9b6:	4562      	cmp	r2, ip
 800e9b8:	fb09 330a 	mla	r3, r9, sl, r3
 800e9bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e9c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9c4:	d8e5      	bhi.n	800e992 <__multiply+0x10a>
 800e9c6:	9f01      	ldr	r7, [sp, #4]
 800e9c8:	51eb      	str	r3, [r5, r7]
 800e9ca:	3504      	adds	r5, #4
 800e9cc:	e799      	b.n	800e902 <__multiply+0x7a>
 800e9ce:	3e01      	subs	r6, #1
 800e9d0:	e79b      	b.n	800e90a <__multiply+0x82>
 800e9d2:	bf00      	nop
 800e9d4:	080113e4 	.word	0x080113e4
 800e9d8:	080113f5 	.word	0x080113f5

0800e9dc <__pow5mult>:
 800e9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9e0:	4615      	mov	r5, r2
 800e9e2:	f012 0203 	ands.w	r2, r2, #3
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	460e      	mov	r6, r1
 800e9ea:	d007      	beq.n	800e9fc <__pow5mult+0x20>
 800e9ec:	3a01      	subs	r2, #1
 800e9ee:	4c25      	ldr	r4, [pc, #148]	@ (800ea84 <__pow5mult+0xa8>)
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9f6:	f7ff fe9d 	bl	800e734 <__multadd>
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	10ad      	asrs	r5, r5, #2
 800e9fe:	d03d      	beq.n	800ea7c <__pow5mult+0xa0>
 800ea00:	69fc      	ldr	r4, [r7, #28]
 800ea02:	b97c      	cbnz	r4, 800ea24 <__pow5mult+0x48>
 800ea04:	2010      	movs	r0, #16
 800ea06:	f7ff fd7d 	bl	800e504 <malloc>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	61f8      	str	r0, [r7, #28]
 800ea0e:	b928      	cbnz	r0, 800ea1c <__pow5mult+0x40>
 800ea10:	4b1d      	ldr	r3, [pc, #116]	@ (800ea88 <__pow5mult+0xac>)
 800ea12:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ea16:	481d      	ldr	r0, [pc, #116]	@ (800ea8c <__pow5mult+0xb0>)
 800ea18:	f000 fbe0 	bl	800f1dc <__assert_func>
 800ea1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea20:	6004      	str	r4, [r0, #0]
 800ea22:	60c4      	str	r4, [r0, #12]
 800ea24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ea28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea2c:	b94c      	cbnz	r4, 800ea42 <__pow5mult+0x66>
 800ea2e:	f240 2171 	movw	r1, #625	@ 0x271
 800ea32:	4638      	mov	r0, r7
 800ea34:	f7ff ff12 	bl	800e85c <__i2b>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea40:	6003      	str	r3, [r0, #0]
 800ea42:	f04f 0900 	mov.w	r9, #0
 800ea46:	07eb      	lsls	r3, r5, #31
 800ea48:	d50a      	bpl.n	800ea60 <__pow5mult+0x84>
 800ea4a:	4631      	mov	r1, r6
 800ea4c:	4622      	mov	r2, r4
 800ea4e:	4638      	mov	r0, r7
 800ea50:	f7ff ff1a 	bl	800e888 <__multiply>
 800ea54:	4680      	mov	r8, r0
 800ea56:	4631      	mov	r1, r6
 800ea58:	4638      	mov	r0, r7
 800ea5a:	4646      	mov	r6, r8
 800ea5c:	f7ff fe48 	bl	800e6f0 <_Bfree>
 800ea60:	106d      	asrs	r5, r5, #1
 800ea62:	d00b      	beq.n	800ea7c <__pow5mult+0xa0>
 800ea64:	6820      	ldr	r0, [r4, #0]
 800ea66:	b938      	cbnz	r0, 800ea78 <__pow5mult+0x9c>
 800ea68:	4622      	mov	r2, r4
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	4638      	mov	r0, r7
 800ea6e:	f7ff ff0b 	bl	800e888 <__multiply>
 800ea72:	6020      	str	r0, [r4, #0]
 800ea74:	f8c0 9000 	str.w	r9, [r0]
 800ea78:	4604      	mov	r4, r0
 800ea7a:	e7e4      	b.n	800ea46 <__pow5mult+0x6a>
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea82:	bf00      	nop
 800ea84:	08011450 	.word	0x08011450
 800ea88:	08011375 	.word	0x08011375
 800ea8c:	080113f5 	.word	0x080113f5

0800ea90 <__lshift>:
 800ea90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea94:	460c      	mov	r4, r1
 800ea96:	4607      	mov	r7, r0
 800ea98:	4691      	mov	r9, r2
 800ea9a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea9e:	6923      	ldr	r3, [r4, #16]
 800eaa0:	6849      	ldr	r1, [r1, #4]
 800eaa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eaa6:	68a3      	ldr	r3, [r4, #8]
 800eaa8:	f108 0601 	add.w	r6, r8, #1
 800eaac:	42b3      	cmp	r3, r6
 800eaae:	db0b      	blt.n	800eac8 <__lshift+0x38>
 800eab0:	4638      	mov	r0, r7
 800eab2:	f7ff fddd 	bl	800e670 <_Balloc>
 800eab6:	4605      	mov	r5, r0
 800eab8:	b948      	cbnz	r0, 800eace <__lshift+0x3e>
 800eaba:	4602      	mov	r2, r0
 800eabc:	4b28      	ldr	r3, [pc, #160]	@ (800eb60 <__lshift+0xd0>)
 800eabe:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eac2:	4828      	ldr	r0, [pc, #160]	@ (800eb64 <__lshift+0xd4>)
 800eac4:	f000 fb8a 	bl	800f1dc <__assert_func>
 800eac8:	3101      	adds	r1, #1
 800eaca:	005b      	lsls	r3, r3, #1
 800eacc:	e7ee      	b.n	800eaac <__lshift+0x1c>
 800eace:	2300      	movs	r3, #0
 800ead0:	f100 0114 	add.w	r1, r0, #20
 800ead4:	f100 0210 	add.w	r2, r0, #16
 800ead8:	4618      	mov	r0, r3
 800eada:	4553      	cmp	r3, sl
 800eadc:	db33      	blt.n	800eb46 <__lshift+0xb6>
 800eade:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eae2:	f104 0314 	add.w	r3, r4, #20
 800eae6:	6920      	ldr	r0, [r4, #16]
 800eae8:	f019 091f 	ands.w	r9, r9, #31
 800eaec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eaf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eaf4:	d02b      	beq.n	800eb4e <__lshift+0xbe>
 800eaf6:	f1c9 0e20 	rsb	lr, r9, #32
 800eafa:	468a      	mov	sl, r1
 800eafc:	2200      	movs	r2, #0
 800eafe:	6818      	ldr	r0, [r3, #0]
 800eb00:	fa00 f009 	lsl.w	r0, r0, r9
 800eb04:	4310      	orrs	r0, r2
 800eb06:	f84a 0b04 	str.w	r0, [sl], #4
 800eb0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb0e:	459c      	cmp	ip, r3
 800eb10:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb14:	d8f3      	bhi.n	800eafe <__lshift+0x6e>
 800eb16:	ebac 0304 	sub.w	r3, ip, r4
 800eb1a:	f104 0015 	add.w	r0, r4, #21
 800eb1e:	3b15      	subs	r3, #21
 800eb20:	f023 0303 	bic.w	r3, r3, #3
 800eb24:	3304      	adds	r3, #4
 800eb26:	4584      	cmp	ip, r0
 800eb28:	bf38      	it	cc
 800eb2a:	2304      	movcc	r3, #4
 800eb2c:	50ca      	str	r2, [r1, r3]
 800eb2e:	b10a      	cbz	r2, 800eb34 <__lshift+0xa4>
 800eb30:	f108 0602 	add.w	r6, r8, #2
 800eb34:	3e01      	subs	r6, #1
 800eb36:	4638      	mov	r0, r7
 800eb38:	4621      	mov	r1, r4
 800eb3a:	612e      	str	r6, [r5, #16]
 800eb3c:	f7ff fdd8 	bl	800e6f0 <_Bfree>
 800eb40:	4628      	mov	r0, r5
 800eb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb46:	3301      	adds	r3, #1
 800eb48:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb4c:	e7c5      	b.n	800eada <__lshift+0x4a>
 800eb4e:	3904      	subs	r1, #4
 800eb50:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb54:	459c      	cmp	ip, r3
 800eb56:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb5a:	d8f9      	bhi.n	800eb50 <__lshift+0xc0>
 800eb5c:	e7ea      	b.n	800eb34 <__lshift+0xa4>
 800eb5e:	bf00      	nop
 800eb60:	080113e4 	.word	0x080113e4
 800eb64:	080113f5 	.word	0x080113f5

0800eb68 <__mcmp>:
 800eb68:	4603      	mov	r3, r0
 800eb6a:	690a      	ldr	r2, [r1, #16]
 800eb6c:	6900      	ldr	r0, [r0, #16]
 800eb6e:	1a80      	subs	r0, r0, r2
 800eb70:	b530      	push	{r4, r5, lr}
 800eb72:	d10e      	bne.n	800eb92 <__mcmp+0x2a>
 800eb74:	3314      	adds	r3, #20
 800eb76:	3114      	adds	r1, #20
 800eb78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eb7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eb80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eb84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb88:	4295      	cmp	r5, r2
 800eb8a:	d003      	beq.n	800eb94 <__mcmp+0x2c>
 800eb8c:	d205      	bcs.n	800eb9a <__mcmp+0x32>
 800eb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb92:	bd30      	pop	{r4, r5, pc}
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	d3f3      	bcc.n	800eb80 <__mcmp+0x18>
 800eb98:	e7fb      	b.n	800eb92 <__mcmp+0x2a>
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	e7f9      	b.n	800eb92 <__mcmp+0x2a>
	...

0800eba0 <__mdiff>:
 800eba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba4:	4689      	mov	r9, r1
 800eba6:	4606      	mov	r6, r0
 800eba8:	4611      	mov	r1, r2
 800ebaa:	4614      	mov	r4, r2
 800ebac:	4648      	mov	r0, r9
 800ebae:	f7ff ffdb 	bl	800eb68 <__mcmp>
 800ebb2:	1e05      	subs	r5, r0, #0
 800ebb4:	d112      	bne.n	800ebdc <__mdiff+0x3c>
 800ebb6:	4629      	mov	r1, r5
 800ebb8:	4630      	mov	r0, r6
 800ebba:	f7ff fd59 	bl	800e670 <_Balloc>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	b928      	cbnz	r0, 800ebce <__mdiff+0x2e>
 800ebc2:	4b41      	ldr	r3, [pc, #260]	@ (800ecc8 <__mdiff+0x128>)
 800ebc4:	f240 2137 	movw	r1, #567	@ 0x237
 800ebc8:	4840      	ldr	r0, [pc, #256]	@ (800eccc <__mdiff+0x12c>)
 800ebca:	f000 fb07 	bl	800f1dc <__assert_func>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	b003      	add	sp, #12
 800ebd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebdc:	bfbc      	itt	lt
 800ebde:	464b      	movlt	r3, r9
 800ebe0:	46a1      	movlt	r9, r4
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	bfb8      	it	lt
 800ebe6:	2501      	movlt	r5, #1
 800ebe8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ebec:	bfb4      	ite	lt
 800ebee:	461c      	movlt	r4, r3
 800ebf0:	2500      	movge	r5, #0
 800ebf2:	f7ff fd3d 	bl	800e670 <_Balloc>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	b918      	cbnz	r0, 800ec02 <__mdiff+0x62>
 800ebfa:	4b33      	ldr	r3, [pc, #204]	@ (800ecc8 <__mdiff+0x128>)
 800ebfc:	f240 2145 	movw	r1, #581	@ 0x245
 800ec00:	e7e2      	b.n	800ebc8 <__mdiff+0x28>
 800ec02:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ec06:	f104 0e14 	add.w	lr, r4, #20
 800ec0a:	6926      	ldr	r6, [r4, #16]
 800ec0c:	f100 0b14 	add.w	fp, r0, #20
 800ec10:	60c5      	str	r5, [r0, #12]
 800ec12:	f109 0514 	add.w	r5, r9, #20
 800ec16:	f109 0310 	add.w	r3, r9, #16
 800ec1a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ec1e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ec22:	46d9      	mov	r9, fp
 800ec24:	f04f 0c00 	mov.w	ip, #0
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	9b01      	ldr	r3, [sp, #4]
 800ec2c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ec30:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ec34:	4576      	cmp	r6, lr
 800ec36:	9301      	str	r3, [sp, #4]
 800ec38:	fa1f f38a 	uxth.w	r3, sl
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	b283      	uxth	r3, r0
 800ec40:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800ec44:	eba1 0303 	sub.w	r3, r1, r3
 800ec48:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ec4c:	4463      	add	r3, ip
 800ec4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ec5c:	f849 3b04 	str.w	r3, [r9], #4
 800ec60:	d8e3      	bhi.n	800ec2a <__mdiff+0x8a>
 800ec62:	1b33      	subs	r3, r6, r4
 800ec64:	3415      	adds	r4, #21
 800ec66:	3b15      	subs	r3, #21
 800ec68:	f023 0303 	bic.w	r3, r3, #3
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	42a6      	cmp	r6, r4
 800ec70:	bf38      	it	cc
 800ec72:	2304      	movcc	r3, #4
 800ec74:	441d      	add	r5, r3
 800ec76:	445b      	add	r3, fp
 800ec78:	462c      	mov	r4, r5
 800ec7a:	461e      	mov	r6, r3
 800ec7c:	4544      	cmp	r4, r8
 800ec7e:	d30e      	bcc.n	800ec9e <__mdiff+0xfe>
 800ec80:	f108 0103 	add.w	r1, r8, #3
 800ec84:	1b49      	subs	r1, r1, r5
 800ec86:	3d03      	subs	r5, #3
 800ec88:	f021 0103 	bic.w	r1, r1, #3
 800ec8c:	45a8      	cmp	r8, r5
 800ec8e:	bf38      	it	cc
 800ec90:	2100      	movcc	r1, #0
 800ec92:	440b      	add	r3, r1
 800ec94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec98:	b199      	cbz	r1, 800ecc2 <__mdiff+0x122>
 800ec9a:	6117      	str	r7, [r2, #16]
 800ec9c:	e79a      	b.n	800ebd4 <__mdiff+0x34>
 800ec9e:	f854 1b04 	ldr.w	r1, [r4], #4
 800eca2:	46e6      	mov	lr, ip
 800eca4:	fa1f fc81 	uxth.w	ip, r1
 800eca8:	0c08      	lsrs	r0, r1, #16
 800ecaa:	4471      	add	r1, lr
 800ecac:	44f4      	add	ip, lr
 800ecae:	b289      	uxth	r1, r1
 800ecb0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ecb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ecb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ecbc:	f846 1b04 	str.w	r1, [r6], #4
 800ecc0:	e7dc      	b.n	800ec7c <__mdiff+0xdc>
 800ecc2:	3f01      	subs	r7, #1
 800ecc4:	e7e6      	b.n	800ec94 <__mdiff+0xf4>
 800ecc6:	bf00      	nop
 800ecc8:	080113e4 	.word	0x080113e4
 800eccc:	080113f5 	.word	0x080113f5

0800ecd0 <__d2b>:
 800ecd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecd4:	460f      	mov	r7, r1
 800ecd6:	2101      	movs	r1, #1
 800ecd8:	4616      	mov	r6, r2
 800ecda:	ec59 8b10 	vmov	r8, r9, d0
 800ecde:	f7ff fcc7 	bl	800e670 <_Balloc>
 800ece2:	4604      	mov	r4, r0
 800ece4:	b930      	cbnz	r0, 800ecf4 <__d2b+0x24>
 800ece6:	4602      	mov	r2, r0
 800ece8:	4b23      	ldr	r3, [pc, #140]	@ (800ed78 <__d2b+0xa8>)
 800ecea:	f240 310f 	movw	r1, #783	@ 0x30f
 800ecee:	4823      	ldr	r0, [pc, #140]	@ (800ed7c <__d2b+0xac>)
 800ecf0:	f000 fa74 	bl	800f1dc <__assert_func>
 800ecf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ecf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ecfc:	b10d      	cbz	r5, 800ed02 <__d2b+0x32>
 800ecfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed02:	9301      	str	r3, [sp, #4]
 800ed04:	f1b8 0300 	subs.w	r3, r8, #0
 800ed08:	d023      	beq.n	800ed52 <__d2b+0x82>
 800ed0a:	4668      	mov	r0, sp
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	f7ff fd78 	bl	800e802 <__lo0bits>
 800ed12:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed16:	b1d0      	cbz	r0, 800ed4e <__d2b+0x7e>
 800ed18:	f1c0 0320 	rsb	r3, r0, #32
 800ed1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed20:	40c2      	lsrs	r2, r0
 800ed22:	430b      	orrs	r3, r1
 800ed24:	9201      	str	r2, [sp, #4]
 800ed26:	6163      	str	r3, [r4, #20]
 800ed28:	9b01      	ldr	r3, [sp, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	61a3      	str	r3, [r4, #24]
 800ed2e:	bf0c      	ite	eq
 800ed30:	2201      	moveq	r2, #1
 800ed32:	2202      	movne	r2, #2
 800ed34:	6122      	str	r2, [r4, #16]
 800ed36:	b1a5      	cbz	r5, 800ed62 <__d2b+0x92>
 800ed38:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed3c:	4405      	add	r5, r0
 800ed3e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed42:	603d      	str	r5, [r7, #0]
 800ed44:	6030      	str	r0, [r6, #0]
 800ed46:	4620      	mov	r0, r4
 800ed48:	b003      	add	sp, #12
 800ed4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed4e:	6161      	str	r1, [r4, #20]
 800ed50:	e7ea      	b.n	800ed28 <__d2b+0x58>
 800ed52:	a801      	add	r0, sp, #4
 800ed54:	f7ff fd55 	bl	800e802 <__lo0bits>
 800ed58:	9b01      	ldr	r3, [sp, #4]
 800ed5a:	3020      	adds	r0, #32
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	6163      	str	r3, [r4, #20]
 800ed60:	e7e8      	b.n	800ed34 <__d2b+0x64>
 800ed62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ed66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed6a:	6038      	str	r0, [r7, #0]
 800ed6c:	6918      	ldr	r0, [r3, #16]
 800ed6e:	f7ff fd29 	bl	800e7c4 <__hi0bits>
 800ed72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed76:	e7e5      	b.n	800ed44 <__d2b+0x74>
 800ed78:	080113e4 	.word	0x080113e4
 800ed7c:	080113f5 	.word	0x080113f5

0800ed80 <__ssputs_r>:
 800ed80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed84:	461f      	mov	r7, r3
 800ed86:	688e      	ldr	r6, [r1, #8]
 800ed88:	4682      	mov	sl, r0
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	42be      	cmp	r6, r7
 800ed8e:	4690      	mov	r8, r2
 800ed90:	680b      	ldr	r3, [r1, #0]
 800ed92:	d82d      	bhi.n	800edf0 <__ssputs_r+0x70>
 800ed94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed9c:	d026      	beq.n	800edec <__ssputs_r+0x6c>
 800ed9e:	6965      	ldr	r5, [r4, #20]
 800eda0:	6909      	ldr	r1, [r1, #16]
 800eda2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eda6:	eba3 0901 	sub.w	r9, r3, r1
 800edaa:	1c7b      	adds	r3, r7, #1
 800edac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edb0:	444b      	add	r3, r9
 800edb2:	106d      	asrs	r5, r5, #1
 800edb4:	429d      	cmp	r5, r3
 800edb6:	bf38      	it	cc
 800edb8:	461d      	movcc	r5, r3
 800edba:	0553      	lsls	r3, r2, #21
 800edbc:	d527      	bpl.n	800ee0e <__ssputs_r+0x8e>
 800edbe:	4629      	mov	r1, r5
 800edc0:	f7ff fbca 	bl	800e558 <_malloc_r>
 800edc4:	4606      	mov	r6, r0
 800edc6:	b360      	cbz	r0, 800ee22 <__ssputs_r+0xa2>
 800edc8:	464a      	mov	r2, r9
 800edca:	6921      	ldr	r1, [r4, #16]
 800edcc:	f7fe fcf1 	bl	800d7b2 <memcpy>
 800edd0:	89a3      	ldrh	r3, [r4, #12]
 800edd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800edd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edda:	81a3      	strh	r3, [r4, #12]
 800eddc:	6126      	str	r6, [r4, #16]
 800edde:	444e      	add	r6, r9
 800ede0:	6165      	str	r5, [r4, #20]
 800ede2:	eba5 0509 	sub.w	r5, r5, r9
 800ede6:	6026      	str	r6, [r4, #0]
 800ede8:	463e      	mov	r6, r7
 800edea:	60a5      	str	r5, [r4, #8]
 800edec:	42be      	cmp	r6, r7
 800edee:	d900      	bls.n	800edf2 <__ssputs_r+0x72>
 800edf0:	463e      	mov	r6, r7
 800edf2:	4632      	mov	r2, r6
 800edf4:	4641      	mov	r1, r8
 800edf6:	6820      	ldr	r0, [r4, #0]
 800edf8:	f000 f9c6 	bl	800f188 <memmove>
 800edfc:	68a3      	ldr	r3, [r4, #8]
 800edfe:	2000      	movs	r0, #0
 800ee00:	1b9b      	subs	r3, r3, r6
 800ee02:	60a3      	str	r3, [r4, #8]
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	4433      	add	r3, r6
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee0e:	462a      	mov	r2, r5
 800ee10:	f000 fa28 	bl	800f264 <_realloc_r>
 800ee14:	4606      	mov	r6, r0
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d1e0      	bne.n	800eddc <__ssputs_r+0x5c>
 800ee1a:	6921      	ldr	r1, [r4, #16]
 800ee1c:	4650      	mov	r0, sl
 800ee1e:	f7ff fb27 	bl	800e470 <_free_r>
 800ee22:	230c      	movs	r3, #12
 800ee24:	f04f 30ff 	mov.w	r0, #4294967295
 800ee28:	f8ca 3000 	str.w	r3, [sl]
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee32:	81a3      	strh	r3, [r4, #12]
 800ee34:	e7e9      	b.n	800ee0a <__ssputs_r+0x8a>
	...

0800ee38 <_svfiprintf_r>:
 800ee38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3c:	4698      	mov	r8, r3
 800ee3e:	898b      	ldrh	r3, [r1, #12]
 800ee40:	b09d      	sub	sp, #116	@ 0x74
 800ee42:	4607      	mov	r7, r0
 800ee44:	061b      	lsls	r3, r3, #24
 800ee46:	460d      	mov	r5, r1
 800ee48:	4614      	mov	r4, r2
 800ee4a:	d510      	bpl.n	800ee6e <_svfiprintf_r+0x36>
 800ee4c:	690b      	ldr	r3, [r1, #16]
 800ee4e:	b973      	cbnz	r3, 800ee6e <_svfiprintf_r+0x36>
 800ee50:	2140      	movs	r1, #64	@ 0x40
 800ee52:	f7ff fb81 	bl	800e558 <_malloc_r>
 800ee56:	6028      	str	r0, [r5, #0]
 800ee58:	6128      	str	r0, [r5, #16]
 800ee5a:	b930      	cbnz	r0, 800ee6a <_svfiprintf_r+0x32>
 800ee5c:	230c      	movs	r3, #12
 800ee5e:	603b      	str	r3, [r7, #0]
 800ee60:	f04f 30ff 	mov.w	r0, #4294967295
 800ee64:	b01d      	add	sp, #116	@ 0x74
 800ee66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6a:	2340      	movs	r3, #64	@ 0x40
 800ee6c:	616b      	str	r3, [r5, #20]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee74:	f04f 0901 	mov.w	r9, #1
 800ee78:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f01c <_svfiprintf_r+0x1e4>
 800ee7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee7e:	2320      	movs	r3, #32
 800ee80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee84:	2330      	movs	r3, #48	@ 0x30
 800ee86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee8a:	4623      	mov	r3, r4
 800ee8c:	469a      	mov	sl, r3
 800ee8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee92:	b10a      	cbz	r2, 800ee98 <_svfiprintf_r+0x60>
 800ee94:	2a25      	cmp	r2, #37	@ 0x25
 800ee96:	d1f9      	bne.n	800ee8c <_svfiprintf_r+0x54>
 800ee98:	ebba 0b04 	subs.w	fp, sl, r4
 800ee9c:	d00b      	beq.n	800eeb6 <_svfiprintf_r+0x7e>
 800ee9e:	465b      	mov	r3, fp
 800eea0:	4622      	mov	r2, r4
 800eea2:	4629      	mov	r1, r5
 800eea4:	4638      	mov	r0, r7
 800eea6:	f7ff ff6b 	bl	800ed80 <__ssputs_r>
 800eeaa:	3001      	adds	r0, #1
 800eeac:	f000 80a7 	beq.w	800effe <_svfiprintf_r+0x1c6>
 800eeb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eeb2:	445a      	add	r2, fp
 800eeb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800eeb6:	f89a 3000 	ldrb.w	r3, [sl]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f000 809f 	beq.w	800effe <_svfiprintf_r+0x1c6>
 800eec0:	2300      	movs	r3, #0
 800eec2:	f04f 32ff 	mov.w	r2, #4294967295
 800eec6:	f10a 0a01 	add.w	sl, sl, #1
 800eeca:	9304      	str	r3, [sp, #16]
 800eecc:	9307      	str	r3, [sp, #28]
 800eece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eed2:	931a      	str	r3, [sp, #104]	@ 0x68
 800eed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eed8:	4654      	mov	r4, sl
 800eeda:	2205      	movs	r2, #5
 800eedc:	484f      	ldr	r0, [pc, #316]	@ (800f01c <_svfiprintf_r+0x1e4>)
 800eede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee2:	f7fe fc58 	bl	800d796 <memchr>
 800eee6:	9a04      	ldr	r2, [sp, #16]
 800eee8:	b9d8      	cbnz	r0, 800ef22 <_svfiprintf_r+0xea>
 800eeea:	06d0      	lsls	r0, r2, #27
 800eeec:	bf44      	itt	mi
 800eeee:	2320      	movmi	r3, #32
 800eef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eef4:	0711      	lsls	r1, r2, #28
 800eef6:	bf44      	itt	mi
 800eef8:	232b      	movmi	r3, #43	@ 0x2b
 800eefa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eefe:	f89a 3000 	ldrb.w	r3, [sl]
 800ef02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef04:	d015      	beq.n	800ef32 <_svfiprintf_r+0xfa>
 800ef06:	9a07      	ldr	r2, [sp, #28]
 800ef08:	4654      	mov	r4, sl
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	f04f 0c0a 	mov.w	ip, #10
 800ef10:	4621      	mov	r1, r4
 800ef12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef16:	3b30      	subs	r3, #48	@ 0x30
 800ef18:	2b09      	cmp	r3, #9
 800ef1a:	d94b      	bls.n	800efb4 <_svfiprintf_r+0x17c>
 800ef1c:	b1b0      	cbz	r0, 800ef4c <_svfiprintf_r+0x114>
 800ef1e:	9207      	str	r2, [sp, #28]
 800ef20:	e014      	b.n	800ef4c <_svfiprintf_r+0x114>
 800ef22:	eba0 0308 	sub.w	r3, r0, r8
 800ef26:	46a2      	mov	sl, r4
 800ef28:	fa09 f303 	lsl.w	r3, r9, r3
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	9304      	str	r3, [sp, #16]
 800ef30:	e7d2      	b.n	800eed8 <_svfiprintf_r+0xa0>
 800ef32:	9b03      	ldr	r3, [sp, #12]
 800ef34:	1d19      	adds	r1, r3, #4
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	9103      	str	r1, [sp, #12]
 800ef3c:	bfbb      	ittet	lt
 800ef3e:	425b      	neglt	r3, r3
 800ef40:	f042 0202 	orrlt.w	r2, r2, #2
 800ef44:	9307      	strge	r3, [sp, #28]
 800ef46:	9307      	strlt	r3, [sp, #28]
 800ef48:	bfb8      	it	lt
 800ef4a:	9204      	strlt	r2, [sp, #16]
 800ef4c:	7823      	ldrb	r3, [r4, #0]
 800ef4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef50:	d10a      	bne.n	800ef68 <_svfiprintf_r+0x130>
 800ef52:	7863      	ldrb	r3, [r4, #1]
 800ef54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef56:	d132      	bne.n	800efbe <_svfiprintf_r+0x186>
 800ef58:	9b03      	ldr	r3, [sp, #12]
 800ef5a:	3402      	adds	r4, #2
 800ef5c:	1d1a      	adds	r2, r3, #4
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef64:	9203      	str	r2, [sp, #12]
 800ef66:	9305      	str	r3, [sp, #20]
 800ef68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f02c <_svfiprintf_r+0x1f4>
 800ef6c:	2203      	movs	r2, #3
 800ef6e:	7821      	ldrb	r1, [r4, #0]
 800ef70:	4650      	mov	r0, sl
 800ef72:	f7fe fc10 	bl	800d796 <memchr>
 800ef76:	b138      	cbz	r0, 800ef88 <_svfiprintf_r+0x150>
 800ef78:	eba0 000a 	sub.w	r0, r0, sl
 800ef7c:	2240      	movs	r2, #64	@ 0x40
 800ef7e:	9b04      	ldr	r3, [sp, #16]
 800ef80:	3401      	adds	r4, #1
 800ef82:	4082      	lsls	r2, r0
 800ef84:	4313      	orrs	r3, r2
 800ef86:	9304      	str	r3, [sp, #16]
 800ef88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef8c:	2206      	movs	r2, #6
 800ef8e:	4824      	ldr	r0, [pc, #144]	@ (800f020 <_svfiprintf_r+0x1e8>)
 800ef90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef94:	f7fe fbff 	bl	800d796 <memchr>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d036      	beq.n	800f00a <_svfiprintf_r+0x1d2>
 800ef9c:	4b21      	ldr	r3, [pc, #132]	@ (800f024 <_svfiprintf_r+0x1ec>)
 800ef9e:	bb1b      	cbnz	r3, 800efe8 <_svfiprintf_r+0x1b0>
 800efa0:	9b03      	ldr	r3, [sp, #12]
 800efa2:	3307      	adds	r3, #7
 800efa4:	f023 0307 	bic.w	r3, r3, #7
 800efa8:	3308      	adds	r3, #8
 800efaa:	9303      	str	r3, [sp, #12]
 800efac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efae:	4433      	add	r3, r6
 800efb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800efb2:	e76a      	b.n	800ee8a <_svfiprintf_r+0x52>
 800efb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800efb8:	460c      	mov	r4, r1
 800efba:	2001      	movs	r0, #1
 800efbc:	e7a8      	b.n	800ef10 <_svfiprintf_r+0xd8>
 800efbe:	2300      	movs	r3, #0
 800efc0:	3401      	adds	r4, #1
 800efc2:	f04f 0c0a 	mov.w	ip, #10
 800efc6:	4619      	mov	r1, r3
 800efc8:	9305      	str	r3, [sp, #20]
 800efca:	4620      	mov	r0, r4
 800efcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efd0:	3a30      	subs	r2, #48	@ 0x30
 800efd2:	2a09      	cmp	r2, #9
 800efd4:	d903      	bls.n	800efde <_svfiprintf_r+0x1a6>
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d0c6      	beq.n	800ef68 <_svfiprintf_r+0x130>
 800efda:	9105      	str	r1, [sp, #20]
 800efdc:	e7c4      	b.n	800ef68 <_svfiprintf_r+0x130>
 800efde:	fb0c 2101 	mla	r1, ip, r1, r2
 800efe2:	4604      	mov	r4, r0
 800efe4:	2301      	movs	r3, #1
 800efe6:	e7f0      	b.n	800efca <_svfiprintf_r+0x192>
 800efe8:	ab03      	add	r3, sp, #12
 800efea:	462a      	mov	r2, r5
 800efec:	a904      	add	r1, sp, #16
 800efee:	4638      	mov	r0, r7
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	4b0d      	ldr	r3, [pc, #52]	@ (800f028 <_svfiprintf_r+0x1f0>)
 800eff4:	f7fd fe6e 	bl	800ccd4 <_printf_float>
 800eff8:	1c42      	adds	r2, r0, #1
 800effa:	4606      	mov	r6, r0
 800effc:	d1d6      	bne.n	800efac <_svfiprintf_r+0x174>
 800effe:	89ab      	ldrh	r3, [r5, #12]
 800f000:	065b      	lsls	r3, r3, #25
 800f002:	f53f af2d 	bmi.w	800ee60 <_svfiprintf_r+0x28>
 800f006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f008:	e72c      	b.n	800ee64 <_svfiprintf_r+0x2c>
 800f00a:	ab03      	add	r3, sp, #12
 800f00c:	462a      	mov	r2, r5
 800f00e:	a904      	add	r1, sp, #16
 800f010:	4638      	mov	r0, r7
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	4b04      	ldr	r3, [pc, #16]	@ (800f028 <_svfiprintf_r+0x1f0>)
 800f016:	f7fe f8f9 	bl	800d20c <_printf_i>
 800f01a:	e7ed      	b.n	800eff8 <_svfiprintf_r+0x1c0>
 800f01c:	08011550 	.word	0x08011550
 800f020:	0801155a 	.word	0x0801155a
 800f024:	0800ccd5 	.word	0x0800ccd5
 800f028:	0800ed81 	.word	0x0800ed81
 800f02c:	08011556 	.word	0x08011556

0800f030 <__sflush_r>:
 800f030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f038:	0716      	lsls	r6, r2, #28
 800f03a:	4605      	mov	r5, r0
 800f03c:	460c      	mov	r4, r1
 800f03e:	d454      	bmi.n	800f0ea <__sflush_r+0xba>
 800f040:	684b      	ldr	r3, [r1, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	dc02      	bgt.n	800f04c <__sflush_r+0x1c>
 800f046:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f048:	2b00      	cmp	r3, #0
 800f04a:	dd48      	ble.n	800f0de <__sflush_r+0xae>
 800f04c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f04e:	2e00      	cmp	r6, #0
 800f050:	d045      	beq.n	800f0de <__sflush_r+0xae>
 800f052:	2300      	movs	r3, #0
 800f054:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f058:	682f      	ldr	r7, [r5, #0]
 800f05a:	6a21      	ldr	r1, [r4, #32]
 800f05c:	602b      	str	r3, [r5, #0]
 800f05e:	d030      	beq.n	800f0c2 <__sflush_r+0x92>
 800f060:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f062:	89a3      	ldrh	r3, [r4, #12]
 800f064:	0759      	lsls	r1, r3, #29
 800f066:	d505      	bpl.n	800f074 <__sflush_r+0x44>
 800f068:	6863      	ldr	r3, [r4, #4]
 800f06a:	1ad2      	subs	r2, r2, r3
 800f06c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f06e:	b10b      	cbz	r3, 800f074 <__sflush_r+0x44>
 800f070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f072:	1ad2      	subs	r2, r2, r3
 800f074:	2300      	movs	r3, #0
 800f076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f078:	6a21      	ldr	r1, [r4, #32]
 800f07a:	4628      	mov	r0, r5
 800f07c:	47b0      	blx	r6
 800f07e:	1c43      	adds	r3, r0, #1
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	d106      	bne.n	800f092 <__sflush_r+0x62>
 800f084:	6829      	ldr	r1, [r5, #0]
 800f086:	291d      	cmp	r1, #29
 800f088:	d82b      	bhi.n	800f0e2 <__sflush_r+0xb2>
 800f08a:	4a2a      	ldr	r2, [pc, #168]	@ (800f134 <__sflush_r+0x104>)
 800f08c:	410a      	asrs	r2, r1
 800f08e:	07d6      	lsls	r6, r2, #31
 800f090:	d427      	bmi.n	800f0e2 <__sflush_r+0xb2>
 800f092:	2200      	movs	r2, #0
 800f094:	04d9      	lsls	r1, r3, #19
 800f096:	6062      	str	r2, [r4, #4]
 800f098:	6922      	ldr	r2, [r4, #16]
 800f09a:	6022      	str	r2, [r4, #0]
 800f09c:	d504      	bpl.n	800f0a8 <__sflush_r+0x78>
 800f09e:	1c42      	adds	r2, r0, #1
 800f0a0:	d101      	bne.n	800f0a6 <__sflush_r+0x76>
 800f0a2:	682b      	ldr	r3, [r5, #0]
 800f0a4:	b903      	cbnz	r3, 800f0a8 <__sflush_r+0x78>
 800f0a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f0a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0aa:	602f      	str	r7, [r5, #0]
 800f0ac:	b1b9      	cbz	r1, 800f0de <__sflush_r+0xae>
 800f0ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0b2:	4299      	cmp	r1, r3
 800f0b4:	d002      	beq.n	800f0bc <__sflush_r+0x8c>
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	f7ff f9da 	bl	800e470 <_free_r>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0c0:	e00d      	b.n	800f0de <__sflush_r+0xae>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	47b0      	blx	r6
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	1c50      	adds	r0, r2, #1
 800f0cc:	d1c9      	bne.n	800f062 <__sflush_r+0x32>
 800f0ce:	682b      	ldr	r3, [r5, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d0c6      	beq.n	800f062 <__sflush_r+0x32>
 800f0d4:	2b1d      	cmp	r3, #29
 800f0d6:	d001      	beq.n	800f0dc <__sflush_r+0xac>
 800f0d8:	2b16      	cmp	r3, #22
 800f0da:	d11d      	bne.n	800f118 <__sflush_r+0xe8>
 800f0dc:	602f      	str	r7, [r5, #0]
 800f0de:	2000      	movs	r0, #0
 800f0e0:	e021      	b.n	800f126 <__sflush_r+0xf6>
 800f0e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0e6:	b21b      	sxth	r3, r3
 800f0e8:	e01a      	b.n	800f120 <__sflush_r+0xf0>
 800f0ea:	690f      	ldr	r7, [r1, #16]
 800f0ec:	2f00      	cmp	r7, #0
 800f0ee:	d0f6      	beq.n	800f0de <__sflush_r+0xae>
 800f0f0:	0793      	lsls	r3, r2, #30
 800f0f2:	680e      	ldr	r6, [r1, #0]
 800f0f4:	600f      	str	r7, [r1, #0]
 800f0f6:	bf0c      	ite	eq
 800f0f8:	694b      	ldreq	r3, [r1, #20]
 800f0fa:	2300      	movne	r3, #0
 800f0fc:	eba6 0807 	sub.w	r8, r6, r7
 800f100:	608b      	str	r3, [r1, #8]
 800f102:	f1b8 0f00 	cmp.w	r8, #0
 800f106:	ddea      	ble.n	800f0de <__sflush_r+0xae>
 800f108:	4643      	mov	r3, r8
 800f10a:	463a      	mov	r2, r7
 800f10c:	6a21      	ldr	r1, [r4, #32]
 800f10e:	4628      	mov	r0, r5
 800f110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f112:	47b0      	blx	r6
 800f114:	2800      	cmp	r0, #0
 800f116:	dc08      	bgt.n	800f12a <__sflush_r+0xfa>
 800f118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f11c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f120:	f04f 30ff 	mov.w	r0, #4294967295
 800f124:	81a3      	strh	r3, [r4, #12]
 800f126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12a:	4407      	add	r7, r0
 800f12c:	eba8 0800 	sub.w	r8, r8, r0
 800f130:	e7e7      	b.n	800f102 <__sflush_r+0xd2>
 800f132:	bf00      	nop
 800f134:	dfbffffe 	.word	0xdfbffffe

0800f138 <_fflush_r>:
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	690b      	ldr	r3, [r1, #16]
 800f13c:	4605      	mov	r5, r0
 800f13e:	460c      	mov	r4, r1
 800f140:	b913      	cbnz	r3, 800f148 <_fflush_r+0x10>
 800f142:	2500      	movs	r5, #0
 800f144:	4628      	mov	r0, r5
 800f146:	bd38      	pop	{r3, r4, r5, pc}
 800f148:	b118      	cbz	r0, 800f152 <_fflush_r+0x1a>
 800f14a:	6a03      	ldr	r3, [r0, #32]
 800f14c:	b90b      	cbnz	r3, 800f152 <_fflush_r+0x1a>
 800f14e:	f7fe fa09 	bl	800d564 <__sinit>
 800f152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d0f3      	beq.n	800f142 <_fflush_r+0xa>
 800f15a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f15c:	07d0      	lsls	r0, r2, #31
 800f15e:	d404      	bmi.n	800f16a <_fflush_r+0x32>
 800f160:	0599      	lsls	r1, r3, #22
 800f162:	d402      	bmi.n	800f16a <_fflush_r+0x32>
 800f164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f166:	f7fe fb14 	bl	800d792 <__retarget_lock_acquire_recursive>
 800f16a:	4628      	mov	r0, r5
 800f16c:	4621      	mov	r1, r4
 800f16e:	f7ff ff5f 	bl	800f030 <__sflush_r>
 800f172:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f174:	4605      	mov	r5, r0
 800f176:	07da      	lsls	r2, r3, #31
 800f178:	d4e4      	bmi.n	800f144 <_fflush_r+0xc>
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	059b      	lsls	r3, r3, #22
 800f17e:	d4e1      	bmi.n	800f144 <_fflush_r+0xc>
 800f180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f182:	f7fe fb07 	bl	800d794 <__retarget_lock_release_recursive>
 800f186:	e7dd      	b.n	800f144 <_fflush_r+0xc>

0800f188 <memmove>:
 800f188:	4288      	cmp	r0, r1
 800f18a:	b510      	push	{r4, lr}
 800f18c:	eb01 0402 	add.w	r4, r1, r2
 800f190:	d902      	bls.n	800f198 <memmove+0x10>
 800f192:	4284      	cmp	r4, r0
 800f194:	4623      	mov	r3, r4
 800f196:	d807      	bhi.n	800f1a8 <memmove+0x20>
 800f198:	1e43      	subs	r3, r0, #1
 800f19a:	42a1      	cmp	r1, r4
 800f19c:	d008      	beq.n	800f1b0 <memmove+0x28>
 800f19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1a6:	e7f8      	b.n	800f19a <memmove+0x12>
 800f1a8:	4402      	add	r2, r0
 800f1aa:	4601      	mov	r1, r0
 800f1ac:	428a      	cmp	r2, r1
 800f1ae:	d100      	bne.n	800f1b2 <memmove+0x2a>
 800f1b0:	bd10      	pop	{r4, pc}
 800f1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1ba:	e7f7      	b.n	800f1ac <memmove+0x24>

0800f1bc <_sbrk_r>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	2300      	movs	r3, #0
 800f1c0:	4d05      	ldr	r5, [pc, #20]	@ (800f1d8 <_sbrk_r+0x1c>)
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	4608      	mov	r0, r1
 800f1c6:	602b      	str	r3, [r5, #0]
 800f1c8:	f7f5 fc32 	bl	8004a30 <_sbrk>
 800f1cc:	1c43      	adds	r3, r0, #1
 800f1ce:	d102      	bne.n	800f1d6 <_sbrk_r+0x1a>
 800f1d0:	682b      	ldr	r3, [r5, #0]
 800f1d2:	b103      	cbz	r3, 800f1d6 <_sbrk_r+0x1a>
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	20028af4 	.word	0x20028af4

0800f1dc <__assert_func>:
 800f1dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1de:	4614      	mov	r4, r2
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	4b09      	ldr	r3, [pc, #36]	@ (800f208 <__assert_func+0x2c>)
 800f1e4:	4605      	mov	r5, r0
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	68d8      	ldr	r0, [r3, #12]
 800f1ea:	b954      	cbnz	r4, 800f202 <__assert_func+0x26>
 800f1ec:	4b07      	ldr	r3, [pc, #28]	@ (800f20c <__assert_func+0x30>)
 800f1ee:	461c      	mov	r4, r3
 800f1f0:	9100      	str	r1, [sp, #0]
 800f1f2:	4907      	ldr	r1, [pc, #28]	@ (800f210 <__assert_func+0x34>)
 800f1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1f8:	462b      	mov	r3, r5
 800f1fa:	f000 f86f 	bl	800f2dc <fiprintf>
 800f1fe:	f000 f87f 	bl	800f300 <abort>
 800f202:	4b04      	ldr	r3, [pc, #16]	@ (800f214 <__assert_func+0x38>)
 800f204:	e7f4      	b.n	800f1f0 <__assert_func+0x14>
 800f206:	bf00      	nop
 800f208:	20000038 	.word	0x20000038
 800f20c:	080115a6 	.word	0x080115a6
 800f210:	08011578 	.word	0x08011578
 800f214:	0801156b 	.word	0x0801156b

0800f218 <_calloc_r>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	fba1 5402 	umull	r5, r4, r1, r2
 800f21e:	b93c      	cbnz	r4, 800f230 <_calloc_r+0x18>
 800f220:	4629      	mov	r1, r5
 800f222:	f7ff f999 	bl	800e558 <_malloc_r>
 800f226:	4606      	mov	r6, r0
 800f228:	b928      	cbnz	r0, 800f236 <_calloc_r+0x1e>
 800f22a:	2600      	movs	r6, #0
 800f22c:	4630      	mov	r0, r6
 800f22e:	bd70      	pop	{r4, r5, r6, pc}
 800f230:	220c      	movs	r2, #12
 800f232:	6002      	str	r2, [r0, #0]
 800f234:	e7f9      	b.n	800f22a <_calloc_r+0x12>
 800f236:	462a      	mov	r2, r5
 800f238:	4621      	mov	r1, r4
 800f23a:	f7fe fa2c 	bl	800d696 <memset>
 800f23e:	e7f5      	b.n	800f22c <_calloc_r+0x14>

0800f240 <__ascii_mbtowc>:
 800f240:	b082      	sub	sp, #8
 800f242:	b901      	cbnz	r1, 800f246 <__ascii_mbtowc+0x6>
 800f244:	a901      	add	r1, sp, #4
 800f246:	b142      	cbz	r2, 800f25a <__ascii_mbtowc+0x1a>
 800f248:	b14b      	cbz	r3, 800f25e <__ascii_mbtowc+0x1e>
 800f24a:	7813      	ldrb	r3, [r2, #0]
 800f24c:	600b      	str	r3, [r1, #0]
 800f24e:	7812      	ldrb	r2, [r2, #0]
 800f250:	1e10      	subs	r0, r2, #0
 800f252:	bf18      	it	ne
 800f254:	2001      	movne	r0, #1
 800f256:	b002      	add	sp, #8
 800f258:	4770      	bx	lr
 800f25a:	4610      	mov	r0, r2
 800f25c:	e7fb      	b.n	800f256 <__ascii_mbtowc+0x16>
 800f25e:	f06f 0001 	mvn.w	r0, #1
 800f262:	e7f8      	b.n	800f256 <__ascii_mbtowc+0x16>

0800f264 <_realloc_r>:
 800f264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f268:	4680      	mov	r8, r0
 800f26a:	4615      	mov	r5, r2
 800f26c:	460c      	mov	r4, r1
 800f26e:	b921      	cbnz	r1, 800f27a <_realloc_r+0x16>
 800f270:	4611      	mov	r1, r2
 800f272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f276:	f7ff b96f 	b.w	800e558 <_malloc_r>
 800f27a:	b92a      	cbnz	r2, 800f288 <_realloc_r+0x24>
 800f27c:	f7ff f8f8 	bl	800e470 <_free_r>
 800f280:	2400      	movs	r4, #0
 800f282:	4620      	mov	r0, r4
 800f284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f288:	f000 f841 	bl	800f30e <_malloc_usable_size_r>
 800f28c:	4285      	cmp	r5, r0
 800f28e:	4606      	mov	r6, r0
 800f290:	d802      	bhi.n	800f298 <_realloc_r+0x34>
 800f292:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f296:	d8f4      	bhi.n	800f282 <_realloc_r+0x1e>
 800f298:	4629      	mov	r1, r5
 800f29a:	4640      	mov	r0, r8
 800f29c:	f7ff f95c 	bl	800e558 <_malloc_r>
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	d0ec      	beq.n	800f280 <_realloc_r+0x1c>
 800f2a6:	42b5      	cmp	r5, r6
 800f2a8:	462a      	mov	r2, r5
 800f2aa:	4621      	mov	r1, r4
 800f2ac:	bf28      	it	cs
 800f2ae:	4632      	movcs	r2, r6
 800f2b0:	f7fe fa7f 	bl	800d7b2 <memcpy>
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	4640      	mov	r0, r8
 800f2b8:	463c      	mov	r4, r7
 800f2ba:	f7ff f8d9 	bl	800e470 <_free_r>
 800f2be:	e7e0      	b.n	800f282 <_realloc_r+0x1e>

0800f2c0 <__ascii_wctomb>:
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	4608      	mov	r0, r1
 800f2c4:	b141      	cbz	r1, 800f2d8 <__ascii_wctomb+0x18>
 800f2c6:	2aff      	cmp	r2, #255	@ 0xff
 800f2c8:	d904      	bls.n	800f2d4 <__ascii_wctomb+0x14>
 800f2ca:	228a      	movs	r2, #138	@ 0x8a
 800f2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d0:	601a      	str	r2, [r3, #0]
 800f2d2:	4770      	bx	lr
 800f2d4:	2001      	movs	r0, #1
 800f2d6:	700a      	strb	r2, [r1, #0]
 800f2d8:	4770      	bx	lr
	...

0800f2dc <fiprintf>:
 800f2dc:	b40e      	push	{r1, r2, r3}
 800f2de:	b503      	push	{r0, r1, lr}
 800f2e0:	ab03      	add	r3, sp, #12
 800f2e2:	4601      	mov	r1, r0
 800f2e4:	4805      	ldr	r0, [pc, #20]	@ (800f2fc <fiprintf+0x20>)
 800f2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ea:	6800      	ldr	r0, [r0, #0]
 800f2ec:	9301      	str	r3, [sp, #4]
 800f2ee:	f000 f83f 	bl	800f370 <_vfiprintf_r>
 800f2f2:	b002      	add	sp, #8
 800f2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2f8:	b003      	add	sp, #12
 800f2fa:	4770      	bx	lr
 800f2fc:	20000038 	.word	0x20000038

0800f300 <abort>:
 800f300:	2006      	movs	r0, #6
 800f302:	b508      	push	{r3, lr}
 800f304:	f000 fa08 	bl	800f718 <raise>
 800f308:	2001      	movs	r0, #1
 800f30a:	f7f5 fb19 	bl	8004940 <_exit>

0800f30e <_malloc_usable_size_r>:
 800f30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f312:	1f18      	subs	r0, r3, #4
 800f314:	2b00      	cmp	r3, #0
 800f316:	bfbc      	itt	lt
 800f318:	580b      	ldrlt	r3, [r1, r0]
 800f31a:	18c0      	addlt	r0, r0, r3
 800f31c:	4770      	bx	lr

0800f31e <__sfputc_r>:
 800f31e:	6893      	ldr	r3, [r2, #8]
 800f320:	3b01      	subs	r3, #1
 800f322:	2b00      	cmp	r3, #0
 800f324:	6093      	str	r3, [r2, #8]
 800f326:	b410      	push	{r4}
 800f328:	da08      	bge.n	800f33c <__sfputc_r+0x1e>
 800f32a:	6994      	ldr	r4, [r2, #24]
 800f32c:	42a3      	cmp	r3, r4
 800f32e:	db01      	blt.n	800f334 <__sfputc_r+0x16>
 800f330:	290a      	cmp	r1, #10
 800f332:	d103      	bne.n	800f33c <__sfputc_r+0x1e>
 800f334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f338:	f000 b932 	b.w	800f5a0 <__swbuf_r>
 800f33c:	6813      	ldr	r3, [r2, #0]
 800f33e:	1c58      	adds	r0, r3, #1
 800f340:	6010      	str	r0, [r2, #0]
 800f342:	4608      	mov	r0, r1
 800f344:	7019      	strb	r1, [r3, #0]
 800f346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <__sfputs_r>:
 800f34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f34e:	4606      	mov	r6, r0
 800f350:	460f      	mov	r7, r1
 800f352:	4614      	mov	r4, r2
 800f354:	18d5      	adds	r5, r2, r3
 800f356:	42ac      	cmp	r4, r5
 800f358:	d101      	bne.n	800f35e <__sfputs_r+0x12>
 800f35a:	2000      	movs	r0, #0
 800f35c:	e007      	b.n	800f36e <__sfputs_r+0x22>
 800f35e:	463a      	mov	r2, r7
 800f360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f364:	4630      	mov	r0, r6
 800f366:	f7ff ffda 	bl	800f31e <__sfputc_r>
 800f36a:	1c43      	adds	r3, r0, #1
 800f36c:	d1f3      	bne.n	800f356 <__sfputs_r+0xa>
 800f36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f370 <_vfiprintf_r>:
 800f370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f374:	460d      	mov	r5, r1
 800f376:	b09d      	sub	sp, #116	@ 0x74
 800f378:	4614      	mov	r4, r2
 800f37a:	4698      	mov	r8, r3
 800f37c:	4606      	mov	r6, r0
 800f37e:	b118      	cbz	r0, 800f388 <_vfiprintf_r+0x18>
 800f380:	6a03      	ldr	r3, [r0, #32]
 800f382:	b90b      	cbnz	r3, 800f388 <_vfiprintf_r+0x18>
 800f384:	f7fe f8ee 	bl	800d564 <__sinit>
 800f388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f38a:	07d9      	lsls	r1, r3, #31
 800f38c:	d405      	bmi.n	800f39a <_vfiprintf_r+0x2a>
 800f38e:	89ab      	ldrh	r3, [r5, #12]
 800f390:	059a      	lsls	r2, r3, #22
 800f392:	d402      	bmi.n	800f39a <_vfiprintf_r+0x2a>
 800f394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f396:	f7fe f9fc 	bl	800d792 <__retarget_lock_acquire_recursive>
 800f39a:	89ab      	ldrh	r3, [r5, #12]
 800f39c:	071b      	lsls	r3, r3, #28
 800f39e:	d501      	bpl.n	800f3a4 <_vfiprintf_r+0x34>
 800f3a0:	692b      	ldr	r3, [r5, #16]
 800f3a2:	b99b      	cbnz	r3, 800f3cc <_vfiprintf_r+0x5c>
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f000 f938 	bl	800f61c <__swsetup_r>
 800f3ac:	b170      	cbz	r0, 800f3cc <_vfiprintf_r+0x5c>
 800f3ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3b0:	07dc      	lsls	r4, r3, #31
 800f3b2:	d504      	bpl.n	800f3be <_vfiprintf_r+0x4e>
 800f3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b8:	b01d      	add	sp, #116	@ 0x74
 800f3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3be:	89ab      	ldrh	r3, [r5, #12]
 800f3c0:	0598      	lsls	r0, r3, #22
 800f3c2:	d4f7      	bmi.n	800f3b4 <_vfiprintf_r+0x44>
 800f3c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3c6:	f7fe f9e5 	bl	800d794 <__retarget_lock_release_recursive>
 800f3ca:	e7f3      	b.n	800f3b4 <_vfiprintf_r+0x44>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3d2:	f04f 0901 	mov.w	r9, #1
 800f3d6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f58c <_vfiprintf_r+0x21c>
 800f3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3dc:	2320      	movs	r3, #32
 800f3de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3e2:	2330      	movs	r3, #48	@ 0x30
 800f3e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3e8:	4623      	mov	r3, r4
 800f3ea:	469a      	mov	sl, r3
 800f3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3f0:	b10a      	cbz	r2, 800f3f6 <_vfiprintf_r+0x86>
 800f3f2:	2a25      	cmp	r2, #37	@ 0x25
 800f3f4:	d1f9      	bne.n	800f3ea <_vfiprintf_r+0x7a>
 800f3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800f3fa:	d00b      	beq.n	800f414 <_vfiprintf_r+0xa4>
 800f3fc:	465b      	mov	r3, fp
 800f3fe:	4622      	mov	r2, r4
 800f400:	4629      	mov	r1, r5
 800f402:	4630      	mov	r0, r6
 800f404:	f7ff ffa2 	bl	800f34c <__sfputs_r>
 800f408:	3001      	adds	r0, #1
 800f40a:	f000 80a7 	beq.w	800f55c <_vfiprintf_r+0x1ec>
 800f40e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f410:	445a      	add	r2, fp
 800f412:	9209      	str	r2, [sp, #36]	@ 0x24
 800f414:	f89a 3000 	ldrb.w	r3, [sl]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f000 809f 	beq.w	800f55c <_vfiprintf_r+0x1ec>
 800f41e:	2300      	movs	r3, #0
 800f420:	f04f 32ff 	mov.w	r2, #4294967295
 800f424:	f10a 0a01 	add.w	sl, sl, #1
 800f428:	9304      	str	r3, [sp, #16]
 800f42a:	9307      	str	r3, [sp, #28]
 800f42c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f430:	931a      	str	r3, [sp, #104]	@ 0x68
 800f432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f436:	4654      	mov	r4, sl
 800f438:	2205      	movs	r2, #5
 800f43a:	4854      	ldr	r0, [pc, #336]	@ (800f58c <_vfiprintf_r+0x21c>)
 800f43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f440:	f7fe f9a9 	bl	800d796 <memchr>
 800f444:	9a04      	ldr	r2, [sp, #16]
 800f446:	b9d8      	cbnz	r0, 800f480 <_vfiprintf_r+0x110>
 800f448:	06d1      	lsls	r1, r2, #27
 800f44a:	bf44      	itt	mi
 800f44c:	2320      	movmi	r3, #32
 800f44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f452:	0713      	lsls	r3, r2, #28
 800f454:	bf44      	itt	mi
 800f456:	232b      	movmi	r3, #43	@ 0x2b
 800f458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f45c:	f89a 3000 	ldrb.w	r3, [sl]
 800f460:	2b2a      	cmp	r3, #42	@ 0x2a
 800f462:	d015      	beq.n	800f490 <_vfiprintf_r+0x120>
 800f464:	9a07      	ldr	r2, [sp, #28]
 800f466:	4654      	mov	r4, sl
 800f468:	2000      	movs	r0, #0
 800f46a:	f04f 0c0a 	mov.w	ip, #10
 800f46e:	4621      	mov	r1, r4
 800f470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f474:	3b30      	subs	r3, #48	@ 0x30
 800f476:	2b09      	cmp	r3, #9
 800f478:	d94b      	bls.n	800f512 <_vfiprintf_r+0x1a2>
 800f47a:	b1b0      	cbz	r0, 800f4aa <_vfiprintf_r+0x13a>
 800f47c:	9207      	str	r2, [sp, #28]
 800f47e:	e014      	b.n	800f4aa <_vfiprintf_r+0x13a>
 800f480:	eba0 0308 	sub.w	r3, r0, r8
 800f484:	46a2      	mov	sl, r4
 800f486:	fa09 f303 	lsl.w	r3, r9, r3
 800f48a:	4313      	orrs	r3, r2
 800f48c:	9304      	str	r3, [sp, #16]
 800f48e:	e7d2      	b.n	800f436 <_vfiprintf_r+0xc6>
 800f490:	9b03      	ldr	r3, [sp, #12]
 800f492:	1d19      	adds	r1, r3, #4
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	9103      	str	r1, [sp, #12]
 800f49a:	bfbb      	ittet	lt
 800f49c:	425b      	neglt	r3, r3
 800f49e:	f042 0202 	orrlt.w	r2, r2, #2
 800f4a2:	9307      	strge	r3, [sp, #28]
 800f4a4:	9307      	strlt	r3, [sp, #28]
 800f4a6:	bfb8      	it	lt
 800f4a8:	9204      	strlt	r2, [sp, #16]
 800f4aa:	7823      	ldrb	r3, [r4, #0]
 800f4ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4ae:	d10a      	bne.n	800f4c6 <_vfiprintf_r+0x156>
 800f4b0:	7863      	ldrb	r3, [r4, #1]
 800f4b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4b4:	d132      	bne.n	800f51c <_vfiprintf_r+0x1ac>
 800f4b6:	9b03      	ldr	r3, [sp, #12]
 800f4b8:	3402      	adds	r4, #2
 800f4ba:	1d1a      	adds	r2, r3, #4
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4c2:	9203      	str	r2, [sp, #12]
 800f4c4:	9305      	str	r3, [sp, #20]
 800f4c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f59c <_vfiprintf_r+0x22c>
 800f4ca:	2203      	movs	r2, #3
 800f4cc:	7821      	ldrb	r1, [r4, #0]
 800f4ce:	4650      	mov	r0, sl
 800f4d0:	f7fe f961 	bl	800d796 <memchr>
 800f4d4:	b138      	cbz	r0, 800f4e6 <_vfiprintf_r+0x176>
 800f4d6:	eba0 000a 	sub.w	r0, r0, sl
 800f4da:	2240      	movs	r2, #64	@ 0x40
 800f4dc:	9b04      	ldr	r3, [sp, #16]
 800f4de:	3401      	adds	r4, #1
 800f4e0:	4082      	lsls	r2, r0
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	9304      	str	r3, [sp, #16]
 800f4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ea:	2206      	movs	r2, #6
 800f4ec:	4828      	ldr	r0, [pc, #160]	@ (800f590 <_vfiprintf_r+0x220>)
 800f4ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4f2:	f7fe f950 	bl	800d796 <memchr>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d03f      	beq.n	800f57a <_vfiprintf_r+0x20a>
 800f4fa:	4b26      	ldr	r3, [pc, #152]	@ (800f594 <_vfiprintf_r+0x224>)
 800f4fc:	bb1b      	cbnz	r3, 800f546 <_vfiprintf_r+0x1d6>
 800f4fe:	9b03      	ldr	r3, [sp, #12]
 800f500:	3307      	adds	r3, #7
 800f502:	f023 0307 	bic.w	r3, r3, #7
 800f506:	3308      	adds	r3, #8
 800f508:	9303      	str	r3, [sp, #12]
 800f50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f50c:	443b      	add	r3, r7
 800f50e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f510:	e76a      	b.n	800f3e8 <_vfiprintf_r+0x78>
 800f512:	fb0c 3202 	mla	r2, ip, r2, r3
 800f516:	460c      	mov	r4, r1
 800f518:	2001      	movs	r0, #1
 800f51a:	e7a8      	b.n	800f46e <_vfiprintf_r+0xfe>
 800f51c:	2300      	movs	r3, #0
 800f51e:	3401      	adds	r4, #1
 800f520:	f04f 0c0a 	mov.w	ip, #10
 800f524:	4619      	mov	r1, r3
 800f526:	9305      	str	r3, [sp, #20]
 800f528:	4620      	mov	r0, r4
 800f52a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f52e:	3a30      	subs	r2, #48	@ 0x30
 800f530:	2a09      	cmp	r2, #9
 800f532:	d903      	bls.n	800f53c <_vfiprintf_r+0x1cc>
 800f534:	2b00      	cmp	r3, #0
 800f536:	d0c6      	beq.n	800f4c6 <_vfiprintf_r+0x156>
 800f538:	9105      	str	r1, [sp, #20]
 800f53a:	e7c4      	b.n	800f4c6 <_vfiprintf_r+0x156>
 800f53c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f540:	4604      	mov	r4, r0
 800f542:	2301      	movs	r3, #1
 800f544:	e7f0      	b.n	800f528 <_vfiprintf_r+0x1b8>
 800f546:	ab03      	add	r3, sp, #12
 800f548:	462a      	mov	r2, r5
 800f54a:	a904      	add	r1, sp, #16
 800f54c:	4630      	mov	r0, r6
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	4b11      	ldr	r3, [pc, #68]	@ (800f598 <_vfiprintf_r+0x228>)
 800f552:	f7fd fbbf 	bl	800ccd4 <_printf_float>
 800f556:	4607      	mov	r7, r0
 800f558:	1c78      	adds	r0, r7, #1
 800f55a:	d1d6      	bne.n	800f50a <_vfiprintf_r+0x19a>
 800f55c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f55e:	07d9      	lsls	r1, r3, #31
 800f560:	d405      	bmi.n	800f56e <_vfiprintf_r+0x1fe>
 800f562:	89ab      	ldrh	r3, [r5, #12]
 800f564:	059a      	lsls	r2, r3, #22
 800f566:	d402      	bmi.n	800f56e <_vfiprintf_r+0x1fe>
 800f568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f56a:	f7fe f913 	bl	800d794 <__retarget_lock_release_recursive>
 800f56e:	89ab      	ldrh	r3, [r5, #12]
 800f570:	065b      	lsls	r3, r3, #25
 800f572:	f53f af1f 	bmi.w	800f3b4 <_vfiprintf_r+0x44>
 800f576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f578:	e71e      	b.n	800f3b8 <_vfiprintf_r+0x48>
 800f57a:	ab03      	add	r3, sp, #12
 800f57c:	462a      	mov	r2, r5
 800f57e:	a904      	add	r1, sp, #16
 800f580:	4630      	mov	r0, r6
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	4b04      	ldr	r3, [pc, #16]	@ (800f598 <_vfiprintf_r+0x228>)
 800f586:	f7fd fe41 	bl	800d20c <_printf_i>
 800f58a:	e7e4      	b.n	800f556 <_vfiprintf_r+0x1e6>
 800f58c:	08011550 	.word	0x08011550
 800f590:	0801155a 	.word	0x0801155a
 800f594:	0800ccd5 	.word	0x0800ccd5
 800f598:	0800f34d 	.word	0x0800f34d
 800f59c:	08011556 	.word	0x08011556

0800f5a0 <__swbuf_r>:
 800f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a2:	460e      	mov	r6, r1
 800f5a4:	4614      	mov	r4, r2
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	b118      	cbz	r0, 800f5b2 <__swbuf_r+0x12>
 800f5aa:	6a03      	ldr	r3, [r0, #32]
 800f5ac:	b90b      	cbnz	r3, 800f5b2 <__swbuf_r+0x12>
 800f5ae:	f7fd ffd9 	bl	800d564 <__sinit>
 800f5b2:	69a3      	ldr	r3, [r4, #24]
 800f5b4:	60a3      	str	r3, [r4, #8]
 800f5b6:	89a3      	ldrh	r3, [r4, #12]
 800f5b8:	071a      	lsls	r2, r3, #28
 800f5ba:	d501      	bpl.n	800f5c0 <__swbuf_r+0x20>
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	b943      	cbnz	r3, 800f5d2 <__swbuf_r+0x32>
 800f5c0:	4621      	mov	r1, r4
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f000 f82a 	bl	800f61c <__swsetup_r>
 800f5c8:	b118      	cbz	r0, 800f5d2 <__swbuf_r+0x32>
 800f5ca:	f04f 37ff 	mov.w	r7, #4294967295
 800f5ce:	4638      	mov	r0, r7
 800f5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	b2f6      	uxtb	r6, r6
 800f5d6:	6922      	ldr	r2, [r4, #16]
 800f5d8:	4637      	mov	r7, r6
 800f5da:	1a98      	subs	r0, r3, r2
 800f5dc:	6963      	ldr	r3, [r4, #20]
 800f5de:	4283      	cmp	r3, r0
 800f5e0:	dc05      	bgt.n	800f5ee <__swbuf_r+0x4e>
 800f5e2:	4621      	mov	r1, r4
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	f7ff fda7 	bl	800f138 <_fflush_r>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d1ed      	bne.n	800f5ca <__swbuf_r+0x2a>
 800f5ee:	68a3      	ldr	r3, [r4, #8]
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	60a3      	str	r3, [r4, #8]
 800f5f4:	6823      	ldr	r3, [r4, #0]
 800f5f6:	1c5a      	adds	r2, r3, #1
 800f5f8:	6022      	str	r2, [r4, #0]
 800f5fa:	701e      	strb	r6, [r3, #0]
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	6962      	ldr	r2, [r4, #20]
 800f600:	429a      	cmp	r2, r3
 800f602:	d004      	beq.n	800f60e <__swbuf_r+0x6e>
 800f604:	89a3      	ldrh	r3, [r4, #12]
 800f606:	07db      	lsls	r3, r3, #31
 800f608:	d5e1      	bpl.n	800f5ce <__swbuf_r+0x2e>
 800f60a:	2e0a      	cmp	r6, #10
 800f60c:	d1df      	bne.n	800f5ce <__swbuf_r+0x2e>
 800f60e:	4621      	mov	r1, r4
 800f610:	4628      	mov	r0, r5
 800f612:	f7ff fd91 	bl	800f138 <_fflush_r>
 800f616:	2800      	cmp	r0, #0
 800f618:	d0d9      	beq.n	800f5ce <__swbuf_r+0x2e>
 800f61a:	e7d6      	b.n	800f5ca <__swbuf_r+0x2a>

0800f61c <__swsetup_r>:
 800f61c:	b538      	push	{r3, r4, r5, lr}
 800f61e:	4b29      	ldr	r3, [pc, #164]	@ (800f6c4 <__swsetup_r+0xa8>)
 800f620:	4605      	mov	r5, r0
 800f622:	460c      	mov	r4, r1
 800f624:	6818      	ldr	r0, [r3, #0]
 800f626:	b118      	cbz	r0, 800f630 <__swsetup_r+0x14>
 800f628:	6a03      	ldr	r3, [r0, #32]
 800f62a:	b90b      	cbnz	r3, 800f630 <__swsetup_r+0x14>
 800f62c:	f7fd ff9a 	bl	800d564 <__sinit>
 800f630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f634:	0719      	lsls	r1, r3, #28
 800f636:	d422      	bmi.n	800f67e <__swsetup_r+0x62>
 800f638:	06da      	lsls	r2, r3, #27
 800f63a:	d407      	bmi.n	800f64c <__swsetup_r+0x30>
 800f63c:	2209      	movs	r2, #9
 800f63e:	602a      	str	r2, [r5, #0]
 800f640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f644:	f04f 30ff 	mov.w	r0, #4294967295
 800f648:	81a3      	strh	r3, [r4, #12]
 800f64a:	e033      	b.n	800f6b4 <__swsetup_r+0x98>
 800f64c:	0758      	lsls	r0, r3, #29
 800f64e:	d512      	bpl.n	800f676 <__swsetup_r+0x5a>
 800f650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f652:	b141      	cbz	r1, 800f666 <__swsetup_r+0x4a>
 800f654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f658:	4299      	cmp	r1, r3
 800f65a:	d002      	beq.n	800f662 <__swsetup_r+0x46>
 800f65c:	4628      	mov	r0, r5
 800f65e:	f7fe ff07 	bl	800e470 <_free_r>
 800f662:	2300      	movs	r3, #0
 800f664:	6363      	str	r3, [r4, #52]	@ 0x34
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f66c:	81a3      	strh	r3, [r4, #12]
 800f66e:	2300      	movs	r3, #0
 800f670:	6063      	str	r3, [r4, #4]
 800f672:	6923      	ldr	r3, [r4, #16]
 800f674:	6023      	str	r3, [r4, #0]
 800f676:	89a3      	ldrh	r3, [r4, #12]
 800f678:	f043 0308 	orr.w	r3, r3, #8
 800f67c:	81a3      	strh	r3, [r4, #12]
 800f67e:	6923      	ldr	r3, [r4, #16]
 800f680:	b94b      	cbnz	r3, 800f696 <__swsetup_r+0x7a>
 800f682:	89a3      	ldrh	r3, [r4, #12]
 800f684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f68c:	d003      	beq.n	800f696 <__swsetup_r+0x7a>
 800f68e:	4621      	mov	r1, r4
 800f690:	4628      	mov	r0, r5
 800f692:	f000 f882 	bl	800f79a <__smakebuf_r>
 800f696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f69a:	f013 0201 	ands.w	r2, r3, #1
 800f69e:	d00a      	beq.n	800f6b6 <__swsetup_r+0x9a>
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	60a2      	str	r2, [r4, #8]
 800f6a4:	6962      	ldr	r2, [r4, #20]
 800f6a6:	4252      	negs	r2, r2
 800f6a8:	61a2      	str	r2, [r4, #24]
 800f6aa:	6922      	ldr	r2, [r4, #16]
 800f6ac:	b942      	cbnz	r2, 800f6c0 <__swsetup_r+0xa4>
 800f6ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f6b2:	d1c5      	bne.n	800f640 <__swsetup_r+0x24>
 800f6b4:	bd38      	pop	{r3, r4, r5, pc}
 800f6b6:	0799      	lsls	r1, r3, #30
 800f6b8:	bf58      	it	pl
 800f6ba:	6962      	ldrpl	r2, [r4, #20]
 800f6bc:	60a2      	str	r2, [r4, #8]
 800f6be:	e7f4      	b.n	800f6aa <__swsetup_r+0x8e>
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	e7f7      	b.n	800f6b4 <__swsetup_r+0x98>
 800f6c4:	20000038 	.word	0x20000038

0800f6c8 <_raise_r>:
 800f6c8:	291f      	cmp	r1, #31
 800f6ca:	b538      	push	{r3, r4, r5, lr}
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	d904      	bls.n	800f6dc <_raise_r+0x14>
 800f6d2:	2316      	movs	r3, #22
 800f6d4:	6003      	str	r3, [r0, #0]
 800f6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6da:	bd38      	pop	{r3, r4, r5, pc}
 800f6dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f6de:	b112      	cbz	r2, 800f6e6 <_raise_r+0x1e>
 800f6e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6e4:	b94b      	cbnz	r3, 800f6fa <_raise_r+0x32>
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f000 f830 	bl	800f74c <_getpid_r>
 800f6ec:	4622      	mov	r2, r4
 800f6ee:	4601      	mov	r1, r0
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6f6:	f000 b817 	b.w	800f728 <_kill_r>
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d00a      	beq.n	800f714 <_raise_r+0x4c>
 800f6fe:	1c59      	adds	r1, r3, #1
 800f700:	d103      	bne.n	800f70a <_raise_r+0x42>
 800f702:	2316      	movs	r3, #22
 800f704:	6003      	str	r3, [r0, #0]
 800f706:	2001      	movs	r0, #1
 800f708:	e7e7      	b.n	800f6da <_raise_r+0x12>
 800f70a:	2100      	movs	r1, #0
 800f70c:	4620      	mov	r0, r4
 800f70e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f712:	4798      	blx	r3
 800f714:	2000      	movs	r0, #0
 800f716:	e7e0      	b.n	800f6da <_raise_r+0x12>

0800f718 <raise>:
 800f718:	4b02      	ldr	r3, [pc, #8]	@ (800f724 <raise+0xc>)
 800f71a:	4601      	mov	r1, r0
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	f7ff bfd3 	b.w	800f6c8 <_raise_r>
 800f722:	bf00      	nop
 800f724:	20000038 	.word	0x20000038

0800f728 <_kill_r>:
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	2300      	movs	r3, #0
 800f72c:	4d06      	ldr	r5, [pc, #24]	@ (800f748 <_kill_r+0x20>)
 800f72e:	4604      	mov	r4, r0
 800f730:	4608      	mov	r0, r1
 800f732:	4611      	mov	r1, r2
 800f734:	602b      	str	r3, [r5, #0]
 800f736:	f7f5 f8f3 	bl	8004920 <_kill>
 800f73a:	1c43      	adds	r3, r0, #1
 800f73c:	d102      	bne.n	800f744 <_kill_r+0x1c>
 800f73e:	682b      	ldr	r3, [r5, #0]
 800f740:	b103      	cbz	r3, 800f744 <_kill_r+0x1c>
 800f742:	6023      	str	r3, [r4, #0]
 800f744:	bd38      	pop	{r3, r4, r5, pc}
 800f746:	bf00      	nop
 800f748:	20028af4 	.word	0x20028af4

0800f74c <_getpid_r>:
 800f74c:	f7f5 b8e0 	b.w	8004910 <_getpid>

0800f750 <__swhatbuf_r>:
 800f750:	b570      	push	{r4, r5, r6, lr}
 800f752:	460c      	mov	r4, r1
 800f754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f758:	b096      	sub	sp, #88	@ 0x58
 800f75a:	4615      	mov	r5, r2
 800f75c:	2900      	cmp	r1, #0
 800f75e:	461e      	mov	r6, r3
 800f760:	da0c      	bge.n	800f77c <__swhatbuf_r+0x2c>
 800f762:	89a3      	ldrh	r3, [r4, #12]
 800f764:	2100      	movs	r1, #0
 800f766:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f76a:	bf14      	ite	ne
 800f76c:	2340      	movne	r3, #64	@ 0x40
 800f76e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f772:	2000      	movs	r0, #0
 800f774:	6031      	str	r1, [r6, #0]
 800f776:	602b      	str	r3, [r5, #0]
 800f778:	b016      	add	sp, #88	@ 0x58
 800f77a:	bd70      	pop	{r4, r5, r6, pc}
 800f77c:	466a      	mov	r2, sp
 800f77e:	f000 f849 	bl	800f814 <_fstat_r>
 800f782:	2800      	cmp	r0, #0
 800f784:	dbed      	blt.n	800f762 <__swhatbuf_r+0x12>
 800f786:	9901      	ldr	r1, [sp, #4]
 800f788:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f78c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f790:	4259      	negs	r1, r3
 800f792:	4159      	adcs	r1, r3
 800f794:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f798:	e7eb      	b.n	800f772 <__swhatbuf_r+0x22>

0800f79a <__smakebuf_r>:
 800f79a:	898b      	ldrh	r3, [r1, #12]
 800f79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f79e:	079d      	lsls	r5, r3, #30
 800f7a0:	4606      	mov	r6, r0
 800f7a2:	460c      	mov	r4, r1
 800f7a4:	d507      	bpl.n	800f7b6 <__smakebuf_r+0x1c>
 800f7a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f7aa:	6023      	str	r3, [r4, #0]
 800f7ac:	6123      	str	r3, [r4, #16]
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	6163      	str	r3, [r4, #20]
 800f7b2:	b003      	add	sp, #12
 800f7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7b6:	ab01      	add	r3, sp, #4
 800f7b8:	466a      	mov	r2, sp
 800f7ba:	f7ff ffc9 	bl	800f750 <__swhatbuf_r>
 800f7be:	9f00      	ldr	r7, [sp, #0]
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	f7fe fec7 	bl	800e558 <_malloc_r>
 800f7ca:	b948      	cbnz	r0, 800f7e0 <__smakebuf_r+0x46>
 800f7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7d0:	059a      	lsls	r2, r3, #22
 800f7d2:	d4ee      	bmi.n	800f7b2 <__smakebuf_r+0x18>
 800f7d4:	f023 0303 	bic.w	r3, r3, #3
 800f7d8:	f043 0302 	orr.w	r3, r3, #2
 800f7dc:	81a3      	strh	r3, [r4, #12]
 800f7de:	e7e2      	b.n	800f7a6 <__smakebuf_r+0xc>
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	6020      	str	r0, [r4, #0]
 800f7e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7e8:	81a3      	strh	r3, [r4, #12]
 800f7ea:	9b01      	ldr	r3, [sp, #4]
 800f7ec:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7f0:	b15b      	cbz	r3, 800f80a <__smakebuf_r+0x70>
 800f7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	f000 f81e 	bl	800f838 <_isatty_r>
 800f7fc:	b128      	cbz	r0, 800f80a <__smakebuf_r+0x70>
 800f7fe:	89a3      	ldrh	r3, [r4, #12]
 800f800:	f023 0303 	bic.w	r3, r3, #3
 800f804:	f043 0301 	orr.w	r3, r3, #1
 800f808:	81a3      	strh	r3, [r4, #12]
 800f80a:	89a3      	ldrh	r3, [r4, #12]
 800f80c:	431d      	orrs	r5, r3
 800f80e:	81a5      	strh	r5, [r4, #12]
 800f810:	e7cf      	b.n	800f7b2 <__smakebuf_r+0x18>
	...

0800f814 <_fstat_r>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	2300      	movs	r3, #0
 800f818:	4d06      	ldr	r5, [pc, #24]	@ (800f834 <_fstat_r+0x20>)
 800f81a:	4604      	mov	r4, r0
 800f81c:	4608      	mov	r0, r1
 800f81e:	4611      	mov	r1, r2
 800f820:	602b      	str	r3, [r5, #0]
 800f822:	f7f5 f8dd 	bl	80049e0 <_fstat>
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	d102      	bne.n	800f830 <_fstat_r+0x1c>
 800f82a:	682b      	ldr	r3, [r5, #0]
 800f82c:	b103      	cbz	r3, 800f830 <_fstat_r+0x1c>
 800f82e:	6023      	str	r3, [r4, #0]
 800f830:	bd38      	pop	{r3, r4, r5, pc}
 800f832:	bf00      	nop
 800f834:	20028af4 	.word	0x20028af4

0800f838 <_isatty_r>:
 800f838:	b538      	push	{r3, r4, r5, lr}
 800f83a:	2300      	movs	r3, #0
 800f83c:	4d05      	ldr	r5, [pc, #20]	@ (800f854 <_isatty_r+0x1c>)
 800f83e:	4604      	mov	r4, r0
 800f840:	4608      	mov	r0, r1
 800f842:	602b      	str	r3, [r5, #0]
 800f844:	f7f5 f8dc 	bl	8004a00 <_isatty>
 800f848:	1c43      	adds	r3, r0, #1
 800f84a:	d102      	bne.n	800f852 <_isatty_r+0x1a>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	b103      	cbz	r3, 800f852 <_isatty_r+0x1a>
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	20028af4 	.word	0x20028af4

0800f858 <_init>:
 800f858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f85a:	bf00      	nop
 800f85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f85e:	bc08      	pop	{r3}
 800f860:	469e      	mov	lr, r3
 800f862:	4770      	bx	lr

0800f864 <_fini>:
 800f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f866:	bf00      	nop
 800f868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f86a:	bc08      	pop	{r3}
 800f86c:	469e      	mov	lr, r3
 800f86e:	4770      	bx	lr
